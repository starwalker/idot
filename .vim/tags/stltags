!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.7	//
DEFALLOC_H	/Users/lij/.vim/stl/defalloc.h	/^#define DEFALLOC_H$/;"	d
LONGLONG_MAX	/Users/lij/.vim/stl/limits	/^#define LONGLONG_MAX /;"	d	file:
LONGLONG_MIN	/Users/lij/.vim/stl/limits	/^#define LONGLONG_MIN /;"	d	file:
NOMINMAX	/Users/lij/.vim/stl/stl_config.h	/^#     define NOMINMAX$/;"	d
STL_SEQUENCE_CONCEPTS_H	/Users/lij/.vim/stl/sequence_concepts.h	/^#define STL_SEQUENCE_CONCEPTS_H$/;"	d
ULONGLONG_MAX	/Users/lij/.vim/stl/limits	/^#define ULONGLONG_MAX /;"	d	file:
_ALIGN	/Users/lij/.vim/stl/stl_alloc.h	/^    enum {_ALIGN = 8};$/;"	e	enum:__default_alloc_template::__anon15
_ALIGN	/Users/lij/.vim/stl/stl_alloc.h	/^  enum {_ALIGN = 8};$/;"	e	enum:__anon12
_Alloc	/Users/lij/.vim/stl/stl_alloc.h	/^  typedef alloc _Alloc;          \/\/ The underlying allocator.$/;"	t	class:allocator	access:private
_Alloc_traits	/Users/lij/.vim/stl/pthread_alloc	/^struct _Alloc_traits<_Tp, _Pthread_alloc_template<_Max_size> >$/;"	s	file:
_Alloc_traits	/Users/lij/.vim/stl/pthread_alloc	/^struct _Alloc_traits<_Tp, __allocator<_Atype, _Pthread_alloc_template<_Max> > >$/;"	s	file:
_Alloc_traits	/Users/lij/.vim/stl/pthread_alloc	/^struct _Alloc_traits<_Tp, pthread_allocator<_Atype> >$/;"	s	file:
_Alloc_traits::_Alloc_type	/Users/lij/.vim/stl/pthread_alloc	/^  typedef simple_alloc<_Tp, _Pthread_alloc_template<> > _Alloc_type;$/;"	t	struct:_Alloc_traits	file:	access:public
_Alloc_traits::_Alloc_type	/Users/lij/.vim/stl/pthread_alloc	/^  typedef simple_alloc<_Tp, _Pthread_alloc_template<_Max> > _Alloc_type;$/;"	t	struct:_Alloc_traits	file:	access:public
_Alloc_traits::_Alloc_type	/Users/lij/.vim/stl/pthread_alloc	/^  typedef simple_alloc<_Tp, _Pthread_alloc_template<_Max_size> > _Alloc_type;$/;"	t	struct:_Alloc_traits	file:	access:public
_Alloc_traits::_S_instanceless	/Users/lij/.vim/stl/pthread_alloc	/^  static const bool _S_instanceless = true;$/;"	m	struct:_Alloc_traits	file:	access:public
_Alloc_traits::allocator_type	/Users/lij/.vim/stl/pthread_alloc	/^          allocator_type;$/;"	t	struct:_Alloc_traits	file:	access:public
_Alloc_traits::allocator_type	/Users/lij/.vim/stl/pthread_alloc	/^  typedef __allocator<_Tp, _Pthread_alloc_template<_Max> > allocator_type;$/;"	t	struct:_Alloc_traits	file:	access:public
_Alloc_traits::allocator_type	/Users/lij/.vim/stl/pthread_alloc	/^  typedef pthread_allocator<_Tp> allocator_type;$/;"	t	struct:_Alloc_traits	file:	access:public
_Alloc_type	/Users/lij/.vim/stl/pthread_alloc	/^  typedef simple_alloc<_Tp, _Pthread_alloc_template<> > _Alloc_type;$/;"	t	struct:_Alloc_traits	file:	access:public
_Alloc_type	/Users/lij/.vim/stl/pthread_alloc	/^  typedef simple_alloc<_Tp, _Pthread_alloc_template<_Max> > _Alloc_type;$/;"	t	struct:_Alloc_traits	file:	access:public
_Alloc_type	/Users/lij/.vim/stl/pthread_alloc	/^  typedef simple_alloc<_Tp, _Pthread_alloc_template<_Max_size> > _Alloc_type;$/;"	t	struct:_Alloc_traits	file:	access:public
_Alloc_type	/Users/lij/.vim/stl/stl_bvector.h	/^          _Alloc_type;$/;"	t	class:_Bvector_alloc_base	access:protected
_Alloc_type	/Users/lij/.vim/stl/stl_bvector.h	/^  typedef simple_alloc<unsigned int, _Alloc> _Alloc_type;$/;"	t	class:_Bvector_base	access:protected
_Alloc_type	/Users/lij/.vim/stl/stl_list.h	/^          _Alloc_type;$/;"	t	class:_List_alloc_base	access:protected
_Alloc_type	/Users/lij/.vim/stl/stl_list.h	/^  typedef simple_alloc<_List_node<_Tp>, _Alloc> _Alloc_type;$/;"	t	class:_List_base	access:protected
_Alloc_type	/Users/lij/.vim/stl/stl_slist.h	/^          _Alloc_type;$/;"	t	class:_Slist_alloc_base	access:protected
_Alloc_type	/Users/lij/.vim/stl/stl_slist.h	/^  typedef simple_alloc<_Slist_node<_Tp>, _Alloc> _Alloc_type;$/;"	t	struct:_Slist_base	access:protected
_Alloc_type	/Users/lij/.vim/stl/stl_tree.h	/^          _Alloc_type;$/;"	t	class:_Rb_tree_alloc_base	access:protected
_Alloc_type	/Users/lij/.vim/stl/stl_tree.h	/^  typedef simple_alloc<_Rb_tree_node<_Tp>, _Alloc> _Alloc_type;$/;"	t	struct:_Rb_tree_base	access:protected
_Alloc_type	/Users/lij/.vim/stl/stl_vector.h	/^  typedef typename _Alloc_traits<_Tp, _Allocator>::_Alloc_type _Alloc_type;$/;"	t	class:_Vector_alloc_base	access:protected
_Alloc_type	/Users/lij/.vim/stl/string	/^  typedef simple_alloc<_Tp, _Alloc> _Alloc_type;$/;"	t	class:_String_base	file:	access:protected
_Alloc_type	/Users/lij/.vim/stl/string	/^  typedef typename _Alloc_traits<_Tp, _Alloc>::_Alloc_type _Alloc_type;$/;"	t	class:_String_alloc_base	file:	access:protected
_Allocator_concept_specification	/Users/lij/.vim/stl/concept_checks.h	/^struct _Allocator_concept_specification {$/;"	s
_Allocator_concept_specification::_Allocator_requirement_violation	/Users/lij/.vim/stl/concept_checks.h	/^_Allocator_requirement_violation(_Alloc __a) {$/;"	f	struct:_Allocator_concept_specification	access:public	signature:(_Alloc __a)
_Allocator_requirement_violation	/Users/lij/.vim/stl/concept_checks.h	/^_Allocator_requirement_violation(_Alloc __a) {$/;"	f	struct:_Allocator_concept_specification	access:public	signature:(_Alloc __a)
_Assignable_concept_specification	/Users/lij/.vim/stl/concept_checks.h	/^struct _Assignable_concept_specification {$/;"	s
_Assignable_concept_specification::_Assignable_requirement_violation	/Users/lij/.vim/stl/concept_checks.h	/^  static void _Assignable_requirement_violation(_Type __a) {$/;"	f	struct:_Assignable_concept_specification	access:public	signature:(_Type __a)
_Assignable_requirement_violation	/Users/lij/.vim/stl/concept_checks.h	/^  static void _Assignable_requirement_violation(_Type __a) {$/;"	f	struct:_Assignable_concept_specification	access:public	signature:(_Type __a)
_Atomic_swap	/Users/lij/.vim/stl/stl_threads.h	/^    inline unsigned long _Atomic_swap(unsigned long * __p, unsigned long __q) {$/;"	f	signature:(unsigned long * __p, unsigned long __q)
_Atomic_swap	/Users/lij/.vim/stl/stl_threads.h	/^    static inline unsigned long _Atomic_swap(unsigned long * __p, unsigned long __q) {$/;"	f	signature:(unsigned long * __p, unsigned long __q)
_BackInsertionSequence_concept_specification	/Users/lij/.vim/stl/sequence_concepts.h	/^struct _BackInsertionSequence_concept_specification {$/;"	s
_BackInsertionSequence_concept_specification::_BackInsertionSequence_requirement_violation	/Users/lij/.vim/stl/sequence_concepts.h	/^_BackInsertionSequence_requirement_violation(_BackInsertionSequence __s) {$/;"	f	struct:_BackInsertionSequence_concept_specification	access:public	signature:(_BackInsertionSequence __s)
_BackInsertionSequence_requirement_violation	/Users/lij/.vim/stl/sequence_concepts.h	/^_BackInsertionSequence_requirement_violation(_BackInsertionSequence __s) {$/;"	f	struct:_BackInsertionSequence_concept_specification	access:public	signature:(_BackInsertionSequence __s)
_Base	/Users/lij/.vim/stl/bitset	/^  typedef _Base_bitset<__BITSET_WORDS(_Nb)> _Base;$/;"	t	class:bitset	file:	access:private
_Base	/Users/lij/.vim/stl/stl_bvector.h	/^          _Base;$/;"	t	class:_Bvector_base	access:private
_Base	/Users/lij/.vim/stl/stl_deque.h	/^          _Base;$/;"	t	class:_Deque_base	access:public
_Base	/Users/lij/.vim/stl/stl_deque.h	/^  typedef _Deque_base<_Tp, _Alloc> _Base;$/;"	t	class:deque	access:private
_Base	/Users/lij/.vim/stl/stl_list.h	/^          _Base; $/;"	t	class:_List_base	access:public
_Base	/Users/lij/.vim/stl/stl_list.h	/^  typedef _List_base<_Tp, _Alloc> _Base;$/;"	t	class:list	access:private
_Base	/Users/lij/.vim/stl/stl_rope.h	/^          _Base;$/;"	t	struct:_Rope_base	access:public
_Base	/Users/lij/.vim/stl/stl_rope.h	/^          _Base;$/;"	t	struct:_Rope_rep_base	access:public
_Base	/Users/lij/.vim/stl/stl_rope.h	/^        typedef _Rope_base<_CharT,_Alloc> _Base;$/;"	t	class:rope	access:protected
_Base	/Users/lij/.vim/stl/stl_slist.h	/^          _Base;$/;"	t	struct:_Slist_base	access:public
_Base	/Users/lij/.vim/stl/stl_slist.h	/^  typedef _Slist_base<_Tp,_Alloc> _Base;$/;"	t	class:slist	access:private
_Base	/Users/lij/.vim/stl/stl_tree.h	/^          _Base;$/;"	t	struct:_Rb_tree_base	access:public
_Base	/Users/lij/.vim/stl/stl_tree.h	/^  typedef _Rb_tree<_Key, _Value, _KeyOfValue, _Compare, _Alloc> _Base;$/;"	t	struct:rb_tree	access:public
_Base	/Users/lij/.vim/stl/stl_tree.h	/^  typedef _Rb_tree_base<_Value, _Alloc> _Base;$/;"	t	class:_Rb_tree	access:private
_Base	/Users/lij/.vim/stl/stl_vector.h	/^          _Base;$/;"	t	struct:_Vector_base	access:public
_Base	/Users/lij/.vim/stl/stl_vector.h	/^  typedef _Vector_base<_Tp, _Alloc> _Base;$/;"	t	class:vector	access:private
_Base	/Users/lij/.vim/stl/string	/^          _Base;$/;"	t	class:_String_base	file:	access:protected
_Base	/Users/lij/.vim/stl/string	/^  typedef _String_base<_CharT,_Alloc> _Base;$/;"	t	class:basic_string	file:	access:public
_Base_bitset	/Users/lij/.vim/stl/bitset	/^  _Base_bitset( void ) : _M_w(0) {}$/;"	f	struct:_Base_bitset	access:public	signature:( void )
_Base_bitset	/Users/lij/.vim/stl/bitset	/^  _Base_bitset( void ) { _M_do_reset(); }$/;"	f	struct:_Base_bitset	access:public	signature:( void )
_Base_bitset	/Users/lij/.vim/stl/bitset	/^  _Base_bitset(unsigned long __val) : _M_w(__val) {}$/;"	f	struct:_Base_bitset	access:public	signature:(unsigned long __val)
_Base_bitset	/Users/lij/.vim/stl/bitset	/^  _Base_bitset(unsigned long __val) {$/;"	f	struct:_Base_bitset	access:public	signature:(unsigned long __val)
_Base_bitset	/Users/lij/.vim/stl/bitset	/^__STL_TEMPLATE_NULL struct _Base_bitset<1> {$/;"	s	file:
_Base_bitset	/Users/lij/.vim/stl/bitset	/^struct _Base_bitset {$/;"	s	file:
_Base_bitset::_Base_bitset	/Users/lij/.vim/stl/bitset	/^  _Base_bitset( void ) : _M_w(0) {}$/;"	f	struct:_Base_bitset	access:public	signature:( void )
_Base_bitset::_Base_bitset	/Users/lij/.vim/stl/bitset	/^  _Base_bitset( void ) { _M_do_reset(); }$/;"	f	struct:_Base_bitset	access:public	signature:( void )
_Base_bitset::_Base_bitset	/Users/lij/.vim/stl/bitset	/^  _Base_bitset(unsigned long __val) : _M_w(__val) {}$/;"	f	struct:_Base_bitset	access:public	signature:(unsigned long __val)
_Base_bitset::_Base_bitset	/Users/lij/.vim/stl/bitset	/^  _Base_bitset(unsigned long __val) {$/;"	f	struct:_Base_bitset	access:public	signature:(unsigned long __val)
_Base_bitset::_M_do_and	/Users/lij/.vim/stl/bitset	/^  void _M_do_and(const _Base_bitset<1>& __x) { _M_w &= __x._M_w; }$/;"	f	struct:_Base_bitset	access:public	signature:(const _Base_bitset<1>& __x)
_Base_bitset::_M_do_and	/Users/lij/.vim/stl/bitset	/^  void _M_do_and(const _Base_bitset<_Nw>& __x) {$/;"	f	struct:_Base_bitset	access:public	signature:(const _Base_bitset<_Nw>& __x)
_Base_bitset::_M_do_count	/Users/lij/.vim/stl/bitset	/^  size_t _M_do_count() const {$/;"	f	struct:_Base_bitset	access:public	signature:() const
_Base_bitset::_M_do_find_first	/Users/lij/.vim/stl/bitset	/^  size_t _M_do_find_first(size_t __not_found) const;$/;"	p	struct:_Base_bitset	file:	access:public	signature:(size_t __not_found) const
_Base_bitset::_M_do_find_first	/Users/lij/.vim/stl/bitset	/^size_t _Base_bitset<1>::_M_do_find_first(size_t __not_found) const$/;"	f	class:_Base_bitset	signature:(size_t __not_found) const
_Base_bitset::_M_do_find_first	/Users/lij/.vim/stl/bitset	/^size_t _Base_bitset<_Nw>::_M_do_find_first(size_t __not_found) const $/;"	f	class:_Base_bitset	signature:(size_t __not_found) const
_Base_bitset::_M_do_find_next	/Users/lij/.vim/stl/bitset	/^  size_t _M_do_find_next(size_t __prev, size_t __not_found) const; $/;"	p	struct:_Base_bitset	file:	access:public	signature:(size_t __prev, size_t __not_found) const
_Base_bitset::_M_do_find_next	/Users/lij/.vim/stl/bitset	/^  size_t _M_do_find_next(size_t __prev, size_t __not_found) const;$/;"	p	struct:_Base_bitset	file:	access:public	signature:(size_t __prev, size_t __not_found) const
_Base_bitset::_M_do_find_next	/Users/lij/.vim/stl/bitset	/^_Base_bitset<_Nw>::_M_do_find_next(size_t __prev, size_t __not_found) const$/;"	f	class:_Base_bitset	signature:(size_t __prev, size_t __not_found) const
_Base_bitset::_M_do_find_next	/Users/lij/.vim/stl/bitset	/^size_t _Base_bitset<1>::_M_do_find_next(size_t __prev, size_t __not_found ) const$/;"	f	class:_Base_bitset	signature:(size_t __prev, size_t __not_found ) const
_Base_bitset::_M_do_flip	/Users/lij/.vim/stl/bitset	/^  void _M_do_flip()                       { _M_w = ~_M_w; }$/;"	f	struct:_Base_bitset	access:public	signature:()
_Base_bitset::_M_do_flip	/Users/lij/.vim/stl/bitset	/^  void _M_do_flip() {$/;"	f	struct:_Base_bitset	access:public	signature:()
_Base_bitset::_M_do_left_shift	/Users/lij/.vim/stl/bitset	/^  void _M_do_left_shift(size_t __shift)     { _M_w <<= __shift; }$/;"	f	struct:_Base_bitset	access:public	signature:(size_t __shift)
_Base_bitset::_M_do_left_shift	/Users/lij/.vim/stl/bitset	/^  void _M_do_left_shift(size_t __shift);$/;"	p	struct:_Base_bitset	file:	access:public	signature:(size_t __shift)
_Base_bitset::_M_do_left_shift	/Users/lij/.vim/stl/bitset	/^void _Base_bitset<_Nw>::_M_do_left_shift(size_t __shift) $/;"	f	class:_Base_bitset	signature:(size_t __shift)
_Base_bitset::_M_do_or	/Users/lij/.vim/stl/bitset	/^  void _M_do_or(const _Base_bitset<1>& __x)  { _M_w |= __x._M_w; }$/;"	f	struct:_Base_bitset	access:public	signature:(const _Base_bitset<1>& __x)
_Base_bitset::_M_do_or	/Users/lij/.vim/stl/bitset	/^  void _M_do_or(const _Base_bitset<_Nw>& __x) {$/;"	f	struct:_Base_bitset	access:public	signature:(const _Base_bitset<_Nw>& __x)
_Base_bitset::_M_do_reset	/Users/lij/.vim/stl/bitset	/^  void _M_do_reset()                      { _M_w = 0; }$/;"	f	struct:_Base_bitset	access:public	signature:()
_Base_bitset::_M_do_reset	/Users/lij/.vim/stl/bitset	/^  void _M_do_reset() { memset(_M_w, 0, _Nw * sizeof(_WordT)); }$/;"	f	struct:_Base_bitset	access:public	signature:()
_Base_bitset::_M_do_right_shift	/Users/lij/.vim/stl/bitset	/^  void _M_do_right_shift(size_t __shift)    { _M_w >>= __shift; }$/;"	f	struct:_Base_bitset	access:public	signature:(size_t __shift)
_Base_bitset::_M_do_right_shift	/Users/lij/.vim/stl/bitset	/^  void _M_do_right_shift(size_t __shift);$/;"	p	struct:_Base_bitset	file:	access:public	signature:(size_t __shift)
_Base_bitset::_M_do_right_shift	/Users/lij/.vim/stl/bitset	/^void _Base_bitset<_Nw>::_M_do_right_shift(size_t __shift) $/;"	f	class:_Base_bitset	signature:(size_t __shift)
_Base_bitset::_M_do_set	/Users/lij/.vim/stl/bitset	/^  void _M_do_set()                        { _M_w = ~static_cast<_WordT>(0); }$/;"	f	struct:_Base_bitset	access:public	signature:()
_Base_bitset::_M_do_set	/Users/lij/.vim/stl/bitset	/^  void _M_do_set() {$/;"	f	struct:_Base_bitset	access:public	signature:()
_Base_bitset::_M_do_to_ulong	/Users/lij/.vim/stl/bitset	/^  unsigned long _M_do_to_ulong() const { return _M_w; }$/;"	f	struct:_Base_bitset	access:public	signature:() const
_Base_bitset::_M_do_to_ulong	/Users/lij/.vim/stl/bitset	/^  unsigned long _M_do_to_ulong() const; $/;"	p	struct:_Base_bitset	file:	access:public	signature:() const
_Base_bitset::_M_do_to_ulong	/Users/lij/.vim/stl/bitset	/^unsigned long _Base_bitset<_Nw>::_M_do_to_ulong() const$/;"	f	class:_Base_bitset	signature:() const
_Base_bitset::_M_do_xor	/Users/lij/.vim/stl/bitset	/^  void _M_do_xor(const _Base_bitset<1>& __x) { _M_w ^= __x._M_w; }$/;"	f	struct:_Base_bitset	access:public	signature:(const _Base_bitset<1>& __x)
_Base_bitset::_M_do_xor	/Users/lij/.vim/stl/bitset	/^  void _M_do_xor(const _Base_bitset<_Nw>& __x) {$/;"	f	struct:_Base_bitset	access:public	signature:(const _Base_bitset<_Nw>& __x)
_Base_bitset::_M_getword	/Users/lij/.vim/stl/bitset	/^  _WordT  _M_getword(size_t __pos) const { return _M_w[_S_whichword(__pos)]; }$/;"	f	struct:_Base_bitset	access:public	signature:(size_t __pos) const
_Base_bitset::_M_getword	/Users/lij/.vim/stl/bitset	/^  _WordT  _M_getword(size_t) const { return _M_w; }$/;"	f	struct:_Base_bitset	access:public	signature:(size_t) const
_Base_bitset::_M_getword	/Users/lij/.vim/stl/bitset	/^  _WordT& _M_getword(size_t __pos)       { return _M_w[_S_whichword(__pos)]; }$/;"	f	struct:_Base_bitset	access:public	signature:(size_t __pos)
_Base_bitset::_M_getword	/Users/lij/.vim/stl/bitset	/^  _WordT& _M_getword(size_t)       { return _M_w; }$/;"	f	struct:_Base_bitset	access:public	signature:(size_t)
_Base_bitset::_M_hiword	/Users/lij/.vim/stl/bitset	/^  _WordT  _M_hiword() const { return _M_w; }$/;"	f	struct:_Base_bitset	access:public	signature:() const
_Base_bitset::_M_hiword	/Users/lij/.vim/stl/bitset	/^  _WordT  _M_hiword() const { return _M_w[_Nw - 1]; }$/;"	f	struct:_Base_bitset	access:public	signature:() const
_Base_bitset::_M_hiword	/Users/lij/.vim/stl/bitset	/^  _WordT& _M_hiword()       { return _M_w; }$/;"	f	struct:_Base_bitset	access:public	signature:()
_Base_bitset::_M_hiword	/Users/lij/.vim/stl/bitset	/^  _WordT& _M_hiword()       { return _M_w[_Nw - 1]; }$/;"	f	struct:_Base_bitset	access:public	signature:()
_Base_bitset::_M_is_any	/Users/lij/.vim/stl/bitset	/^  bool _M_is_any() const {$/;"	f	struct:_Base_bitset	access:public	signature:() const
_Base_bitset::_M_is_any	/Users/lij/.vim/stl/bitset	/^  bool _M_is_any() const$/;"	f	struct:_Base_bitset	access:public	signature:() const
_Base_bitset::_M_is_equal	/Users/lij/.vim/stl/bitset	/^  bool _M_is_equal(const _Base_bitset<1>& __x) const$/;"	f	struct:_Base_bitset	access:public	signature:(const _Base_bitset<1>& __x) const
_Base_bitset::_M_is_equal	/Users/lij/.vim/stl/bitset	/^  bool _M_is_equal(const _Base_bitset<_Nw>& __x) const {$/;"	f	struct:_Base_bitset	access:public	signature:(const _Base_bitset<_Nw>& __x) const
_Base_bitset::_M_w	/Users/lij/.vim/stl/bitset	/^  _WordT _M_w;$/;"	m	struct:_Base_bitset	file:	access:public
_Base_bitset::_M_w	/Users/lij/.vim/stl/bitset	/^  _WordT _M_w[_Nw];                \/\/ 0 is the least significant word.$/;"	m	struct:_Base_bitset	file:	access:public
_Base_bitset::_S_maskbit	/Users/lij/.vim/stl/bitset	/^  static _WordT _S_maskbit( size_t __pos )$/;"	f	struct:_Base_bitset	access:public	signature:( size_t __pos )
_Base_bitset::_S_whichbit	/Users/lij/.vim/stl/bitset	/^  static size_t _S_whichbit( size_t __pos )$/;"	f	struct:_Base_bitset	access:public	signature:( size_t __pos )
_Base_bitset::_S_whichbyte	/Users/lij/.vim/stl/bitset	/^  static size_t _S_whichbyte( size_t __pos )$/;"	f	struct:_Base_bitset	access:public	signature:( size_t __pos )
_Base_bitset::_S_whichword	/Users/lij/.vim/stl/bitset	/^  static size_t _S_whichword( size_t __pos )$/;"	f	struct:_Base_bitset	access:public	signature:( size_t __pos )
_Base_bitset::_WordT	/Users/lij/.vim/stl/bitset	/^  typedef unsigned long _WordT;$/;"	t	struct:_Base_bitset	file:	access:public
_Base_ptr	/Users/lij/.vim/stl/stl_tree.h	/^  typedef _Rb_tree_node_base* _Base_ptr;$/;"	t	class:_Rb_tree	access:protected
_Base_ptr	/Users/lij/.vim/stl/stl_tree.h	/^  typedef _Rb_tree_node_base* _Base_ptr;$/;"	t	struct:_Rb_tree_node_base	access:public
_Base_ptr	/Users/lij/.vim/stl/stl_tree.h	/^  typedef _Rb_tree_node_base::_Base_ptr _Base_ptr;$/;"	t	struct:_Rb_tree_base_iterator	access:public
_BidirectionalIterator_concept_specification	/Users/lij/.vim/stl/concept_checks.h	/^struct _BidirectionalIterator_concept_specification {$/;"	s
_BidirectionalIterator_concept_specification::_BidirectionalIterator_requirement_violation	/Users/lij/.vim/stl/concept_checks.h	/^_BidirectionalIterator_requirement_violation(_BidirectionalIterator __i) {$/;"	f	struct:_BidirectionalIterator_concept_specification	access:public	signature:(_BidirectionalIterator __i)
_BidirectionalIterator_requirement_violation	/Users/lij/.vim/stl/concept_checks.h	/^_BidirectionalIterator_requirement_violation(_BidirectionalIterator __i) {$/;"	f	struct:_BidirectionalIterator_concept_specification	access:public	signature:(_BidirectionalIterator __i)
_Bit_const_iterator	/Users/lij/.vim/stl/stl_bvector.h	/^  _Bit_const_iterator() : _Bit_iterator_base(0, 0) {}$/;"	f	struct:_Bit_const_iterator	access:public	signature:()
_Bit_const_iterator	/Users/lij/.vim/stl/stl_bvector.h	/^  _Bit_const_iterator(const _Bit_iterator& __x) $/;"	f	struct:_Bit_const_iterator	access:public	signature:(const _Bit_iterator& __x)
_Bit_const_iterator	/Users/lij/.vim/stl/stl_bvector.h	/^  _Bit_const_iterator(unsigned int* __x, unsigned int __y) $/;"	f	struct:_Bit_const_iterator	access:public	signature:(unsigned int* __x, unsigned int __y)
_Bit_const_iterator	/Users/lij/.vim/stl/stl_bvector.h	/^struct _Bit_const_iterator : public _Bit_iterator_base$/;"	s	inherits:_Bit_iterator_base
_Bit_const_iterator::_Bit_const_iterator	/Users/lij/.vim/stl/stl_bvector.h	/^  _Bit_const_iterator() : _Bit_iterator_base(0, 0) {}$/;"	f	struct:_Bit_const_iterator	access:public	signature:()
_Bit_const_iterator::_Bit_const_iterator	/Users/lij/.vim/stl/stl_bvector.h	/^  _Bit_const_iterator(const _Bit_iterator& __x) $/;"	f	struct:_Bit_const_iterator	access:public	signature:(const _Bit_iterator& __x)
_Bit_const_iterator::_Bit_const_iterator	/Users/lij/.vim/stl/stl_bvector.h	/^  _Bit_const_iterator(unsigned int* __x, unsigned int __y) $/;"	f	struct:_Bit_const_iterator	access:public	signature:(unsigned int* __x, unsigned int __y)
_Bit_const_iterator::const_iterator	/Users/lij/.vim/stl/stl_bvector.h	/^  typedef _Bit_const_iterator  const_iterator;$/;"	t	struct:_Bit_const_iterator	access:public
_Bit_const_iterator::const_reference	/Users/lij/.vim/stl/stl_bvector.h	/^  typedef bool                 const_reference;$/;"	t	struct:_Bit_const_iterator	access:public
_Bit_const_iterator::operator *	/Users/lij/.vim/stl/stl_bvector.h	/^  const_reference operator*() const {$/;"	f	struct:_Bit_const_iterator	access:public	signature:() const
_Bit_const_iterator::operator +	/Users/lij/.vim/stl/stl_bvector.h	/^  const_iterator operator+(difference_type __i) const {$/;"	f	struct:_Bit_const_iterator	access:public	signature:(difference_type __i) const
_Bit_const_iterator::operator ++	/Users/lij/.vim/stl/stl_bvector.h	/^  const_iterator operator++(int) {$/;"	f	struct:_Bit_const_iterator	access:public	signature:(int)
_Bit_const_iterator::operator ++	/Users/lij/.vim/stl/stl_bvector.h	/^  const_iterator& operator++() {$/;"	f	struct:_Bit_const_iterator	access:public	signature:()
_Bit_const_iterator::operator +=	/Users/lij/.vim/stl/stl_bvector.h	/^  const_iterator& operator+=(difference_type __i) {$/;"	f	struct:_Bit_const_iterator	access:public	signature:(difference_type __i)
_Bit_const_iterator::operator -	/Users/lij/.vim/stl/stl_bvector.h	/^  const_iterator operator-(difference_type __i) const {$/;"	f	struct:_Bit_const_iterator	access:public	signature:(difference_type __i) const
_Bit_const_iterator::operator --	/Users/lij/.vim/stl/stl_bvector.h	/^  const_iterator operator--(int) {$/;"	f	struct:_Bit_const_iterator	access:public	signature:(int)
_Bit_const_iterator::operator --	/Users/lij/.vim/stl/stl_bvector.h	/^  const_iterator& operator--() {$/;"	f	struct:_Bit_const_iterator	access:public	signature:()
_Bit_const_iterator::operator -=	/Users/lij/.vim/stl/stl_bvector.h	/^  const_iterator& operator-=(difference_type __i) {$/;"	f	struct:_Bit_const_iterator	access:public	signature:(difference_type __i)
_Bit_const_iterator::operator []	/Users/lij/.vim/stl/stl_bvector.h	/^  const_reference operator[](difference_type __i) { $/;"	f	struct:_Bit_const_iterator	access:public	signature:(difference_type __i)
_Bit_const_iterator::pointer	/Users/lij/.vim/stl/stl_bvector.h	/^  typedef const bool*          pointer;$/;"	t	struct:_Bit_const_iterator	access:public
_Bit_const_iterator::reference	/Users/lij/.vim/stl/stl_bvector.h	/^  typedef bool                 reference;$/;"	t	struct:_Bit_const_iterator	access:public
_Bit_count	/Users/lij/.vim/stl/bitset	/^struct _Bit_count {$/;"	s	file:
_Bit_count::_S_bit_count	/Users/lij/.vim/stl/bitset	/^  static unsigned char _S_bit_count[256];$/;"	m	struct:_Bit_count	file:	access:public
_Bit_count::_S_bit_count	/Users/lij/.vim/stl/bitset	/^unsigned char _Bit_count<__dummy>::_S_bit_count[] = {$/;"	m	class:_Bit_count	file:
_Bit_iterator	/Users/lij/.vim/stl/stl_bvector.h	/^  _Bit_iterator() : _Bit_iterator_base(0, 0) {}$/;"	f	struct:_Bit_iterator	access:public	signature:()
_Bit_iterator	/Users/lij/.vim/stl/stl_bvector.h	/^  _Bit_iterator(unsigned int* __x, unsigned int __y) $/;"	f	struct:_Bit_iterator	access:public	signature:(unsigned int* __x, unsigned int __y)
_Bit_iterator	/Users/lij/.vim/stl/stl_bvector.h	/^struct _Bit_iterator : public _Bit_iterator_base$/;"	s	inherits:_Bit_iterator_base
_Bit_iterator::_Bit_iterator	/Users/lij/.vim/stl/stl_bvector.h	/^  _Bit_iterator() : _Bit_iterator_base(0, 0) {}$/;"	f	struct:_Bit_iterator	access:public	signature:()
_Bit_iterator::_Bit_iterator	/Users/lij/.vim/stl/stl_bvector.h	/^  _Bit_iterator(unsigned int* __x, unsigned int __y) $/;"	f	struct:_Bit_iterator	access:public	signature:(unsigned int* __x, unsigned int __y)
_Bit_iterator::iterator	/Users/lij/.vim/stl/stl_bvector.h	/^  typedef _Bit_iterator   iterator;$/;"	t	struct:_Bit_iterator	access:public
_Bit_iterator::operator *	/Users/lij/.vim/stl/stl_bvector.h	/^  reference operator*() const { return reference(_M_p, 1U << _M_offset); }$/;"	f	struct:_Bit_iterator	access:public	signature:() const
_Bit_iterator::operator +	/Users/lij/.vim/stl/stl_bvector.h	/^  iterator operator+(difference_type __i) const {$/;"	f	struct:_Bit_iterator	access:public	signature:(difference_type __i) const
_Bit_iterator::operator ++	/Users/lij/.vim/stl/stl_bvector.h	/^  iterator operator++(int) {$/;"	f	struct:_Bit_iterator	access:public	signature:(int)
_Bit_iterator::operator ++	/Users/lij/.vim/stl/stl_bvector.h	/^  iterator& operator++() {$/;"	f	struct:_Bit_iterator	access:public	signature:()
_Bit_iterator::operator +=	/Users/lij/.vim/stl/stl_bvector.h	/^  iterator& operator+=(difference_type __i) {$/;"	f	struct:_Bit_iterator	access:public	signature:(difference_type __i)
_Bit_iterator::operator -	/Users/lij/.vim/stl/stl_bvector.h	/^  iterator operator-(difference_type __i) const {$/;"	f	struct:_Bit_iterator	access:public	signature:(difference_type __i) const
_Bit_iterator::operator --	/Users/lij/.vim/stl/stl_bvector.h	/^  iterator operator--(int) {$/;"	f	struct:_Bit_iterator	access:public	signature:(int)
_Bit_iterator::operator --	/Users/lij/.vim/stl/stl_bvector.h	/^  iterator& operator--() {$/;"	f	struct:_Bit_iterator	access:public	signature:()
_Bit_iterator::operator -=	/Users/lij/.vim/stl/stl_bvector.h	/^  iterator& operator-=(difference_type __i) {$/;"	f	struct:_Bit_iterator	access:public	signature:(difference_type __i)
_Bit_iterator::operator []	/Users/lij/.vim/stl/stl_bvector.h	/^  reference operator[](difference_type __i) { return *(*this + __i); }$/;"	f	struct:_Bit_iterator	access:public	signature:(difference_type __i)
_Bit_iterator::pointer	/Users/lij/.vim/stl/stl_bvector.h	/^  typedef _Bit_reference* pointer;$/;"	t	struct:_Bit_iterator	access:public
_Bit_iterator::reference	/Users/lij/.vim/stl/stl_bvector.h	/^  typedef _Bit_reference  reference;$/;"	t	struct:_Bit_iterator	access:public
_Bit_iterator_base	/Users/lij/.vim/stl/stl_bvector.h	/^  _Bit_iterator_base(unsigned int* __x, unsigned int __y)$/;"	f	struct:_Bit_iterator_base	access:public	signature:(unsigned int* __x, unsigned int __y)
_Bit_iterator_base	/Users/lij/.vim/stl/stl_bvector.h	/^struct _Bit_iterator_base : public random_access_iterator<bool, ptrdiff_t> $/;"	s	inherits:random_access_iterator
_Bit_iterator_base::_Bit_iterator_base	/Users/lij/.vim/stl/stl_bvector.h	/^  _Bit_iterator_base(unsigned int* __x, unsigned int __y)$/;"	f	struct:_Bit_iterator_base	access:public	signature:(unsigned int* __x, unsigned int __y)
_Bit_iterator_base::_M_bump_down	/Users/lij/.vim/stl/stl_bvector.h	/^  void _M_bump_down() {$/;"	f	struct:_Bit_iterator_base	access:public	signature:()
_Bit_iterator_base::_M_bump_up	/Users/lij/.vim/stl/stl_bvector.h	/^  void _M_bump_up() {$/;"	f	struct:_Bit_iterator_base	access:public	signature:()
_Bit_iterator_base::_M_incr	/Users/lij/.vim/stl/stl_bvector.h	/^  void _M_incr(ptrdiff_t __i) {$/;"	f	struct:_Bit_iterator_base	access:public	signature:(ptrdiff_t __i)
_Bit_iterator_base::_M_offset	/Users/lij/.vim/stl/stl_bvector.h	/^  unsigned int _M_offset;$/;"	m	struct:_Bit_iterator_base	access:public
_Bit_iterator_base::_M_p	/Users/lij/.vim/stl/stl_bvector.h	/^  unsigned int* _M_p;$/;"	m	struct:_Bit_iterator_base	access:public
_Bit_iterator_base::operator !=	/Users/lij/.vim/stl/stl_bvector.h	/^  bool operator!=(const _Bit_iterator_base& __i) const {$/;"	f	struct:_Bit_iterator_base	access:public	signature:(const _Bit_iterator_base& __i) const
_Bit_iterator_base::operator <	/Users/lij/.vim/stl/stl_bvector.h	/^  bool operator<(const _Bit_iterator_base& __i) const {$/;"	f	struct:_Bit_iterator_base	access:public	signature:(const _Bit_iterator_base& __i) const
_Bit_iterator_base::operator <=	/Users/lij/.vim/stl/stl_bvector.h	/^  bool operator<=(const _Bit_iterator_base& __i) const {$/;"	f	struct:_Bit_iterator_base	access:public	signature:(const _Bit_iterator_base& __i) const
_Bit_iterator_base::operator ==	/Users/lij/.vim/stl/stl_bvector.h	/^  bool operator==(const _Bit_iterator_base& __i) const {$/;"	f	struct:_Bit_iterator_base	access:public	signature:(const _Bit_iterator_base& __i) const
_Bit_iterator_base::operator >	/Users/lij/.vim/stl/stl_bvector.h	/^  bool operator>(const _Bit_iterator_base& __i) const {$/;"	f	struct:_Bit_iterator_base	access:public	signature:(const _Bit_iterator_base& __i) const
_Bit_iterator_base::operator >=	/Users/lij/.vim/stl/stl_bvector.h	/^  bool operator>=(const _Bit_iterator_base& __i) const {$/;"	f	struct:_Bit_iterator_base	access:public	signature:(const _Bit_iterator_base& __i) const
_Bit_reference	/Users/lij/.vim/stl/stl_bvector.h	/^  _Bit_reference() : _M_p(0), _M_mask(0) {}$/;"	f	struct:_Bit_reference	access:public	signature:()
_Bit_reference	/Users/lij/.vim/stl/stl_bvector.h	/^  _Bit_reference(unsigned int* __x, unsigned int __y) $/;"	f	struct:_Bit_reference	access:public	signature:(unsigned int* __x, unsigned int __y)
_Bit_reference	/Users/lij/.vim/stl/stl_bvector.h	/^struct _Bit_reference {$/;"	s
_Bit_reference::_Bit_reference	/Users/lij/.vim/stl/stl_bvector.h	/^  _Bit_reference() : _M_p(0), _M_mask(0) {}$/;"	f	struct:_Bit_reference	access:public	signature:()
_Bit_reference::_Bit_reference	/Users/lij/.vim/stl/stl_bvector.h	/^  _Bit_reference(unsigned int* __x, unsigned int __y) $/;"	f	struct:_Bit_reference	access:public	signature:(unsigned int* __x, unsigned int __y)
_Bit_reference::_M_mask	/Users/lij/.vim/stl/stl_bvector.h	/^  unsigned int _M_mask;$/;"	m	struct:_Bit_reference	access:public
_Bit_reference::_M_p	/Users/lij/.vim/stl/stl_bvector.h	/^  unsigned int* _M_p;$/;"	m	struct:_Bit_reference	access:public
_Bit_reference::flip	/Users/lij/.vim/stl/stl_bvector.h	/^  void flip() { *_M_p ^= _M_mask; }$/;"	f	struct:_Bit_reference	access:public	signature:()
_Bit_reference::operator <	/Users/lij/.vim/stl/stl_bvector.h	/^  bool operator<(const _Bit_reference& __x) const {$/;"	f	struct:_Bit_reference	access:public	signature:(const _Bit_reference& __x) const
_Bit_reference::operator =	/Users/lij/.vim/stl/stl_bvector.h	/^  _Bit_reference& operator=(bool __x)$/;"	f	struct:_Bit_reference	access:public	signature:(bool __x)
_Bit_reference::operator =	/Users/lij/.vim/stl/stl_bvector.h	/^  _Bit_reference& operator=(const _Bit_reference& __x) $/;"	f	struct:_Bit_reference	access:public	signature:(const _Bit_reference& __x)
_Bit_reference::operator ==	/Users/lij/.vim/stl/stl_bvector.h	/^  bool operator==(const _Bit_reference& __x) const$/;"	f	struct:_Bit_reference	access:public	signature:(const _Bit_reference& __x) const
_Bit_reference::operator bool	/Users/lij/.vim/stl/stl_bvector.h	/^  operator bool() const { return !(!(*_M_p & _M_mask)); }$/;"	f	struct:_Bit_reference	access:public	signature:() const
_Bvector_alloc_base	/Users/lij/.vim/stl/stl_bvector.h	/^  _Bvector_alloc_base(const allocator_type& __a)$/;"	f	class:_Bvector_alloc_base	access:public	signature:(const allocator_type& __a)
_Bvector_alloc_base	/Users/lij/.vim/stl/stl_bvector.h	/^  _Bvector_alloc_base(const allocator_type&)$/;"	f	class:_Bvector_alloc_base	access:public	signature:(const allocator_type&)
_Bvector_alloc_base	/Users/lij/.vim/stl/stl_bvector.h	/^class _Bvector_alloc_base {$/;"	c
_Bvector_alloc_base	/Users/lij/.vim/stl/stl_bvector.h	/^class _Bvector_alloc_base<_Allocator, true> {$/;"	c
_Bvector_alloc_base::_Alloc_type	/Users/lij/.vim/stl/stl_bvector.h	/^          _Alloc_type;$/;"	t	class:_Bvector_alloc_base	access:protected
_Bvector_alloc_base::_Bvector_alloc_base	/Users/lij/.vim/stl/stl_bvector.h	/^  _Bvector_alloc_base(const allocator_type& __a)$/;"	f	class:_Bvector_alloc_base	access:public	signature:(const allocator_type& __a)
_Bvector_alloc_base::_Bvector_alloc_base	/Users/lij/.vim/stl/stl_bvector.h	/^  _Bvector_alloc_base(const allocator_type&)$/;"	f	class:_Bvector_alloc_base	access:public	signature:(const allocator_type&)
_Bvector_alloc_base::_M_bit_alloc	/Users/lij/.vim/stl/stl_bvector.h	/^  unsigned int* _M_bit_alloc(size_t __n) $/;"	f	class:_Bvector_alloc_base	access:protected	signature:(size_t __n)
_Bvector_alloc_base::_M_data_allocator	/Users/lij/.vim/stl/stl_bvector.h	/^          _M_data_allocator;$/;"	m	class:_Bvector_alloc_base	access:protected
_Bvector_alloc_base::_M_deallocate	/Users/lij/.vim/stl/stl_bvector.h	/^  void _M_deallocate() {$/;"	f	class:_Bvector_alloc_base	access:protected	signature:()
_Bvector_alloc_base::_M_end_of_storage	/Users/lij/.vim/stl/stl_bvector.h	/^  unsigned int* _M_end_of_storage;$/;"	m	class:_Bvector_alloc_base	access:protected
_Bvector_alloc_base::_M_finish	/Users/lij/.vim/stl/stl_bvector.h	/^  _Bit_iterator _M_finish;$/;"	m	class:_Bvector_alloc_base	access:protected
_Bvector_alloc_base::_M_start	/Users/lij/.vim/stl/stl_bvector.h	/^  _Bit_iterator _M_start;$/;"	m	class:_Bvector_alloc_base	access:protected
_Bvector_alloc_base::allocator_type	/Users/lij/.vim/stl/stl_bvector.h	/^          allocator_type;$/;"	t	class:_Bvector_alloc_base	access:public
_Bvector_alloc_base::get_allocator	/Users/lij/.vim/stl/stl_bvector.h	/^  allocator_type get_allocator() const { return _M_data_allocator; }$/;"	f	class:_Bvector_alloc_base	access:public	signature:() const
_Bvector_alloc_base::get_allocator	/Users/lij/.vim/stl/stl_bvector.h	/^  allocator_type get_allocator() const { return allocator_type(); }$/;"	f	class:_Bvector_alloc_base	access:public	signature:() const
_Bvector_base	/Users/lij/.vim/stl/stl_bvector.h	/^  _Bvector_base(const allocator_type& __a) : _Base(__a) {}$/;"	f	class:_Bvector_base	access:public	signature:(const allocator_type& __a)
_Bvector_base	/Users/lij/.vim/stl/stl_bvector.h	/^  _Bvector_base(const allocator_type&)$/;"	f	class:_Bvector_base	access:public	signature:(const allocator_type&)
_Bvector_base	/Users/lij/.vim/stl/stl_bvector.h	/^class _Bvector_base$/;"	c
_Bvector_base	/Users/lij/.vim/stl/stl_bvector.h	/^class _Bvector_base$/;"	c	inherits:_Bvector_alloc_base
_Bvector_base::_Alloc_type	/Users/lij/.vim/stl/stl_bvector.h	/^  typedef simple_alloc<unsigned int, _Alloc> _Alloc_type;$/;"	t	class:_Bvector_base	access:protected
_Bvector_base::_Base	/Users/lij/.vim/stl/stl_bvector.h	/^          _Base;$/;"	t	class:_Bvector_base	access:private
_Bvector_base::_Bvector_base	/Users/lij/.vim/stl/stl_bvector.h	/^  _Bvector_base(const allocator_type& __a) : _Base(__a) {}$/;"	f	class:_Bvector_base	access:public	signature:(const allocator_type& __a)
_Bvector_base::_Bvector_base	/Users/lij/.vim/stl/stl_bvector.h	/^  _Bvector_base(const allocator_type&)$/;"	f	class:_Bvector_base	access:public	signature:(const allocator_type&)
_Bvector_base::_M_bit_alloc	/Users/lij/.vim/stl/stl_bvector.h	/^  unsigned int* _M_bit_alloc(size_t __n) $/;"	f	class:_Bvector_base	access:protected	signature:(size_t __n)
_Bvector_base::_M_deallocate	/Users/lij/.vim/stl/stl_bvector.h	/^  void _M_deallocate() {$/;"	f	class:_Bvector_base	access:protected	signature:()
_Bvector_base::_M_end_of_storage	/Users/lij/.vim/stl/stl_bvector.h	/^  unsigned int* _M_end_of_storage;  $/;"	m	class:_Bvector_base	access:protected
_Bvector_base::_M_finish	/Users/lij/.vim/stl/stl_bvector.h	/^  _Bit_iterator _M_finish;$/;"	m	class:_Bvector_base	access:protected
_Bvector_base::_M_start	/Users/lij/.vim/stl/stl_bvector.h	/^  _Bit_iterator _M_start;$/;"	m	class:_Bvector_base	access:protected
_Bvector_base::allocator_type	/Users/lij/.vim/stl/stl_bvector.h	/^  typedef _Alloc allocator_type;$/;"	t	class:_Bvector_base	access:public
_Bvector_base::allocator_type	/Users/lij/.vim/stl/stl_bvector.h	/^  typedef typename _Base::allocator_type allocator_type;$/;"	t	class:_Bvector_base	access:public
_Bvector_base::get_allocator	/Users/lij/.vim/stl/stl_bvector.h	/^  allocator_type get_allocator() const { return allocator_type(); }$/;"	f	class:_Bvector_base	access:public	signature:() const
_Bvector_base::~_Bvector_base	/Users/lij/.vim/stl/stl_bvector.h	/^  ~_Bvector_base() { _Base::_M_deallocate(); }$/;"	f	class:_Bvector_base	access:public	signature:()
_Bvector_base::~_Bvector_base	/Users/lij/.vim/stl/stl_bvector.h	/^  ~_Bvector_base() { _M_deallocate(); }$/;"	f	class:_Bvector_base	access:public	signature:()
_Cat	/Users/lij/.vim/stl/stl_algobase.h	/^          _Cat;$/;"	t	struct:__copy_backward_dispatch	access:public
_Color_type	/Users/lij/.vim/stl/stl_tree.h	/^  typedef _Rb_tree_Color_type _Color_type;$/;"	t	class:_Rb_tree	access:protected
_Color_type	/Users/lij/.vim/stl/stl_tree.h	/^  typedef _Rb_tree_Color_type _Color_type;$/;"	t	struct:_Rb_tree_node_base	access:public
_Constant_binary_fun	/Users/lij/.vim/stl/stl_function.h	/^  _Constant_binary_fun(const _Result& __v) : _M_val(__v) {}$/;"	f	struct:_Constant_binary_fun	access:public	signature:(const _Result& __v)
_Constant_binary_fun	/Users/lij/.vim/stl/stl_function.h	/^struct _Constant_binary_fun {$/;"	s
_Constant_binary_fun::_Constant_binary_fun	/Users/lij/.vim/stl/stl_function.h	/^  _Constant_binary_fun(const _Result& __v) : _M_val(__v) {}$/;"	f	struct:_Constant_binary_fun	access:public	signature:(const _Result& __v)
_Constant_binary_fun::_M_val	/Users/lij/.vim/stl/stl_function.h	/^  _Result _M_val;$/;"	m	struct:_Constant_binary_fun	access:public
_Constant_binary_fun::first_argument_type	/Users/lij/.vim/stl/stl_function.h	/^  typedef  _Arg1   first_argument_type;$/;"	t	struct:_Constant_binary_fun	access:public
_Constant_binary_fun::operator ()	/Users/lij/.vim/stl/stl_function.h	/^  const result_type& operator()(const _Arg1&, const _Arg2&) const {$/;"	f	struct:_Constant_binary_fun	access:public	signature:(const _Arg1&, const _Arg2&) const
_Constant_binary_fun::result_type	/Users/lij/.vim/stl/stl_function.h	/^  typedef  _Result result_type;$/;"	t	struct:_Constant_binary_fun	access:public
_Constant_binary_fun::second_argument_type	/Users/lij/.vim/stl/stl_function.h	/^  typedef  _Arg2   second_argument_type;$/;"	t	struct:_Constant_binary_fun	access:public
_Constant_unary_fun	/Users/lij/.vim/stl/stl_function.h	/^  _Constant_unary_fun(const result_type& __v) : _M_val(__v) {}$/;"	f	struct:_Constant_unary_fun	access:public	signature:(const result_type& __v)
_Constant_unary_fun	/Users/lij/.vim/stl/stl_function.h	/^struct _Constant_unary_fun {$/;"	s
_Constant_unary_fun::_Constant_unary_fun	/Users/lij/.vim/stl/stl_function.h	/^  _Constant_unary_fun(const result_type& __v) : _M_val(__v) {}$/;"	f	struct:_Constant_unary_fun	access:public	signature:(const result_type& __v)
_Constant_unary_fun::_M_val	/Users/lij/.vim/stl/stl_function.h	/^  result_type _M_val;$/;"	m	struct:_Constant_unary_fun	access:public
_Constant_unary_fun::argument_type	/Users/lij/.vim/stl/stl_function.h	/^  typedef _Argument argument_type;$/;"	t	struct:_Constant_unary_fun	access:public
_Constant_unary_fun::operator ()	/Users/lij/.vim/stl/stl_function.h	/^  const result_type& operator()(const _Argument&) const { return _M_val; }$/;"	f	struct:_Constant_unary_fun	access:public	signature:(const _Argument&) const
_Constant_unary_fun::result_type	/Users/lij/.vim/stl/stl_function.h	/^  typedef  _Result  result_type;$/;"	t	struct:_Constant_unary_fun	access:public
_Constant_void_fun	/Users/lij/.vim/stl/stl_function.h	/^  _Constant_void_fun(const result_type& __v) : _M_val(__v) {}$/;"	f	struct:_Constant_void_fun	access:public	signature:(const result_type& __v)
_Constant_void_fun	/Users/lij/.vim/stl/stl_function.h	/^struct _Constant_void_fun {$/;"	s
_Constant_void_fun::_Constant_void_fun	/Users/lij/.vim/stl/stl_function.h	/^  _Constant_void_fun(const result_type& __v) : _M_val(__v) {}$/;"	f	struct:_Constant_void_fun	access:public	signature:(const result_type& __v)
_Constant_void_fun::_M_val	/Users/lij/.vim/stl/stl_function.h	/^  result_type _M_val;$/;"	m	struct:_Constant_void_fun	access:public
_Constant_void_fun::operator ()	/Users/lij/.vim/stl/stl_function.h	/^  const result_type& operator()() const { return _M_val; }$/;"	f	struct:_Constant_void_fun	access:public	signature:() const
_Constant_void_fun::result_type	/Users/lij/.vim/stl/stl_function.h	/^  typedef _Result result_type;$/;"	t	struct:_Constant_void_fun	access:public
_Construct	/Users/lij/.vim/stl/stl_construct.h	/^inline void _Construct(_T1* __p) {$/;"	f	signature:(_T1* __p)
_Construct	/Users/lij/.vim/stl/stl_construct.h	/^inline void _Construct(_T1* __p, const _T2& __value) {$/;"	f	signature:(_T1* __p, const _T2& __value)
_Container	/Users/lij/.vim/stl/stl_hash_map.h	/^  typedef hash_map<_Key, _Tp, _HashFn, _EqKey, _Alloc> _Container;$/;"	t	class:insert_iterator	access:protected
_Container	/Users/lij/.vim/stl/stl_hash_map.h	/^  typedef hash_multimap<_Key, _Tp, _HashFn, _EqKey, _Alloc> _Container;$/;"	t	class:insert_iterator	access:protected
_Container	/Users/lij/.vim/stl/stl_hash_set.h	/^  typedef hash_multiset<_Value, _HashFcn, _EqualKey, _Alloc> _Container;$/;"	t	class:insert_iterator	access:protected
_Container	/Users/lij/.vim/stl/stl_hash_set.h	/^  typedef hash_set<_Value, _HashFcn, _EqualKey, _Alloc> _Container;$/;"	t	class:insert_iterator	access:protected
_Container	/Users/lij/.vim/stl/stl_slist.h	/^  typedef slist<_Tp, _Alloc> _Container;$/;"	t	class:insert_iterator	access:protected
_Container_concept_specification	/Users/lij/.vim/stl/container_concepts.h	/^struct _Container_concept_specification {$/;"	s
_Container_concept_specification::_Container_requirement_violation	/Users/lij/.vim/stl/container_concepts.h	/^_Container_requirement_violation(_Container __c) {$/;"	f	struct:_Container_concept_specification	access:public	signature:(_Container __c)
_Container_requirement_violation	/Users/lij/.vim/stl/container_concepts.h	/^_Container_requirement_violation(_Container __c) {$/;"	f	struct:_Container_concept_specification	access:public	signature:(_Container __c)
_Cstrptr	/Users/lij/.vim/stl/stl_rope.h	/^        typedef __GC_CONST _CharT* _Cstrptr;$/;"	t	class:rope	access:protected
_DefaultConstructible_concept_specification	/Users/lij/.vim/stl/concept_checks.h	/^struct _DefaultConstructible_concept_specification {$/;"	s
_DefaultConstructible_concept_specification::_DefaultConstructible_requirement_violation	/Users/lij/.vim/stl/concept_checks.h	/^  static void _DefaultConstructible_requirement_violation(_Type __a) {$/;"	f	struct:_DefaultConstructible_concept_specification	access:public	signature:(_Type __a)
_DefaultConstructible_requirement_violation	/Users/lij/.vim/stl/concept_checks.h	/^  static void _DefaultConstructible_requirement_violation(_Type __a) {$/;"	f	struct:_DefaultConstructible_concept_specification	access:public	signature:(_Type __a)
_Define_double	/Users/lij/.vim/stl/limits	/^#define _Define_double(/;"	d	file:
_Define_double	/Users/lij/.vim/stl/limits	/^#undef _Define_double$/;"	d	file:
_Define_float	/Users/lij/.vim/stl/limits	/^#define _Define_float(/;"	d	file:
_Define_float	/Users/lij/.vim/stl/limits	/^#undef _Define_float$/;"	d	file:
_Define_ldouble	/Users/lij/.vim/stl/limits	/^#define _Define_ldouble(/;"	d	file:
_Define_ldouble	/Users/lij/.vim/stl/limits	/^#undef _Define_ldouble$/;"	d	file:
_Deque_alloc_base	/Users/lij/.vim/stl/stl_deque.h	/^  _Deque_alloc_base(const allocator_type& __a)$/;"	f	class:_Deque_alloc_base	access:public	signature:(const allocator_type& __a)
_Deque_alloc_base	/Users/lij/.vim/stl/stl_deque.h	/^  _Deque_alloc_base(const allocator_type&) : _M_map(0), _M_map_size(0) {}$/;"	f	class:_Deque_alloc_base	access:public	signature:(const allocator_type&)
_Deque_alloc_base	/Users/lij/.vim/stl/stl_deque.h	/^class _Deque_alloc_base {$/;"	c
_Deque_alloc_base	/Users/lij/.vim/stl/stl_deque.h	/^class _Deque_alloc_base<_Tp, _Alloc, true>$/;"	c
_Deque_alloc_base::_Deque_alloc_base	/Users/lij/.vim/stl/stl_deque.h	/^  _Deque_alloc_base(const allocator_type& __a)$/;"	f	class:_Deque_alloc_base	access:public	signature:(const allocator_type& __a)
_Deque_alloc_base::_Deque_alloc_base	/Users/lij/.vim/stl/stl_deque.h	/^  _Deque_alloc_base(const allocator_type&) : _M_map(0), _M_map_size(0) {}$/;"	f	class:_Deque_alloc_base	access:public	signature:(const allocator_type&)
_Deque_alloc_base::_M_allocate_map	/Users/lij/.vim/stl/stl_deque.h	/^  _Tp** _M_allocate_map(size_t __n) $/;"	f	class:_Deque_alloc_base	access:protected	signature:(size_t __n)
_Deque_alloc_base::_M_allocate_node	/Users/lij/.vim/stl/stl_deque.h	/^  _Tp* _M_allocate_node() {$/;"	f	class:_Deque_alloc_base	access:protected	signature:()
_Deque_alloc_base::_M_deallocate_map	/Users/lij/.vim/stl/stl_deque.h	/^  void _M_deallocate_map(_Tp** __p, size_t __n) $/;"	f	class:_Deque_alloc_base	access:protected	signature:(_Tp** __p, size_t __n)
_Deque_alloc_base::_M_deallocate_node	/Users/lij/.vim/stl/stl_deque.h	/^  void _M_deallocate_node(_Tp* __p) {$/;"	f	class:_Deque_alloc_base	access:protected	signature:(_Tp* __p)
_Deque_alloc_base::_M_map	/Users/lij/.vim/stl/stl_deque.h	/^  _Tp** _M_map;$/;"	m	class:_Deque_alloc_base	access:protected
_Deque_alloc_base::_M_map_allocator	/Users/lij/.vim/stl/stl_deque.h	/^  _Map_allocator_type _M_map_allocator;$/;"	m	class:_Deque_alloc_base	access:protected
_Deque_alloc_base::_M_map_size	/Users/lij/.vim/stl/stl_deque.h	/^  size_t _M_map_size;$/;"	m	class:_Deque_alloc_base	access:protected
_Deque_alloc_base::_M_node_allocator	/Users/lij/.vim/stl/stl_deque.h	/^  allocator_type      _M_node_allocator;$/;"	m	class:_Deque_alloc_base	access:protected
_Deque_alloc_base::_Map_alloc_type	/Users/lij/.vim/stl/stl_deque.h	/^  typedef typename _Alloc_traits<_Tp*, _Alloc>::_Alloc_type _Map_alloc_type;$/;"	t	class:_Deque_alloc_base	access:protected
_Deque_alloc_base::_Map_allocator_type	/Users/lij/.vim/stl/stl_deque.h	/^          _Map_allocator_type;$/;"	t	class:_Deque_alloc_base	access:protected
_Deque_alloc_base::_Node_alloc_type	/Users/lij/.vim/stl/stl_deque.h	/^  typedef typename _Alloc_traits<_Tp, _Alloc>::_Alloc_type _Node_alloc_type;$/;"	t	class:_Deque_alloc_base	access:protected
_Deque_alloc_base::allocator_type	/Users/lij/.vim/stl/stl_deque.h	/^  typedef typename _Alloc_traits<_Tp,_Alloc>::allocator_type allocator_type;$/;"	t	class:_Deque_alloc_base	access:public
_Deque_alloc_base::get_allocator	/Users/lij/.vim/stl/stl_deque.h	/^  allocator_type get_allocator() const { return _M_node_allocator; }$/;"	f	class:_Deque_alloc_base	access:public	signature:() const
_Deque_alloc_base::get_allocator	/Users/lij/.vim/stl/stl_deque.h	/^  allocator_type get_allocator() const { return allocator_type(); }$/;"	f	class:_Deque_alloc_base	access:public	signature:() const
_Deque_base	/Users/lij/.vim/stl/stl_deque.h	/^  _Deque_base(const allocator_type& __a) $/;"	f	class:_Deque_base	access:public	signature:(const allocator_type& __a)
_Deque_base	/Users/lij/.vim/stl/stl_deque.h	/^  _Deque_base(const allocator_type& __a, size_t __num_elements)$/;"	f	class:_Deque_base	access:public	signature:(const allocator_type& __a, size_t __num_elements)
_Deque_base	/Users/lij/.vim/stl/stl_deque.h	/^  _Deque_base(const allocator_type&)$/;"	f	class:_Deque_base	access:public	signature:(const allocator_type&)
_Deque_base	/Users/lij/.vim/stl/stl_deque.h	/^  _Deque_base(const allocator_type&, size_t __num_elements)$/;"	f	class:_Deque_base	access:public	signature:(const allocator_type&, size_t __num_elements)
_Deque_base	/Users/lij/.vim/stl/stl_deque.h	/^class _Deque_base {$/;"	c
_Deque_base	/Users/lij/.vim/stl/stl_deque.h	/^class _Deque_base$/;"	c	inherits:_Deque_alloc_base
_Deque_base::_Base	/Users/lij/.vim/stl/stl_deque.h	/^          _Base;$/;"	t	class:_Deque_base	access:public
_Deque_base::_Deque_base	/Users/lij/.vim/stl/stl_deque.h	/^  _Deque_base(const allocator_type& __a) $/;"	f	class:_Deque_base	access:public	signature:(const allocator_type& __a)
_Deque_base::_Deque_base	/Users/lij/.vim/stl/stl_deque.h	/^  _Deque_base(const allocator_type& __a, size_t __num_elements)$/;"	f	class:_Deque_base	access:public	signature:(const allocator_type& __a, size_t __num_elements)
_Deque_base::_Deque_base	/Users/lij/.vim/stl/stl_deque.h	/^  _Deque_base(const allocator_type&)$/;"	f	class:_Deque_base	access:public	signature:(const allocator_type&)
_Deque_base::_Deque_base	/Users/lij/.vim/stl/stl_deque.h	/^  _Deque_base(const allocator_type&, size_t __num_elements)$/;"	f	class:_Deque_base	access:public	signature:(const allocator_type&, size_t __num_elements)
_Deque_base::_M_allocate_map	/Users/lij/.vim/stl/stl_deque.h	/^  _Tp** _M_allocate_map(size_t __n) $/;"	f	class:_Deque_base	access:protected	signature:(size_t __n)
_Deque_base::_M_allocate_node	/Users/lij/.vim/stl/stl_deque.h	/^  _Tp* _M_allocate_node()$/;"	f	class:_Deque_base	access:protected	signature:()
_Deque_base::_M_create_nodes	/Users/lij/.vim/stl/stl_deque.h	/^  void _M_create_nodes(_Tp** __nstart, _Tp** __nfinish);$/;"	p	class:_Deque_base	access:protected	signature:(_Tp** __nstart, _Tp** __nfinish)
_Deque_base::_M_create_nodes	/Users/lij/.vim/stl/stl_deque.h	/^void _Deque_base<_Tp,_Alloc>::_M_create_nodes(_Tp** __nstart, _Tp** __nfinish)$/;"	f	class:_Deque_base	signature:(_Tp** __nstart, _Tp** __nfinish)
_Deque_base::_M_deallocate_map	/Users/lij/.vim/stl/stl_deque.h	/^  void _M_deallocate_map(_Tp** __p, size_t __n) $/;"	f	class:_Deque_base	access:protected	signature:(_Tp** __p, size_t __n)
_Deque_base::_M_deallocate_node	/Users/lij/.vim/stl/stl_deque.h	/^  void _M_deallocate_node(_Tp* __p)$/;"	f	class:_Deque_base	access:protected	signature:(_Tp* __p)
_Deque_base::_M_destroy_nodes	/Users/lij/.vim/stl/stl_deque.h	/^  void _M_destroy_nodes(_Tp** __nstart, _Tp** __nfinish);$/;"	p	class:_Deque_base	access:protected	signature:(_Tp** __nstart, _Tp** __nfinish)
_Deque_base::_M_destroy_nodes	/Users/lij/.vim/stl/stl_deque.h	/^_Deque_base<_Tp,_Alloc>::_M_destroy_nodes(_Tp** __nstart, _Tp** __nfinish)$/;"	f	class:_Deque_base	signature:(_Tp** __nstart, _Tp** __nfinish)
_Deque_base::_M_finish	/Users/lij/.vim/stl/stl_deque.h	/^  iterator _M_finish;$/;"	m	class:_Deque_base	access:protected
_Deque_base::_M_initialize_map	/Users/lij/.vim/stl/stl_deque.h	/^  void _M_initialize_map(size_t);$/;"	p	class:_Deque_base	access:protected	signature:(size_t)
_Deque_base::_M_initialize_map	/Users/lij/.vim/stl/stl_deque.h	/^_Deque_base<_Tp,_Alloc>::_M_initialize_map(size_t __num_elements)$/;"	f	class:_Deque_base	signature:(size_t __num_elements)
_Deque_base::_M_map	/Users/lij/.vim/stl/stl_deque.h	/^  _Tp** _M_map;$/;"	m	class:_Deque_base	access:protected
_Deque_base::_M_map_size	/Users/lij/.vim/stl/stl_deque.h	/^  size_t _M_map_size;  $/;"	m	class:_Deque_base	access:protected
_Deque_base::_M_start	/Users/lij/.vim/stl/stl_deque.h	/^  iterator _M_start;$/;"	m	class:_Deque_base	access:protected
_Deque_base::_Map_alloc_type	/Users/lij/.vim/stl/stl_deque.h	/^  typedef simple_alloc<_Tp*, _Alloc> _Map_alloc_type;$/;"	t	class:_Deque_base	access:protected
_Deque_base::_Node_alloc_type	/Users/lij/.vim/stl/stl_deque.h	/^  typedef simple_alloc<_Tp, _Alloc>  _Node_alloc_type;$/;"	t	class:_Deque_base	access:protected
_Deque_base::_S_initial_map_size	/Users/lij/.vim/stl/stl_deque.h	/^  enum { _S_initial_map_size = 8 };$/;"	e	enum:_Deque_base::__anon18
_Deque_base::_S_initial_map_size	/Users/lij/.vim/stl/stl_deque.h	/^  enum { _S_initial_map_size = 8 };$/;"	e	enum:_Deque_base::__anon19
_Deque_base::allocator_type	/Users/lij/.vim/stl/stl_deque.h	/^  typedef _Alloc allocator_type;$/;"	t	class:_Deque_base	access:public
_Deque_base::allocator_type	/Users/lij/.vim/stl/stl_deque.h	/^  typedef typename _Base::allocator_type allocator_type;$/;"	t	class:_Deque_base	access:public
_Deque_base::const_iterator	/Users/lij/.vim/stl/stl_deque.h	/^  typedef _Deque_iterator<_Tp,const _Tp&,const _Tp*> const_iterator;$/;"	t	class:_Deque_base	access:public
_Deque_base::get_allocator	/Users/lij/.vim/stl/stl_deque.h	/^  allocator_type get_allocator() const { return allocator_type(); }$/;"	f	class:_Deque_base	access:public	signature:() const
_Deque_base::iterator	/Users/lij/.vim/stl/stl_deque.h	/^  typedef _Deque_iterator<_Tp,_Tp&,_Tp*>             iterator;$/;"	t	class:_Deque_base	access:public
_Deque_base::~_Deque_base	/Users/lij/.vim/stl/stl_deque.h	/^  ~_Deque_base();    $/;"	p	class:_Deque_base	access:public	signature:()
_Deque_base::~_Deque_base	/Users/lij/.vim/stl/stl_deque.h	/^_Deque_base<_Tp,_Alloc>::~_Deque_base() {$/;"	f	class:_Deque_base	signature:()
_Deque_iterator	/Users/lij/.vim/stl/stl_deque.h	/^  _Deque_iterator() : _M_cur(0), _M_first(0), _M_last(0), _M_node(0) {}$/;"	f	struct:_Deque_iterator	access:public	signature:()
_Deque_iterator	/Users/lij/.vim/stl/stl_deque.h	/^  _Deque_iterator(_Tp* __x, _Map_pointer __y) $/;"	f	struct:_Deque_iterator	access:public	signature:(_Tp* __x, _Map_pointer __y)
_Deque_iterator	/Users/lij/.vim/stl/stl_deque.h	/^  _Deque_iterator(const iterator& __x)$/;"	f	struct:_Deque_iterator	access:public	signature:(const iterator& __x)
_Deque_iterator	/Users/lij/.vim/stl/stl_deque.h	/^struct _Deque_iterator {$/;"	s
_Deque_iterator::_Deque_iterator	/Users/lij/.vim/stl/stl_deque.h	/^  _Deque_iterator() : _M_cur(0), _M_first(0), _M_last(0), _M_node(0) {}$/;"	f	struct:_Deque_iterator	access:public	signature:()
_Deque_iterator::_Deque_iterator	/Users/lij/.vim/stl/stl_deque.h	/^  _Deque_iterator(_Tp* __x, _Map_pointer __y) $/;"	f	struct:_Deque_iterator	access:public	signature:(_Tp* __x, _Map_pointer __y)
_Deque_iterator::_Deque_iterator	/Users/lij/.vim/stl/stl_deque.h	/^  _Deque_iterator(const iterator& __x)$/;"	f	struct:_Deque_iterator	access:public	signature:(const iterator& __x)
_Deque_iterator::_M_cur	/Users/lij/.vim/stl/stl_deque.h	/^  _Tp* _M_cur;$/;"	m	struct:_Deque_iterator	access:public
_Deque_iterator::_M_first	/Users/lij/.vim/stl/stl_deque.h	/^  _Tp* _M_first;$/;"	m	struct:_Deque_iterator	access:public
_Deque_iterator::_M_last	/Users/lij/.vim/stl/stl_deque.h	/^  _Tp* _M_last;$/;"	m	struct:_Deque_iterator	access:public
_Deque_iterator::_M_node	/Users/lij/.vim/stl/stl_deque.h	/^  _Map_pointer _M_node;$/;"	m	struct:_Deque_iterator	access:public
_Deque_iterator::_M_set_node	/Users/lij/.vim/stl/stl_deque.h	/^  void _M_set_node(_Map_pointer __new_node) {$/;"	f	struct:_Deque_iterator	access:public	signature:(_Map_pointer __new_node)
_Deque_iterator::_Map_pointer	/Users/lij/.vim/stl/stl_deque.h	/^  typedef _Tp** _Map_pointer;$/;"	t	struct:_Deque_iterator	access:public
_Deque_iterator::_S_buffer_size	/Users/lij/.vim/stl/stl_deque.h	/^  static size_t _S_buffer_size() { return __deque_buf_size(sizeof(_Tp)); }$/;"	f	struct:_Deque_iterator	access:public	signature:()
_Deque_iterator::_Self	/Users/lij/.vim/stl/stl_deque.h	/^  typedef _Deque_iterator _Self;$/;"	t	struct:_Deque_iterator	access:public
_Deque_iterator::const_iterator	/Users/lij/.vim/stl/stl_deque.h	/^  typedef _Deque_iterator<_Tp, const _Tp&, const _Tp*> const_iterator;$/;"	t	struct:_Deque_iterator	access:public
_Deque_iterator::difference_type	/Users/lij/.vim/stl/stl_deque.h	/^  typedef ptrdiff_t difference_type;$/;"	t	struct:_Deque_iterator	access:public
_Deque_iterator::iterator	/Users/lij/.vim/stl/stl_deque.h	/^  typedef _Deque_iterator<_Tp, _Tp&, _Tp*>             iterator;$/;"	t	struct:_Deque_iterator	access:public
_Deque_iterator::iterator_category	/Users/lij/.vim/stl/stl_deque.h	/^  typedef random_access_iterator_tag iterator_category;$/;"	t	struct:_Deque_iterator	access:public
_Deque_iterator::operator !=	/Users/lij/.vim/stl/stl_deque.h	/^  bool operator!=(const _Self& __x) const { return !(*this == __x); }$/;"	f	struct:_Deque_iterator	access:public	signature:(const _Self& __x) const
_Deque_iterator::operator *	/Users/lij/.vim/stl/stl_deque.h	/^  reference operator*() const { return *_M_cur; }$/;"	f	struct:_Deque_iterator	access:public	signature:() const
_Deque_iterator::operator +	/Users/lij/.vim/stl/stl_deque.h	/^  _Self operator+(difference_type __n) const$/;"	f	struct:_Deque_iterator	access:public	signature:(difference_type __n) const
_Deque_iterator::operator ++	/Users/lij/.vim/stl/stl_deque.h	/^  _Self operator++(int)  {$/;"	f	struct:_Deque_iterator	access:public	signature:(int)
_Deque_iterator::operator ++	/Users/lij/.vim/stl/stl_deque.h	/^  _Self& operator++() {$/;"	f	struct:_Deque_iterator	access:public	signature:()
_Deque_iterator::operator +=	/Users/lij/.vim/stl/stl_deque.h	/^  _Self& operator+=(difference_type __n)$/;"	f	struct:_Deque_iterator	access:public	signature:(difference_type __n)
_Deque_iterator::operator -	/Users/lij/.vim/stl/stl_deque.h	/^  _Self operator-(difference_type __n) const {$/;"	f	struct:_Deque_iterator	access:public	signature:(difference_type __n) const
_Deque_iterator::operator -	/Users/lij/.vim/stl/stl_deque.h	/^  difference_type operator-(const _Self& __x) const {$/;"	f	struct:_Deque_iterator	access:public	signature:(const _Self& __x) const
_Deque_iterator::operator --	/Users/lij/.vim/stl/stl_deque.h	/^  _Self operator--(int) {$/;"	f	struct:_Deque_iterator	access:public	signature:(int)
_Deque_iterator::operator --	/Users/lij/.vim/stl/stl_deque.h	/^  _Self& operator--() {$/;"	f	struct:_Deque_iterator	access:public	signature:()
_Deque_iterator::operator -=	/Users/lij/.vim/stl/stl_deque.h	/^  _Self& operator-=(difference_type __n) { return *this += -__n; }$/;"	f	struct:_Deque_iterator	access:public	signature:(difference_type __n)
_Deque_iterator::operator ->	/Users/lij/.vim/stl/stl_deque.h	/^  pointer operator->() const { return _M_cur; }$/;"	f	struct:_Deque_iterator	access:public	signature:() const
_Deque_iterator::operator <	/Users/lij/.vim/stl/stl_deque.h	/^  bool operator<(const _Self& __x) const {$/;"	f	struct:_Deque_iterator	access:public	signature:(const _Self& __x) const
_Deque_iterator::operator <=	/Users/lij/.vim/stl/stl_deque.h	/^  bool operator<=(const _Self& __x) const { return !(__x < *this); }$/;"	f	struct:_Deque_iterator	access:public	signature:(const _Self& __x) const
_Deque_iterator::operator ==	/Users/lij/.vim/stl/stl_deque.h	/^  bool operator==(const _Self& __x) const { return _M_cur == __x._M_cur; }$/;"	f	struct:_Deque_iterator	access:public	signature:(const _Self& __x) const
_Deque_iterator::operator >	/Users/lij/.vim/stl/stl_deque.h	/^  bool operator>(const _Self& __x) const  { return __x < *this; }$/;"	f	struct:_Deque_iterator	access:public	signature:(const _Self& __x) const
_Deque_iterator::operator >=	/Users/lij/.vim/stl/stl_deque.h	/^  bool operator>=(const _Self& __x) const { return !(*this < __x); }$/;"	f	struct:_Deque_iterator	access:public	signature:(const _Self& __x) const
_Deque_iterator::operator []	/Users/lij/.vim/stl/stl_deque.h	/^  reference operator[](difference_type __n) const { return *(*this + __n); }$/;"	f	struct:_Deque_iterator	access:public	signature:(difference_type __n) const
_Deque_iterator::pointer	/Users/lij/.vim/stl/stl_deque.h	/^  typedef _Ptr pointer;$/;"	t	struct:_Deque_iterator	access:public
_Deque_iterator::reference	/Users/lij/.vim/stl/stl_deque.h	/^  typedef _Ref reference;$/;"	t	struct:_Deque_iterator	access:public
_Deque_iterator::size_type	/Users/lij/.vim/stl/stl_deque.h	/^  typedef size_t size_type;$/;"	t	struct:_Deque_iterator	access:public
_Deque_iterator::value_type	/Users/lij/.vim/stl/stl_deque.h	/^  typedef _Tp value_type;$/;"	t	struct:_Deque_iterator	access:public
_Destroy	/Users/lij/.vim/stl/stl_construct.h	/^inline void _Destroy(_ForwardIterator __first, _ForwardIterator __last) {$/;"	f	signature:(_ForwardIterator __first, _ForwardIterator __last)
_Destroy	/Users/lij/.vim/stl/stl_construct.h	/^inline void _Destroy(_Tp* __pointer) {$/;"	f	signature:(_Tp* __pointer)
_Destroy	/Users/lij/.vim/stl/stl_construct.h	/^inline void _Destroy(char*, char*) {}$/;"	f	signature:(char*, char*)
_Destroy	/Users/lij/.vim/stl/stl_construct.h	/^inline void _Destroy(double*, double*) {}$/;"	f	signature:(double*, double*)
_Destroy	/Users/lij/.vim/stl/stl_construct.h	/^inline void _Destroy(float*, float*) {}$/;"	f	signature:(float*, float*)
_Destroy	/Users/lij/.vim/stl/stl_construct.h	/^inline void _Destroy(int*, int*) {}$/;"	f	signature:(int*, int*)
_Destroy	/Users/lij/.vim/stl/stl_construct.h	/^inline void _Destroy(long*, long*) {}$/;"	f	signature:(long*, long*)
_Destroy	/Users/lij/.vim/stl/stl_construct.h	/^inline void _Destroy(wchar_t*, wchar_t*) {}$/;"	f	signature:(wchar_t*, wchar_t*)
_Distance	/Users/lij/.vim/stl/stl_algobase.h	/^          _Distance;$/;"	t	struct:__copy_backward_dispatch	access:public
_ERROR_IN_STL_CONTAINER	/Users/lij/.vim/stl/container_concepts.h	/^struct _ERROR_IN_STL_CONTAINER {$/;"	s
_ERROR_IN_STL_CONTAINER::__begin_iterator_accessor_requirement_violation	/Users/lij/.vim/stl/container_concepts.h	/^  __begin_iterator_accessor_requirement_violation(_Container __c) {$/;"	f	struct:_ERROR_IN_STL_CONTAINER	access:public	signature:(_Container __c)
_ERROR_IN_STL_CONTAINER::__const_begin_iterator_accessor_requirement_violation	/Users/lij/.vim/stl/container_concepts.h	/^  __const_begin_iterator_accessor_requirement_violation(const _Container& __c) {$/;"	f	struct:_ERROR_IN_STL_CONTAINER	access:public	signature:(const _Container& __c)
_ERROR_IN_STL_CONTAINER::__const_end_iterator_accessor_requirement_violation	/Users/lij/.vim/stl/container_concepts.h	/^  __const_end_iterator_accessor_requirement_violation(const _Container& __c) {$/;"	f	struct:_ERROR_IN_STL_CONTAINER	access:public	signature:(const _Container& __c)
_ERROR_IN_STL_CONTAINER::__const_rbegin_iterator_accessor_requirement_violation	/Users/lij/.vim/stl/container_concepts.h	/^  __const_rbegin_iterator_accessor_requirement_violation(const _Container& __c) {$/;"	f	struct:_ERROR_IN_STL_CONTAINER	access:public	signature:(const _Container& __c)
_ERROR_IN_STL_CONTAINER::__const_rend_iterator_accessor_requirement_violation	/Users/lij/.vim/stl/container_concepts.h	/^  __const_rend_iterator_accessor_requirement_violation(const _Container& __c) {$/;"	f	struct:_ERROR_IN_STL_CONTAINER	access:public	signature:(const _Container& __c)
_ERROR_IN_STL_CONTAINER::__empty_function_must_be_const	/Users/lij/.vim/stl/container_concepts.h	/^  __empty_function_must_be_const(const _Container& __c) {$/;"	f	struct:_ERROR_IN_STL_CONTAINER	access:public	signature:(const _Container& __c)
_ERROR_IN_STL_CONTAINER::__empty_function_requirement_violation	/Users/lij/.vim/stl/container_concepts.h	/^  __empty_function_requirement_violation(_Container& __c) {$/;"	f	struct:_ERROR_IN_STL_CONTAINER	access:public	signature:(_Container& __c)
_ERROR_IN_STL_CONTAINER::__end_iterator_accessor_requirement_violation	/Users/lij/.vim/stl/container_concepts.h	/^  __end_iterator_accessor_requirement_violation(_Container __c) {$/;"	f	struct:_ERROR_IN_STL_CONTAINER	access:public	signature:(_Container __c)
_ERROR_IN_STL_CONTAINER::__max_size_function_must_be_const	/Users/lij/.vim/stl/container_concepts.h	/^  __max_size_function_must_be_const(const _Container& __c) {$/;"	f	struct:_ERROR_IN_STL_CONTAINER	access:public	signature:(const _Container& __c)
_ERROR_IN_STL_CONTAINER::__max_size_function_requirement_violation	/Users/lij/.vim/stl/container_concepts.h	/^  __max_size_function_requirement_violation(_Container& __c) {$/;"	f	struct:_ERROR_IN_STL_CONTAINER	access:public	signature:(_Container& __c)
_ERROR_IN_STL_CONTAINER::__rbegin_iterator_accessor_requirement_violation	/Users/lij/.vim/stl/container_concepts.h	/^  __rbegin_iterator_accessor_requirement_violation(_Container __c) {$/;"	f	struct:_ERROR_IN_STL_CONTAINER	access:public	signature:(_Container __c)
_ERROR_IN_STL_CONTAINER::__rend_iterator_accessor_requirement_violation	/Users/lij/.vim/stl/container_concepts.h	/^  __rend_iterator_accessor_requirement_violation(_Container __c) {$/;"	f	struct:_ERROR_IN_STL_CONTAINER	access:public	signature:(_Container __c)
_ERROR_IN_STL_CONTAINER::__size_function_must_be_const	/Users/lij/.vim/stl/container_concepts.h	/^  __size_function_must_be_const(const _Container& __c) {$/;"	f	struct:_ERROR_IN_STL_CONTAINER	access:public	signature:(const _Container& __c)
_ERROR_IN_STL_CONTAINER::__size_function_requirement_violation	/Users/lij/.vim/stl/container_concepts.h	/^  __size_function_requirement_violation(_Container& __c) {$/;"	f	struct:_ERROR_IN_STL_CONTAINER	access:public	signature:(_Container& __c)
_ERROR_IN_STL_CONTAINER::__swap_function_requirement_violation	/Users/lij/.vim/stl/container_concepts.h	/^  __swap_function_requirement_violation(_Container& __c) {$/;"	f	struct:_ERROR_IN_STL_CONTAINER	access:public	signature:(_Container& __c)
_ERROR_IN_STL_SEQ	/Users/lij/.vim/stl/sequence_concepts.h	/^struct _ERROR_IN_STL_SEQ {$/;"	s
_ERROR_IN_STL_SEQ::__back_function_requirement_violation	/Users/lij/.vim/stl/sequence_concepts.h	/^  __back_function_requirement_violation(_XX& __s) {$/;"	f	struct:_ERROR_IN_STL_SEQ	access:public	signature:(_XX& __s)
_ERROR_IN_STL_SEQ::__const_back_function_requirement_violation	/Users/lij/.vim/stl/sequence_concepts.h	/^  __const_back_function_requirement_violation(const _XX& __s) {$/;"	f	struct:_ERROR_IN_STL_SEQ	access:public	signature:(const _XX& __s)
_ERROR_IN_STL_SEQ::__const_front_function_requirement_violation	/Users/lij/.vim/stl/sequence_concepts.h	/^  __const_front_function_requirement_violation(const _XX& __s) {$/;"	f	struct:_ERROR_IN_STL_SEQ	access:public	signature:(const _XX& __s)
_ERROR_IN_STL_SEQ::__erase_function_requirement_violation	/Users/lij/.vim/stl/sequence_concepts.h	/^  __erase_function_requirement_violation(_XX& __s) {$/;"	f	struct:_ERROR_IN_STL_SEQ	access:public	signature:(_XX& __s)
_ERROR_IN_STL_SEQ::__fill_constructor_requirement_violation	/Users/lij/.vim/stl/sequence_concepts.h	/^  __fill_constructor_requirement_violation(_XX& __s) {$/;"	f	struct:_ERROR_IN_STL_SEQ	access:public	signature:(_XX& __s)
_ERROR_IN_STL_SEQ::__fill_default_constructor_requirement_violation	/Users/lij/.vim/stl/sequence_concepts.h	/^  __fill_default_constructor_requirement_violation(_XX& __s) {$/;"	f	struct:_ERROR_IN_STL_SEQ	access:public	signature:(_XX& __s)
_ERROR_IN_STL_SEQ::__fill_insert_function_requirement_violation	/Users/lij/.vim/stl/sequence_concepts.h	/^  __fill_insert_function_requirement_violation(_XX& __s) {$/;"	f	struct:_ERROR_IN_STL_SEQ	access:public	signature:(_XX& __s)
_ERROR_IN_STL_SEQ::__front_function_requirement_violation	/Users/lij/.vim/stl/sequence_concepts.h	/^  __front_function_requirement_violation(_XX& __s) {$/;"	f	struct:_ERROR_IN_STL_SEQ	access:public	signature:(_XX& __s)
_ERROR_IN_STL_SEQ::__insert_element_function_requirement_violation	/Users/lij/.vim/stl/sequence_concepts.h	/^  __insert_element_function_requirement_violation(_XX& __s) {$/;"	f	struct:_ERROR_IN_STL_SEQ	access:public	signature:(_XX& __s)
_ERROR_IN_STL_SEQ::__insert_function_requirement_violation	/Users/lij/.vim/stl/sequence_concepts.h	/^  __insert_function_requirement_violation(_XX& __s) {$/;"	f	struct:_ERROR_IN_STL_SEQ	access:public	signature:(_XX& __s)
_ERROR_IN_STL_SEQ::__pop_back_function_requirement_violation	/Users/lij/.vim/stl/sequence_concepts.h	/^  __pop_back_function_requirement_violation(_XX& __s) {$/;"	f	struct:_ERROR_IN_STL_SEQ	access:public	signature:(_XX& __s)
_ERROR_IN_STL_SEQ::__pop_front_function_requirement_violation	/Users/lij/.vim/stl/sequence_concepts.h	/^  __pop_front_function_requirement_violation(_XX& __s) {$/;"	f	struct:_ERROR_IN_STL_SEQ	access:public	signature:(_XX& __s)
_ERROR_IN_STL_SEQ::__push_back_function_requirement_violation	/Users/lij/.vim/stl/sequence_concepts.h	/^  __push_back_function_requirement_violation(_XX& __s) {$/;"	f	struct:_ERROR_IN_STL_SEQ	access:public	signature:(_XX& __s)
_ERROR_IN_STL_SEQ::__push_front_function_requirement_violation	/Users/lij/.vim/stl/sequence_concepts.h	/^  __push_front_function_requirement_violation(_XX& __s) {$/;"	f	struct:_ERROR_IN_STL_SEQ	access:public	signature:(_XX& __s)
_ERROR_IN_STL_SEQ::__range_constructor_requirement_violation	/Users/lij/.vim/stl/sequence_concepts.h	/^  __range_constructor_requirement_violation(_XX& __s) {$/;"	f	struct:_ERROR_IN_STL_SEQ	access:public	signature:(_XX& __s)
_ERROR_IN_STL_SEQ::__range_erase_function_requirement_violation	/Users/lij/.vim/stl/sequence_concepts.h	/^  __range_erase_function_requirement_violation(_XX& __s) {$/;"	f	struct:_ERROR_IN_STL_SEQ	access:public	signature:(_XX& __s)
_ERROR_IN_STL_SEQ::__range_insert_function_requirement_violation	/Users/lij/.vim/stl/sequence_concepts.h	/^  __range_insert_function_requirement_violation(_XX& __s) {$/;"	f	struct:_ERROR_IN_STL_SEQ	access:public	signature:(_XX& __s)
_ERROR_IN_STL_SEQ::__unconditional_insert_element_function_requirement_violation	/Users/lij/.vim/stl/sequence_concepts.h	/^  __unconditional_insert_element_function_requirement_violation(_XX& __s) {$/;"	f	struct:_ERROR_IN_STL_SEQ	access:public	signature:(_XX& __s)
_Eq_int_traits	/Users/lij/.vim/stl/stl_ctraits_fns.h	/^struct _Eq_int_traits$/;"	s	inherits:binary_function
_Eq_int_traits::operator ()	/Users/lij/.vim/stl/stl_ctraits_fns.h	/^  bool operator()(const typename _Traits::char_type& __x,$/;"	f	struct:_Eq_int_traits	access:public	signature:(const typename _Traits::char_type& __x, const typename _Traits::int_type& __y) const
_Eq_traits	/Users/lij/.vim/stl/stl_ctraits_fns.h	/^struct _Eq_traits$/;"	s	inherits:binary_function
_Eq_traits::operator ()	/Users/lij/.vim/stl/stl_ctraits_fns.h	/^  bool operator()(const typename _Traits::char_type& __x,$/;"	f	struct:_Eq_traits	access:public	signature:(const typename _Traits::char_type& __x, const typename _Traits::char_type& __y) const
_EqualityComparable_concept_specification	/Users/lij/.vim/stl/concept_checks.h	/^struct _EqualityComparable_concept_specification {$/;"	s
_EqualityComparable_concept_specification::_EqualityComparable_requirement_violation	/Users/lij/.vim/stl/concept_checks.h	/^  static void _EqualityComparable_requirement_violation(_Type __a) {$/;"	f	struct:_EqualityComparable_concept_specification	access:public	signature:(_Type __a)
_EqualityComparable_requirement_violation	/Users/lij/.vim/stl/concept_checks.h	/^  static void _EqualityComparable_requirement_violation(_Type __a) {$/;"	f	struct:_EqualityComparable_concept_specification	access:public	signature:(_Type __a)
_Exception	/Users/lij/.vim/stl/stl_exception.h	/^class _Exception {$/;"	c
_Find_first	/Users/lij/.vim/stl/bitset	/^  size_t _Find_first() const $/;"	f	class:bitset	access:public	signature:() const
_Find_next	/Users/lij/.vim/stl/bitset	/^  size_t _Find_next( size_t __prev ) const $/;"	f	class:bitset	access:public	signature:( size_t __prev ) const
_First_one	/Users/lij/.vim/stl/bitset	/^struct _First_one {$/;"	s	file:
_First_one::_S_first_one	/Users/lij/.vim/stl/bitset	/^  static unsigned char _S_first_one[256];$/;"	m	struct:_First_one	file:	access:public
_First_one::_S_first_one	/Users/lij/.vim/stl/bitset	/^unsigned char _First_one<__dummy>::_S_first_one[] = {$/;"	m	class:_First_one	file:
_Floating_limits	/Users/lij/.vim/stl/limits	/^class _Floating_limits : public _Numeric_limits_base<__number>$/;"	c	file:	inherits:_Numeric_limits_base
_Floating_limits::__STL_DECLARE_LIMITS_MEMBER	/Users/lij/.vim/stl/limits	/^  __STL_DECLARE_LIMITS_MEMBER(bool, has_denorm_loss,   false);$/;"	p	class:_Floating_limits	file:	access:public	signature:(bool, has_denorm_loss, false)
_Floating_limits::__STL_DECLARE_LIMITS_MEMBER	/Users/lij/.vim/stl/limits	/^  __STL_DECLARE_LIMITS_MEMBER(bool, has_infinity,      true);$/;"	p	class:_Floating_limits	file:	access:public	signature:(bool, has_infinity, true)
_Floating_limits::__STL_DECLARE_LIMITS_MEMBER	/Users/lij/.vim/stl/limits	/^  __STL_DECLARE_LIMITS_MEMBER(bool, has_quiet_NaN,     true);$/;"	p	class:_Floating_limits	file:	access:public	signature:(bool, has_quiet_NaN, true)
_Floating_limits::__STL_DECLARE_LIMITS_MEMBER	/Users/lij/.vim/stl/limits	/^  __STL_DECLARE_LIMITS_MEMBER(bool, has_signaling_NaN, true);$/;"	p	class:_Floating_limits	file:	access:public	signature:(bool, has_signaling_NaN, true)
_Floating_limits::__STL_DECLARE_LIMITS_MEMBER	/Users/lij/.vim/stl/limits	/^  __STL_DECLARE_LIMITS_MEMBER(bool, is_bounded,      true);$/;"	p	class:_Floating_limits	file:	access:public	signature:(bool, is_bounded, true)
_Floating_limits::__STL_DECLARE_LIMITS_MEMBER	/Users/lij/.vim/stl/limits	/^  __STL_DECLARE_LIMITS_MEMBER(bool, is_iec559,       __IsIEC559);$/;"	p	class:_Floating_limits	file:	access:public	signature:(bool, is_iec559, __IsIEC559)
_Floating_limits::__STL_DECLARE_LIMITS_MEMBER	/Users/lij/.vim/stl/limits	/^  __STL_DECLARE_LIMITS_MEMBER(bool, is_signed, true);$/;"	p	class:_Floating_limits	file:	access:public	signature:(bool, is_signed, true)
_Floating_limits::__STL_DECLARE_LIMITS_MEMBER	/Users/lij/.vim/stl/limits	/^  __STL_DECLARE_LIMITS_MEMBER(bool, is_specialized, true);$/;"	p	class:_Floating_limits	file:	access:public	signature:(bool, is_specialized, true)
_Floating_limits::__STL_DECLARE_LIMITS_MEMBER	/Users/lij/.vim/stl/limits	/^  __STL_DECLARE_LIMITS_MEMBER(bool, tinyness_before, false);$/;"	p	class:_Floating_limits	file:	access:public	signature:(bool, tinyness_before, false)
_Floating_limits::__STL_DECLARE_LIMITS_MEMBER	/Users/lij/.vim/stl/limits	/^  __STL_DECLARE_LIMITS_MEMBER(bool, traps,           true);$/;"	p	class:_Floating_limits	file:	access:public	signature:(bool, traps, true)
_Floating_limits::__STL_DECLARE_LIMITS_MEMBER	/Users/lij/.vim/stl/limits	/^  __STL_DECLARE_LIMITS_MEMBER(float_denorm_style,$/;"	p	class:_Floating_limits	file:	access:public	signature:(float_denorm_style, has_denorm, denorm_indeterminate)
_Floating_limits::__STL_DECLARE_LIMITS_MEMBER	/Users/lij/.vim/stl/limits	/^  __STL_DECLARE_LIMITS_MEMBER(float_round_style, round_style, __RoundStyle);$/;"	p	class:_Floating_limits	file:	access:public	signature:(float_round_style, round_style, __RoundStyle)
_Floating_limits::__STL_DECLARE_LIMITS_MEMBER	/Users/lij/.vim/stl/limits	/^  __STL_DECLARE_LIMITS_MEMBER(int, digits,   __Digits);$/;"	p	class:_Floating_limits	file:	access:public	signature:(int, digits, __Digits)
_Floating_limits::__STL_DECLARE_LIMITS_MEMBER	/Users/lij/.vim/stl/limits	/^  __STL_DECLARE_LIMITS_MEMBER(int, digits10, __Digits10);$/;"	p	class:_Floating_limits	file:	access:public	signature:(int, digits10, __Digits10)
_Floating_limits::__STL_DECLARE_LIMITS_MEMBER	/Users/lij/.vim/stl/limits	/^  __STL_DECLARE_LIMITS_MEMBER(int, max_exponent,   __MaxExp);$/;"	p	class:_Floating_limits	file:	access:public	signature:(int, max_exponent, __MaxExp)
_Floating_limits::__STL_DECLARE_LIMITS_MEMBER	/Users/lij/.vim/stl/limits	/^  __STL_DECLARE_LIMITS_MEMBER(int, max_exponent10, __MaxExp10);$/;"	p	class:_Floating_limits	file:	access:public	signature:(int, max_exponent10, __MaxExp10)
_Floating_limits::__STL_DECLARE_LIMITS_MEMBER	/Users/lij/.vim/stl/limits	/^  __STL_DECLARE_LIMITS_MEMBER(int, min_exponent,   __MinExp);$/;"	p	class:_Floating_limits	file:	access:public	signature:(int, min_exponent, __MinExp)
_Floating_limits::__STL_DECLARE_LIMITS_MEMBER	/Users/lij/.vim/stl/limits	/^  __STL_DECLARE_LIMITS_MEMBER(int, min_exponent10, __MinExp10);$/;"	p	class:_Floating_limits	file:	access:public	signature:(int, min_exponent10, __MinExp10)
_Floating_limits::__STL_DECLARE_LIMITS_MEMBER	/Users/lij/.vim/stl/limits	/^  __STL_DECLARE_LIMITS_MEMBER(int, radix, 2);$/;"	p	class:_Floating_limits	file:	access:public	signature:(int, radix, 2)
_ForwardContainer_concept_specification	/Users/lij/.vim/stl/container_concepts.h	/^struct _ForwardContainer_concept_specification {$/;"	s
_ForwardContainer_concept_specification::_ForwardContainer_requirement_violation	/Users/lij/.vim/stl/container_concepts.h	/^_ForwardContainer_requirement_violation(_ForwardContainer __c) {$/;"	f	struct:_ForwardContainer_concept_specification	access:public	signature:(_ForwardContainer __c)
_ForwardContainer_requirement_violation	/Users/lij/.vim/stl/container_concepts.h	/^_ForwardContainer_requirement_violation(_ForwardContainer __c) {$/;"	f	struct:_ForwardContainer_concept_specification	access:public	signature:(_ForwardContainer __c)
_ForwardIterator_concept_specification	/Users/lij/.vim/stl/concept_checks.h	/^struct _ForwardIterator_concept_specification {$/;"	s
_ForwardIterator_concept_specification::_ForwardIterator_requirement_violation	/Users/lij/.vim/stl/concept_checks.h	/^_ForwardIterator_requirement_violation(_ForwardIterator __i) {$/;"	f	struct:_ForwardIterator_concept_specification	access:public	signature:(_ForwardIterator __i)
_ForwardIterator_requirement_violation	/Users/lij/.vim/stl/concept_checks.h	/^_ForwardIterator_requirement_violation(_ForwardIterator __i) {$/;"	f	struct:_ForwardIterator_concept_specification	access:public	signature:(_ForwardIterator __i)
_FrontInsertionSequence_concept_specification	/Users/lij/.vim/stl/sequence_concepts.h	/^struct _FrontInsertionSequence_concept_specification {$/;"	s
_FrontInsertionSequence_concept_specification::_FrontInsertionSequence_requirement_violation	/Users/lij/.vim/stl/sequence_concepts.h	/^_FrontInsertionSequence_requirement_violation(_FrontInsertionSequence __s) {$/;"	f	struct:_FrontInsertionSequence_concept_specification	access:public	signature:(_FrontInsertionSequence __s)
_FrontInsertionSequence_requirement_violation	/Users/lij/.vim/stl/sequence_concepts.h	/^_FrontInsertionSequence_requirement_violation(_FrontInsertionSequence __s) {$/;"	f	struct:_FrontInsertionSequence_concept_specification	access:public	signature:(_FrontInsertionSequence __s)
_Gslice_Iter	/Users/lij/.vim/stl/valarray	/^  _Gslice_Iter(const gslice& __gslice)$/;"	f	struct:_Gslice_Iter	access:public	signature:(const gslice& __gslice)
_Gslice_Iter	/Users/lij/.vim/stl/valarray	/^struct _Gslice_Iter {$/;"	s	file:
_Gslice_Iter::_Gslice_Iter	/Users/lij/.vim/stl/valarray	/^  _Gslice_Iter(const gslice& __gslice)$/;"	f	struct:_Gslice_Iter	access:public	signature:(const gslice& __gslice)
_Gslice_Iter::_M_1d_idx	/Users/lij/.vim/stl/valarray	/^  size_t _M_1d_idx;$/;"	m	struct:_Gslice_Iter	file:	access:public
_Gslice_Iter::_M_done	/Users/lij/.vim/stl/valarray	/^  bool _M_done() const { return _M_indices[0] == _M_gslice._M_lengths[0]; }$/;"	f	struct:_Gslice_Iter	access:public	signature:() const
_Gslice_Iter::_M_gslice	/Users/lij/.vim/stl/valarray	/^  const gslice& _M_gslice;$/;"	m	struct:_Gslice_Iter	file:	access:public
_Gslice_Iter::_M_incr	/Users/lij/.vim/stl/valarray	/^  bool _M_incr() {$/;"	f	struct:_Gslice_Iter	access:public	signature:()
_Gslice_Iter::_M_indices	/Users/lij/.vim/stl/valarray	/^  valarray<size_t> _M_indices;$/;"	m	struct:_Gslice_Iter	file:	access:public
_Gslice_Iter::_M_step	/Users/lij/.vim/stl/valarray	/^  size_t _M_step;$/;"	m	struct:_Gslice_Iter	file:	access:public
_Hashtable	/Users/lij/.vim/stl/stl_hashtable.h	/^          _Hashtable;$/;"	t	struct:_Hashtable_const_iterator	access:public
_Hashtable	/Users/lij/.vim/stl/stl_hashtable.h	/^          _Hashtable;$/;"	t	struct:_Hashtable_iterator	access:public
_Hashtable_const_iterator	/Users/lij/.vim/stl/stl_hashtable.h	/^  _Hashtable_const_iterator() {}$/;"	f	struct:_Hashtable_const_iterator	access:public	signature:()
_Hashtable_const_iterator	/Users/lij/.vim/stl/stl_hashtable.h	/^  _Hashtable_const_iterator(const _Node* __n, const _Hashtable* __tab)$/;"	f	struct:_Hashtable_const_iterator	access:public	signature:(const _Node* __n, const _Hashtable* __tab)
_Hashtable_const_iterator	/Users/lij/.vim/stl/stl_hashtable.h	/^  _Hashtable_const_iterator(const iterator& __it) $/;"	f	struct:_Hashtable_const_iterator	access:public	signature:(const iterator& __it)
_Hashtable_const_iterator	/Users/lij/.vim/stl/stl_hashtable.h	/^struct _Hashtable_const_iterator {$/;"	s
_Hashtable_const_iterator::_Hashtable	/Users/lij/.vim/stl/stl_hashtable.h	/^          _Hashtable;$/;"	t	struct:_Hashtable_const_iterator	access:public
_Hashtable_const_iterator::_Hashtable_const_iterator	/Users/lij/.vim/stl/stl_hashtable.h	/^  _Hashtable_const_iterator() {}$/;"	f	struct:_Hashtable_const_iterator	access:public	signature:()
_Hashtable_const_iterator::_Hashtable_const_iterator	/Users/lij/.vim/stl/stl_hashtable.h	/^  _Hashtable_const_iterator(const _Node* __n, const _Hashtable* __tab)$/;"	f	struct:_Hashtable_const_iterator	access:public	signature:(const _Node* __n, const _Hashtable* __tab)
_Hashtable_const_iterator::_Hashtable_const_iterator	/Users/lij/.vim/stl/stl_hashtable.h	/^  _Hashtable_const_iterator(const iterator& __it) $/;"	f	struct:_Hashtable_const_iterator	access:public	signature:(const iterator& __it)
_Hashtable_const_iterator::_M_cur	/Users/lij/.vim/stl/stl_hashtable.h	/^  const _Node* _M_cur;$/;"	m	struct:_Hashtable_const_iterator	access:public
_Hashtable_const_iterator::_M_ht	/Users/lij/.vim/stl/stl_hashtable.h	/^  const _Hashtable* _M_ht;$/;"	m	struct:_Hashtable_const_iterator	access:public
_Hashtable_const_iterator::_Node	/Users/lij/.vim/stl/stl_hashtable.h	/^  typedef _Hashtable_node<_Val> _Node;$/;"	t	struct:_Hashtable_const_iterator	access:public
_Hashtable_const_iterator::const_iterator	/Users/lij/.vim/stl/stl_hashtable.h	/^          const_iterator;$/;"	t	struct:_Hashtable_const_iterator	access:public
_Hashtable_const_iterator::difference_type	/Users/lij/.vim/stl/stl_hashtable.h	/^  typedef ptrdiff_t difference_type;$/;"	t	struct:_Hashtable_const_iterator	access:public
_Hashtable_const_iterator::iterator	/Users/lij/.vim/stl/stl_hashtable.h	/^          iterator;$/;"	t	struct:_Hashtable_const_iterator	access:public
_Hashtable_const_iterator::iterator_category	/Users/lij/.vim/stl/stl_hashtable.h	/^  typedef forward_iterator_tag iterator_category;$/;"	t	struct:_Hashtable_const_iterator	access:public
_Hashtable_const_iterator::operator !=	/Users/lij/.vim/stl/stl_hashtable.h	/^  bool operator!=(const const_iterator& __it) const $/;"	f	struct:_Hashtable_const_iterator	access:public	signature:(const const_iterator& __it) const
_Hashtable_const_iterator::operator *	/Users/lij/.vim/stl/stl_hashtable.h	/^  reference operator*() const { return _M_cur->_M_val; }$/;"	f	struct:_Hashtable_const_iterator	access:public	signature:() const
_Hashtable_const_iterator::operator ++	/Users/lij/.vim/stl/stl_hashtable.h	/^  const_iterator operator++(int);$/;"	p	struct:_Hashtable_const_iterator	access:public	signature:(int)
_Hashtable_const_iterator::operator ++	/Users/lij/.vim/stl/stl_hashtable.h	/^  const_iterator& operator++();$/;"	p	struct:_Hashtable_const_iterator	access:public	signature:()
_Hashtable_const_iterator::operator ++	/Users/lij/.vim/stl/stl_hashtable.h	/^_Hashtable_const_iterator<_Val,_Key,_HF,_ExK,_EqK,_All>::operator++()$/;"	f	class:_Hashtable_const_iterator	signature:()
_Hashtable_const_iterator::operator ++	/Users/lij/.vim/stl/stl_hashtable.h	/^_Hashtable_const_iterator<_Val,_Key,_HF,_ExK,_EqK,_All>::operator++(int)$/;"	f	class:_Hashtable_const_iterator	signature:(int)
_Hashtable_const_iterator::operator ->	/Users/lij/.vim/stl/stl_hashtable.h	/^  pointer operator->() const { return &(operator*()); }$/;"	f	struct:_Hashtable_const_iterator	access:public	signature:() const
_Hashtable_const_iterator::operator ==	/Users/lij/.vim/stl/stl_hashtable.h	/^  bool operator==(const const_iterator& __it) const $/;"	f	struct:_Hashtable_const_iterator	access:public	signature:(const const_iterator& __it) const
_Hashtable_const_iterator::pointer	/Users/lij/.vim/stl/stl_hashtable.h	/^  typedef const _Val* pointer;$/;"	t	struct:_Hashtable_const_iterator	access:public
_Hashtable_const_iterator::reference	/Users/lij/.vim/stl/stl_hashtable.h	/^  typedef const _Val& reference;$/;"	t	struct:_Hashtable_const_iterator	access:public
_Hashtable_const_iterator::size_type	/Users/lij/.vim/stl/stl_hashtable.h	/^  typedef size_t size_type;$/;"	t	struct:_Hashtable_const_iterator	access:public
_Hashtable_const_iterator::value_type	/Users/lij/.vim/stl/stl_hashtable.h	/^  typedef _Val value_type;$/;"	t	struct:_Hashtable_const_iterator	access:public
_Hashtable_iterator	/Users/lij/.vim/stl/stl_hashtable.h	/^  _Hashtable_iterator() {}$/;"	f	struct:_Hashtable_iterator	access:public	signature:()
_Hashtable_iterator	/Users/lij/.vim/stl/stl_hashtable.h	/^  _Hashtable_iterator(_Node* __n, _Hashtable* __tab) $/;"	f	struct:_Hashtable_iterator	access:public	signature:(_Node* __n, _Hashtable* __tab)
_Hashtable_iterator	/Users/lij/.vim/stl/stl_hashtable.h	/^struct _Hashtable_iterator {$/;"	s
_Hashtable_iterator::_Hashtable	/Users/lij/.vim/stl/stl_hashtable.h	/^          _Hashtable;$/;"	t	struct:_Hashtable_iterator	access:public
_Hashtable_iterator::_Hashtable_iterator	/Users/lij/.vim/stl/stl_hashtable.h	/^  _Hashtable_iterator() {}$/;"	f	struct:_Hashtable_iterator	access:public	signature:()
_Hashtable_iterator::_Hashtable_iterator	/Users/lij/.vim/stl/stl_hashtable.h	/^  _Hashtable_iterator(_Node* __n, _Hashtable* __tab) $/;"	f	struct:_Hashtable_iterator	access:public	signature:(_Node* __n, _Hashtable* __tab)
_Hashtable_iterator::_M_cur	/Users/lij/.vim/stl/stl_hashtable.h	/^  _Node* _M_cur;$/;"	m	struct:_Hashtable_iterator	access:public
_Hashtable_iterator::_M_ht	/Users/lij/.vim/stl/stl_hashtable.h	/^  _Hashtable* _M_ht;$/;"	m	struct:_Hashtable_iterator	access:public
_Hashtable_iterator::_Node	/Users/lij/.vim/stl/stl_hashtable.h	/^  typedef _Hashtable_node<_Val> _Node;$/;"	t	struct:_Hashtable_iterator	access:public
_Hashtable_iterator::const_iterator	/Users/lij/.vim/stl/stl_hashtable.h	/^          const_iterator;$/;"	t	struct:_Hashtable_iterator	access:public
_Hashtable_iterator::difference_type	/Users/lij/.vim/stl/stl_hashtable.h	/^  typedef ptrdiff_t difference_type;$/;"	t	struct:_Hashtable_iterator	access:public
_Hashtable_iterator::iterator	/Users/lij/.vim/stl/stl_hashtable.h	/^          iterator;$/;"	t	struct:_Hashtable_iterator	access:public
_Hashtable_iterator::iterator_category	/Users/lij/.vim/stl/stl_hashtable.h	/^  typedef forward_iterator_tag iterator_category;$/;"	t	struct:_Hashtable_iterator	access:public
_Hashtable_iterator::operator !=	/Users/lij/.vim/stl/stl_hashtable.h	/^  bool operator!=(const iterator& __it) const$/;"	f	struct:_Hashtable_iterator	access:public	signature:(const iterator& __it) const
_Hashtable_iterator::operator *	/Users/lij/.vim/stl/stl_hashtable.h	/^  reference operator*() const { return _M_cur->_M_val; }$/;"	f	struct:_Hashtable_iterator	access:public	signature:() const
_Hashtable_iterator::operator ++	/Users/lij/.vim/stl/stl_hashtable.h	/^  iterator operator++(int);$/;"	p	struct:_Hashtable_iterator	access:public	signature:(int)
_Hashtable_iterator::operator ++	/Users/lij/.vim/stl/stl_hashtable.h	/^  iterator& operator++();$/;"	p	struct:_Hashtable_iterator	access:public	signature:()
_Hashtable_iterator::operator ++	/Users/lij/.vim/stl/stl_hashtable.h	/^_Hashtable_iterator<_Val,_Key,_HF,_ExK,_EqK,_All>::operator++()$/;"	f	class:_Hashtable_iterator	signature:()
_Hashtable_iterator::operator ++	/Users/lij/.vim/stl/stl_hashtable.h	/^_Hashtable_iterator<_Val,_Key,_HF,_ExK,_EqK,_All>::operator++(int)$/;"	f	class:_Hashtable_iterator	signature:(int)
_Hashtable_iterator::operator ->	/Users/lij/.vim/stl/stl_hashtable.h	/^  pointer operator->() const { return &(operator*()); }$/;"	f	struct:_Hashtable_iterator	access:public	signature:() const
_Hashtable_iterator::operator ==	/Users/lij/.vim/stl/stl_hashtable.h	/^  bool operator==(const iterator& __it) const$/;"	f	struct:_Hashtable_iterator	access:public	signature:(const iterator& __it) const
_Hashtable_iterator::pointer	/Users/lij/.vim/stl/stl_hashtable.h	/^  typedef _Val* pointer;$/;"	t	struct:_Hashtable_iterator	access:public
_Hashtable_iterator::reference	/Users/lij/.vim/stl/stl_hashtable.h	/^  typedef _Val& reference;$/;"	t	struct:_Hashtable_iterator	access:public
_Hashtable_iterator::size_type	/Users/lij/.vim/stl/stl_hashtable.h	/^  typedef size_t size_type;$/;"	t	struct:_Hashtable_iterator	access:public
_Hashtable_iterator::value_type	/Users/lij/.vim/stl/stl_hashtable.h	/^  typedef _Val value_type;$/;"	t	struct:_Hashtable_iterator	access:public
_Hashtable_node	/Users/lij/.vim/stl/stl_hashtable.h	/^struct _Hashtable_node$/;"	s
_Hashtable_node::_M_next	/Users/lij/.vim/stl/stl_hashtable.h	/^  _Hashtable_node* _M_next;$/;"	m	struct:_Hashtable_node	access:public
_Hashtable_node::_M_val	/Users/lij/.vim/stl/stl_hashtable.h	/^  _Val _M_val;$/;"	m	struct:_Hashtable_node	access:public
_Ht	/Users/lij/.vim/stl/stl_hash_map.h	/^                    _Select1st<pair<const _Key,_Tp> >,_EqualKey,_Alloc> _Ht;$/;"	t	class:hash_map	access:private
_Ht	/Users/lij/.vim/stl/stl_hash_map.h	/^          _Ht;$/;"	t	class:hash_multimap	access:private
_Ht	/Users/lij/.vim/stl/stl_hash_set.h	/^                    _EqualKey, _Alloc> _Ht;$/;"	t	class:hash_multiset	access:private
_Ht	/Users/lij/.vim/stl/stl_hash_set.h	/^                    _EqualKey, _Alloc> _Ht;$/;"	t	class:hash_set	access:private
_Identity	/Users/lij/.vim/stl/stl_function.h	/^struct _Identity : public unary_function<_Tp,_Tp> {$/;"	s	inherits:unary_function
_Identity::operator ()	/Users/lij/.vim/stl/stl_function.h	/^  const _Tp& operator()(const _Tp& __x) const { return __x; }$/;"	f	struct:_Identity	access:public	signature:(const _Tp& __x) const
_InputIterator_concept_specification	/Users/lij/.vim/stl/concept_checks.h	/^struct _InputIterator_concept_specification {$/;"	s
_InputIterator_concept_specification::_InputIterator_requirement_violation	/Users/lij/.vim/stl/concept_checks.h	/^_InputIterator_requirement_violation(_InputIterator __i) {$/;"	f	struct:_InputIterator_concept_specification	access:public	signature:(_InputIterator __i)
_InputIterator_requirement_violation	/Users/lij/.vim/stl/concept_checks.h	/^_InputIterator_requirement_violation(_InputIterator __i) {$/;"	f	struct:_InputIterator_concept_specification	access:public	signature:(_InputIterator __i)
_Insert_ostream	/Users/lij/.vim/stl/ropeimpl.h	/^	  typedef basic_ostream<_CharT,_Traits> _Insert_ostream;$/;"	t	class:_Rope_insert_char_consumer	access:private
_Integer_limits	/Users/lij/.vim/stl/limits	/^class _Integer_limits : public _Numeric_limits_base<_Int> $/;"	c	file:	inherits:_Numeric_limits_base
_Integer_limits::__STL_DECLARE_LIMITS_MEMBER	/Users/lij/.vim/stl/limits	/^  __STL_DECLARE_LIMITS_MEMBER(bool, is_bounded, true);$/;"	p	class:_Integer_limits	file:	access:public	signature:(bool, is_bounded, true)
_Integer_limits::__STL_DECLARE_LIMITS_MEMBER	/Users/lij/.vim/stl/limits	/^  __STL_DECLARE_LIMITS_MEMBER(bool, is_exact,   true);$/;"	p	class:_Integer_limits	file:	access:public	signature:(bool, is_exact, true)
_Integer_limits::__STL_DECLARE_LIMITS_MEMBER	/Users/lij/.vim/stl/limits	/^  __STL_DECLARE_LIMITS_MEMBER(bool, is_integer, true);$/;"	p	class:_Integer_limits	file:	access:public	signature:(bool, is_integer, true)
_Integer_limits::__STL_DECLARE_LIMITS_MEMBER	/Users/lij/.vim/stl/limits	/^  __STL_DECLARE_LIMITS_MEMBER(bool, is_modulo, __ismod);$/;"	p	class:_Integer_limits	file:	access:public	signature:(bool, is_modulo, __ismod)
_Integer_limits::__STL_DECLARE_LIMITS_MEMBER	/Users/lij/.vim/stl/limits	/^  __STL_DECLARE_LIMITS_MEMBER(bool, is_signed,  __imin != 0);$/;"	p	class:_Integer_limits	file:	access:public	signature:(bool, is_signed, __imin != 0)
_Integer_limits::__STL_DECLARE_LIMITS_MEMBER	/Users/lij/.vim/stl/limits	/^  __STL_DECLARE_LIMITS_MEMBER(bool, is_specialized, true);$/;"	p	class:_Integer_limits	file:	access:public	signature:(bool, is_specialized, true)
_Integer_limits::__STL_DECLARE_LIMITS_MEMBER	/Users/lij/.vim/stl/limits	/^  __STL_DECLARE_LIMITS_MEMBER(int,  radix,      2);$/;"	p	class:_Integer_limits	file:	access:public	signature:(int, radix, 2)
_Integer_limits::__STL_DECLARE_LIMITS_MEMBER	/Users/lij/.vim/stl/limits	/^  __STL_DECLARE_LIMITS_MEMBER(int, digits10, (digits * 301) \/ 1000); $/;"	p	class:_Integer_limits	file:	access:public	signature:(int, digits10, (digits * 301) / 1000)
_Integer_limits::__STL_DECLARE_LIMITS_MEMBER	/Users/lij/.vim/stl/limits	/^  __STL_DECLARE_LIMITS_MEMBER(int,$/;"	p	class:_Integer_limits	file:	access:public	signature:(int, digits, (__idigits < 0) ? (int)(sizeof(_Int) * CHAR_BIT) - (__imin == 0 ? 0 : 1) : __idigits)
_Integral	/Users/lij/.vim/stl/type_traits.h	/^  typedef __false_type _Integral;$/;"	t	struct:_Is_integer	access:public
_Integral	/Users/lij/.vim/stl/type_traits.h	/^  typedef __true_type _Integral;$/;"	t	struct:_Is_integer	access:public
_Is_integer	/Users/lij/.vim/stl/type_traits.h	/^__STL_TEMPLATE_NULL struct _Is_integer<bool> {$/;"	s
_Is_integer	/Users/lij/.vim/stl/type_traits.h	/^__STL_TEMPLATE_NULL struct _Is_integer<char> {$/;"	s
_Is_integer	/Users/lij/.vim/stl/type_traits.h	/^__STL_TEMPLATE_NULL struct _Is_integer<int> {$/;"	s
_Is_integer	/Users/lij/.vim/stl/type_traits.h	/^__STL_TEMPLATE_NULL struct _Is_integer<long long> {$/;"	s
_Is_integer	/Users/lij/.vim/stl/type_traits.h	/^__STL_TEMPLATE_NULL struct _Is_integer<long> {$/;"	s
_Is_integer	/Users/lij/.vim/stl/type_traits.h	/^__STL_TEMPLATE_NULL struct _Is_integer<short> {$/;"	s
_Is_integer	/Users/lij/.vim/stl/type_traits.h	/^__STL_TEMPLATE_NULL struct _Is_integer<signed char> {$/;"	s
_Is_integer	/Users/lij/.vim/stl/type_traits.h	/^__STL_TEMPLATE_NULL struct _Is_integer<unsigned char> {$/;"	s
_Is_integer	/Users/lij/.vim/stl/type_traits.h	/^__STL_TEMPLATE_NULL struct _Is_integer<unsigned int> {$/;"	s
_Is_integer	/Users/lij/.vim/stl/type_traits.h	/^__STL_TEMPLATE_NULL struct _Is_integer<unsigned long long> {$/;"	s
_Is_integer	/Users/lij/.vim/stl/type_traits.h	/^__STL_TEMPLATE_NULL struct _Is_integer<unsigned long> {$/;"	s
_Is_integer	/Users/lij/.vim/stl/type_traits.h	/^__STL_TEMPLATE_NULL struct _Is_integer<unsigned short> {$/;"	s
_Is_integer	/Users/lij/.vim/stl/type_traits.h	/^__STL_TEMPLATE_NULL struct _Is_integer<wchar_t> {$/;"	s
_Is_integer	/Users/lij/.vim/stl/type_traits.h	/^template <class _Tp> struct _Is_integer {$/;"	s
_Is_integer::_Integral	/Users/lij/.vim/stl/type_traits.h	/^  typedef __false_type _Integral;$/;"	t	struct:_Is_integer	access:public
_Is_integer::_Integral	/Users/lij/.vim/stl/type_traits.h	/^  typedef __true_type _Integral;$/;"	t	struct:_Is_integer	access:public
_Iterator_base	/Users/lij/.vim/stl/stl_slist.h	/^  typedef _Slist_iterator_base  _Iterator_base;$/;"	t	class:slist	access:private
_LessThanComparable_concept_specification	/Users/lij/.vim/stl/concept_checks.h	/^struct _LessThanComparable_concept_specification {$/;"	s
_LessThanComparable_concept_specification::_LessThanComparable_requirement_violation	/Users/lij/.vim/stl/concept_checks.h	/^  static void _LessThanComparable_requirement_violation(_Type __a) {$/;"	f	struct:_LessThanComparable_concept_specification	access:public	signature:(_Type __a)
_LessThanComparable_requirement_violation	/Users/lij/.vim/stl/concept_checks.h	/^  static void _LessThanComparable_requirement_violation(_Type __a) {$/;"	f	struct:_LessThanComparable_concept_specification	access:public	signature:(_Type __a)
_Link_type	/Users/lij/.vim/stl/stl_tree.h	/^  typedef _Rb_tree_node* _Link_type;$/;"	t	class:_Rb_tree	access:public
_Link_type	/Users/lij/.vim/stl/stl_tree.h	/^  typedef _Rb_tree_node<_Value>* _Link_type;$/;"	t	struct:_Rb_tree_iterator	access:public
_Link_type	/Users/lij/.vim/stl/stl_tree.h	/^  typedef _Rb_tree_node<_Value>* _Link_type;$/;"	t	struct:_Rb_tree_node	access:public
_List_alloc_base	/Users/lij/.vim/stl/stl_list.h	/^  _List_alloc_base(const allocator_type& __a) : _Node_allocator(__a) {}$/;"	f	class:_List_alloc_base	access:public	signature:(const allocator_type& __a)
_List_alloc_base	/Users/lij/.vim/stl/stl_list.h	/^  _List_alloc_base(const allocator_type&) {}$/;"	f	class:_List_alloc_base	access:public	signature:(const allocator_type&)
_List_alloc_base	/Users/lij/.vim/stl/stl_list.h	/^class _List_alloc_base {$/;"	c
_List_alloc_base	/Users/lij/.vim/stl/stl_list.h	/^class _List_alloc_base<_Tp, _Allocator, true> {$/;"	c
_List_alloc_base::_Alloc_type	/Users/lij/.vim/stl/stl_list.h	/^          _Alloc_type;$/;"	t	class:_List_alloc_base	access:protected
_List_alloc_base::_List_alloc_base	/Users/lij/.vim/stl/stl_list.h	/^  _List_alloc_base(const allocator_type& __a) : _Node_allocator(__a) {}$/;"	f	class:_List_alloc_base	access:public	signature:(const allocator_type& __a)
_List_alloc_base::_List_alloc_base	/Users/lij/.vim/stl/stl_list.h	/^  _List_alloc_base(const allocator_type&) {}$/;"	f	class:_List_alloc_base	access:public	signature:(const allocator_type&)
_List_alloc_base::_M_get_node	/Users/lij/.vim/stl/stl_list.h	/^  _List_node<_Tp>* _M_get_node() { return _Alloc_type::allocate(1); }$/;"	f	class:_List_alloc_base	access:protected	signature:()
_List_alloc_base::_M_get_node	/Users/lij/.vim/stl/stl_list.h	/^  _List_node<_Tp>* _M_get_node()$/;"	f	class:_List_alloc_base	access:protected	signature:()
_List_alloc_base::_M_node	/Users/lij/.vim/stl/stl_list.h	/^  _List_node<_Tp>* _M_node;$/;"	m	class:_List_alloc_base	access:protected
_List_alloc_base::_M_put_node	/Users/lij/.vim/stl/stl_list.h	/^  void _M_put_node(_List_node<_Tp>* __p) { _Alloc_type::deallocate(__p, 1); }$/;"	f	class:_List_alloc_base	access:protected	signature:(_List_node<_Tp>* __p)
_List_alloc_base::_M_put_node	/Users/lij/.vim/stl/stl_list.h	/^  void _M_put_node(_List_node<_Tp>* __p)$/;"	f	class:_List_alloc_base	access:protected	signature:(_List_node<_Tp>* __p)
_List_alloc_base::_Node_allocator	/Users/lij/.vim/stl/stl_list.h	/^           _Node_allocator;$/;"	m	class:_List_alloc_base	access:protected
_List_alloc_base::allocator_type	/Users/lij/.vim/stl/stl_list.h	/^          allocator_type;$/;"	t	class:_List_alloc_base	access:public
_List_alloc_base::get_allocator	/Users/lij/.vim/stl/stl_list.h	/^  allocator_type get_allocator() const { return _Node_allocator; }$/;"	f	class:_List_alloc_base	access:public	signature:() const
_List_alloc_base::get_allocator	/Users/lij/.vim/stl/stl_list.h	/^  allocator_type get_allocator() const { return allocator_type(); }$/;"	f	class:_List_alloc_base	access:public	signature:() const
_List_base	/Users/lij/.vim/stl/stl_list.h	/^  _List_base(const allocator_type& __a) : _Base(__a) {$/;"	f	class:_List_base	access:public	signature:(const allocator_type& __a)
_List_base	/Users/lij/.vim/stl/stl_list.h	/^  _List_base(const allocator_type&) {$/;"	f	class:_List_base	access:public	signature:(const allocator_type&)
_List_base	/Users/lij/.vim/stl/stl_list.h	/^class _List_base $/;"	c
_List_base	/Users/lij/.vim/stl/stl_list.h	/^class _List_base $/;"	c	inherits:_List_alloc_base
_List_base::_Alloc_type	/Users/lij/.vim/stl/stl_list.h	/^  typedef simple_alloc<_List_node<_Tp>, _Alloc> _Alloc_type;$/;"	t	class:_List_base	access:protected
_List_base::_Base	/Users/lij/.vim/stl/stl_list.h	/^          _Base; $/;"	t	class:_List_base	access:public
_List_base::_List_base	/Users/lij/.vim/stl/stl_list.h	/^  _List_base(const allocator_type& __a) : _Base(__a) {$/;"	f	class:_List_base	access:public	signature:(const allocator_type& __a)
_List_base::_List_base	/Users/lij/.vim/stl/stl_list.h	/^  _List_base(const allocator_type&) {$/;"	f	class:_List_base	access:public	signature:(const allocator_type&)
_List_base::_M_get_node	/Users/lij/.vim/stl/stl_list.h	/^  _List_node<_Tp>* _M_get_node() { return _Alloc_type::allocate(1); }$/;"	f	class:_List_base	access:protected	signature:()
_List_base::_M_node	/Users/lij/.vim/stl/stl_list.h	/^  _List_node<_Tp>* _M_node;$/;"	m	class:_List_base	access:protected
_List_base::_M_put_node	/Users/lij/.vim/stl/stl_list.h	/^  void _M_put_node(_List_node<_Tp>* __p) { _Alloc_type::deallocate(__p, 1); } $/;"	f	class:_List_base	access:protected	signature:(_List_node<_Tp>* __p)
_List_base::allocator_type	/Users/lij/.vim/stl/stl_list.h	/^  typedef _Alloc allocator_type;$/;"	t	class:_List_base	access:public
_List_base::allocator_type	/Users/lij/.vim/stl/stl_list.h	/^  typedef typename _Base::allocator_type allocator_type;$/;"	t	class:_List_base	access:public
_List_base::clear	/Users/lij/.vim/stl/stl_list.h	/^  void clear();$/;"	p	class:_List_base	access:public	signature:()
_List_base::clear	/Users/lij/.vim/stl/stl_list.h	/^_List_base<_Tp,_Alloc>::clear() $/;"	f	class:_List_base	signature:()
_List_base::get_allocator	/Users/lij/.vim/stl/stl_list.h	/^  allocator_type get_allocator() const { return allocator_type(); }$/;"	f	class:_List_base	access:public	signature:() const
_List_base::~_List_base	/Users/lij/.vim/stl/stl_list.h	/^  ~_List_base() {$/;"	f	class:_List_base	access:public	signature:()
_List_iterator	/Users/lij/.vim/stl/stl_list.h	/^  _List_iterator() {}$/;"	f	struct:_List_iterator	access:public	signature:()
_List_iterator	/Users/lij/.vim/stl/stl_list.h	/^  _List_iterator(_Node* __x) : _List_iterator_base(__x) {}$/;"	f	struct:_List_iterator	access:public	signature:(_Node* __x)
_List_iterator	/Users/lij/.vim/stl/stl_list.h	/^  _List_iterator(const iterator& __x) : _List_iterator_base(__x._M_node) {}$/;"	f	struct:_List_iterator	access:public	signature:(const iterator& __x)
_List_iterator	/Users/lij/.vim/stl/stl_list.h	/^struct _List_iterator : public _List_iterator_base {$/;"	s	inherits:_List_iterator_base
_List_iterator::_List_iterator	/Users/lij/.vim/stl/stl_list.h	/^  _List_iterator() {}$/;"	f	struct:_List_iterator	access:public	signature:()
_List_iterator::_List_iterator	/Users/lij/.vim/stl/stl_list.h	/^  _List_iterator(_Node* __x) : _List_iterator_base(__x) {}$/;"	f	struct:_List_iterator	access:public	signature:(_Node* __x)
_List_iterator::_List_iterator	/Users/lij/.vim/stl/stl_list.h	/^  _List_iterator(const iterator& __x) : _List_iterator_base(__x._M_node) {}$/;"	f	struct:_List_iterator	access:public	signature:(const iterator& __x)
_List_iterator::_Node	/Users/lij/.vim/stl/stl_list.h	/^  typedef _List_node<_Tp> _Node;$/;"	t	struct:_List_iterator	access:public
_List_iterator::_Self	/Users/lij/.vim/stl/stl_list.h	/^  typedef _List_iterator<_Tp,_Ref,_Ptr>             _Self;$/;"	t	struct:_List_iterator	access:public
_List_iterator::const_iterator	/Users/lij/.vim/stl/stl_list.h	/^  typedef _List_iterator<_Tp,const _Tp&,const _Tp*> const_iterator;$/;"	t	struct:_List_iterator	access:public
_List_iterator::iterator	/Users/lij/.vim/stl/stl_list.h	/^  typedef _List_iterator<_Tp,_Tp&,_Tp*>             iterator;$/;"	t	struct:_List_iterator	access:public
_List_iterator::operator *	/Users/lij/.vim/stl/stl_list.h	/^  reference operator*() const { return ((_Node*) _M_node)->_M_data; }$/;"	f	struct:_List_iterator	access:public	signature:() const
_List_iterator::operator ++	/Users/lij/.vim/stl/stl_list.h	/^  _Self operator++(int) { $/;"	f	struct:_List_iterator	access:public	signature:(int)
_List_iterator::operator ++	/Users/lij/.vim/stl/stl_list.h	/^  _Self& operator++() { $/;"	f	struct:_List_iterator	access:public	signature:()
_List_iterator::operator --	/Users/lij/.vim/stl/stl_list.h	/^  _Self operator--(int) { $/;"	f	struct:_List_iterator	access:public	signature:(int)
_List_iterator::operator --	/Users/lij/.vim/stl/stl_list.h	/^  _Self& operator--() { $/;"	f	struct:_List_iterator	access:public	signature:()
_List_iterator::operator ->	/Users/lij/.vim/stl/stl_list.h	/^  pointer operator->() const { return &(operator*()); }$/;"	f	struct:_List_iterator	access:public	signature:() const
_List_iterator::pointer	/Users/lij/.vim/stl/stl_list.h	/^  typedef _Ptr pointer;$/;"	t	struct:_List_iterator	access:public
_List_iterator::reference	/Users/lij/.vim/stl/stl_list.h	/^  typedef _Ref reference;$/;"	t	struct:_List_iterator	access:public
_List_iterator::value_type	/Users/lij/.vim/stl/stl_list.h	/^  typedef _Tp value_type;$/;"	t	struct:_List_iterator	access:public
_List_iterator_base	/Users/lij/.vim/stl/stl_list.h	/^  _List_iterator_base() {}$/;"	f	struct:_List_iterator_base	access:public	signature:()
_List_iterator_base	/Users/lij/.vim/stl/stl_list.h	/^  _List_iterator_base(_List_node_base* __x) : _M_node(__x) {}$/;"	f	struct:_List_iterator_base	access:public	signature:(_List_node_base* __x)
_List_iterator_base	/Users/lij/.vim/stl/stl_list.h	/^struct _List_iterator_base {$/;"	s
_List_iterator_base::_List_iterator_base	/Users/lij/.vim/stl/stl_list.h	/^  _List_iterator_base() {}$/;"	f	struct:_List_iterator_base	access:public	signature:()
_List_iterator_base::_List_iterator_base	/Users/lij/.vim/stl/stl_list.h	/^  _List_iterator_base(_List_node_base* __x) : _M_node(__x) {}$/;"	f	struct:_List_iterator_base	access:public	signature:(_List_node_base* __x)
_List_iterator_base::_M_decr	/Users/lij/.vim/stl/stl_list.h	/^  void _M_decr() { _M_node = _M_node->_M_prev; }$/;"	f	struct:_List_iterator_base	access:public	signature:()
_List_iterator_base::_M_incr	/Users/lij/.vim/stl/stl_list.h	/^  void _M_incr() { _M_node = _M_node->_M_next; }$/;"	f	struct:_List_iterator_base	access:public	signature:()
_List_iterator_base::_M_node	/Users/lij/.vim/stl/stl_list.h	/^  _List_node_base* _M_node;$/;"	m	struct:_List_iterator_base	access:public
_List_iterator_base::difference_type	/Users/lij/.vim/stl/stl_list.h	/^  typedef ptrdiff_t                  difference_type;$/;"	t	struct:_List_iterator_base	access:public
_List_iterator_base::iterator_category	/Users/lij/.vim/stl/stl_list.h	/^  typedef bidirectional_iterator_tag iterator_category;$/;"	t	struct:_List_iterator_base	access:public
_List_iterator_base::operator !=	/Users/lij/.vim/stl/stl_list.h	/^  bool operator!=(const _List_iterator_base& __x) const {$/;"	f	struct:_List_iterator_base	access:public	signature:(const _List_iterator_base& __x) const
_List_iterator_base::operator ==	/Users/lij/.vim/stl/stl_list.h	/^  bool operator==(const _List_iterator_base& __x) const {$/;"	f	struct:_List_iterator_base	access:public	signature:(const _List_iterator_base& __x) const
_List_iterator_base::size_type	/Users/lij/.vim/stl/stl_list.h	/^  typedef size_t                     size_type;$/;"	t	struct:_List_iterator_base	access:public
_List_node	/Users/lij/.vim/stl/stl_list.h	/^struct _List_node : public _List_node_base {$/;"	s	inherits:_List_node_base
_List_node::_M_data	/Users/lij/.vim/stl/stl_list.h	/^  _Tp _M_data;$/;"	m	struct:_List_node	access:public
_List_node_base	/Users/lij/.vim/stl/stl_list.h	/^struct _List_node_base {$/;"	s
_List_node_base::_M_next	/Users/lij/.vim/stl/stl_list.h	/^  _List_node_base* _M_next;$/;"	m	struct:_List_node_base	access:public
_List_node_base::_M_prev	/Users/lij/.vim/stl/stl_list.h	/^  _List_node_base* _M_prev;$/;"	m	struct:_List_node_base	access:public
_Lock	/Users/lij/.vim/stl/stl_alloc.h	/^            _Lock() { __NODE_ALLOCATOR_LOCK; }$/;"	f	class:__default_alloc_template::_Lock	access:public	signature:()
_Lock	/Users/lij/.vim/stl/stl_alloc.h	/^    class _Lock {$/;"	c	class:__default_alloc_template	access:private
_Lt_traits	/Users/lij/.vim/stl/stl_ctraits_fns.h	/^struct _Lt_traits$/;"	s	inherits:binary_function
_Lt_traits::operator ()	/Users/lij/.vim/stl/stl_ctraits_fns.h	/^  bool operator()(const typename _Traits::char_type& __x,$/;"	f	struct:_Lt_traits	access:public	signature:(const typename _Traits::char_type& __x, const typename _Traits::char_type& __y) const
_MAX_BYTES	/Users/lij/.vim/stl/stl_alloc.h	/^    enum {_MAX_BYTES = 128};$/;"	e	enum:__default_alloc_template::__anon16
_MAX_BYTES	/Users/lij/.vim/stl/stl_alloc.h	/^  enum {_MAX_BYTES = 128};$/;"	e	enum:__anon13
_M_1d_idx	/Users/lij/.vim/stl/valarray	/^  size_t _M_1d_idx;$/;"	m	struct:_Gslice_Iter	file:	access:public
_M_acquire_lock	/Users/lij/.vim/stl/stl_threads.h	/^  void _M_acquire_lock() {$/;"	f	struct:_STL_mutex_lock	access:public	signature:()
_M_addr	/Users/lij/.vim/stl/valarray	/^  valarray<size_t> _M_addr;$/;"	m	class:indirect_array	file:	access:private
_M_allocate	/Users/lij/.vim/stl/stl_vector.h	/^  _Tp* _M_allocate(size_t __n)$/;"	f	class:_Vector_alloc_base	access:protected	signature:(size_t __n)
_M_allocate	/Users/lij/.vim/stl/string	/^  _Tp* _M_allocate(size_t __n) { return _Alloc_type::allocate(__n); }$/;"	f	class:_String_base	access:protected	signature:(size_t __n)
_M_allocate	/Users/lij/.vim/stl/string	/^  _Tp* _M_allocate(size_t __n)$/;"	f	class:_String_alloc_base	access:protected	signature:(size_t __n)
_M_allocate	/Users/lij/.vim/stl/valarray	/^  void _M_allocate(size_t __n) {$/;"	f	struct:_Valarray_base	access:public	signature:(size_t __n)
_M_allocate_and_copy	/Users/lij/.vim/stl/stl_vector.h	/^  iterator _M_allocate_and_copy(size_type __n, _ForwardIterator __first, $/;"	f	class:vector	access:protected	signature:(size_type __n, _ForwardIterator __first, _ForwardIterator __last)
_M_allocate_and_copy	/Users/lij/.vim/stl/stl_vector.h	/^  iterator _M_allocate_and_copy(size_type __n, const_iterator __first, $/;"	f	class:vector	access:protected	signature:(size_type __n, const_iterator __first, const_iterator __last)
_M_allocate_block	/Users/lij/.vim/stl/string	/^  void _M_allocate_block(size_t __n) { $/;"	f	class:_String_base	access:protected	signature:(size_t __n)
_M_allocate_buffer	/Users/lij/.vim/stl/stl_tempbuf.h	/^  void _M_allocate_buffer() {$/;"	f	class:_Temporary_buffer	access:private	signature:()
_M_allocate_map	/Users/lij/.vim/stl/stl_deque.h	/^  _Tp** _M_allocate_map(size_t __n) $/;"	f	class:_Deque_alloc_base	access:protected	signature:(size_t __n)
_M_allocate_map	/Users/lij/.vim/stl/stl_deque.h	/^  _Tp** _M_allocate_map(size_t __n) $/;"	f	class:_Deque_base	access:protected	signature:(size_t __n)
_M_allocate_node	/Users/lij/.vim/stl/stl_deque.h	/^  _Tp* _M_allocate_node() {$/;"	f	class:_Deque_alloc_base	access:protected	signature:()
_M_allocate_node	/Users/lij/.vim/stl/stl_deque.h	/^  _Tp* _M_allocate_node()$/;"	f	class:_Deque_base	access:protected	signature:()
_M_append_dispatch	/Users/lij/.vim/stl/string	/^  basic_string& _M_append_dispatch(_InputIter __f, _InputIter __l,$/;"	f	class:basic_string	file:	access:private	signature:(_InputIter __f, _InputIter __l, __false_type)
_M_append_dispatch	/Users/lij/.vim/stl/string	/^  basic_string& _M_append_dispatch(_Integer __n, _Integer __x, __true_type) {$/;"	f	class:basic_string	file:	access:private	signature:(_Integer __n, _Integer __x, __true_type)
_M_array	/Users/lij/.vim/stl/valarray	/^  valarray<_Tp>&   _M_array;$/;"	m	class:indirect_array	file:	access:private
_M_array	/Users/lij/.vim/stl/valarray	/^  valarray<_Tp>& _M_array;$/;"	m	class:mask_array	file:	access:private
_M_array	/Users/lij/.vim/stl/valarray	/^  valarray<_Tp>& _M_array;$/;"	m	class:slice_array	file:	access:private
_M_array	/Users/lij/.vim/stl/valarray	/^  valarray<value_type>& _M_array;$/;"	m	class:gslice_array	file:	access:private
_M_assign_aux	/Users/lij/.vim/stl/stl_bvector.h	/^  void _M_assign_aux(_ForwardIterator __first, _ForwardIterator __last,$/;"	f	class:__BVECTOR	access:public	signature:(_ForwardIterator __first, _ForwardIterator __last, forward_iterator_tag)
_M_assign_aux	/Users/lij/.vim/stl/stl_bvector.h	/^  void _M_assign_aux(_InputIterator __first, _InputIterator __last,$/;"	f	class:__BVECTOR	access:public	signature:(_InputIterator __first, _InputIterator __last, input_iterator_tag)
_M_assign_aux	/Users/lij/.vim/stl/stl_deque.h	/^  ::_M_assign_aux(_InputIter __first, _InputIter __last, input_iterator_tag)$/;"	f	class:deque	signature:(_InputIter __first, _InputIter __last, input_iterator_tag)
_M_assign_aux	/Users/lij/.vim/stl/stl_deque.h	/^  void _M_assign_aux(_ForwardIterator __first, _ForwardIterator __last,$/;"	f	class:deque	access:private	signature:(_ForwardIterator __first, _ForwardIterator __last, forward_iterator_tag)
_M_assign_aux	/Users/lij/.vim/stl/stl_deque.h	/^  void _M_assign_aux(_InputIterator __first, _InputIterator __last,$/;"	p	class:deque	access:private	signature:(_InputIterator __first, _InputIterator __last, input_iterator_tag)
_M_assign_aux	/Users/lij/.vim/stl/stl_vector.h	/^  void _M_assign_aux(_ForwardIterator __first, _ForwardIterator __last,$/;"	p	class:vector	access:public	signature:(_ForwardIterator __first, _ForwardIterator __last, forward_iterator_tag)
_M_assign_aux	/Users/lij/.vim/stl/stl_vector.h	/^  void _M_assign_aux(_InputIterator __first, _InputIterator __last,$/;"	p	class:vector	access:public	signature:(_InputIterator __first, _InputIterator __last, input_iterator_tag)
_M_assign_aux	/Users/lij/.vim/stl/stl_vector.h	/^vector<_Tp, _Alloc>::_M_assign_aux(_ForwardIter __first, _ForwardIter __last,$/;"	f	class:vector	signature:(_ForwardIter __first, _ForwardIter __last, forward_iterator_tag)
_M_assign_aux	/Users/lij/.vim/stl/stl_vector.h	/^void vector<_Tp, _Alloc>::_M_assign_aux(_InputIter __first, _InputIter __last,$/;"	f	class:vector	signature:(_InputIter __first, _InputIter __last, input_iterator_tag)
_M_assign_dispatch	/Users/lij/.vim/stl/stl_bvector.h	/^  void _M_assign_dispatch(_InputIter __first, _InputIter __last, __false_type)$/;"	f	class:__BVECTOR	access:public	signature:(_InputIter __first, _InputIter __last, __false_type)
_M_assign_dispatch	/Users/lij/.vim/stl/stl_bvector.h	/^  void _M_assign_dispatch(_Integer __n, _Integer __val, __true_type)$/;"	f	class:__BVECTOR	access:public	signature:(_Integer __n, _Integer __val, __true_type)
_M_assign_dispatch	/Users/lij/.vim/stl/stl_deque.h	/^  void _M_assign_dispatch(_InputIterator __first, _InputIterator __last,$/;"	f	class:deque	access:private	signature:(_InputIterator __first, _InputIterator __last, __false_type)
_M_assign_dispatch	/Users/lij/.vim/stl/stl_deque.h	/^  void _M_assign_dispatch(_Integer __n, _Integer __val, __true_type)$/;"	f	class:deque	access:private	signature:(_Integer __n, _Integer __val, __true_type)
_M_assign_dispatch	/Users/lij/.vim/stl/stl_list.h	/^  void _M_assign_dispatch(_InputIterator __first, _InputIterator __last,$/;"	p	class:list	access:public	signature:(_InputIterator __first, _InputIterator __last, __false_type)
_M_assign_dispatch	/Users/lij/.vim/stl/stl_list.h	/^  void _M_assign_dispatch(_Integer __n, _Integer __val, __true_type)$/;"	f	class:list	access:public	signature:(_Integer __n, _Integer __val, __true_type)
_M_assign_dispatch	/Users/lij/.vim/stl/stl_list.h	/^list<_Tp, _Alloc>::_M_assign_dispatch(_InputIter __first2, _InputIter __last2,$/;"	f	class:list	signature:(_InputIter __first2, _InputIter __last2, __false_type)
_M_assign_dispatch	/Users/lij/.vim/stl/stl_slist.h	/^  void _M_assign_dispatch(_InputIterator __first, _InputIterator __last,$/;"	p	class:slist	access:public	signature:(_InputIterator __first, _InputIterator __last, __false_type)
_M_assign_dispatch	/Users/lij/.vim/stl/stl_slist.h	/^  void _M_assign_dispatch(_Integer __n, _Integer __val, __true_type)$/;"	f	class:slist	access:public	signature:(_Integer __n, _Integer __val, __true_type)
_M_assign_dispatch	/Users/lij/.vim/stl/stl_slist.h	/^slist<_Tp, _Alloc>::_M_assign_dispatch(_InputIter __first, _InputIter __last,$/;"	f	class:slist	signature:(_InputIter __first, _InputIter __last, __false_type)
_M_assign_dispatch	/Users/lij/.vim/stl/stl_vector.h	/^  void _M_assign_dispatch(_InputIter __first, _InputIter __last, __false_type)$/;"	f	class:vector	access:public	signature:(_InputIter __first, _InputIter __last, __false_type)
_M_assign_dispatch	/Users/lij/.vim/stl/stl_vector.h	/^  void _M_assign_dispatch(_Integer __n, _Integer __val, __true_type)$/;"	f	class:vector	access:public	signature:(_Integer __n, _Integer __val, __true_type)
_M_assign_dispatch	/Users/lij/.vim/stl/string	/^  ::_M_assign_dispatch(_InputIter __f, _InputIter __l, __false_type)$/;"	f	class:basic_string	signature:(_InputIter __f, _InputIter __l, __false_type)
_M_assign_dispatch	/Users/lij/.vim/stl/string	/^  basic_string& _M_assign_dispatch(_InputIter __f, _InputIter __l,$/;"	p	class:basic_string	file:	access:private	signature:(_InputIter __f, _InputIter __l, __false_type)
_M_assign_dispatch	/Users/lij/.vim/stl/string	/^  basic_string& _M_assign_dispatch(_Integer __n, _Integer __x, __true_type) {$/;"	f	class:basic_string	file:	access:private	signature:(_Integer __n, _Integer __x, __true_type)
_M_base	/Users/lij/.vim/stl/stl_rope.h	/^    _Rope_RopeRep<_CharT,_Alloc>* _M_base;      \/\/ not 0$/;"	m	struct:_Rope_RopeSubstring	access:public
_M_bit_alloc	/Users/lij/.vim/stl/stl_bvector.h	/^  unsigned int* _M_bit_alloc(size_t __n) $/;"	f	class:_Bvector_alloc_base	access:protected	signature:(size_t __n)
_M_bit_alloc	/Users/lij/.vim/stl/stl_bvector.h	/^  unsigned int* _M_bit_alloc(size_t __n) $/;"	f	class:_Bvector_base	access:protected	signature:(size_t __n)
_M_bkt_num	/Users/lij/.vim/stl/stl_hashtable.h	/^  size_type _M_bkt_num(const value_type& __obj) const$/;"	f	class:hashtable	access:private	signature:(const value_type& __obj) const
_M_bkt_num	/Users/lij/.vim/stl/stl_hashtable.h	/^  size_type _M_bkt_num(const value_type& __obj, size_t __n) const$/;"	f	class:hashtable	access:private	signature:(const value_type& __obj, size_t __n) const
_M_bkt_num_key	/Users/lij/.vim/stl/stl_hashtable.h	/^  size_type _M_bkt_num_key(const key_type& __key) const$/;"	f	class:hashtable	access:private	signature:(const key_type& __key) const
_M_bkt_num_key	/Users/lij/.vim/stl/stl_hashtable.h	/^  size_type _M_bkt_num_key(const key_type& __key, size_t __n) const$/;"	f	class:hashtable	access:private	signature:(const key_type& __key, size_t __n) const
_M_bpos	/Users/lij/.vim/stl/bitset	/^    size_t _M_bpos;$/;"	m	class:bitset::reference	file:	access:private
_M_buckets	/Users/lij/.vim/stl/stl_hashtable.h	/^      _M_buckets(__a),$/;"	p	class:hashtable	access:public	signature:(__a)
_M_buckets	/Users/lij/.vim/stl/stl_hashtable.h	/^      _M_buckets(__ht.get_allocator()),$/;"	p	class:hashtable	access:public	signature:(__ht.get_allocator())
_M_buckets	/Users/lij/.vim/stl/stl_hashtable.h	/^  vector<_Node*,_Alloc> _M_buckets;$/;"	m	class:hashtable	access:private
_M_buf	/Users/lij/.vim/stl/stl_iterator.h	/^  streambuf_type* _M_buf;$/;"	m	class:istreambuf_iterator	access:private
_M_buf	/Users/lij/.vim/stl/stl_iterator.h	/^  streambuf_type* _M_buf;$/;"	m	class:ostreambuf_iterator	access:private
_M_buf_count	/Users/lij/.vim/stl/stl_rope.h	/^        size_t     _M_buf_count;$/;"	m	class:sequence_buffer	access:protected
_M_buf_end	/Users/lij/.vim/stl/stl_rope.h	/^    __GC_CONST _CharT* _M_buf_end;$/;"	m	class:_Rope_iterator_base	access:protected
_M_buf_ptr	/Users/lij/.vim/stl/ropeimpl.h	/^	_CharT* _M_buf_ptr;$/;"	m	class:_Rope_flatten_char_consumer	access:private
_M_buf_ptr	/Users/lij/.vim/stl/stl_rope.h	/^    __GC_CONST _CharT* _M_buf_ptr;$/;"	m	class:_Rope_iterator_base	access:protected
_M_buf_start	/Users/lij/.vim/stl/stl_rope.h	/^    __GC_CONST _CharT* _M_buf_start;$/;"	m	class:_Rope_iterator_base	access:protected
_M_buffer	/Users/lij/.vim/stl/stl_rope.h	/^        value_type _M_buffer[_Buf_sz];$/;"	m	class:sequence_buffer	access:protected
_M_buffer	/Users/lij/.vim/stl/stl_tempbuf.h	/^  _Tp*       _M_buffer;$/;"	m	class:_Temporary_buffer	access:private
_M_bump_down	/Users/lij/.vim/stl/stl_bvector.h	/^  void _M_bump_down() {$/;"	f	struct:_Bit_iterator_base	access:public	signature:()
_M_bump_up	/Users/lij/.vim/stl/stl_bvector.h	/^  void _M_bump_up() {$/;"	f	struct:_Bit_iterator_base	access:public	signature:()
_M_c	/Users/lij/.vim/stl/stl_iterator.h	/^  mutable _CharT _M_c;$/;"	m	class:istreambuf_iterator	access:private
_M_c_string	/Users/lij/.vim/stl/stl_rope.h	/^    __GC_CONST _CharT* _M_c_string;$/;"	m	struct:_Rope_RopeRep	access:public
_M_check	/Users/lij/.vim/stl/ropeimpl.h	/^void _Rope_iterator<_CharT,_Alloc>::_M_check() {$/;"	f	class:_Rope_iterator	signature:()
_M_check	/Users/lij/.vim/stl/stl_rope.h	/^    void _M_check();$/;"	p	class:_Rope_iterator	access:protected	signature:()
_M_client_data	/Users/lij/.vim/stl/stl_alloc.h	/^        char _M_client_data[1];    \/* The client sees this.        *\/$/;"	m	union:__default_alloc_template::_Obj	access:public
_M_clone_node	/Users/lij/.vim/stl/stl_tree.h	/^  _Link_type _M_clone_node(_Link_type __x)$/;"	f	class:_Rb_tree	access:protected	signature:(_Link_type __x)
_M_color	/Users/lij/.vim/stl/stl_tree.h	/^  _Color_type _M_color; $/;"	m	struct:_Rb_tree_node_base	access:public
_M_compare	/Users/lij/.vim/stl/string	/^  static int _M_compare(const _CharT* __f1, const _CharT* __l1,$/;"	f	class:basic_string	access:public	signature:(const _CharT* __f1, const _CharT* __l1, const _CharT* __f2, const _CharT* __l2)
_M_construct_null	/Users/lij/.vim/stl/string	/^  void _M_construct_null(_CharT* __p) {$/;"	f	class:basic_string	file:	access:private	signature:(_CharT* __p)
_M_copy	/Users/lij/.vim/stl/stl_tree.h	/^  ::_M_copy(_Link_type __x, _Link_type __p)$/;"	f	class:_Rb_tree	signature:(_Link_type __x, _Link_type __p)
_M_copy	/Users/lij/.vim/stl/stl_tree.h	/^  _Link_type _M_copy(_Link_type __x, _Link_type __p);$/;"	p	class:_Rb_tree	access:private	signature:(_Link_type __x, _Link_type __p)
_M_copy	/Users/lij/.vim/stl/string	/^  _M_copy(_InputIterator __first, _InputIterator __last, iterator __result) {$/;"	f	class:basic_string	file:	access:private	signature:(_InputIterator __first, _InputIterator __last, iterator __result)
_M_copy	/Users/lij/.vim/stl/string	/^  _M_copy(const _CharT* __first, const _CharT* __last, _CharT* __result) {$/;"	f	class:basic_string	file:	access:private	signature:(const _CharT* __first, const _CharT* __last, _CharT* __result)
_M_copy_from	/Users/lij/.vim/stl/stl_hashtable.h	/^  ::_M_copy_from(const hashtable& __ht)$/;"	f	class:hashtable	signature:(const hashtable& __ht)
_M_copy_from	/Users/lij/.vim/stl/stl_hashtable.h	/^  void _M_copy_from(const hashtable& __ht);$/;"	p	class:hashtable	access:private	signature:(const hashtable& __ht)
_M_copy_from_string	/Users/lij/.vim/stl/bitset	/^  ::_M_copy_from_string(const basic_string<_CharT,_Traits,_Alloc>& __s,$/;"	f	class:bitset	signature:(const basic_string<_CharT,_Traits,_Alloc>& __s, size_t __pos, size_t __n)
_M_copy_from_string	/Users/lij/.vim/stl/bitset	/^  void _M_copy_from_string(const basic_string<_CharT,_Traits,_Alloc>& __s,$/;"	p	class:bitset	file:	access:public	signature:(const basic_string<_CharT,_Traits,_Alloc>& __s, size_t, size_t)
_M_copy_from_string	/Users/lij/.vim/stl/bitset	/^  void _M_copy_from_string(const basic_string<char>&, size_t, size_t);$/;"	p	class:bitset	file:	access:public	signature:(const basic_string<char>&, size_t, size_t)
_M_copy_from_string	/Users/lij/.vim/stl/bitset	/^void bitset<_Nb>::_M_copy_from_string(const basic_string<char>& __s,$/;"	f	class:bitset	signature:(const basic_string<char>& __s, size_t __pos, size_t __n)
_M_copy_to_string	/Users/lij/.vim/stl/bitset	/^  ::_M_copy_to_string(basic_string<_CharT, _Traits, _Alloc>& __s) const$/;"	f	class:bitset	signature:(basic_string<_CharT, _Traits, _Alloc>& __s) const
_M_copy_to_string	/Users/lij/.vim/stl/bitset	/^  void _M_copy_to_string(basic_string<_CharT,_Traits,_Alloc>&) const;$/;"	p	class:bitset	file:	access:public	signature:(basic_string<_CharT,_Traits,_Alloc>&) const
_M_copy_to_string	/Users/lij/.vim/stl/bitset	/^  void _M_copy_to_string(basic_string<char>&) const;$/;"	p	class:bitset	file:	access:public	signature:(basic_string<char>&) const
_M_copy_to_string	/Users/lij/.vim/stl/bitset	/^void bitset<_Nb>::_M_copy_to_string(basic_string<char>& __s) const$/;"	f	class:bitset	signature:(basic_string<char>& __s) const
_M_count	/Users/lij/.vim/stl/ropeimpl.h	/^	size_t _M_count;  \/\/ Number of nonmatching characters$/;"	m	class:_Rope_find_char_char_consumer	access:public
_M_create_node	/Users/lij/.vim/stl/stl_list.h	/^  _Node* _M_create_node()$/;"	f	class:list	access:protected	signature:()
_M_create_node	/Users/lij/.vim/stl/stl_list.h	/^  _Node* _M_create_node(const _Tp& __x)$/;"	f	class:list	access:protected	signature:(const _Tp& __x)
_M_create_node	/Users/lij/.vim/stl/stl_slist.h	/^  _Node* _M_create_node() {$/;"	f	class:slist	access:private	signature:()
_M_create_node	/Users/lij/.vim/stl/stl_slist.h	/^  _Node* _M_create_node(const value_type& __x) {$/;"	f	class:slist	access:private	signature:(const value_type& __x)
_M_create_node	/Users/lij/.vim/stl/stl_tree.h	/^  _Link_type _M_create_node(const value_type& __x)$/;"	f	class:_Rb_tree	access:protected	signature:(const value_type& __x)
_M_create_nodes	/Users/lij/.vim/stl/stl_deque.h	/^  void _M_create_nodes(_Tp** __nstart, _Tp** __nfinish);$/;"	p	class:_Deque_base	access:protected	signature:(_Tp** __nstart, _Tp** __nfinish)
_M_create_nodes	/Users/lij/.vim/stl/stl_deque.h	/^void _Deque_base<_Tp,_Alloc>::_M_create_nodes(_Tp** __nstart, _Tp** __nfinish)$/;"	f	class:_Deque_base	signature:(_Tp** __nstart, _Tp** __nfinish)
_M_cur	/Users/lij/.vim/stl/stl_deque.h	/^  _Tp* _M_cur;$/;"	m	struct:_Deque_iterator	access:public
_M_cur	/Users/lij/.vim/stl/stl_hashtable.h	/^  _Node* _M_cur;$/;"	m	struct:_Hashtable_iterator	access:public
_M_cur	/Users/lij/.vim/stl/stl_hashtable.h	/^  const _Node* _M_cur;$/;"	m	struct:_Hashtable_const_iterator	access:public
_M_current	/Users/lij/.vim/stl/stl_rope.h	/^    _CharT _M_current;$/;"	m	class:_Rope_char_ref_proxy	access:private
_M_current_pos	/Users/lij/.vim/stl/stl_rope.h	/^    size_t _M_current_pos;$/;"	m	class:_Rope_iterator_base	access:protected
_M_current_valid	/Users/lij/.vim/stl/stl_rope.h	/^    bool _M_current_valid;$/;"	m	class:_Rope_char_ref_proxy	access:private
_M_data	/Users/lij/.vim/stl/stl_list.h	/^  _Tp _M_data;$/;"	m	struct:_List_node	access:public
_M_data	/Users/lij/.vim/stl/stl_rope.h	/^    __GC_CONST _CharT* _M_data; \/* Not necessarily 0 terminated. *\/$/;"	m	struct:_Rope_RopeLeaf	access:public
_M_data	/Users/lij/.vim/stl/stl_slist.h	/^  _Tp _M_data;$/;"	m	struct:_Slist_node	access:public
_M_data_allocator	/Users/lij/.vim/stl/stl_bvector.h	/^          _M_data_allocator;$/;"	m	class:_Bvector_alloc_base	access:protected
_M_data_allocator	/Users/lij/.vim/stl/stl_rope.h	/^    allocator_type _M_data_allocator;$/;"	m	class:_Rope_alloc_base	access:protected
_M_data_allocator	/Users/lij/.vim/stl/stl_rope.h	/^    allocator_type _M_data_allocator;$/;"	m	class:_Rope_rep_alloc_base	access:protected
_M_data_allocator	/Users/lij/.vim/stl/stl_vector.h	/^  allocator_type _M_data_allocator;$/;"	m	class:_Vector_alloc_base	access:protected
_M_data_allocator	/Users/lij/.vim/stl/string	/^  allocator_type _M_data_allocator;$/;"	m	class:_String_alloc_base	file:	access:protected
_M_deallocate	/Users/lij/.vim/stl/stl_bvector.h	/^  void _M_deallocate() {$/;"	f	class:_Bvector_alloc_base	access:protected	signature:()
_M_deallocate	/Users/lij/.vim/stl/stl_bvector.h	/^  void _M_deallocate() {$/;"	f	class:_Bvector_base	access:protected	signature:()
_M_deallocate	/Users/lij/.vim/stl/stl_vector.h	/^  void _M_deallocate(_Tp* __p, size_t __n)$/;"	f	class:_Vector_alloc_base	access:protected	signature:(_Tp* __p, size_t __n)
_M_deallocate	/Users/lij/.vim/stl/string	/^  void _M_deallocate(_Tp* __p, size_t __n) {$/;"	f	class:_String_alloc_base	access:protected	signature:(_Tp* __p, size_t __n)
_M_deallocate	/Users/lij/.vim/stl/string	/^  void _M_deallocate(_Tp* __p, size_t __n) {$/;"	f	class:_String_base	access:protected	signature:(_Tp* __p, size_t __n)
_M_deallocate	/Users/lij/.vim/stl/string	/^  void _M_deallocate(_Tp* __p, size_t __n)$/;"	f	class:_String_alloc_base	access:protected	signature:(_Tp* __p, size_t __n)
_M_deallocate	/Users/lij/.vim/stl/valarray	/^  void _M_deallocate() {$/;"	f	struct:_Valarray_base	access:public	signature:()
_M_deallocate_block	/Users/lij/.vim/stl/string	/^  void _M_deallocate_block() $/;"	f	class:_String_base	access:protected	signature:()
_M_deallocate_map	/Users/lij/.vim/stl/stl_deque.h	/^  void _M_deallocate_map(_Tp** __p, size_t __n) $/;"	f	class:_Deque_alloc_base	access:protected	signature:(_Tp** __p, size_t __n)
_M_deallocate_map	/Users/lij/.vim/stl/stl_deque.h	/^  void _M_deallocate_map(_Tp** __p, size_t __n) $/;"	f	class:_Deque_base	access:protected	signature:(_Tp** __p, size_t __n)
_M_deallocate_node	/Users/lij/.vim/stl/stl_deque.h	/^  void _M_deallocate_node(_Tp* __p) {$/;"	f	class:_Deque_alloc_base	access:protected	signature:(_Tp* __p)
_M_deallocate_node	/Users/lij/.vim/stl/stl_deque.h	/^  void _M_deallocate_node(_Tp* __p)$/;"	f	class:_Deque_base	access:protected	signature:(_Tp* __p)
_M_decr	/Users/lij/.vim/stl/ropeimpl.h	/^void _Rope_iterator_base<_CharT,_Alloc>::_M_decr(size_t __n) {$/;"	f	class:_Rope_iterator_base	signature:(size_t __n)
_M_decr	/Users/lij/.vim/stl/stl_list.h	/^  void _M_decr() { _M_node = _M_node->_M_prev; }$/;"	f	struct:_List_iterator_base	access:public	signature:()
_M_decr	/Users/lij/.vim/stl/stl_rope.h	/^    void _M_decr(size_t __n);$/;"	p	class:_Rope_iterator_base	access:protected	signature:(size_t __n)
_M_decr	/Users/lij/.vim/stl/stl_threads.h	/^  _RC_t _M_decr() { return --_M_ref_count; }$/;"	f	struct:_Refcount_Base	access:public	signature:()
_M_decr	/Users/lij/.vim/stl/stl_threads.h	/^  _RC_t _M_decr() { return InterlockedDecrement((_RC_t*)&_M_ref_count); }$/;"	f	struct:_Refcount_Base	access:public	signature:()
_M_decr	/Users/lij/.vim/stl/stl_threads.h	/^  _RC_t _M_decr() { return __add_and_fetch(&_M_ref_count, (size_t) -1); }$/;"	f	struct:_Refcount_Base	access:public	signature:()
_M_decr	/Users/lij/.vim/stl/stl_threads.h	/^  _RC_t _M_decr() {$/;"	f	struct:_Refcount_Base	access:public	signature:()
_M_decrement	/Users/lij/.vim/stl/stl_tree.h	/^  void _M_decrement()$/;"	f	struct:_Rb_tree_base_iterator	access:public	signature:()
_M_delete_node	/Users/lij/.vim/stl/stl_hashtable.h	/^  void _M_delete_node(_Node* __n)$/;"	f	class:hashtable	access:private	signature:(_Node* __n)
_M_delete_when_done	/Users/lij/.vim/stl/stl_rope.h	/^      bool _M_delete_when_done; \/\/ Char_producer is owned by the$/;"	m	struct:_Rope_RopeFunction	access:public
_M_depth	/Users/lij/.vim/stl/stl_rope.h	/^    unsigned char _M_depth;$/;"	m	struct:_Rope_RopeRep	access:public
_M_dereference_aux	/Users/lij/.vim/stl/stl_iterator.h	/^  char_type _M_dereference_aux() const;$/;"	p	class:istreambuf_iterator	access:private	signature:() const
_M_dereference_aux	/Users/lij/.vim/stl/stl_iterator.h	/^_CharT istreambuf_iterator<_CharT, _Traits>::_M_dereference_aux() const$/;"	f	class:istreambuf_iterator	signature:() const
_M_destroy_nodes	/Users/lij/.vim/stl/stl_deque.h	/^  void _M_destroy_nodes(_Tp** __nstart, _Tp** __nfinish);$/;"	p	class:_Deque_base	access:protected	signature:(_Tp** __nstart, _Tp** __nfinish)
_M_destroy_nodes	/Users/lij/.vim/stl/stl_deque.h	/^_Deque_base<_Tp,_Alloc>::_M_destroy_nodes(_Tp** __nstart, _Tp** __nfinish)$/;"	f	class:_Deque_base	signature:(_Tp** __nstart, _Tp** __nfinish)
_M_do_and	/Users/lij/.vim/stl/bitset	/^  void _M_do_and(const _Base_bitset<1>& __x) { _M_w &= __x._M_w; }$/;"	f	struct:_Base_bitset	access:public	signature:(const _Base_bitset<1>& __x)
_M_do_and	/Users/lij/.vim/stl/bitset	/^  void _M_do_and(const _Base_bitset<_Nw>& __x) {$/;"	f	struct:_Base_bitset	access:public	signature:(const _Base_bitset<_Nw>& __x)
_M_do_count	/Users/lij/.vim/stl/bitset	/^  size_t _M_do_count() const {$/;"	f	struct:_Base_bitset	access:public	signature:() const
_M_do_find_first	/Users/lij/.vim/stl/bitset	/^  size_t _M_do_find_first(size_t __not_found) const;$/;"	p	struct:_Base_bitset	file:	access:public	signature:(size_t __not_found) const
_M_do_find_first	/Users/lij/.vim/stl/bitset	/^size_t _Base_bitset<1>::_M_do_find_first(size_t __not_found) const$/;"	f	class:_Base_bitset	signature:(size_t __not_found) const
_M_do_find_first	/Users/lij/.vim/stl/bitset	/^size_t _Base_bitset<_Nw>::_M_do_find_first(size_t __not_found) const $/;"	f	class:_Base_bitset	signature:(size_t __not_found) const
_M_do_find_next	/Users/lij/.vim/stl/bitset	/^  size_t _M_do_find_next(size_t __prev, size_t __not_found) const; $/;"	p	struct:_Base_bitset	file:	access:public	signature:(size_t __prev, size_t __not_found) const
_M_do_find_next	/Users/lij/.vim/stl/bitset	/^  size_t _M_do_find_next(size_t __prev, size_t __not_found) const;$/;"	p	struct:_Base_bitset	file:	access:public	signature:(size_t __prev, size_t __not_found) const
_M_do_find_next	/Users/lij/.vim/stl/bitset	/^_Base_bitset<_Nw>::_M_do_find_next(size_t __prev, size_t __not_found) const$/;"	f	class:_Base_bitset	signature:(size_t __prev, size_t __not_found) const
_M_do_find_next	/Users/lij/.vim/stl/bitset	/^size_t _Base_bitset<1>::_M_do_find_next(size_t __prev, size_t __not_found ) const$/;"	f	class:_Base_bitset	signature:(size_t __prev, size_t __not_found ) const
_M_do_flip	/Users/lij/.vim/stl/bitset	/^  void _M_do_flip()                       { _M_w = ~_M_w; }$/;"	f	struct:_Base_bitset	access:public	signature:()
_M_do_flip	/Users/lij/.vim/stl/bitset	/^  void _M_do_flip() {$/;"	f	struct:_Base_bitset	access:public	signature:()
_M_do_left_shift	/Users/lij/.vim/stl/bitset	/^  void _M_do_left_shift(size_t __shift)     { _M_w <<= __shift; }$/;"	f	struct:_Base_bitset	access:public	signature:(size_t __shift)
_M_do_left_shift	/Users/lij/.vim/stl/bitset	/^  void _M_do_left_shift(size_t __shift);$/;"	p	struct:_Base_bitset	file:	access:public	signature:(size_t __shift)
_M_do_left_shift	/Users/lij/.vim/stl/bitset	/^void _Base_bitset<_Nw>::_M_do_left_shift(size_t __shift) $/;"	f	class:_Base_bitset	signature:(size_t __shift)
_M_do_or	/Users/lij/.vim/stl/bitset	/^  void _M_do_or(const _Base_bitset<1>& __x)  { _M_w |= __x._M_w; }$/;"	f	struct:_Base_bitset	access:public	signature:(const _Base_bitset<1>& __x)
_M_do_or	/Users/lij/.vim/stl/bitset	/^  void _M_do_or(const _Base_bitset<_Nw>& __x) {$/;"	f	struct:_Base_bitset	access:public	signature:(const _Base_bitset<_Nw>& __x)
_M_do_reset	/Users/lij/.vim/stl/bitset	/^  void _M_do_reset()                      { _M_w = 0; }$/;"	f	struct:_Base_bitset	access:public	signature:()
_M_do_reset	/Users/lij/.vim/stl/bitset	/^  void _M_do_reset() { memset(_M_w, 0, _Nw * sizeof(_WordT)); }$/;"	f	struct:_Base_bitset	access:public	signature:()
_M_do_right_shift	/Users/lij/.vim/stl/bitset	/^  void _M_do_right_shift(size_t __shift)    { _M_w >>= __shift; }$/;"	f	struct:_Base_bitset	access:public	signature:(size_t __shift)
_M_do_right_shift	/Users/lij/.vim/stl/bitset	/^  void _M_do_right_shift(size_t __shift);$/;"	p	struct:_Base_bitset	file:	access:public	signature:(size_t __shift)
_M_do_right_shift	/Users/lij/.vim/stl/bitset	/^void _Base_bitset<_Nw>::_M_do_right_shift(size_t __shift) $/;"	f	class:_Base_bitset	signature:(size_t __shift)
_M_do_sanitize	/Users/lij/.vim/stl/bitset	/^  static void _M_do_sanitize(unsigned long& __val)$/;"	f	struct:_Sanitize	access:public	signature:(unsigned long& __val)
_M_do_sanitize	/Users/lij/.vim/stl/bitset	/^  static void _M_do_sanitize(unsigned long) {}$/;"	f	struct:_Sanitize	access:public	signature:(unsigned long)
_M_do_sanitize	/Users/lij/.vim/stl/bitset	/^  void _M_do_sanitize() {$/;"	f	class:bitset	file:	access:private	signature:()
_M_do_set	/Users/lij/.vim/stl/bitset	/^  void _M_do_set()                        { _M_w = ~static_cast<_WordT>(0); }$/;"	f	struct:_Base_bitset	access:public	signature:()
_M_do_set	/Users/lij/.vim/stl/bitset	/^  void _M_do_set() {$/;"	f	struct:_Base_bitset	access:public	signature:()
_M_do_to_ulong	/Users/lij/.vim/stl/bitset	/^  unsigned long _M_do_to_ulong() const { return _M_w; }$/;"	f	struct:_Base_bitset	access:public	signature:() const
_M_do_to_ulong	/Users/lij/.vim/stl/bitset	/^  unsigned long _M_do_to_ulong() const; $/;"	p	struct:_Base_bitset	file:	access:public	signature:() const
_M_do_to_ulong	/Users/lij/.vim/stl/bitset	/^unsigned long _Base_bitset<_Nw>::_M_do_to_ulong() const$/;"	f	class:_Base_bitset	signature:() const
_M_do_xor	/Users/lij/.vim/stl/bitset	/^  void _M_do_xor(const _Base_bitset<1>& __x) { _M_w ^= __x._M_w; }$/;"	f	struct:_Base_bitset	access:public	signature:(const _Base_bitset<1>& __x)
_M_do_xor	/Users/lij/.vim/stl/bitset	/^  void _M_do_xor(const _Base_bitset<_Nw>& __x) {$/;"	f	struct:_Base_bitset	access:public	signature:(const _Base_bitset<_Nw>& __x)
_M_done	/Users/lij/.vim/stl/valarray	/^  bool _M_done() const { return _M_indices[0] == _M_gslice._M_lengths[0]; }$/;"	f	struct:_Gslice_Iter	access:public	signature:() const
_M_empty	/Users/lij/.vim/stl/valarray	/^  bool _M_empty() const { return _M_lengths.size() == 0; }$/;"	f	class:gslice	access:public	signature:() const
_M_empty_initialize	/Users/lij/.vim/stl/stl_tree.h	/^  void _M_empty_initialize() {$/;"	f	class:_Rb_tree	access:private	signature:()
_M_end_marker	/Users/lij/.vim/stl/stl_iterator.h	/^  bool _M_end_marker;$/;"	m	class:istream_iterator	access:protected
_M_end_of_storage	/Users/lij/.vim/stl/stl_bvector.h	/^  unsigned int* _M_end_of_storage;  $/;"	m	class:_Bvector_base	access:protected
_M_end_of_storage	/Users/lij/.vim/stl/stl_bvector.h	/^  unsigned int* _M_end_of_storage;$/;"	m	class:_Bvector_alloc_base	access:protected
_M_end_of_storage	/Users/lij/.vim/stl/stl_vector.h	/^  _Tp* _M_end_of_storage;$/;"	m	class:_Vector_alloc_base	access:protected
_M_end_of_storage	/Users/lij/.vim/stl/string	/^  _Tp* _M_end_of_storage;$/;"	m	class:_String_alloc_base	file:	access:protected
_M_end_of_storage	/Users/lij/.vim/stl/string	/^  _Tp* _M_end_of_storage;$/;"	m	class:_String_base	file:	access:protected
_M_equal	/Users/lij/.vim/stl/stl_iterator.h	/^  bool _M_equal(const istream_iterator& __x) const$/;"	f	class:istream_iterator	access:public	signature:(const istream_iterator& __x) const
_M_equal_aux	/Users/lij/.vim/stl/stl_iterator.h	/^  ::_M_equal_aux(const istreambuf_iterator& __i) const$/;"	f	class:istreambuf_iterator	signature:(const istreambuf_iterator& __i) const
_M_equal_aux	/Users/lij/.vim/stl/stl_iterator.h	/^  bool _M_equal_aux(const istreambuf_iterator&) const;$/;"	p	class:istreambuf_iterator	access:private	signature:(const istreambuf_iterator&) const
_M_equals	/Users/lij/.vim/stl/stl_hashtable.h	/^      _M_equals(__eql),$/;"	p	class:hashtable	access:public	signature:(__eql)
_M_equals	/Users/lij/.vim/stl/stl_hashtable.h	/^      _M_equals(__ht._M_equals),$/;"	p	class:hashtable	access:public	signature:(__ht._M_equals)
_M_equals	/Users/lij/.vim/stl/stl_hashtable.h	/^  key_equal             _M_equals;$/;"	m	class:hashtable	access:private
_M_erase	/Users/lij/.vim/stl/stl_tree.h	/^  ::_M_erase(_Link_type __x)$/;"	f	class:_Rb_tree	signature:(_Link_type __x)
_M_erase	/Users/lij/.vim/stl/stl_tree.h	/^  void _M_erase(_Link_type __x);$/;"	p	class:_Rb_tree	access:private	signature:(_Link_type __x)
_M_erase_after	/Users/lij/.vim/stl/stl_slist.h	/^  _Slist_node_base* _M_erase_after(_Slist_node_base* __pos)$/;"	f	struct:_Slist_base	access:protected	signature:(_Slist_node_base* __pos)
_M_erase_after	/Users/lij/.vim/stl/stl_slist.h	/^  _Slist_node_base* _M_erase_after(_Slist_node_base*, _Slist_node_base*);$/;"	p	struct:_Slist_base	access:protected	signature:(_Slist_node_base*, _Slist_node_base*)
_M_erase_after	/Users/lij/.vim/stl/stl_slist.h	/^_Slist_base<_Tp,_Alloc>::_M_erase_after(_Slist_node_base* __before_first,$/;"	f	class:_Slist_base	signature:(_Slist_node_base* __before_first, _Slist_node_base* __last_node)
_M_erase_bucket	/Users/lij/.vim/stl/stl_hashtable.h	/^  ::_M_erase_bucket(const size_type __n, _Node* __first, _Node* __last)$/;"	f	class:hashtable	signature:(const size_type __n, _Node* __first, _Node* __last)
_M_erase_bucket	/Users/lij/.vim/stl/stl_hashtable.h	/^  ::_M_erase_bucket(const size_type __n, _Node* __last)$/;"	f	class:hashtable	signature:(const size_type __n, _Node* __last)
_M_erase_bucket	/Users/lij/.vim/stl/stl_hashtable.h	/^  void _M_erase_bucket(const size_type __n, _Node* __first, _Node* __last);$/;"	p	class:hashtable	access:private	signature:(const size_type __n, _Node* __first, _Node* __last)
_M_erase_bucket	/Users/lij/.vim/stl/stl_hashtable.h	/^  void _M_erase_bucket(const size_type __n, _Node* __last);$/;"	p	class:hashtable	access:private	signature:(const size_type __n, _Node* __last)
_M_f	/Users/lij/.vim/stl/stl_function.h	/^  _Ret (_Tp::*_M_f)() const;$/;"	m	class:const_mem_fun_ref_t	access:private
_M_f	/Users/lij/.vim/stl/stl_function.h	/^  _Ret (_Tp::*_M_f)() const;$/;"	m	class:const_mem_fun_t	access:private
_M_f	/Users/lij/.vim/stl/stl_function.h	/^  _Ret (_Tp::*_M_f)();$/;"	m	class:mem_fun_ref_t	access:private
_M_f	/Users/lij/.vim/stl/stl_function.h	/^  _Ret (_Tp::*_M_f)();$/;"	m	class:mem_fun_t	access:private
_M_f	/Users/lij/.vim/stl/stl_function.h	/^  _Ret (_Tp::*_M_f)(_Arg) const;$/;"	m	class:const_mem_fun1_ref_t	access:private
_M_f	/Users/lij/.vim/stl/stl_function.h	/^  _Ret (_Tp::*_M_f)(_Arg) const;$/;"	m	class:const_mem_fun1_t	access:private
_M_f	/Users/lij/.vim/stl/stl_function.h	/^  _Ret (_Tp::*_M_f)(_Arg);$/;"	m	class:mem_fun1_ref_t	access:private
_M_f	/Users/lij/.vim/stl/stl_function.h	/^  _Ret (_Tp::*_M_f)(_Arg);$/;"	m	class:mem_fun1_t	access:private
_M_f	/Users/lij/.vim/stl/stl_function.h	/^  void (_Tp::*_M_f)() const;$/;"	m	class:const_mem_fun_ref_t	access:private
_M_f	/Users/lij/.vim/stl/stl_function.h	/^  void (_Tp::*_M_f)() const;$/;"	m	class:const_mem_fun_t	access:private
_M_f	/Users/lij/.vim/stl/stl_function.h	/^  void (_Tp::*_M_f)();$/;"	m	class:mem_fun_ref_t	access:private
_M_f	/Users/lij/.vim/stl/stl_function.h	/^  void (_Tp::*_M_f)();$/;"	m	class:mem_fun_t	access:private
_M_f	/Users/lij/.vim/stl/stl_function.h	/^  void (_Tp::*_M_f)(_Arg) const;$/;"	m	class:const_mem_fun1_ref_t	access:private
_M_f	/Users/lij/.vim/stl/stl_function.h	/^  void (_Tp::*_M_f)(_Arg) const;$/;"	m	class:const_mem_fun1_t	access:private
_M_f	/Users/lij/.vim/stl/stl_function.h	/^  void (_Tp::*_M_f)(_Arg);$/;"	m	class:mem_fun1_ref_t	access:private
_M_f	/Users/lij/.vim/stl/stl_function.h	/^  void (_Tp::*_M_f)(_Arg);$/;"	m	class:mem_fun1_t	access:private
_M_fill_assign	/Users/lij/.vim/stl/stl_bvector.h	/^  void _M_fill_assign(size_t __n, bool __x) {$/;"	f	class:__BVECTOR	access:public	signature:(size_t __n, bool __x)
_M_fill_assign	/Users/lij/.vim/stl/stl_deque.h	/^  void _M_fill_assign(size_type __n, const _Tp& __val) {$/;"	f	class:deque	access:public	signature:(size_type __n, const _Tp& __val)
_M_fill_assign	/Users/lij/.vim/stl/stl_list.h	/^  void _M_fill_assign(size_type __n, const _Tp& __val);$/;"	p	class:list	access:public	signature:(size_type __n, const _Tp& __val)
_M_fill_assign	/Users/lij/.vim/stl/stl_list.h	/^void list<_Tp, _Alloc>::_M_fill_assign(size_type __n, const _Tp& __val) {$/;"	f	class:list	signature:(size_type __n, const _Tp& __val)
_M_fill_assign	/Users/lij/.vim/stl/stl_slist.h	/^  void _M_fill_assign(size_type __n, const _Tp& __val);$/;"	p	class:slist	access:public	signature:(size_type __n, const _Tp& __val)
_M_fill_assign	/Users/lij/.vim/stl/stl_slist.h	/^void slist<_Tp, _Alloc>::_M_fill_assign(size_type __n, const _Tp& __val) {$/;"	f	class:slist	signature:(size_type __n, const _Tp& __val)
_M_fill_assign	/Users/lij/.vim/stl/stl_vector.h	/^  void _M_fill_assign(size_type __n, const _Tp& __val);$/;"	p	class:vector	access:public	signature:(size_type __n, const _Tp& __val)
_M_fill_assign	/Users/lij/.vim/stl/stl_vector.h	/^void vector<_Tp, _Alloc>::_M_fill_assign(size_t __n, const value_type& __val) $/;"	f	class:vector	signature:(size_t __n, const value_type& __val)
_M_fill_initialize	/Users/lij/.vim/stl/stl_deque.h	/^  void _M_fill_initialize(const value_type& __value);$/;"	p	class:deque	access:protected	signature:(const value_type& __value)
_M_fill_initialize	/Users/lij/.vim/stl/stl_deque.h	/^void deque<_Tp,_Alloc>::_M_fill_initialize(const value_type& __value) {$/;"	f	class:deque	signature:(const value_type& __value)
_M_fill_insert	/Users/lij/.vim/stl/stl_bvector.h	/^  void _M_fill_insert(iterator __position, size_type __n, bool __x) {$/;"	f	class:__BVECTOR	access:public	signature:(iterator __position, size_type __n, bool __x)
_M_fill_insert	/Users/lij/.vim/stl/stl_deque.h	/^  void _M_fill_insert(iterator __pos, size_type __n, const value_type& __x); $/;"	p	class:deque	access:public	signature:(iterator __pos, size_type __n, const value_type& __x)
_M_fill_insert	/Users/lij/.vim/stl/stl_deque.h	/^void deque<_Tp, _Alloc>::_M_fill_insert(iterator __pos,$/;"	f	class:deque	signature:(iterator __pos, size_type __n, const value_type& __x)
_M_fill_insert	/Users/lij/.vim/stl/stl_list.h	/^  void _M_fill_insert(iterator __pos, size_type __n, const _Tp& __x); $/;"	p	class:list	access:public	signature:(iterator __pos, size_type __n, const _Tp& __x)
_M_fill_insert	/Users/lij/.vim/stl/stl_list.h	/^list<_Tp, _Alloc>::_M_fill_insert(iterator __position,$/;"	f	class:list	signature:(iterator __position, size_type __n, const _Tp& __x)
_M_fill_insert	/Users/lij/.vim/stl/stl_vector.h	/^  void _M_fill_insert (iterator __pos, size_type __n, const _Tp& __x);$/;"	p	class:vector	access:public	signature:(iterator __pos, size_type __n, const _Tp& __x)
_M_fill_insert	/Users/lij/.vim/stl/stl_vector.h	/^void vector<_Tp, _Alloc>::_M_fill_insert(iterator __position, size_type __n, $/;"	f	class:vector	signature:(iterator __position, size_type __n, const _Tp& __x)
_M_finish	/Users/lij/.vim/stl/stl_bvector.h	/^  _Bit_iterator _M_finish;$/;"	m	class:_Bvector_alloc_base	access:protected
_M_finish	/Users/lij/.vim/stl/stl_bvector.h	/^  _Bit_iterator _M_finish;$/;"	m	class:_Bvector_base	access:protected
_M_finish	/Users/lij/.vim/stl/stl_deque.h	/^  iterator _M_finish;$/;"	m	class:_Deque_base	access:protected
_M_finish	/Users/lij/.vim/stl/stl_vector.h	/^  _Tp* _M_finish;$/;"	m	class:_Vector_alloc_base	access:protected
_M_finish	/Users/lij/.vim/stl/string	/^  _Tp* _M_finish;$/;"	m	class:_String_alloc_base	file:	access:protected
_M_finish	/Users/lij/.vim/stl/string	/^  _Tp* _M_finish;$/;"	m	class:_String_base	file:	access:protected
_M_first	/Users/lij/.vim/stl/stl_deque.h	/^  _Tp* _M_first;$/;"	m	struct:_Deque_iterator	access:public
_M_first	/Users/lij/.vim/stl/string	/^  const _Pointer _M_first;$/;"	m	struct:_Not_within_traits	file:	access:public
_M_first	/Users/lij/.vim/stl/valarray	/^  _Tp*   _M_first;$/;"	m	struct:_Valarray_base	file:	access:public
_M_fn	/Users/lij/.vim/stl/stl_rope.h	/^    char_producer<_CharT>* _M_fn;$/;"	m	struct:_Rope_RopeFunction	access:public
_M_fn1	/Users/lij/.vim/stl/stl_function.h	/^  _Operation1 _M_fn1;$/;"	m	class:binary_compose	access:protected
_M_fn1	/Users/lij/.vim/stl/stl_function.h	/^  _Operation1 _M_fn1;$/;"	m	class:unary_compose	access:protected
_M_fn2	/Users/lij/.vim/stl/stl_function.h	/^  _Operation2 _M_fn2;$/;"	m	class:binary_compose	access:protected
_M_fn2	/Users/lij/.vim/stl/stl_function.h	/^  _Operation2 _M_fn2;$/;"	m	class:unary_compose	access:protected
_M_fn3	/Users/lij/.vim/stl/stl_function.h	/^  _Operation3 _M_fn3;$/;"	m	class:binary_compose	access:protected
_M_free_c_string	/Users/lij/.vim/stl/ropeimpl.h	/^inline void _Rope_RopeRep<_CharT,_Alloc>::_M_free_c_string()$/;"	f	class:_Rope_RopeRep	signature:()
_M_free_c_string	/Users/lij/.vim/stl/stl_rope.h	/^          void _M_free_c_string();$/;"	p	struct:_Rope_RopeRep	access:public	signature:()
_M_free_list_link	/Users/lij/.vim/stl/stl_alloc.h	/^        union _Obj* _M_free_list_link;$/;"	m	union:__default_alloc_template::_Obj	typeref:union:__default_alloc_template::_Obj::_Obj	access:public
_M_free_tree	/Users/lij/.vim/stl/ropeimpl.h	/^void _Rope_RopeRep<_CharT,_Alloc>::_M_free_tree()$/;"	f	class:_Rope_RopeRep	signature:()
_M_free_tree	/Users/lij/.vim/stl/stl_rope.h	/^          void _M_free_tree();$/;"	p	struct:_Rope_RopeRep	access:public	signature:()
_M_get_key	/Users/lij/.vim/stl/stl_hashtable.h	/^      _M_get_key(__ext),$/;"	p	class:hashtable	access:public	signature:(__ext)
_M_get_key	/Users/lij/.vim/stl/stl_hashtable.h	/^      _M_get_key(__ht._M_get_key),$/;"	p	class:hashtable	access:public	signature:(__ht._M_get_key)
_M_get_key	/Users/lij/.vim/stl/stl_hashtable.h	/^  _ExtractKey           _M_get_key;$/;"	m	class:hashtable	access:private
_M_get_node	/Users/lij/.vim/stl/stl_hashtable.h	/^  _Node* _M_get_node() { return _M_node_allocator.allocate(1); }$/;"	f	class:hashtable	access:private	signature:()
_M_get_node	/Users/lij/.vim/stl/stl_hashtable.h	/^  _Node* _M_get_node() { return _M_node_allocator_type::allocate(1); }$/;"	f	class:hashtable	access:private	signature:()
_M_get_node	/Users/lij/.vim/stl/stl_list.h	/^  _List_node<_Tp>* _M_get_node() { return _Alloc_type::allocate(1); }$/;"	f	class:_List_alloc_base	access:protected	signature:()
_M_get_node	/Users/lij/.vim/stl/stl_list.h	/^  _List_node<_Tp>* _M_get_node() { return _Alloc_type::allocate(1); }$/;"	f	class:_List_base	access:protected	signature:()
_M_get_node	/Users/lij/.vim/stl/stl_list.h	/^  _List_node<_Tp>* _M_get_node()$/;"	f	class:_List_alloc_base	access:protected	signature:()
_M_get_node	/Users/lij/.vim/stl/stl_slist.h	/^  _Slist_node<_Tp>* _M_get_node() $/;"	f	class:_Slist_alloc_base	access:protected	signature:()
_M_get_node	/Users/lij/.vim/stl/stl_slist.h	/^  _Slist_node<_Tp>* _M_get_node() { return _Alloc_type::allocate(1); }$/;"	f	class:_Slist_alloc_base	access:protected	signature:()
_M_get_node	/Users/lij/.vim/stl/stl_slist.h	/^  _Slist_node<_Tp>* _M_get_node() { return _Alloc_type::allocate(1); }$/;"	f	struct:_Slist_base	access:protected	signature:()
_M_get_node	/Users/lij/.vim/stl/stl_tree.h	/^  _Rb_tree_node<_Tp>* _M_get_node() $/;"	f	class:_Rb_tree_alloc_base	access:protected	signature:()
_M_get_node	/Users/lij/.vim/stl/stl_tree.h	/^  _Rb_tree_node<_Tp>* _M_get_node()$/;"	f	class:_Rb_tree_alloc_base	access:protected	signature:()
_M_get_node	/Users/lij/.vim/stl/stl_tree.h	/^  _Rb_tree_node<_Tp>* _M_get_node()$/;"	f	struct:_Rb_tree_base	access:protected	signature:()
_M_getc	/Users/lij/.vim/stl/stl_iterator.h	/^  void _M_getc() const {$/;"	f	class:istreambuf_iterator	access:private	signature:() const
_M_getword	/Users/lij/.vim/stl/bitset	/^  _WordT  _M_getword(size_t __pos) const { return _M_w[_S_whichword(__pos)]; }$/;"	f	struct:_Base_bitset	access:public	signature:(size_t __pos) const
_M_getword	/Users/lij/.vim/stl/bitset	/^  _WordT  _M_getword(size_t) const { return _M_w; }$/;"	f	struct:_Base_bitset	access:public	signature:(size_t) const
_M_getword	/Users/lij/.vim/stl/bitset	/^  _WordT& _M_getword(size_t __pos)       { return _M_w[_S_whichword(__pos)]; }$/;"	f	struct:_Base_bitset	access:public	signature:(size_t __pos)
_M_getword	/Users/lij/.vim/stl/bitset	/^  _WordT& _M_getword(size_t)       { return _M_w; }$/;"	f	struct:_Base_bitset	access:public	signature:(size_t)
_M_gslice	/Users/lij/.vim/stl/valarray	/^  const gslice& _M_gslice;$/;"	m	struct:_Gslice_Iter	file:	access:public
_M_gslice	/Users/lij/.vim/stl/valarray	/^  gslice                _M_gslice;$/;"	m	class:gslice_array	file:	access:private
_M_hash	/Users/lij/.vim/stl/stl_hashtable.h	/^      _M_hash(__hf),$/;"	p	class:hashtable	access:public	signature:(__hf)
_M_hash	/Users/lij/.vim/stl/stl_hashtable.h	/^      _M_hash(__ht._M_hash),$/;"	p	class:hashtable	access:public	signature:(__ht._M_hash)
_M_hash	/Users/lij/.vim/stl/stl_hashtable.h	/^  hasher                _M_hash;$/;"	m	class:hashtable	access:private
_M_head	/Users/lij/.vim/stl/stl_slist.h	/^  _Slist_node_base _M_head;$/;"	m	class:_Slist_alloc_base	access:protected
_M_head	/Users/lij/.vim/stl/stl_slist.h	/^  _Slist_node_base _M_head;$/;"	m	struct:_Slist_base	access:protected
_M_header	/Users/lij/.vim/stl/stl_tree.h	/^  _Rb_tree_node<_Tp>* _M_header;$/;"	m	class:_Rb_tree_alloc_base	access:protected
_M_header	/Users/lij/.vim/stl/stl_tree.h	/^  _Rb_tree_node<_Tp>* _M_header;$/;"	m	struct:_Rb_tree_base	access:protected
_M_hiword	/Users/lij/.vim/stl/bitset	/^  _WordT  _M_hiword() const { return _M_w; }$/;"	f	struct:_Base_bitset	access:public	signature:() const
_M_hiword	/Users/lij/.vim/stl/bitset	/^  _WordT  _M_hiword() const { return _M_w[_Nw - 1]; }$/;"	f	struct:_Base_bitset	access:public	signature:() const
_M_hiword	/Users/lij/.vim/stl/bitset	/^  _WordT& _M_hiword()       { return _M_w; }$/;"	f	struct:_Base_bitset	access:public	signature:()
_M_hiword	/Users/lij/.vim/stl/bitset	/^  _WordT& _M_hiword()       { return _M_w[_Nw - 1]; }$/;"	f	struct:_Base_bitset	access:public	signature:()
_M_ht	/Users/lij/.vim/stl/stl_hash_map.h	/^  _Ht _M_ht;$/;"	m	class:hash_map	access:private
_M_ht	/Users/lij/.vim/stl/stl_hash_map.h	/^  _Ht _M_ht;$/;"	m	class:hash_multimap	access:private
_M_ht	/Users/lij/.vim/stl/stl_hash_set.h	/^  _Ht _M_ht;$/;"	m	class:hash_multiset	access:private
_M_ht	/Users/lij/.vim/stl/stl_hash_set.h	/^  _Ht _M_ht;$/;"	m	class:hash_set	access:private
_M_ht	/Users/lij/.vim/stl/stl_hashtable.h	/^  _Hashtable* _M_ht;$/;"	m	struct:_Hashtable_iterator	access:public
_M_ht	/Users/lij/.vim/stl/stl_hashtable.h	/^  const _Hashtable* _M_ht;$/;"	m	struct:_Hashtable_const_iterator	access:public
_M_incr	/Users/lij/.vim/stl/ropeimpl.h	/^void _Rope_iterator_base<_CharT,_Alloc>::_M_incr(size_t __n) {$/;"	f	class:_Rope_iterator_base	signature:(size_t __n)
_M_incr	/Users/lij/.vim/stl/stl_bvector.h	/^  void _M_incr(ptrdiff_t __i) {$/;"	f	struct:_Bit_iterator_base	access:public	signature:(ptrdiff_t __i)
_M_incr	/Users/lij/.vim/stl/stl_list.h	/^  void _M_incr() { _M_node = _M_node->_M_next; }$/;"	f	struct:_List_iterator_base	access:public	signature:()
_M_incr	/Users/lij/.vim/stl/stl_rope.h	/^        void _M_incr () {}$/;"	f	struct:_Rope_RopeRep	access:public	signature:()
_M_incr	/Users/lij/.vim/stl/stl_rope.h	/^    void _M_incr(size_t __n);$/;"	p	class:_Rope_iterator_base	access:protected	signature:(size_t __n)
_M_incr	/Users/lij/.vim/stl/stl_slist.h	/^  void _M_incr() { _M_node = _M_node->_M_next; }$/;"	f	struct:_Slist_iterator_base	access:public	signature:()
_M_incr	/Users/lij/.vim/stl/stl_threads.h	/^   void _M_incr() { InterlockedIncrement((_RC_t*)&_M_ref_count); }$/;"	f	struct:_Refcount_Base	access:public	signature:()
_M_incr	/Users/lij/.vim/stl/stl_threads.h	/^  void _M_incr() {  __add_and_fetch(&_M_ref_count, 1); }$/;"	f	struct:_Refcount_Base	access:public	signature:()
_M_incr	/Users/lij/.vim/stl/stl_threads.h	/^  void _M_incr() { ++_M_ref_count; }$/;"	f	struct:_Refcount_Base	access:public	signature:()
_M_incr	/Users/lij/.vim/stl/stl_threads.h	/^  void _M_incr() {$/;"	f	struct:_Refcount_Base	access:public	signature:()
_M_incr	/Users/lij/.vim/stl/valarray	/^  bool _M_incr() {$/;"	f	struct:_Gslice_Iter	access:public	signature:()
_M_increment	/Users/lij/.vim/stl/stl_tree.h	/^  void _M_increment()$/;"	f	struct:_Rb_tree_base_iterator	access:public	signature:()
_M_index1	/Users/lij/.vim/stl/stl_function.h	/^  size_t _M_index1;$/;"	m	class:subtractive_rng	access:private
_M_index2	/Users/lij/.vim/stl/stl_function.h	/^  size_t _M_index2;$/;"	m	class:subtractive_rng	access:private
_M_indices	/Users/lij/.vim/stl/valarray	/^  valarray<size_t> _M_indices;$/;"	m	struct:_Gslice_Iter	file:	access:public
_M_init	/Users/lij/.vim/stl/stl_iterator.h	/^  void _M_init(streambuf_type* __p) {$/;"	f	class:istreambuf_iterator	access:private	signature:(streambuf_type* __p)
_M_initialize	/Users/lij/.vim/stl/stl_bvector.h	/^  void _M_initialize(size_type __n) {$/;"	f	class:__BVECTOR	access:protected	signature:(size_type __n)
_M_initialize	/Users/lij/.vim/stl/stl_function.h	/^  void _M_initialize(unsigned int __seed)$/;"	f	class:subtractive_rng	access:public	signature:(unsigned int __seed)
_M_initialize	/Users/lij/.vim/stl/stl_threads.h	/^  void _M_initialize() { _M_lock = 0; }$/;"	f	struct:_STL_mutex_lock	access:public	signature:()
_M_initialize	/Users/lij/.vim/stl/valarray	/^  void _M_initialize(__false_type)$/;"	f	class:valarray	file:	access:private	signature:(__false_type)
_M_initialize	/Users/lij/.vim/stl/valarray	/^  void _M_initialize(__true_type) {}$/;"	f	class:valarray	file:	access:private	signature:(__true_type)
_M_initialize_aux	/Users/lij/.vim/stl/stl_vector.h	/^  void _M_initialize_aux(_InputIterator __first, _InputIterator __last,$/;"	f	class:vector	access:public	signature:(_InputIterator __first, _InputIterator __last, __false_type)
_M_initialize_aux	/Users/lij/.vim/stl/stl_vector.h	/^  void _M_initialize_aux(_Integer __n, _Integer __value, __true_type) {$/;"	f	class:vector	access:public	signature:(_Integer __n, _Integer __value, __true_type)
_M_initialize_buckets	/Users/lij/.vim/stl/stl_hashtable.h	/^  void _M_initialize_buckets(size_type __n)$/;"	f	class:hashtable	access:private	signature:(size_type __n)
_M_initialize_buffer	/Users/lij/.vim/stl/stl_tempbuf.h	/^  void _M_initialize_buffer(const _Tp& val, __false_type) {$/;"	f	class:_Temporary_buffer	access:private	signature:(const _Tp& val, __false_type)
_M_initialize_buffer	/Users/lij/.vim/stl/stl_tempbuf.h	/^  void _M_initialize_buffer(const _Tp&, __true_type) {}$/;"	f	class:_Temporary_buffer	access:private	signature:(const _Tp&, __true_type)
_M_initialize_dispatch	/Users/lij/.vim/stl/stl_bvector.h	/^  void _M_initialize_dispatch(_InputIterator __first, _InputIterator __last,$/;"	f	class:__BVECTOR	access:public	signature:(_InputIterator __first, _InputIterator __last, __false_type)
_M_initialize_dispatch	/Users/lij/.vim/stl/stl_bvector.h	/^  void _M_initialize_dispatch(_Integer __n, _Integer __x, __true_type) {$/;"	f	class:__BVECTOR	access:public	signature:(_Integer __n, _Integer __x, __true_type)
_M_initialize_dispatch	/Users/lij/.vim/stl/stl_deque.h	/^  void _M_initialize_dispatch(_InputIter __first, _InputIter __last,$/;"	f	class:deque	access:public	signature:(_InputIter __first, _InputIter __last, __false_type)
_M_initialize_dispatch	/Users/lij/.vim/stl/stl_deque.h	/^  void _M_initialize_dispatch(_Integer __n, _Integer __x, __true_type) {$/;"	f	class:deque	access:public	signature:(_Integer __n, _Integer __x, __true_type)
_M_initialize_dispatch	/Users/lij/.vim/stl/string	/^  void _M_initialize_dispatch(_InputIter __f, _InputIter __l, __false_type) {$/;"	f	class:basic_string	file:	access:private	signature:(_InputIter __f, _InputIter __l, __false_type)
_M_initialize_dispatch	/Users/lij/.vim/stl/string	/^  void _M_initialize_dispatch(_Integer __n, _Integer __x, __true_type) {$/;"	f	class:basic_string	file:	access:private	signature:(_Integer __n, _Integer __x, __true_type)
_M_initialize_map	/Users/lij/.vim/stl/stl_deque.h	/^  void _M_initialize_map(size_t);$/;"	p	class:_Deque_base	access:protected	signature:(size_t)
_M_initialize_map	/Users/lij/.vim/stl/stl_deque.h	/^_Deque_base<_Tp,_Alloc>::_M_initialize_map(size_t __num_elements)$/;"	f	class:_Deque_base	signature:(size_t __num_elements)
_M_initialize_range	/Users/lij/.vim/stl/stl_bvector.h	/^  void _M_initialize_range(_ForwardIterator __first, _ForwardIterator __last,$/;"	f	class:__BVECTOR	access:protected	signature:(_ForwardIterator __first, _ForwardIterator __last, forward_iterator_tag)
_M_initialize_range	/Users/lij/.vim/stl/stl_bvector.h	/^  void _M_initialize_range(_InputIterator __first, _InputIterator __last,$/;"	f	class:__BVECTOR	access:protected	signature:(_InputIterator __first, _InputIterator __last, input_iterator_tag)
_M_insert	/Users/lij/.vim/stl/stl_tree.h	/^  ::_M_insert(_Base_ptr __x_, _Base_ptr __y_, const _Value& __v)$/;"	f	class:_Rb_tree	signature:(_Base_ptr __x_, _Base_ptr __y_, const _Value& __v)
_M_insert	/Users/lij/.vim/stl/stl_tree.h	/^  iterator _M_insert(_Base_ptr __x, _Base_ptr __y, const value_type& __v);$/;"	p	class:_Rb_tree	access:private	signature:(_Base_ptr __x, _Base_ptr __y, const value_type& __v)
_M_insert_after	/Users/lij/.vim/stl/stl_slist.h	/^  _Node* _M_insert_after(_Node_base* __pos) {$/;"	f	class:slist	access:private	signature:(_Node_base* __pos)
_M_insert_after	/Users/lij/.vim/stl/stl_slist.h	/^  _Node* _M_insert_after(_Node_base* __pos, const value_type& __x) {$/;"	f	class:slist	access:private	signature:(_Node_base* __pos, const value_type& __x)
_M_insert_after_fill	/Users/lij/.vim/stl/stl_slist.h	/^  void _M_insert_after_fill(_Node_base* __pos,$/;"	f	class:slist	access:private	signature:(_Node_base* __pos, size_type __n, const value_type& __x)
_M_insert_after_range	/Users/lij/.vim/stl/stl_slist.h	/^  void _M_insert_after_range(_Node_base* __pos, $/;"	f	class:slist	access:private	signature:(_Node_base* __pos, _InIter __first, _InIter __last)
_M_insert_after_range	/Users/lij/.vim/stl/stl_slist.h	/^  void _M_insert_after_range(_Node_base* __pos, _Integer __n, _Integer __x,$/;"	f	class:slist	access:private	signature:(_Node_base* __pos, _Integer __n, _Integer __x, __true_type)
_M_insert_after_range	/Users/lij/.vim/stl/stl_slist.h	/^  void _M_insert_after_range(_Node_base* __pos,$/;"	f	class:slist	access:private	signature:(_Node_base* __pos, _InIter __first, _InIter __last, __false_type)
_M_insert_after_range	/Users/lij/.vim/stl/stl_slist.h	/^  void _M_insert_after_range(_Node_base* __pos,$/;"	f	class:slist	access:private	signature:(_Node_base* __pos, const value_type* __first, const value_type* __last)
_M_insert_after_range	/Users/lij/.vim/stl/stl_slist.h	/^  void _M_insert_after_range(_Node_base* __pos,$/;"	f	class:slist	access:private	signature:(_Node_base* __pos, const_iterator __first, const_iterator __last)
_M_insert_aux	/Users/lij/.vim/stl/stl_bvector.h	/^  void _M_insert_aux(iterator __position, bool __x) {$/;"	f	class:__BVECTOR	access:protected	signature:(iterator __position, bool __x)
_M_insert_aux	/Users/lij/.vim/stl/stl_deque.h	/^  iterator _M_insert_aux(iterator __pos);$/;"	p	class:deque	access:protected	signature:(iterator __pos)
_M_insert_aux	/Users/lij/.vim/stl/stl_deque.h	/^  iterator _M_insert_aux(iterator __pos, const value_type& __x);$/;"	p	class:deque	access:protected	signature:(iterator __pos, const value_type& __x)
_M_insert_aux	/Users/lij/.vim/stl/stl_deque.h	/^  void _M_insert_aux(iterator __pos, $/;"	p	class:deque	access:protected	signature:(iterator __pos, _ForwardIterator __first, _ForwardIterator __last, size_type __n)
_M_insert_aux	/Users/lij/.vim/stl/stl_deque.h	/^  void _M_insert_aux(iterator __pos, $/;"	p	class:deque	access:protected	signature:(iterator __pos, const_iterator __first, const_iterator __last, size_type __n)
_M_insert_aux	/Users/lij/.vim/stl/stl_deque.h	/^  void _M_insert_aux(iterator __pos, size_type __n, const value_type& __x);$/;"	p	class:deque	access:protected	signature:(iterator __pos, size_type __n, const value_type& __x)
_M_insert_aux	/Users/lij/.vim/stl/stl_deque.h	/^  void _M_insert_aux(iterator __pos,$/;"	p	class:deque	access:protected	signature:(iterator __pos, const value_type* __first, const value_type* __last, size_type __n)
_M_insert_aux	/Users/lij/.vim/stl/stl_deque.h	/^deque<_Tp,_Alloc>::_M_insert_aux(iterator __pos)$/;"	f	class:deque	signature:(iterator __pos)
_M_insert_aux	/Users/lij/.vim/stl/stl_deque.h	/^deque<_Tp,_Alloc>::_M_insert_aux(iterator __pos, const value_type& __x)$/;"	f	class:deque	signature:(iterator __pos, const value_type& __x)
_M_insert_aux	/Users/lij/.vim/stl/stl_deque.h	/^void deque<_Tp,_Alloc>::_M_insert_aux(iterator __pos,$/;"	f	class:deque	signature:(iterator __pos, _ForwardIterator __first, _ForwardIterator __last, size_type __n)
_M_insert_aux	/Users/lij/.vim/stl/stl_deque.h	/^void deque<_Tp,_Alloc>::_M_insert_aux(iterator __pos,$/;"	f	class:deque	signature:(iterator __pos, const value_type* __first, const value_type* __last, size_type __n)
_M_insert_aux	/Users/lij/.vim/stl/stl_deque.h	/^void deque<_Tp,_Alloc>::_M_insert_aux(iterator __pos,$/;"	f	class:deque	signature:(iterator __pos, const_iterator __first, const_iterator __last, size_type __n)
_M_insert_aux	/Users/lij/.vim/stl/stl_deque.h	/^void deque<_Tp,_Alloc>::_M_insert_aux(iterator __pos,$/;"	f	class:deque	signature:(iterator __pos, size_type __n, const value_type& __x)
_M_insert_aux	/Users/lij/.vim/stl/stl_vector.h	/^  void _M_insert_aux(iterator __position);$/;"	p	class:vector	access:protected	signature:(iterator __position)
_M_insert_aux	/Users/lij/.vim/stl/stl_vector.h	/^  void _M_insert_aux(iterator __position, const _Tp& __x);$/;"	p	class:vector	access:protected	signature:(iterator __position, const _Tp& __x)
_M_insert_aux	/Users/lij/.vim/stl/stl_vector.h	/^vector<_Tp, _Alloc>::_M_insert_aux(iterator __position)$/;"	f	class:vector	signature:(iterator __position)
_M_insert_aux	/Users/lij/.vim/stl/stl_vector.h	/^vector<_Tp, _Alloc>::_M_insert_aux(iterator __position, const _Tp& __x)$/;"	f	class:vector	signature:(iterator __position, const _Tp& __x)
_M_insert_aux	/Users/lij/.vim/stl/string	/^  ::_M_insert_aux(basic_string<_CharT,_Traits,_Alloc>::iterator __p,$/;"	f	class:basic_string	signature:(basic_string<_CharT,_Traits,_Alloc>::iterator __p, _CharT __c)
_M_insert_aux	/Users/lij/.vim/stl/string	/^  iterator _M_insert_aux(iterator, _CharT);$/;"	p	class:basic_string	file:	access:private	signature:(iterator, _CharT)
_M_insert_dispatch	/Users/lij/.vim/stl/stl_bvector.h	/^  void _M_insert_dispatch(iterator __pos, _Integer __n, _Integer __x,$/;"	f	class:__BVECTOR	access:public	signature:(iterator __pos, _Integer __n, _Integer __x, __true_type)
_M_insert_dispatch	/Users/lij/.vim/stl/stl_bvector.h	/^  void _M_insert_dispatch(iterator __pos,$/;"	f	class:__BVECTOR	access:public	signature:(iterator __pos, _InputIterator __first, _InputIterator __last, __false_type)
_M_insert_dispatch	/Users/lij/.vim/stl/stl_deque.h	/^  void _M_insert_dispatch(iterator __pos, _Integer __n, _Integer __x,$/;"	f	class:deque	access:public	signature:(iterator __pos, _Integer __n, _Integer __x, __true_type)
_M_insert_dispatch	/Users/lij/.vim/stl/stl_deque.h	/^  void _M_insert_dispatch(iterator __pos,$/;"	f	class:deque	access:public	signature:(iterator __pos, _InputIterator __first, _InputIterator __last, __false_type)
_M_insert_dispatch	/Users/lij/.vim/stl/stl_list.h	/^  void _M_insert_dispatch(iterator __pos, _Integer __n, _Integer __x,$/;"	f	class:list	access:public	signature:(iterator __pos, _Integer __n, _Integer __x, __true_type)
_M_insert_dispatch	/Users/lij/.vim/stl/stl_list.h	/^  void _M_insert_dispatch(iterator __pos,$/;"	p	class:list	access:public	signature:(iterator __pos, _InputIterator __first, _InputIterator __last, __false_type)
_M_insert_dispatch	/Users/lij/.vim/stl/stl_list.h	/^list<_Tp, _Alloc>::_M_insert_dispatch(iterator __position,$/;"	f	class:list	signature:(iterator __position, _InputIter __first, _InputIter __last, __false_type)
_M_insert_dispatch	/Users/lij/.vim/stl/stl_vector.h	/^  void _M_insert_dispatch(iterator __pos, _Integer __n, _Integer __val,$/;"	f	class:vector	access:public	signature:(iterator __pos, _Integer __n, _Integer __val, __true_type)
_M_insert_dispatch	/Users/lij/.vim/stl/stl_vector.h	/^  void _M_insert_dispatch(iterator __pos,$/;"	f	class:vector	access:public	signature:(iterator __pos, _InputIterator __first, _InputIterator __last, __false_type)
_M_insert_dispatch	/Users/lij/.vim/stl/string	/^  void _M_insert_dispatch(iterator __p, _InputIter __first, _InputIter __last,$/;"	f	class:basic_string	file:	access:private	signature:(iterator __p, _InputIter __first, _InputIter __last, __false_type)
_M_insert_dispatch	/Users/lij/.vim/stl/string	/^  void _M_insert_dispatch(iterator __p, _Integer __n, _Integer __x,$/;"	f	class:basic_string	file:	access:private	signature:(iterator __p, _Integer __n, _Integer __x, __true_type)
_M_insert_range	/Users/lij/.vim/stl/stl_bvector.h	/^  void _M_insert_range(iterator __pos,$/;"	f	class:__BVECTOR	access:protected	signature:(iterator __pos, _InputIterator __first, _InputIterator __last, input_iterator_tag)
_M_insert_range	/Users/lij/.vim/stl/stl_bvector.h	/^  void _M_insert_range(iterator __position,$/;"	f	class:__BVECTOR	access:protected	signature:(iterator __position, _ForwardIterator __first, _ForwardIterator __last, forward_iterator_tag)
_M_is_any	/Users/lij/.vim/stl/bitset	/^  bool _M_is_any() const {$/;"	f	struct:_Base_bitset	access:public	signature:() const
_M_is_any	/Users/lij/.vim/stl/bitset	/^  bool _M_is_any() const$/;"	f	struct:_Base_bitset	access:public	signature:() const
_M_is_balanced	/Users/lij/.vim/stl/stl_rope.h	/^    bool _M_is_balanced:8;$/;"	m	struct:_Rope_RopeRep	access:public
_M_is_equal	/Users/lij/.vim/stl/bitset	/^  bool _M_is_equal(const _Base_bitset<1>& __x) const$/;"	f	struct:_Base_bitset	access:public	signature:(const _Base_bitset<1>& __x) const
_M_is_equal	/Users/lij/.vim/stl/bitset	/^  bool _M_is_equal(const _Base_bitset<_Nw>& __x) const {$/;"	f	struct:_Base_bitset	access:public	signature:(const _Base_bitset<_Nw>& __x) const
_M_iter	/Users/lij/.vim/stl/stl_raw_storage_iter.h	/^  _ForwardIterator _M_iter;$/;"	m	class:raw_storage_iterator	access:protected
_M_key_compare	/Users/lij/.vim/stl/stl_tree.h	/^  _Compare _M_key_compare;$/;"	m	class:_Rb_tree	access:protected
_M_last	/Users/lij/.vim/stl/stl_deque.h	/^  _Tp* _M_last;$/;"	m	struct:_Deque_iterator	access:public
_M_last	/Users/lij/.vim/stl/string	/^  const _Pointer _M_last;$/;"	m	struct:_Not_within_traits	file:	access:public
_M_leaf_index	/Users/lij/.vim/stl/stl_rope.h	/^    int _M_leaf_index;     \/\/ Last valid __pos in path_end;$/;"	m	class:_Rope_iterator_base	access:protected
_M_leaf_pos	/Users/lij/.vim/stl/stl_rope.h	/^    size_t _M_leaf_pos;    \/\/ Starting position for current leaf$/;"	m	class:_Rope_iterator_base	access:protected
_M_left	/Users/lij/.vim/stl/stl_rope.h	/^    _Rope_RopeRep<_CharT,_Alloc>* _M_left;$/;"	m	struct:_Rope_RopeConcatenation	access:public
_M_left	/Users/lij/.vim/stl/stl_tree.h	/^  _Base_ptr _M_left;$/;"	m	struct:_Rb_tree_node_base	access:public
_M_leftmost	/Users/lij/.vim/stl/stl_tree.h	/^  _Link_type& _M_leftmost() const $/;"	f	class:_Rb_tree	access:protected	signature:() const
_M_len	/Users/lij/.vim/stl/stl_tempbuf.h	/^  ptrdiff_t  _M_len;$/;"	m	class:_Temporary_buffer	access:private
_M_length	/Users/lij/.vim/stl/valarray	/^  size_t _M_length;$/;"	m	class:slice	file:	access:private
_M_lengths	/Users/lij/.vim/stl/valarray	/^  valarray<size_t> _M_lengths;$/;"	m	class:gslice	file:	access:private
_M_lock	/Users/lij/.vim/stl/pthread_alloc	/^        _M_lock () { pthread_mutex_lock(&_S_chunk_allocator_lock); }$/;"	f	class:_Pthread_alloc_template::_M_lock	access:public	signature:()
_M_lock	/Users/lij/.vim/stl/pthread_alloc	/^  class _M_lock {$/;"	c	class:_Pthread_alloc_template	file:	access:private
_M_lock	/Users/lij/.vim/stl/stl_threads.h	/^  _STL_mutex_lock& _M_lock;$/;"	m	struct:_STL_auto_lock	access:public
_M_lock	/Users/lij/.vim/stl/stl_threads.h	/^  volatile unsigned long _M_lock;$/;"	m	struct:_STL_mutex_lock	access:public
_M_map	/Users/lij/.vim/stl/stl_deque.h	/^  _Tp** _M_map;$/;"	m	class:_Deque_alloc_base	access:protected
_M_map	/Users/lij/.vim/stl/stl_deque.h	/^  _Tp** _M_map;$/;"	m	class:_Deque_base	access:protected
_M_map_allocator	/Users/lij/.vim/stl/stl_deque.h	/^  _Map_allocator_type _M_map_allocator;$/;"	m	class:_Deque_alloc_base	access:protected
_M_map_size	/Users/lij/.vim/stl/stl_deque.h	/^  size_t _M_map_size;  $/;"	m	class:_Deque_base	access:protected
_M_map_size	/Users/lij/.vim/stl/stl_deque.h	/^  size_t _M_map_size;$/;"	m	class:_Deque_alloc_base	access:protected
_M_mask	/Users/lij/.vim/stl/stl_bvector.h	/^  unsigned int _M_mask;$/;"	m	struct:_Bit_reference	access:public
_M_mask	/Users/lij/.vim/stl/valarray	/^  valarray<bool> _M_mask;$/;"	m	class:mask_array	file:	access:private
_M_name	/Users/lij/.vim/stl/stdexcept	/^  char _M_name[_S_bufsize];$/;"	m	class:__Named_exception	file:	access:private
_M_new_elements_at_back	/Users/lij/.vim/stl/stl_deque.h	/^  void _M_new_elements_at_back(size_type __new_elements);$/;"	p	class:deque	access:protected	signature:(size_type __new_elements)
_M_new_elements_at_back	/Users/lij/.vim/stl/stl_deque.h	/^void deque<_Tp,_Alloc>::_M_new_elements_at_back(size_type __new_elems)$/;"	f	class:deque	signature:(size_type __new_elems)
_M_new_elements_at_front	/Users/lij/.vim/stl/stl_deque.h	/^  void _M_new_elements_at_front(size_type __new_elements);$/;"	p	class:deque	access:protected	signature:(size_type __new_elements)
_M_new_elements_at_front	/Users/lij/.vim/stl/stl_deque.h	/^void deque<_Tp,_Alloc>::_M_new_elements_at_front(size_type __new_elems)$/;"	f	class:deque	signature:(size_type __new_elems)
_M_new_node	/Users/lij/.vim/stl/stl_hashtable.h	/^  _Node* _M_new_node(const value_type& __obj)$/;"	f	class:hashtable	access:private	signature:(const value_type& __obj)
_M_next	/Users/lij/.vim/stl/stl_hashtable.h	/^  _Hashtable_node* _M_next;$/;"	m	struct:_Hashtable_node	access:public
_M_next	/Users/lij/.vim/stl/stl_list.h	/^  _List_node_base* _M_next;$/;"	m	struct:_List_node_base	access:public
_M_next	/Users/lij/.vim/stl/stl_slist.h	/^  _Slist_node_base* _M_next;$/;"	m	struct:_Slist_node_base	access:public
_M_next_size	/Users/lij/.vim/stl/stl_hashtable.h	/^  size_type _M_next_size(size_type __n) const$/;"	f	class:hashtable	access:private	signature:(size_type __n) const
_M_nextc	/Users/lij/.vim/stl/stl_iterator.h	/^  void _M_nextc() {$/;"	f	class:istreambuf_iterator	access:private	signature:()
_M_node	/Users/lij/.vim/stl/stl_deque.h	/^  _Map_pointer _M_node;$/;"	m	struct:_Deque_iterator	access:public
_M_node	/Users/lij/.vim/stl/stl_list.h	/^  _List_node<_Tp>* _M_node;$/;"	m	class:_List_alloc_base	access:protected
_M_node	/Users/lij/.vim/stl/stl_list.h	/^  _List_node<_Tp>* _M_node;$/;"	m	class:_List_base	access:protected
_M_node	/Users/lij/.vim/stl/stl_list.h	/^  _List_node_base* _M_node;$/;"	m	struct:_List_iterator_base	access:public
_M_node	/Users/lij/.vim/stl/stl_slist.h	/^  _Slist_node_base* _M_node;$/;"	m	struct:_Slist_iterator_base	access:public
_M_node	/Users/lij/.vim/stl/stl_tree.h	/^  _Base_ptr _M_node;$/;"	m	struct:_Rb_tree_base_iterator	access:public
_M_node_allocator	/Users/lij/.vim/stl/stl_deque.h	/^  allocator_type      _M_node_allocator;$/;"	m	class:_Deque_alloc_base	access:protected
_M_node_allocator	/Users/lij/.vim/stl/stl_hashtable.h	/^  typename _Alloc_traits<_Node, _Alloc>::allocator_type _M_node_allocator;$/;"	m	class:hashtable	access:private
_M_node_allocator	/Users/lij/.vim/stl/stl_slist.h	/^           _M_node_allocator;$/;"	m	class:_Slist_alloc_base	access:protected
_M_node_allocator	/Users/lij/.vim/stl/stl_tree.h	/^           _M_node_allocator;$/;"	m	class:_Rb_tree_alloc_base	access:protected
_M_node_allocator_type	/Users/lij/.vim/stl/stl_hashtable.h	/^  typedef simple_alloc<_Node, _Alloc> _M_node_allocator_type;$/;"	t	class:hashtable	access:private
_M_node_count	/Users/lij/.vim/stl/stl_tree.h	/^  size_type _M_node_count; \/\/ keeps track of size of tree$/;"	m	class:_Rb_tree	access:protected
_M_null	/Users/lij/.vim/stl/string	/^  static _CharT _M_null() {$/;"	f	class:basic_string	file:	access:private	signature:()
_M_num_elements	/Users/lij/.vim/stl/stl_hashtable.h	/^  size_type             _M_num_elements;$/;"	m	class:hashtable	access:private
_M_num_true	/Users/lij/.vim/stl/valarray	/^  size_t _M_num_true() const {$/;"	f	class:mask_array	access:public	signature:() const
_M_o	/Users/lij/.vim/stl/ropeimpl.h	/^	_Insert_ostream& _M_o;$/;"	m	class:_Rope_insert_char_consumer	access:private
_M_offset	/Users/lij/.vim/stl/stl_bvector.h	/^  unsigned int _M_offset;$/;"	m	struct:_Bit_iterator_base	access:public
_M_ok	/Users/lij/.vim/stl/stl_iterator.h	/^  bool _M_ok;$/;"	m	class:istream_iterator	access:private
_M_ok	/Users/lij/.vim/stl/stl_iterator.h	/^  bool _M_ok;$/;"	m	class:ostreambuf_iterator	access:private
_M_original_len	/Users/lij/.vim/stl/stl_tempbuf.h	/^  ptrdiff_t  _M_original_len;$/;"	m	class:_Temporary_buffer	access:private
_M_p	/Users/lij/.vim/stl/stl_bvector.h	/^  unsigned int* _M_p;$/;"	m	struct:_Bit_iterator_base	access:public
_M_p	/Users/lij/.vim/stl/stl_bvector.h	/^  unsigned int* _M_p;$/;"	m	struct:_Bit_reference	access:public
_M_parent	/Users/lij/.vim/stl/stl_tree.h	/^  _Base_ptr _M_parent;$/;"	m	struct:_Rb_tree_node_base	access:public
_M_path_directions	/Users/lij/.vim/stl/stl_rope.h	/^    unsigned char _M_path_directions;$/;"	m	class:_Rope_iterator_base	access:protected
_M_path_end	/Users/lij/.vim/stl/stl_rope.h	/^    const _RopeRep* _M_path_end[_S_path_cache_len];$/;"	m	class:_Rope_iterator_base	access:protected
_M_pattern	/Users/lij/.vim/stl/ropeimpl.h	/^	_CharT _M_pattern;$/;"	m	class:_Rope_find_char_char_consumer	access:private
_M_pop_back_aux	/Users/lij/.vim/stl/stl_deque.h	/^  void _M_pop_back_aux();$/;"	p	class:deque	access:protected	signature:()
_M_pop_back_aux	/Users/lij/.vim/stl/stl_deque.h	/^void deque<_Tp,_Alloc>::_M_pop_back_aux()$/;"	f	class:deque	signature:()
_M_pop_front_aux	/Users/lij/.vim/stl/stl_deque.h	/^  void _M_pop_front_aux();$/;"	p	class:deque	access:protected	signature:()
_M_pop_front_aux	/Users/lij/.vim/stl/stl_deque.h	/^void deque<_Tp,_Alloc>::_M_pop_front_aux()$/;"	f	class:deque	signature:()
_M_pos	/Users/lij/.vim/stl/stl_rope.h	/^    size_t _M_pos;$/;"	m	class:_Rope_char_ptr_proxy	access:private
_M_pos	/Users/lij/.vim/stl/stl_rope.h	/^    size_t _M_pos;$/;"	m	class:_Rope_char_ref_proxy	access:private
_M_postincr_aux	/Users/lij/.vim/stl/stl_iterator.h	/^  void _M_postincr_aux();$/;"	p	class:istreambuf_iterator	access:private	signature:()
_M_postincr_aux	/Users/lij/.vim/stl/stl_iterator.h	/^void istreambuf_iterator<_CharT, _Traits>::_M_postincr_aux()$/;"	f	class:istreambuf_iterator	signature:()
_M_pred	/Users/lij/.vim/stl/stl_function.h	/^  _Predicate _M_pred;$/;"	m	class:binary_negate	access:protected
_M_pred	/Users/lij/.vim/stl/stl_function.h	/^  _Predicate _M_pred;$/;"	m	class:unary_negate	access:protected
_M_prefix	/Users/lij/.vim/stl/stl_rope.h	/^        _Sequence* _M_prefix;$/;"	m	class:sequence_buffer	access:protected
_M_prev	/Users/lij/.vim/stl/stl_list.h	/^  _List_node_base* _M_prev;$/;"	m	struct:_List_node_base	access:public
_M_ptr	/Users/lij/.vim/stl/memory	/^    : _M_ptr(__a.release()) {}$/;"	f	class:auto_ptr	access:public	signature:(__a.release())
_M_ptr	/Users/lij/.vim/stl/memory	/^    : _M_ptr(__ref._M_ptr) {}$/;"	f	class:auto_ptr	access:public	signature:(__ref._M_ptr)
_M_ptr	/Users/lij/.vim/stl/memory	/^  _Tp* _M_ptr;$/;"	m	class:auto_ptr	file:	access:private
_M_ptr	/Users/lij/.vim/stl/memory	/^  _Tp1* _M_ptr;$/;"	m	struct:auto_ptr_ref	file:	access:public
_M_ptr	/Users/lij/.vim/stl/memory	/^  auto_ptr(auto_ptr& __a) __STL_NOTHROW : _M_ptr(__a.release()) {}$/;"	f	class:auto_ptr	access:public	signature:(__a.release())
_M_ptr	/Users/lij/.vim/stl/memory	/^  explicit auto_ptr(_Tp* __p = 0) __STL_NOTHROW : _M_ptr(__p) {}$/;"	f	class:auto_ptr	access:public	signature:(__p)
_M_ptr	/Users/lij/.vim/stl/stl_function.h	/^    _Result (*_M_ptr)(_Arg1, _Arg2);$/;"	m	class:pointer_to_binary_function	access:protected
_M_ptr	/Users/lij/.vim/stl/stl_function.h	/^  _Result (*_M_ptr)(_Arg);$/;"	m	class:pointer_to_unary_function	access:protected
_M_ptr	/Users/lij/.vim/stl/stl_rope.h	/^    _Rope_RopeRep<_CharT,_Alloc>* _M_ptr;$/;"	m	struct:_Rope_self_destruct_ptr	access:public
_M_push_back_aux	/Users/lij/.vim/stl/stl_deque.h	/^  void _M_push_back_aux();$/;"	p	class:deque	access:protected	signature:()
_M_push_back_aux	/Users/lij/.vim/stl/stl_deque.h	/^  void _M_push_back_aux(const value_type&);$/;"	p	class:deque	access:protected	signature:(const value_type&)
_M_push_back_aux	/Users/lij/.vim/stl/stl_deque.h	/^void deque<_Tp,_Alloc>::_M_push_back_aux()$/;"	f	class:deque	signature:()
_M_push_back_aux	/Users/lij/.vim/stl/stl_deque.h	/^void deque<_Tp,_Alloc>::_M_push_back_aux(const value_type& __t)$/;"	f	class:deque	signature:(const value_type& __t)
_M_push_front_aux	/Users/lij/.vim/stl/stl_deque.h	/^  void _M_push_front_aux();$/;"	p	class:deque	access:protected	signature:()
_M_push_front_aux	/Users/lij/.vim/stl/stl_deque.h	/^  void _M_push_front_aux(const value_type&);$/;"	p	class:deque	access:protected	signature:(const value_type&)
_M_push_front_aux	/Users/lij/.vim/stl/stl_deque.h	/^void  deque<_Tp,_Alloc>::_M_push_front_aux(const value_type& __t)$/;"	f	class:deque	signature:(const value_type& __t)
_M_push_front_aux	/Users/lij/.vim/stl/stl_deque.h	/^void deque<_Tp,_Alloc>::_M_push_front_aux()$/;"	f	class:deque	signature:()
_M_put_node	/Users/lij/.vim/stl/stl_hashtable.h	/^  void _M_put_node(_Node* __p) { _M_node_allocator.deallocate(__p, 1); }$/;"	f	class:hashtable	access:private	signature:(_Node* __p)
_M_put_node	/Users/lij/.vim/stl/stl_hashtable.h	/^  void _M_put_node(_Node* __p) { _M_node_allocator_type::deallocate(__p, 1); }$/;"	f	class:hashtable	access:private	signature:(_Node* __p)
_M_put_node	/Users/lij/.vim/stl/stl_list.h	/^  void _M_put_node(_List_node<_Tp>* __p) { _Alloc_type::deallocate(__p, 1); } $/;"	f	class:_List_base	access:protected	signature:(_List_node<_Tp>* __p)
_M_put_node	/Users/lij/.vim/stl/stl_list.h	/^  void _M_put_node(_List_node<_Tp>* __p) { _Alloc_type::deallocate(__p, 1); }$/;"	f	class:_List_alloc_base	access:protected	signature:(_List_node<_Tp>* __p)
_M_put_node	/Users/lij/.vim/stl/stl_list.h	/^  void _M_put_node(_List_node<_Tp>* __p)$/;"	f	class:_List_alloc_base	access:protected	signature:(_List_node<_Tp>* __p)
_M_put_node	/Users/lij/.vim/stl/stl_slist.h	/^  void _M_put_node(_Slist_node<_Tp>* __p) $/;"	f	class:_Slist_alloc_base	access:protected	signature:(_Slist_node<_Tp>* __p)
_M_put_node	/Users/lij/.vim/stl/stl_slist.h	/^  void _M_put_node(_Slist_node<_Tp>* __p) { _Alloc_type::deallocate(__p, 1); }$/;"	f	class:_Slist_alloc_base	access:protected	signature:(_Slist_node<_Tp>* __p)
_M_put_node	/Users/lij/.vim/stl/stl_slist.h	/^  void _M_put_node(_Slist_node<_Tp>* __p) { _Alloc_type::deallocate(__p, 1); }$/;"	f	struct:_Slist_base	access:protected	signature:(_Slist_node<_Tp>* __p)
_M_put_node	/Users/lij/.vim/stl/stl_tree.h	/^  void _M_put_node(_Rb_tree_node<_Tp>* __p) $/;"	f	class:_Rb_tree_alloc_base	access:protected	signature:(_Rb_tree_node<_Tp>* __p)
_M_put_node	/Users/lij/.vim/stl/stl_tree.h	/^  void _M_put_node(_Rb_tree_node<_Tp>* __p)$/;"	f	class:_Rb_tree_alloc_base	access:protected	signature:(_Rb_tree_node<_Tp>* __p)
_M_put_node	/Users/lij/.vim/stl/stl_tree.h	/^  void _M_put_node(_Rb_tree_node<_Tp>* __p)$/;"	f	struct:_Rb_tree_base	access:protected	signature:(_Rb_tree_node<_Tp>* __p)
_M_range_check	/Users/lij/.vim/stl/stl_bvector.h	/^  void _M_range_check(size_type __n) const {$/;"	f	class:__BVECTOR	access:public	signature:(size_type __n) const
_M_range_check	/Users/lij/.vim/stl/stl_deque.h	/^  void _M_range_check(size_type __n) const {$/;"	f	class:deque	access:public	signature:(size_type __n) const
_M_range_check	/Users/lij/.vim/stl/stl_vector.h	/^  void _M_range_check(size_type __n) const {$/;"	f	class:vector	access:public	signature:(size_type __n) const
_M_range_initialize	/Users/lij/.vim/stl/stl_deque.h	/^  void _M_range_initialize(_ForwardIterator __first, _ForwardIterator __last,$/;"	p	class:deque	access:protected	signature:(_ForwardIterator __first, _ForwardIterator __last, forward_iterator_tag)
_M_range_initialize	/Users/lij/.vim/stl/stl_deque.h	/^  void _M_range_initialize(_InputIterator __first, _InputIterator __last,$/;"	p	class:deque	access:protected	signature:(_InputIterator __first, _InputIterator __last, input_iterator_tag)
_M_range_initialize	/Users/lij/.vim/stl/stl_deque.h	/^void deque<_Tp,_Alloc>::_M_range_initialize(_ForwardIterator __first,$/;"	f	class:deque	signature:(_ForwardIterator __first, _ForwardIterator __last, forward_iterator_tag)
_M_range_initialize	/Users/lij/.vim/stl/stl_deque.h	/^void deque<_Tp,_Alloc>::_M_range_initialize(_InputIterator __first,$/;"	f	class:deque	signature:(_InputIterator __first, _InputIterator __last, input_iterator_tag)
_M_range_initialize	/Users/lij/.vim/stl/stl_vector.h	/^  void _M_range_initialize(_ForwardIterator __first,$/;"	f	class:vector	access:protected	signature:(_ForwardIterator __first, _ForwardIterator __last, forward_iterator_tag)
_M_range_initialize	/Users/lij/.vim/stl/stl_vector.h	/^  void _M_range_initialize(_InputIterator __first,  $/;"	f	class:vector	access:protected	signature:(_InputIterator __first, _InputIterator __last, input_iterator_tag)
_M_range_initialize	/Users/lij/.vim/stl/string	/^  void _M_range_initialize(_ForwardIter __f, _ForwardIter __l, $/;"	f	class:basic_string	file:	access:private	signature:(_ForwardIter __f, _ForwardIter __l, forward_iterator_tag)
_M_range_initialize	/Users/lij/.vim/stl/string	/^  void _M_range_initialize(_InputIter __f, _InputIter __l) {$/;"	f	class:basic_string	file:	access:private	signature:(_InputIter __f, _InputIter __l)
_M_range_initialize	/Users/lij/.vim/stl/string	/^  void _M_range_initialize(_InputIter __f, _InputIter __l,$/;"	f	class:basic_string	file:	access:private	signature:(_InputIter __f, _InputIter __l, input_iterator_tag)
_M_range_initialize	/Users/lij/.vim/stl/string	/^  void _M_range_initialize(const _CharT* __f, const _CharT* __l) {$/;"	f	class:basic_string	file:	access:private	signature:(const _CharT* __f, const _CharT* __l)
_M_range_insert	/Users/lij/.vim/stl/stl_vector.h	/^  void _M_range_insert(iterator __pos,$/;"	p	class:vector	access:protected	signature:(iterator __pos, _ForwardIterator __first, _ForwardIterator __last, forward_iterator_tag)
_M_range_insert	/Users/lij/.vim/stl/stl_vector.h	/^  void _M_range_insert(iterator __pos,$/;"	p	class:vector	access:protected	signature:(iterator __pos, _InputIterator __first, _InputIterator __last, input_iterator_tag)
_M_range_insert	/Users/lij/.vim/stl/stl_vector.h	/^vector<_Tp, _Alloc>::_M_range_insert(iterator __pos, $/;"	f	class:vector	signature:(iterator __pos, _InputIterator __first, _InputIterator __last, input_iterator_tag)
_M_range_insert	/Users/lij/.vim/stl/stl_vector.h	/^vector<_Tp, _Alloc>::_M_range_insert(iterator __position,$/;"	f	class:vector	signature:(iterator __position, _ForwardIterator __first, _ForwardIterator __last, forward_iterator_tag)
_M_read	/Users/lij/.vim/stl/stl_iterator.h	/^  void _M_read() {$/;"	f	class:istream_iterator	access:private	signature:()
_M_read	/Users/lij/.vim/stl/stl_iterator.h	/^  void _M_read() {$/;"	f	class:istream_iterator	access:protected	signature:()
_M_reallocate_map	/Users/lij/.vim/stl/stl_deque.h	/^  void _M_reallocate_map(size_type __nodes_to_add, bool __add_at_front);$/;"	p	class:deque	access:protected	signature:(size_type __nodes_to_add, bool __add_at_front)
_M_reallocate_map	/Users/lij/.vim/stl/stl_deque.h	/^void deque<_Tp,_Alloc>::_M_reallocate_map(size_type __nodes_to_add,$/;"	f	class:deque	signature:(size_type __nodes_to_add, bool __add_at_front)
_M_ref_count	/Users/lij/.vim/stl/stl_threads.h	/^   volatile _RC_t _M_ref_count;$/;"	m	struct:_Refcount_Base	access:public
_M_ref_count_lock	/Users/lij/.vim/stl/stl_threads.h	/^  mutex_t         _M_ref_count_lock;$/;"	m	struct:_Refcount_Base	access:public
_M_ref_count_lock	/Users/lij/.vim/stl/stl_threads.h	/^  pthread_mutex_t _M_ref_count_lock;$/;"	m	struct:_Refcount_Base	access:public
_M_ref_nonnil	/Users/lij/.vim/stl/stl_rope.h	/^          void _M_ref_nonnil() {}$/;"	f	struct:_Rope_RopeRep	access:public	signature:()
_M_ref_nonnil	/Users/lij/.vim/stl/stl_rope.h	/^          void _M_ref_nonnil()$/;"	f	struct:_Rope_RopeRep	access:public	signature:()
_M_refill	/Users/lij/.vim/stl/pthread_alloc	/^  void *_M_refill(size_t __n);$/;"	p	struct:_Pthread_alloc_per_thread_state	file:	access:public	signature:(size_t __n)
_M_refill	/Users/lij/.vim/stl/pthread_alloc	/^::_M_refill(size_t __n)$/;"	f	class:_Pthread_alloc_per_thread_state	signature:(size_t __n)
_M_release_lock	/Users/lij/.vim/stl/stl_threads.h	/^  void _M_release_lock() {$/;"	f	struct:_STL_mutex_lock	access:public	signature:()
_M_replace_dispatch	/Users/lij/.vim/stl/string	/^  basic_string& _M_replace_dispatch(iterator __first, iterator __last,$/;"	f	class:basic_string	file:	access:private	signature:(iterator __first, iterator __last, _InputIter __f, _InputIter __l, __false_type)
_M_replace_dispatch	/Users/lij/.vim/stl/string	/^  basic_string& _M_replace_dispatch(iterator __first, iterator __last,$/;"	f	class:basic_string	file:	access:private	signature:(iterator __first, iterator __last, _Integer __n, _Integer __x, __true_type)
_M_reserve_elements_at_back	/Users/lij/.vim/stl/stl_deque.h	/^  iterator _M_reserve_elements_at_back(size_type __n) {$/;"	f	class:deque	access:protected	signature:(size_type __n)
_M_reserve_elements_at_front	/Users/lij/.vim/stl/stl_deque.h	/^  iterator _M_reserve_elements_at_front(size_type __n) {$/;"	f	class:deque	access:protected	signature:(size_type __n)
_M_reserve_map_at_back	/Users/lij/.vim/stl/stl_deque.h	/^  void _M_reserve_map_at_back (size_type __nodes_to_add = 1) {$/;"	f	class:deque	access:protected	signature:(size_type __nodes_to_add = 1)
_M_reserve_map_at_front	/Users/lij/.vim/stl/stl_deque.h	/^  void _M_reserve_map_at_front (size_type __nodes_to_add = 1) {$/;"	f	class:deque	access:protected	signature:(size_type __nodes_to_add = 1)
_M_right	/Users/lij/.vim/stl/stl_rope.h	/^    _Rope_RopeRep<_CharT,_Alloc>* _M_right;$/;"	m	struct:_Rope_RopeConcatenation	access:public
_M_right	/Users/lij/.vim/stl/stl_tree.h	/^  _Base_ptr _M_right;$/;"	m	struct:_Rb_tree_node_base	access:public
_M_rightmost	/Users/lij/.vim/stl/stl_tree.h	/^  _Link_type& _M_rightmost() const $/;"	f	class:_Rb_tree	access:protected	signature:() const
_M_root	/Users/lij/.vim/stl/stl_rope.h	/^    _My_rope* _M_root;     \/\/ The whole rope.$/;"	m	class:_Rope_char_ref_proxy	access:private
_M_root	/Users/lij/.vim/stl/stl_rope.h	/^    _RopeRep* _M_root;     \/\/ The whole rope.$/;"	m	class:_Rope_iterator_base	access:protected
_M_root	/Users/lij/.vim/stl/stl_rope.h	/^    rope<_CharT,_Alloc>* _M_root;     \/\/ The whole rope.$/;"	m	class:_Rope_char_ptr_proxy	access:private
_M_root	/Users/lij/.vim/stl/stl_tree.h	/^  _Link_type& _M_root() const $/;"	f	class:_Rb_tree	access:protected	signature:() const
_M_root_rope	/Users/lij/.vim/stl/stl_rope.h	/^    rope<_CharT,_Alloc>* _M_root_rope;$/;"	m	class:_Rope_iterator	access:protected
_M_set_node	/Users/lij/.vim/stl/stl_deque.h	/^  void _M_set_node(_Map_pointer __new_node) {$/;"	f	struct:_Deque_iterator	access:public	signature:(_Map_pointer __new_node)
_M_size	/Users/lij/.vim/stl/stl_rope.h	/^  size_t _M_size;       \/\/ This is here only to avoid wasting space$/;"	m	class:_Rope_rep_alloc_base	access:public
_M_size	/Users/lij/.vim/stl/stl_rope.h	/^  size_t _M_size;$/;"	m	class:_Rope_rep_alloc_base	access:public
_M_size	/Users/lij/.vim/stl/stl_rope.h	/^  size_t _M_size;$/;"	m	class:_Rope_rep_base	access:public
_M_size	/Users/lij/.vim/stl/valarray	/^  size_t _M_size() const {$/;"	f	class:gslice	access:public	signature:() const
_M_size	/Users/lij/.vim/stl/valarray	/^  size_t _M_size;$/;"	m	struct:_Valarray_base	file:	access:public
_M_slice	/Users/lij/.vim/stl/valarray	/^  slice          _M_slice;$/;"	m	class:slice_array	file:	access:private
_M_start	/Users/lij/.vim/stl/stl_bvector.h	/^  _Bit_iterator _M_start;$/;"	m	class:_Bvector_alloc_base	access:protected
_M_start	/Users/lij/.vim/stl/stl_bvector.h	/^  _Bit_iterator _M_start;$/;"	m	class:_Bvector_base	access:protected
_M_start	/Users/lij/.vim/stl/stl_deque.h	/^  iterator _M_start;$/;"	m	class:_Deque_base	access:protected
_M_start	/Users/lij/.vim/stl/stl_rope.h	/^    size_t _M_start;$/;"	m	struct:_Rope_RopeSubstring	access:public
_M_start	/Users/lij/.vim/stl/stl_vector.h	/^  _Tp* _M_start;$/;"	m	class:_Vector_alloc_base	access:protected
_M_start	/Users/lij/.vim/stl/string	/^  _Tp* _M_start;$/;"	m	class:_String_alloc_base	file:	access:protected
_M_start	/Users/lij/.vim/stl/string	/^  _Tp* _M_start;$/;"	m	class:_String_base	file:	access:protected
_M_start	/Users/lij/.vim/stl/valarray	/^  size_t _M_start;$/;"	m	class:gslice	file:	access:private
_M_start	/Users/lij/.vim/stl/valarray	/^  size_t _M_start;$/;"	m	class:slice	file:	access:private
_M_step	/Users/lij/.vim/stl/valarray	/^  size_t _M_step;$/;"	m	struct:_Gslice_Iter	file:	access:public
_M_stream	/Users/lij/.vim/stl/stl_iterator.h	/^  istream* _M_stream;$/;"	m	class:istream_iterator	access:protected
_M_stream	/Users/lij/.vim/stl/stl_iterator.h	/^  istream_type* _M_stream;$/;"	m	class:istream_iterator	access:private
_M_stream	/Users/lij/.vim/stl/stl_iterator.h	/^  ostream* _M_stream;$/;"	m	class:ostream_iterator	access:protected
_M_stream	/Users/lij/.vim/stl/stl_iterator.h	/^  ostream_type* _M_stream;$/;"	m	class:ostream_iterator	access:private
_M_stride	/Users/lij/.vim/stl/valarray	/^  size_t _M_stride;$/;"	m	class:slice	file:	access:private
_M_strides	/Users/lij/.vim/stl/valarray	/^  valarray<size_t> _M_strides;$/;"	m	class:gslice	file:	access:private
_M_string	/Users/lij/.vim/stl/stl_iterator.h	/^  const _CharT* _M_string;$/;"	m	class:ostream_iterator	access:private
_M_string	/Users/lij/.vim/stl/stl_iterator.h	/^  const char* _M_string;$/;"	m	class:ostream_iterator	access:protected
_M_t	/Users/lij/.vim/stl/stl_map.h	/^  _Rep_type _M_t;  \/\/ red-black tree representing map$/;"	m	class:map	access:private
_M_t	/Users/lij/.vim/stl/stl_multimap.h	/^  _Rep_type _M_t;  \/\/ red-black tree representing multimap$/;"	m	class:multimap	access:private
_M_t	/Users/lij/.vim/stl/stl_multiset.h	/^  _Rep_type _M_t;  \/\/ red-black tree representing multiset$/;"	m	class:multiset	access:private
_M_t	/Users/lij/.vim/stl/stl_set.h	/^  _Rep_type _M_t;  \/\/ red-black tree representing set$/;"	m	class:set	access:private
_M_table	/Users/lij/.vim/stl/stl_function.h	/^  unsigned int _M_table[55];$/;"	m	class:subtractive_rng	access:private
_M_tag	/Users/lij/.vim/stl/stl_rope.h	/^    _Tag _M_tag:8;$/;"	m	struct:_Rope_RopeRep	access:public
_M_terminate_string	/Users/lij/.vim/stl/string	/^  void _M_terminate_string() {$/;"	f	class:basic_string	file:	access:private	signature:()
_M_throw_length_error	/Users/lij/.vim/stl/string	/^  void _M_throw_length_error() const;$/;"	p	class:_String_base	file:	access:protected	signature:() const
_M_throw_length_error	/Users/lij/.vim/stl/string	/^void _String_base<_Tp,_Alloc>::_M_throw_length_error() const {$/;"	f	class:_String_base	signature:() const
_M_throw_out_of_range	/Users/lij/.vim/stl/string	/^  void _M_throw_out_of_range() const;$/;"	p	class:_String_base	file:	access:protected	signature:() const
_M_throw_out_of_range	/Users/lij/.vim/stl/string	/^void _String_base<_Tp, _Alloc>::_M_throw_out_of_range() const {$/;"	f	class:_String_base	signature:() const
_M_tmp_buf	/Users/lij/.vim/stl/stl_rope.h	/^    _CharT _M_tmp_buf[_S_iterator_buf_len];$/;"	m	class:_Rope_iterator_base	access:protected
_M_tree_ptr	/Users/lij/.vim/stl/stl_rope.h	/^    _RopeRep *_M_tree_ptr;$/;"	m	class:_Rope_alloc_base	access:protected
_M_tree_ptr	/Users/lij/.vim/stl/stl_rope.h	/^    _RopeRep* _M_tree_ptr;$/;"	m	class:_Rope_alloc_base	access:protected
_M_tree_ptr	/Users/lij/.vim/stl/stl_rope.h	/^    _RopeRep* _M_tree_ptr;$/;"	m	class:_Rope_base	access:protected
_M_unref_nonnil	/Users/lij/.vim/stl/stl_rope.h	/^          void _M_unref_nonnil() {}$/;"	f	struct:_Rope_RopeRep	access:public	signature:()
_M_unref_nonnil	/Users/lij/.vim/stl/stl_rope.h	/^          void _M_unref_nonnil()$/;"	f	struct:_Rope_RopeRep	access:public	signature:()
_M_val	/Users/lij/.vim/stl/stl_function.h	/^  _Result _M_val;$/;"	m	struct:_Constant_binary_fun	access:public
_M_val	/Users/lij/.vim/stl/stl_function.h	/^  result_type _M_val;$/;"	m	struct:_Constant_unary_fun	access:public
_M_val	/Users/lij/.vim/stl/stl_function.h	/^  result_type _M_val;$/;"	m	struct:_Constant_void_fun	access:public
_M_val	/Users/lij/.vim/stl/stl_hashtable.h	/^  _Val _M_val;$/;"	m	struct:_Hashtable_node	access:public
_M_value	/Users/lij/.vim/stl/stl_iterator.h	/^  _Tp _M_value;$/;"	m	class:istream_iterator	access:private
_M_value	/Users/lij/.vim/stl/stl_iterator.h	/^  _Tp _M_value;$/;"	m	class:istream_iterator	access:protected
_M_value_field	/Users/lij/.vim/stl/stl_tree.h	/^  _Value _M_value_field;$/;"	m	struct:_Rb_tree_node	access:public
_M_w	/Users/lij/.vim/stl/bitset	/^  _WordT _M_w;$/;"	m	struct:_Base_bitset	file:	access:public
_M_w	/Users/lij/.vim/stl/bitset	/^  _WordT _M_w[_Nw];                \/\/ 0 is the least significant word.$/;"	m	struct:_Base_bitset	file:	access:public
_M_wp	/Users/lij/.vim/stl/bitset	/^    _WordT *_M_wp;$/;"	m	class:bitset::reference	file:	access:private
_Map_alloc_type	/Users/lij/.vim/stl/stl_deque.h	/^  typedef simple_alloc<_Tp*, _Alloc> _Map_alloc_type;$/;"	t	class:_Deque_base	access:protected
_Map_alloc_type	/Users/lij/.vim/stl/stl_deque.h	/^  typedef typename _Alloc_traits<_Tp*, _Alloc>::_Alloc_type _Map_alloc_type;$/;"	t	class:_Deque_alloc_base	access:protected
_Map_allocator_type	/Users/lij/.vim/stl/stl_deque.h	/^          _Map_allocator_type;$/;"	t	class:_Deque_alloc_base	access:protected
_Map_pointer	/Users/lij/.vim/stl/stl_deque.h	/^  typedef _Tp** _Map_pointer;$/;"	t	struct:_Deque_iterator	access:public
_Map_pointer	/Users/lij/.vim/stl/stl_deque.h	/^  typedef pointer* _Map_pointer;$/;"	t	class:deque	access:protected
_Mutable_BidirectionalIterator_concept_specification	/Users/lij/.vim/stl/concept_checks.h	/^struct _Mutable_BidirectionalIterator_concept_specification {$/;"	s
_Mutable_BidirectionalIterator_concept_specification::_Mutable_BidirectionalIterator_requirement_violation	/Users/lij/.vim/stl/concept_checks.h	/^_Mutable_BidirectionalIterator_requirement_violation($/;"	f	struct:_Mutable_BidirectionalIterator_concept_specification	access:public	signature:( _BidirectionalIterator __i)
_Mutable_BidirectionalIterator_requirement_violation	/Users/lij/.vim/stl/concept_checks.h	/^_Mutable_BidirectionalIterator_requirement_violation($/;"	f	struct:_Mutable_BidirectionalIterator_concept_specification	access:public	signature:( _BidirectionalIterator __i)
_Mutable_ForwardIterator_concept_specification	/Users/lij/.vim/stl/concept_checks.h	/^struct _Mutable_ForwardIterator_concept_specification {$/;"	s
_Mutable_ForwardIterator_concept_specification::_Mutable_ForwardIterator_requirement_violation	/Users/lij/.vim/stl/concept_checks.h	/^_Mutable_ForwardIterator_requirement_violation(_ForwardIterator __i) {$/;"	f	struct:_Mutable_ForwardIterator_concept_specification	access:public	signature:(_ForwardIterator __i)
_Mutable_ForwardIterator_requirement_violation	/Users/lij/.vim/stl/concept_checks.h	/^_Mutable_ForwardIterator_requirement_violation(_ForwardIterator __i) {$/;"	f	struct:_Mutable_ForwardIterator_concept_specification	access:public	signature:(_ForwardIterator __i)
_Mutable_RandomAccessIterator_concept_specification	/Users/lij/.vim/stl/concept_checks.h	/^struct _Mutable_RandomAccessIterator_concept_specification {$/;"	s
_Mutable_RandomAccessIterator_concept_specification::_Mutable_RandomAccessIterator_requirement_violation	/Users/lij/.vim/stl/concept_checks.h	/^_Mutable_RandomAccessIterator_requirement_violation(_RandAccIter __i)$/;"	f	struct:_Mutable_RandomAccessIterator_concept_specification	access:public	signature:(_RandAccIter __i)
_Mutable_RandomAccessIterator_requirement_violation	/Users/lij/.vim/stl/concept_checks.h	/^_Mutable_RandomAccessIterator_requirement_violation(_RandAccIter __i)$/;"	f	struct:_Mutable_RandomAccessIterator_concept_specification	access:public	signature:(_RandAccIter __i)
_Mutable_TrivialIterator_concept_specification	/Users/lij/.vim/stl/concept_checks.h	/^struct _Mutable_TrivialIterator_concept_specification {$/;"	s
_Mutable_TrivialIterator_concept_specification::_Mutable_TrivialIterator_requirement_violation	/Users/lij/.vim/stl/concept_checks.h	/^_Mutable_TrivialIterator_requirement_violation(_TrivialIterator __i) {$/;"	f	struct:_Mutable_TrivialIterator_concept_specification	access:public	signature:(_TrivialIterator __i)
_Mutable_TrivialIterator_requirement_violation	/Users/lij/.vim/stl/concept_checks.h	/^_Mutable_TrivialIterator_requirement_violation(_TrivialIterator __i) {$/;"	f	struct:_Mutable_TrivialIterator_concept_specification	access:public	signature:(_TrivialIterator __i)
_Mutable_trait	/Users/lij/.vim/stl/concept_checks.h	/^struct _Mutable_trait {$/;"	s
_Mutable_trait	/Users/lij/.vim/stl/concept_checks.h	/^struct _Mutable_trait<const _Tp> {$/;"	s
_Mutable_trait::_Type	/Users/lij/.vim/stl/concept_checks.h	/^  typedef _Tp _Type;$/;"	t	struct:_Mutable_trait	access:public
_My_rope	/Users/lij/.vim/stl/stl_rope.h	/^    typedef rope<_CharT,_Alloc> _My_rope;$/;"	t	class:_Rope_char_ref_proxy	access:private
_NFREELISTS	/Users/lij/.vim/stl/stl_alloc.h	/^    enum {_NFREELISTS = 16}; \/\/ _MAX_BYTES\/_ALIGN$/;"	e	enum:__default_alloc_template::__anon17
_NFREELISTS	/Users/lij/.vim/stl/stl_alloc.h	/^  enum {_NFREELISTS = 16}; \/\/ _MAX_BYTES\/_ALIGN$/;"	e	enum:__anon14
_NoInit	/Users/lij/.vim/stl/valarray	/^  struct _NoInit {};$/;"	s	class:valarray	file:	access:public
_Node	/Users/lij/.vim/stl/stl_hashtable.h	/^  typedef _Hashtable_node<_Val> _Node;$/;"	t	class:hashtable	access:private
_Node	/Users/lij/.vim/stl/stl_hashtable.h	/^  typedef _Hashtable_node<_Val> _Node;$/;"	t	struct:_Hashtable_const_iterator	access:public
_Node	/Users/lij/.vim/stl/stl_hashtable.h	/^  typedef _Hashtable_node<_Val> _Node;$/;"	t	struct:_Hashtable_iterator	access:public
_Node	/Users/lij/.vim/stl/stl_list.h	/^  typedef _List_node<_Tp> _Node;$/;"	t	class:list	access:public
_Node	/Users/lij/.vim/stl/stl_list.h	/^  typedef _List_node<_Tp> _Node;$/;"	t	struct:_List_iterator	access:public
_Node	/Users/lij/.vim/stl/stl_slist.h	/^  typedef _Slist_node<_Tp>      _Node;$/;"	t	class:slist	access:private
_Node	/Users/lij/.vim/stl/stl_slist.h	/^  typedef _Slist_node<_Tp> _Node;$/;"	t	struct:_Slist_iterator	access:public
_Node_alloc_type	/Users/lij/.vim/stl/stl_deque.h	/^  typedef simple_alloc<_Tp, _Alloc>  _Node_alloc_type;$/;"	t	class:_Deque_base	access:protected
_Node_alloc_type	/Users/lij/.vim/stl/stl_deque.h	/^  typedef typename _Alloc_traits<_Tp, _Alloc>::_Alloc_type _Node_alloc_type;$/;"	t	class:_Deque_alloc_base	access:protected
_Node_allocator	/Users/lij/.vim/stl/stl_list.h	/^           _Node_allocator;$/;"	m	class:_List_alloc_base	access:protected
_Node_base	/Users/lij/.vim/stl/stl_slist.h	/^  typedef _Slist_node_base      _Node_base;$/;"	t	class:slist	access:private
_Not_within_traits	/Users/lij/.vim/stl/string	/^  _Not_within_traits(_Pointer __f, _Pointer __l) $/;"	f	struct:_Not_within_traits	access:public	signature:(_Pointer __f, _Pointer __l)
_Not_within_traits	/Users/lij/.vim/stl/string	/^struct _Not_within_traits$/;"	s	file:	inherits:unary_function
_Not_within_traits::_M_first	/Users/lij/.vim/stl/string	/^  const _Pointer _M_first;$/;"	m	struct:_Not_within_traits	file:	access:public
_Not_within_traits::_M_last	/Users/lij/.vim/stl/string	/^  const _Pointer _M_last;$/;"	m	struct:_Not_within_traits	file:	access:public
_Not_within_traits::_Not_within_traits	/Users/lij/.vim/stl/string	/^  _Not_within_traits(_Pointer __f, _Pointer __l) $/;"	f	struct:_Not_within_traits	access:public	signature:(_Pointer __f, _Pointer __l)
_Not_within_traits::_Pointer	/Users/lij/.vim/stl/string	/^  typedef const typename _Traits::char_type* _Pointer;$/;"	t	struct:_Not_within_traits	file:	access:public
_Not_within_traits::operator ()	/Users/lij/.vim/stl/string	/^  bool operator()(const typename _Traits::char_type& __x) const {$/;"	f	struct:_Not_within_traits	access:public	signature:(const typename _Traits::char_type& __x) const
_Numeric_limits_base	/Users/lij/.vim/stl/limits	/^class _Numeric_limits_base {$/;"	c	file:
_Numeric_limits_base::__STL_DECLARE_LIMITS_MEMBER	/Users/lij/.vim/stl/limits	/^  __STL_DECLARE_LIMITS_MEMBER(bool, has_denorm_loss,   false);$/;"	p	class:_Numeric_limits_base	file:	access:public	signature:(bool, has_denorm_loss, false)
_Numeric_limits_base::__STL_DECLARE_LIMITS_MEMBER	/Users/lij/.vim/stl/limits	/^  __STL_DECLARE_LIMITS_MEMBER(bool, has_infinity,      false);$/;"	p	class:_Numeric_limits_base	file:	access:public	signature:(bool, has_infinity, false)
_Numeric_limits_base::__STL_DECLARE_LIMITS_MEMBER	/Users/lij/.vim/stl/limits	/^  __STL_DECLARE_LIMITS_MEMBER(bool, has_quiet_NaN,     false);$/;"	p	class:_Numeric_limits_base	file:	access:public	signature:(bool, has_quiet_NaN, false)
_Numeric_limits_base::__STL_DECLARE_LIMITS_MEMBER	/Users/lij/.vim/stl/limits	/^  __STL_DECLARE_LIMITS_MEMBER(bool, has_signaling_NaN, false);$/;"	p	class:_Numeric_limits_base	file:	access:public	signature:(bool, has_signaling_NaN, false)
_Numeric_limits_base::__STL_DECLARE_LIMITS_MEMBER	/Users/lij/.vim/stl/limits	/^  __STL_DECLARE_LIMITS_MEMBER(bool, is_bounded, false);$/;"	p	class:_Numeric_limits_base	file:	access:public	signature:(bool, is_bounded, false)
_Numeric_limits_base::__STL_DECLARE_LIMITS_MEMBER	/Users/lij/.vim/stl/limits	/^  __STL_DECLARE_LIMITS_MEMBER(bool, is_exact,   false);$/;"	p	class:_Numeric_limits_base	file:	access:public	signature:(bool, is_exact, false)
_Numeric_limits_base::__STL_DECLARE_LIMITS_MEMBER	/Users/lij/.vim/stl/limits	/^  __STL_DECLARE_LIMITS_MEMBER(bool, is_iec559,  false);$/;"	p	class:_Numeric_limits_base	file:	access:public	signature:(bool, is_iec559, false)
_Numeric_limits_base::__STL_DECLARE_LIMITS_MEMBER	/Users/lij/.vim/stl/limits	/^  __STL_DECLARE_LIMITS_MEMBER(bool, is_integer, false);$/;"	p	class:_Numeric_limits_base	file:	access:public	signature:(bool, is_integer, false)
_Numeric_limits_base::__STL_DECLARE_LIMITS_MEMBER	/Users/lij/.vim/stl/limits	/^  __STL_DECLARE_LIMITS_MEMBER(bool, is_modulo,  false);$/;"	p	class:_Numeric_limits_base	file:	access:public	signature:(bool, is_modulo, false)
_Numeric_limits_base::__STL_DECLARE_LIMITS_MEMBER	/Users/lij/.vim/stl/limits	/^  __STL_DECLARE_LIMITS_MEMBER(bool, is_signed,  false);$/;"	p	class:_Numeric_limits_base	file:	access:public	signature:(bool, is_signed, false)
_Numeric_limits_base::__STL_DECLARE_LIMITS_MEMBER	/Users/lij/.vim/stl/limits	/^  __STL_DECLARE_LIMITS_MEMBER(bool, is_specialized, false);$/;"	p	class:_Numeric_limits_base	file:	access:public	signature:(bool, is_specialized, false)
_Numeric_limits_base::__STL_DECLARE_LIMITS_MEMBER	/Users/lij/.vim/stl/limits	/^  __STL_DECLARE_LIMITS_MEMBER(bool, tinyness_before,  false);$/;"	p	class:_Numeric_limits_base	file:	access:public	signature:(bool, tinyness_before, false)
_Numeric_limits_base::__STL_DECLARE_LIMITS_MEMBER	/Users/lij/.vim/stl/limits	/^  __STL_DECLARE_LIMITS_MEMBER(bool, traps,            false);$/;"	p	class:_Numeric_limits_base	file:	access:public	signature:(bool, traps, false)
_Numeric_limits_base::__STL_DECLARE_LIMITS_MEMBER	/Users/lij/.vim/stl/limits	/^  __STL_DECLARE_LIMITS_MEMBER(float_denorm_style,$/;"	p	class:_Numeric_limits_base	file:	access:public	signature:(float_denorm_style, has_denorm, denorm_absent)
_Numeric_limits_base::__STL_DECLARE_LIMITS_MEMBER	/Users/lij/.vim/stl/limits	/^  __STL_DECLARE_LIMITS_MEMBER(float_round_style,$/;"	p	class:_Numeric_limits_base	file:	access:public	signature:(float_round_style, round_style, round_toward_zero)
_Numeric_limits_base::__STL_DECLARE_LIMITS_MEMBER	/Users/lij/.vim/stl/limits	/^  __STL_DECLARE_LIMITS_MEMBER(int, digits,   0);$/;"	p	class:_Numeric_limits_base	file:	access:public	signature:(int, digits, 0)
_Numeric_limits_base::__STL_DECLARE_LIMITS_MEMBER	/Users/lij/.vim/stl/limits	/^  __STL_DECLARE_LIMITS_MEMBER(int, digits10, 0);$/;"	p	class:_Numeric_limits_base	file:	access:public	signature:(int, digits10, 0)
_Numeric_limits_base::__STL_DECLARE_LIMITS_MEMBER	/Users/lij/.vim/stl/limits	/^  __STL_DECLARE_LIMITS_MEMBER(int, max_exponent,   0);$/;"	p	class:_Numeric_limits_base	file:	access:public	signature:(int, max_exponent, 0)
_Numeric_limits_base::__STL_DECLARE_LIMITS_MEMBER	/Users/lij/.vim/stl/limits	/^  __STL_DECLARE_LIMITS_MEMBER(int, max_exponent10, 0);$/;"	p	class:_Numeric_limits_base	file:	access:public	signature:(int, max_exponent10, 0)
_Numeric_limits_base::__STL_DECLARE_LIMITS_MEMBER	/Users/lij/.vim/stl/limits	/^  __STL_DECLARE_LIMITS_MEMBER(int, min_exponent,   0);$/;"	p	class:_Numeric_limits_base	file:	access:public	signature:(int, min_exponent, 0)
_Numeric_limits_base::__STL_DECLARE_LIMITS_MEMBER	/Users/lij/.vim/stl/limits	/^  __STL_DECLARE_LIMITS_MEMBER(int, min_exponent10, 0);$/;"	p	class:_Numeric_limits_base	file:	access:public	signature:(int, min_exponent10, 0)
_Numeric_limits_base::__STL_DECLARE_LIMITS_MEMBER	/Users/lij/.vim/stl/limits	/^  __STL_DECLARE_LIMITS_MEMBER(int, radix, 0);$/;"	p	class:_Numeric_limits_base	file:	access:public	signature:(int, radix, 0)
_Obj	/Users/lij/.vim/stl/stl_alloc.h	/^  union _Obj {$/;"	u	class:__default_alloc_template	access:private
_OutputIterator_concept_specification	/Users/lij/.vim/stl/concept_checks.h	/^struct _OutputIterator_concept_specification {$/;"	s
_OutputIterator_concept_specification::_OutputIterator_requirement_violation	/Users/lij/.vim/stl/concept_checks.h	/^_OutputIterator_requirement_violation(_OutputIterator __i) {$/;"	f	struct:_OutputIterator_concept_specification	access:public	signature:(_OutputIterator __i)
_OutputIterator_requirement_violation	/Users/lij/.vim/stl/concept_checks.h	/^_OutputIterator_requirement_violation(_OutputIterator __i) {$/;"	f	struct:_OutputIterator_concept_specification	access:public	signature:(_OutputIterator __i)
_Pointer	/Users/lij/.vim/stl/string	/^  typedef const typename _Traits::char_type* _Pointer;$/;"	t	struct:_Not_within_traits	file:	access:public
_Project1st	/Users/lij/.vim/stl/stl_function.h	/^struct _Project1st : public binary_function<_Arg1, _Arg2, _Arg1> {$/;"	s	inherits:binary_function
_Project1st::operator ()	/Users/lij/.vim/stl/stl_function.h	/^  _Arg1 operator()(const _Arg1& __x, const _Arg2&) const { return __x; }$/;"	f	struct:_Project1st	access:public	signature:(const _Arg1& __x, const _Arg2&) const
_Project2nd	/Users/lij/.vim/stl/stl_function.h	/^struct _Project2nd : public binary_function<_Arg1, _Arg2, _Arg2> {$/;"	s	inherits:binary_function
_Project2nd::operator ()	/Users/lij/.vim/stl/stl_function.h	/^  _Arg2 operator()(const _Arg1&, const _Arg2& __y) const { return __y; }$/;"	f	struct:_Project2nd	access:public	signature:(const _Arg1&, const _Arg2& __y) const
_Pthread_alloc_obj	/Users/lij/.vim/stl/pthread_alloc	/^union _Pthread_alloc_obj {$/;"	u	file:
_Pthread_alloc_obj::__client_data	/Users/lij/.vim/stl/pthread_alloc	/^    char __client_data[__STL_DATA_ALIGNMENT];    \/* The client sees this.    *\/$/;"	m	union:_Pthread_alloc_obj	file:	access:public
_Pthread_alloc_obj::__free_list_link	/Users/lij/.vim/stl/pthread_alloc	/^    union _Pthread_alloc_obj * __free_list_link;$/;"	m	union:_Pthread_alloc_obj	typeref:union:_Pthread_alloc_obj::_Pthread_alloc_obj	file:	access:public
_Pthread_alloc_per_thread_state	/Users/lij/.vim/stl/pthread_alloc	/^  _Pthread_alloc_per_thread_state() : __next(0)$/;"	f	struct:_Pthread_alloc_per_thread_state	access:public	signature:()
_Pthread_alloc_per_thread_state	/Users/lij/.vim/stl/pthread_alloc	/^struct _Pthread_alloc_per_thread_state {$/;"	s	file:
_Pthread_alloc_per_thread_state::_M_refill	/Users/lij/.vim/stl/pthread_alloc	/^  void *_M_refill(size_t __n);$/;"	p	struct:_Pthread_alloc_per_thread_state	file:	access:public	signature:(size_t __n)
_Pthread_alloc_per_thread_state::_M_refill	/Users/lij/.vim/stl/pthread_alloc	/^::_M_refill(size_t __n)$/;"	f	class:_Pthread_alloc_per_thread_state	signature:(size_t __n)
_Pthread_alloc_per_thread_state::_Pthread_alloc_per_thread_state	/Users/lij/.vim/stl/pthread_alloc	/^  _Pthread_alloc_per_thread_state() : __next(0)$/;"	f	struct:_Pthread_alloc_per_thread_state	access:public	signature:()
_Pthread_alloc_per_thread_state::_S_NFREELISTS	/Users/lij/.vim/stl/pthread_alloc	/^  enum { _S_NFREELISTS = _Max_size\/__STL_DATA_ALIGNMENT };$/;"	e	enum:_Pthread_alloc_per_thread_state::__anon1	file:
_Pthread_alloc_per_thread_state::__free_list	/Users/lij/.vim/stl/pthread_alloc	/^  _Pthread_alloc_obj* volatile __free_list[_S_NFREELISTS]; $/;"	m	struct:_Pthread_alloc_per_thread_state	file:	access:public
_Pthread_alloc_per_thread_state::__next	/Users/lij/.vim/stl/pthread_alloc	/^  _Pthread_alloc_per_thread_state<_Max_size> * __next; $/;"	m	struct:_Pthread_alloc_per_thread_state	file:	access:public
_Pthread_alloc_per_thread_state::__obj	/Users/lij/.vim/stl/pthread_alloc	/^  typedef _Pthread_alloc_obj __obj;$/;"	t	struct:_Pthread_alloc_per_thread_state	file:	access:public
_Pthread_alloc_template	/Users/lij/.vim/stl/pthread_alloc	/^class _Pthread_alloc_template {$/;"	c	file:
_Pthread_alloc_template::_M_lock	/Users/lij/.vim/stl/pthread_alloc	/^  class _M_lock {$/;"	c	class:_Pthread_alloc_template	file:	access:private
_Pthread_alloc_template::_M_lock::_M_lock	/Users/lij/.vim/stl/pthread_alloc	/^        _M_lock () { pthread_mutex_lock(&_S_chunk_allocator_lock); }$/;"	f	class:_Pthread_alloc_template::_M_lock	access:public	signature:()
_Pthread_alloc_template::_M_lock::~_M_lock	/Users/lij/.vim/stl/pthread_alloc	/^        ~_M_lock () { pthread_mutex_unlock(&_S_chunk_allocator_lock); }$/;"	f	class:_Pthread_alloc_template::_M_lock	access:public	signature:()
_Pthread_alloc_template::_S_ALIGN	/Users/lij/.vim/stl/pthread_alloc	/^  enum {_S_ALIGN = __STL_DATA_ALIGNMENT};$/;"	e	enum:_Pthread_alloc_template::__anon2	file:
_Pthread_alloc_template::_S_chunk_alloc	/Users/lij/.vim/stl/pthread_alloc	/^  static char *_S_chunk_alloc(size_t __size, int &__nobjs);$/;"	p	class:_Pthread_alloc_template	file:	access:public	signature:(size_t __size, int &__nobjs)
_Pthread_alloc_template::_S_chunk_alloc	/Users/lij/.vim/stl/pthread_alloc	/^::_S_chunk_alloc(size_t __size, int &__nobjs)$/;"	f	class:_Pthread_alloc_template	signature:(size_t __size, int &__nobjs)
_Pthread_alloc_template::_S_chunk_allocator_lock	/Users/lij/.vim/stl/pthread_alloc	/^  static pthread_mutex_t _S_chunk_allocator_lock;$/;"	m	class:_Pthread_alloc_template	file:	access:private
_Pthread_alloc_template::_S_chunk_allocator_lock	/Users/lij/.vim/stl/pthread_alloc	/^pthread_mutex_t _Pthread_alloc_template<_Max_size>::_S_chunk_allocator_lock$/;"	m	class:_Pthread_alloc_template	file:
_Pthread_alloc_template::_S_destructor	/Users/lij/.vim/stl/pthread_alloc	/^  static void _S_destructor(void *instance);$/;"	p	class:_Pthread_alloc_template	file:	access:private	signature:(void *instance)
_Pthread_alloc_template::_S_destructor	/Users/lij/.vim/stl/pthread_alloc	/^void _Pthread_alloc_template<_Max_size>::_S_destructor(void * __instance)$/;"	f	class:_Pthread_alloc_template	signature:(void * __instance)
_Pthread_alloc_template::_S_end_free	/Users/lij/.vim/stl/pthread_alloc	/^  static char *_S_end_free;$/;"	m	class:_Pthread_alloc_template	file:	access:private
_Pthread_alloc_template::_S_end_free	/Users/lij/.vim/stl/pthread_alloc	/^::_S_end_free = 0;$/;"	m	class:_Pthread_alloc_template	file:
_Pthread_alloc_template::_S_free_per_thread_states	/Users/lij/.vim/stl/pthread_alloc	/^  static _Pthread_alloc_per_thread_state<_Max_size>* _S_free_per_thread_states;$/;"	m	class:_Pthread_alloc_template	file:	access:private
_Pthread_alloc_template::_S_free_per_thread_states	/Users/lij/.vim/stl/pthread_alloc	/^_Pthread_alloc_template<_Max_size>::_S_free_per_thread_states = 0;$/;"	m	class:_Pthread_alloc_template	file:
_Pthread_alloc_template::_S_freelist_index	/Users/lij/.vim/stl/pthread_alloc	/^  static size_t _S_freelist_index(size_t __bytes) {$/;"	f	class:_Pthread_alloc_template	access:public	signature:(size_t __bytes)
_Pthread_alloc_template::_S_get_per_thread_state	/Users/lij/.vim/stl/pthread_alloc	/^  static _Pthread_alloc_per_thread_state<_Max_size> *_S_get_per_thread_state();$/;"	p	class:_Pthread_alloc_template	file:	access:private	signature:()
_Pthread_alloc_template::_S_get_per_thread_state	/Users/lij/.vim/stl/pthread_alloc	/^_Pthread_alloc_template<_Max_size>::_S_get_per_thread_state()$/;"	f	class:_Pthread_alloc_template	signature:()
_Pthread_alloc_template::_S_heap_size	/Users/lij/.vim/stl/pthread_alloc	/^  static size_t _S_heap_size;$/;"	m	class:_Pthread_alloc_template	file:	access:private
_Pthread_alloc_template::_S_heap_size	/Users/lij/.vim/stl/pthread_alloc	/^::_S_heap_size = 0;$/;"	m	class:_Pthread_alloc_template	file:
_Pthread_alloc_template::_S_key	/Users/lij/.vim/stl/pthread_alloc	/^  static pthread_key_t _S_key;$/;"	m	class:_Pthread_alloc_template	file:	access:private
_Pthread_alloc_template::_S_key	/Users/lij/.vim/stl/pthread_alloc	/^pthread_key_t _Pthread_alloc_template<_Max_size>::_S_key;$/;"	m	class:_Pthread_alloc_template	file:
_Pthread_alloc_template::_S_key_initialized	/Users/lij/.vim/stl/pthread_alloc	/^  static bool _S_key_initialized;$/;"	m	class:_Pthread_alloc_template	file:	access:private
_Pthread_alloc_template::_S_key_initialized	/Users/lij/.vim/stl/pthread_alloc	/^bool _Pthread_alloc_template<_Max_size>::_S_key_initialized = false;$/;"	m	class:_Pthread_alloc_template	file:
_Pthread_alloc_template::_S_new_per_thread_state	/Users/lij/.vim/stl/pthread_alloc	/^  static _Pthread_alloc_per_thread_state<_Max_size> *_S_new_per_thread_state();$/;"	p	class:_Pthread_alloc_template	file:	access:private	signature:()
_Pthread_alloc_template::_S_new_per_thread_state	/Users/lij/.vim/stl/pthread_alloc	/^_Pthread_alloc_template<_Max_size>::_S_new_per_thread_state()$/;"	f	class:_Pthread_alloc_template	signature:()
_Pthread_alloc_template::_S_round_up	/Users/lij/.vim/stl/pthread_alloc	/^  static size_t _S_round_up(size_t __bytes) {$/;"	f	class:_Pthread_alloc_template	access:public	signature:(size_t __bytes)
_Pthread_alloc_template::_S_start_free	/Users/lij/.vim/stl/pthread_alloc	/^  static char *_S_start_free;$/;"	m	class:_Pthread_alloc_template	file:	access:private
_Pthread_alloc_template::_S_start_free	/Users/lij/.vim/stl/pthread_alloc	/^::_S_start_free = 0;$/;"	m	class:_Pthread_alloc_template	file:
_Pthread_alloc_template::__obj	/Users/lij/.vim/stl/pthread_alloc	/^  typedef _Pthread_alloc_obj __obj;$/;"	t	class:_Pthread_alloc_template	file:	access:public
_Pthread_alloc_template::allocate	/Users/lij/.vim/stl/pthread_alloc	/^  static void * allocate(size_t __n)$/;"	f	class:_Pthread_alloc_template	access:public	signature:(size_t __n)
_Pthread_alloc_template::deallocate	/Users/lij/.vim/stl/pthread_alloc	/^  static void deallocate(void *__p, size_t __n)$/;"	f	class:_Pthread_alloc_template	access:public	signature:(void *__p, size_t __n)
_Pthread_alloc_template::reallocate	/Users/lij/.vim/stl/pthread_alloc	/^  static void * reallocate(void *__p, size_t __old_sz, size_t __new_sz);$/;"	p	class:_Pthread_alloc_template	file:	access:public	signature:(void *__p, size_t __old_sz, size_t __new_sz)
_Pthread_alloc_template::reallocate	/Users/lij/.vim/stl/pthread_alloc	/^::reallocate(void *__p, size_t __old_sz, size_t __new_sz)$/;"	f	class:_Pthread_alloc_template	signature:(void *__p, size_t __old_sz, size_t __new_sz)
_RC_t	/Users/lij/.vim/stl/stl_threads.h	/^  typedef long _RC_t;$/;"	t	struct:_Refcount_Base	access:public
_ROPE_SWAP_SPECIALIZATION	/Users/lij/.vim/stl/stl_rope.h	/^# define _ROPE_SWAP_SPECIALIZATION(/;"	d
_RandomAccessContainer_concept_specification	/Users/lij/.vim/stl/container_concepts.h	/^struct _RandomAccessContainer_concept_specification {$/;"	s
_RandomAccessContainer_concept_specification::_RandomAccessContainer_requirement_violation	/Users/lij/.vim/stl/container_concepts.h	/^_RandomAccessContainer_requirement_violation(_RandomAccessContainer __c) {$/;"	f	struct:_RandomAccessContainer_concept_specification	access:public	signature:(_RandomAccessContainer __c)
_RandomAccessContainer_requirement_violation	/Users/lij/.vim/stl/container_concepts.h	/^_RandomAccessContainer_requirement_violation(_RandomAccessContainer __c) {$/;"	f	struct:_RandomAccessContainer_concept_specification	access:public	signature:(_RandomAccessContainer __c)
_RandomAccessIterator_concept_specification	/Users/lij/.vim/stl/concept_checks.h	/^struct _RandomAccessIterator_concept_specification {$/;"	s
_RandomAccessIterator_concept_specification::_RandomAccessIterator_requirement_violation	/Users/lij/.vim/stl/concept_checks.h	/^_RandomAccessIterator_requirement_violation(_RandAccIter __i) {$/;"	f	struct:_RandomAccessIterator_concept_specification	access:public	signature:(_RandAccIter __i)
_RandomAccessIterator_requirement_violation	/Users/lij/.vim/stl/concept_checks.h	/^_RandomAccessIterator_requirement_violation(_RandAccIter __i) {$/;"	f	struct:_RandomAccessIterator_concept_specification	access:public	signature:(_RandAccIter __i)
_Rb_tree	/Users/lij/.vim/stl/stl_tree.h	/^  _Rb_tree()$/;"	f	class:_Rb_tree	access:public	signature:()
_Rb_tree	/Users/lij/.vim/stl/stl_tree.h	/^  _Rb_tree(const _Compare& __comp)$/;"	f	class:_Rb_tree	access:public	signature:(const _Compare& __comp)
_Rb_tree	/Users/lij/.vim/stl/stl_tree.h	/^  _Rb_tree(const _Compare& __comp, const allocator_type& __a)$/;"	f	class:_Rb_tree	access:public	signature:(const _Compare& __comp, const allocator_type& __a)
_Rb_tree	/Users/lij/.vim/stl/stl_tree.h	/^  _Rb_tree(const _Rb_tree<_Key,_Value,_KeyOfValue,_Compare,_Alloc>& __x) $/;"	f	class:_Rb_tree	access:public	signature:(const _Rb_tree<_Key,_Value,_KeyOfValue,_Compare,_Alloc>& __x)
_Rb_tree	/Users/lij/.vim/stl/stl_tree.h	/^class _Rb_tree : protected _Rb_tree_base<_Value, _Alloc> {$/;"	c	inherits:_Rb_tree_base
_Rb_tree::_Base	/Users/lij/.vim/stl/stl_tree.h	/^  typedef _Rb_tree_base<_Value, _Alloc> _Base;$/;"	t	class:_Rb_tree	access:private
_Rb_tree::_Base_ptr	/Users/lij/.vim/stl/stl_tree.h	/^  typedef _Rb_tree_node_base* _Base_ptr;$/;"	t	class:_Rb_tree	access:protected
_Rb_tree::_Color_type	/Users/lij/.vim/stl/stl_tree.h	/^  typedef _Rb_tree_Color_type _Color_type;$/;"	t	class:_Rb_tree	access:protected
_Rb_tree::_Link_type	/Users/lij/.vim/stl/stl_tree.h	/^  typedef _Rb_tree_node* _Link_type;$/;"	t	class:_Rb_tree	access:public
_Rb_tree::_M_clone_node	/Users/lij/.vim/stl/stl_tree.h	/^  _Link_type _M_clone_node(_Link_type __x)$/;"	f	class:_Rb_tree	access:protected	signature:(_Link_type __x)
_Rb_tree::_M_copy	/Users/lij/.vim/stl/stl_tree.h	/^  ::_M_copy(_Link_type __x, _Link_type __p)$/;"	f	class:_Rb_tree	signature:(_Link_type __x, _Link_type __p)
_Rb_tree::_M_copy	/Users/lij/.vim/stl/stl_tree.h	/^  _Link_type _M_copy(_Link_type __x, _Link_type __p);$/;"	p	class:_Rb_tree	access:private	signature:(_Link_type __x, _Link_type __p)
_Rb_tree::_M_create_node	/Users/lij/.vim/stl/stl_tree.h	/^  _Link_type _M_create_node(const value_type& __x)$/;"	f	class:_Rb_tree	access:protected	signature:(const value_type& __x)
_Rb_tree::_M_empty_initialize	/Users/lij/.vim/stl/stl_tree.h	/^  void _M_empty_initialize() {$/;"	f	class:_Rb_tree	access:private	signature:()
_Rb_tree::_M_erase	/Users/lij/.vim/stl/stl_tree.h	/^  ::_M_erase(_Link_type __x)$/;"	f	class:_Rb_tree	signature:(_Link_type __x)
_Rb_tree::_M_erase	/Users/lij/.vim/stl/stl_tree.h	/^  void _M_erase(_Link_type __x);$/;"	p	class:_Rb_tree	access:private	signature:(_Link_type __x)
_Rb_tree::_M_insert	/Users/lij/.vim/stl/stl_tree.h	/^  ::_M_insert(_Base_ptr __x_, _Base_ptr __y_, const _Value& __v)$/;"	f	class:_Rb_tree	signature:(_Base_ptr __x_, _Base_ptr __y_, const _Value& __v)
_Rb_tree::_M_insert	/Users/lij/.vim/stl/stl_tree.h	/^  iterator _M_insert(_Base_ptr __x, _Base_ptr __y, const value_type& __v);$/;"	p	class:_Rb_tree	access:private	signature:(_Base_ptr __x, _Base_ptr __y, const value_type& __v)
_Rb_tree::_M_key_compare	/Users/lij/.vim/stl/stl_tree.h	/^  _Compare _M_key_compare;$/;"	m	class:_Rb_tree	access:protected
_Rb_tree::_M_leftmost	/Users/lij/.vim/stl/stl_tree.h	/^  _Link_type& _M_leftmost() const $/;"	f	class:_Rb_tree	access:protected	signature:() const
_Rb_tree::_M_node_count	/Users/lij/.vim/stl/stl_tree.h	/^  size_type _M_node_count; \/\/ keeps track of size of tree$/;"	m	class:_Rb_tree	access:protected
_Rb_tree::_M_rightmost	/Users/lij/.vim/stl/stl_tree.h	/^  _Link_type& _M_rightmost() const $/;"	f	class:_Rb_tree	access:protected	signature:() const
_Rb_tree::_M_root	/Users/lij/.vim/stl/stl_tree.h	/^  _Link_type& _M_root() const $/;"	f	class:_Rb_tree	access:protected	signature:() const
_Rb_tree::_Rb_tree	/Users/lij/.vim/stl/stl_tree.h	/^  _Rb_tree()$/;"	f	class:_Rb_tree	access:public	signature:()
_Rb_tree::_Rb_tree	/Users/lij/.vim/stl/stl_tree.h	/^  _Rb_tree(const _Compare& __comp)$/;"	f	class:_Rb_tree	access:public	signature:(const _Compare& __comp)
_Rb_tree::_Rb_tree	/Users/lij/.vim/stl/stl_tree.h	/^  _Rb_tree(const _Compare& __comp, const allocator_type& __a)$/;"	f	class:_Rb_tree	access:public	signature:(const _Compare& __comp, const allocator_type& __a)
_Rb_tree::_Rb_tree	/Users/lij/.vim/stl/stl_tree.h	/^  _Rb_tree(const _Rb_tree<_Key,_Value,_KeyOfValue,_Compare,_Alloc>& __x) $/;"	f	class:_Rb_tree	access:public	signature:(const _Rb_tree<_Key,_Value,_KeyOfValue,_Compare,_Alloc>& __x)
_Rb_tree::_Rb_tree_node	/Users/lij/.vim/stl/stl_tree.h	/^  typedef _Rb_tree_node<_Value> _Rb_tree_node;$/;"	t	class:_Rb_tree	access:protected
_Rb_tree::_S_color	/Users/lij/.vim/stl/stl_tree.h	/^  static _Color_type& _S_color(_Base_ptr __x)$/;"	f	class:_Rb_tree	access:protected	signature:(_Base_ptr __x)
_Rb_tree::_S_color	/Users/lij/.vim/stl/stl_tree.h	/^  static _Color_type& _S_color(_Link_type __x)$/;"	f	class:_Rb_tree	access:protected	signature:(_Link_type __x)
_Rb_tree::_S_key	/Users/lij/.vim/stl/stl_tree.h	/^  static const _Key& _S_key(_Base_ptr __x)$/;"	f	class:_Rb_tree	access:protected	signature:(_Base_ptr __x)
_Rb_tree::_S_key	/Users/lij/.vim/stl/stl_tree.h	/^  static const _Key& _S_key(_Link_type __x)$/;"	f	class:_Rb_tree	access:protected	signature:(_Link_type __x)
_Rb_tree::_S_left	/Users/lij/.vim/stl/stl_tree.h	/^  static _Link_type& _S_left(_Base_ptr __x)$/;"	f	class:_Rb_tree	access:protected	signature:(_Base_ptr __x)
_Rb_tree::_S_left	/Users/lij/.vim/stl/stl_tree.h	/^  static _Link_type& _S_left(_Link_type __x)$/;"	f	class:_Rb_tree	access:protected	signature:(_Link_type __x)
_Rb_tree::_S_maximum	/Users/lij/.vim/stl/stl_tree.h	/^  static _Link_type _S_maximum(_Link_type __x)$/;"	f	class:_Rb_tree	access:protected	signature:(_Link_type __x)
_Rb_tree::_S_minimum	/Users/lij/.vim/stl/stl_tree.h	/^  static _Link_type _S_minimum(_Link_type __x) $/;"	f	class:_Rb_tree	access:protected	signature:(_Link_type __x)
_Rb_tree::_S_parent	/Users/lij/.vim/stl/stl_tree.h	/^  static _Link_type& _S_parent(_Base_ptr __x)$/;"	f	class:_Rb_tree	access:protected	signature:(_Base_ptr __x)
_Rb_tree::_S_parent	/Users/lij/.vim/stl/stl_tree.h	/^  static _Link_type& _S_parent(_Link_type __x)$/;"	f	class:_Rb_tree	access:protected	signature:(_Link_type __x)
_Rb_tree::_S_right	/Users/lij/.vim/stl/stl_tree.h	/^  static _Link_type& _S_right(_Base_ptr __x)$/;"	f	class:_Rb_tree	access:protected	signature:(_Base_ptr __x)
_Rb_tree::_S_right	/Users/lij/.vim/stl/stl_tree.h	/^  static _Link_type& _S_right(_Link_type __x)$/;"	f	class:_Rb_tree	access:protected	signature:(_Link_type __x)
_Rb_tree::_S_value	/Users/lij/.vim/stl/stl_tree.h	/^  static reference _S_value(_Base_ptr __x)$/;"	f	class:_Rb_tree	access:protected	signature:(_Base_ptr __x)
_Rb_tree::_S_value	/Users/lij/.vim/stl/stl_tree.h	/^  static reference _S_value(_Link_type __x)$/;"	f	class:_Rb_tree	access:protected	signature:(_Link_type __x)
_Rb_tree::__rb_verify	/Users/lij/.vim/stl/stl_tree.h	/^  bool __rb_verify() const;$/;"	p	class:_Rb_tree	access:public	signature:() const
_Rb_tree::__rb_verify	/Users/lij/.vim/stl/stl_tree.h	/^bool _Rb_tree<_Key,_Value,_KeyOfValue,_Compare,_Alloc>::__rb_verify() const$/;"	f	class:_Rb_tree	signature:() const
_Rb_tree::allocator_type	/Users/lij/.vim/stl/stl_tree.h	/^  typedef typename _Base::allocator_type allocator_type;$/;"	t	class:_Rb_tree	access:public
_Rb_tree::begin	/Users/lij/.vim/stl/stl_tree.h	/^  const_iterator begin() const { return _M_leftmost(); }$/;"	f	class:_Rb_tree	access:public	signature:() const
_Rb_tree::begin	/Users/lij/.vim/stl/stl_tree.h	/^  iterator begin() { return _M_leftmost(); }$/;"	f	class:_Rb_tree	access:public	signature:()
_Rb_tree::clear	/Users/lij/.vim/stl/stl_tree.h	/^  void clear() {$/;"	f	class:_Rb_tree	access:public	signature:()
_Rb_tree::const_iterator	/Users/lij/.vim/stl/stl_tree.h	/^          const_iterator;$/;"	t	class:_Rb_tree	access:public
_Rb_tree::const_pointer	/Users/lij/.vim/stl/stl_tree.h	/^  typedef const value_type* const_pointer;$/;"	t	class:_Rb_tree	access:public
_Rb_tree::const_reference	/Users/lij/.vim/stl/stl_tree.h	/^  typedef const value_type& const_reference;$/;"	t	class:_Rb_tree	access:public
_Rb_tree::const_reverse_iterator	/Users/lij/.vim/stl/stl_tree.h	/^          const_reverse_iterator;$/;"	t	class:_Rb_tree	access:public
_Rb_tree::const_reverse_iterator	/Users/lij/.vim/stl/stl_tree.h	/^  typedef reverse_iterator<const_iterator> const_reverse_iterator;$/;"	t	class:_Rb_tree	access:public
_Rb_tree::count	/Users/lij/.vim/stl/stl_tree.h	/^  ::count(const _Key& __k) const$/;"	f	class:_Rb_tree	signature:(const _Key& __k) const
_Rb_tree::count	/Users/lij/.vim/stl/stl_tree.h	/^  size_type count(const key_type& __x) const;$/;"	p	class:_Rb_tree	access:public	signature:(const key_type& __x) const
_Rb_tree::destroy_node	/Users/lij/.vim/stl/stl_tree.h	/^  void destroy_node(_Link_type __p)$/;"	f	class:_Rb_tree	access:protected	signature:(_Link_type __p)
_Rb_tree::difference_type	/Users/lij/.vim/stl/stl_tree.h	/^  typedef ptrdiff_t difference_type;$/;"	t	class:_Rb_tree	access:public
_Rb_tree::empty	/Users/lij/.vim/stl/stl_tree.h	/^  bool empty() const { return _M_node_count == 0; }$/;"	f	class:_Rb_tree	access:public	signature:() const
_Rb_tree::end	/Users/lij/.vim/stl/stl_tree.h	/^  const_iterator end() const { return _M_header; }$/;"	f	class:_Rb_tree	access:public	signature:() const
_Rb_tree::end	/Users/lij/.vim/stl/stl_tree.h	/^  iterator end() { return _M_header; }$/;"	f	class:_Rb_tree	access:public	signature:()
_Rb_tree::equal_range	/Users/lij/.vim/stl/stl_tree.h	/^  ::equal_range(const _Key& __k) const$/;"	f	class:_Rb_tree	signature:(const _Key& __k) const
_Rb_tree::equal_range	/Users/lij/.vim/stl/stl_tree.h	/^  ::equal_range(const _Key& __k)$/;"	f	class:_Rb_tree	signature:(const _Key& __k)
_Rb_tree::equal_range	/Users/lij/.vim/stl/stl_tree.h	/^  pair<const_iterator, const_iterator> equal_range(const key_type& __x) const;$/;"	p	class:_Rb_tree	access:public	signature:(const key_type& __x) const
_Rb_tree::equal_range	/Users/lij/.vim/stl/stl_tree.h	/^  pair<iterator,iterator> equal_range(const key_type& __x);$/;"	p	class:_Rb_tree	access:public	signature:(const key_type& __x)
_Rb_tree::erase	/Users/lij/.vim/stl/stl_tree.h	/^  ::erase(const _Key* __first, const _Key* __last) $/;"	f	class:_Rb_tree	signature:(const _Key* __first, const _Key* __last)
_Rb_tree::erase	/Users/lij/.vim/stl/stl_tree.h	/^  ::erase(iterator __first, iterator __last)$/;"	f	class:_Rb_tree	signature:(iterator __first, iterator __last)
_Rb_tree::erase	/Users/lij/.vim/stl/stl_tree.h	/^  ::erase(iterator __position)$/;"	f	class:_Rb_tree	signature:(iterator __position)
_Rb_tree::erase	/Users/lij/.vim/stl/stl_tree.h	/^  size_type erase(const key_type& __x);$/;"	p	class:_Rb_tree	access:public	signature:(const key_type& __x)
_Rb_tree::erase	/Users/lij/.vim/stl/stl_tree.h	/^  void erase(const key_type* __first, const key_type* __last);$/;"	p	class:_Rb_tree	access:public	signature:(const key_type* __first, const key_type* __last)
_Rb_tree::erase	/Users/lij/.vim/stl/stl_tree.h	/^  void erase(iterator __first, iterator __last);$/;"	p	class:_Rb_tree	access:public	signature:(iterator __first, iterator __last)
_Rb_tree::erase	/Users/lij/.vim/stl/stl_tree.h	/^  void erase(iterator __position);$/;"	p	class:_Rb_tree	access:public	signature:(iterator __position)
_Rb_tree::erase	/Users/lij/.vim/stl/stl_tree.h	/^_Rb_tree<_Key,_Value,_KeyOfValue,_Compare,_Alloc>::erase(const _Key& __x)$/;"	f	class:_Rb_tree	signature:(const _Key& __x)
_Rb_tree::find	/Users/lij/.vim/stl/stl_tree.h	/^  const_iterator find(const key_type& __x) const;$/;"	p	class:_Rb_tree	access:public	signature:(const key_type& __x) const
_Rb_tree::find	/Users/lij/.vim/stl/stl_tree.h	/^  iterator find(const key_type& __x);$/;"	p	class:_Rb_tree	access:public	signature:(const key_type& __x)
_Rb_tree::find	/Users/lij/.vim/stl/stl_tree.h	/^_Rb_tree<_Key,_Value,_KeyOfValue,_Compare,_Alloc>::find(const _Key& __k) const$/;"	f	class:_Rb_tree	signature:(const _Key& __k) const
_Rb_tree::find	/Users/lij/.vim/stl/stl_tree.h	/^_Rb_tree<_Key,_Value,_KeyOfValue,_Compare,_Alloc>::find(const _Key& __k)$/;"	f	class:_Rb_tree	signature:(const _Key& __k)
_Rb_tree::get_allocator	/Users/lij/.vim/stl/stl_tree.h	/^  allocator_type get_allocator() const { return _Base::get_allocator(); }$/;"	f	class:_Rb_tree	access:public	signature:() const
_Rb_tree::insert_equal	/Users/lij/.vim/stl/stl_tree.h	/^  ::insert_equal(_II __first, _II __last)$/;"	f	class:_Rb_tree	signature:(_II __first, _II __last)
_Rb_tree::insert_equal	/Users/lij/.vim/stl/stl_tree.h	/^  ::insert_equal(const _Val* __first, const _Val* __last)$/;"	f	class:_Rb_tree	signature:(const _Val* __first, const _Val* __last)
_Rb_tree::insert_equal	/Users/lij/.vim/stl/stl_tree.h	/^  ::insert_equal(const _Value& __v)$/;"	f	class:_Rb_tree	signature:(const _Value& __v)
_Rb_tree::insert_equal	/Users/lij/.vim/stl/stl_tree.h	/^  ::insert_equal(const_iterator __first, const_iterator __last)$/;"	f	class:_Rb_tree	signature:(const_iterator __first, const_iterator __last)
_Rb_tree::insert_equal	/Users/lij/.vim/stl/stl_tree.h	/^  ::insert_equal(iterator __position, const _Val& __v)$/;"	f	class:_Rb_tree	signature:(iterator __position, const _Val& __v)
_Rb_tree::insert_equal	/Users/lij/.vim/stl/stl_tree.h	/^  iterator insert_equal(const value_type& __x);$/;"	p	class:_Rb_tree	access:public	signature:(const value_type& __x)
_Rb_tree::insert_equal	/Users/lij/.vim/stl/stl_tree.h	/^  iterator insert_equal(iterator __position, const value_type& __x);$/;"	p	class:_Rb_tree	access:public	signature:(iterator __position, const value_type& __x)
_Rb_tree::insert_equal	/Users/lij/.vim/stl/stl_tree.h	/^  void insert_equal(_InputIterator __first, _InputIterator __last);$/;"	p	class:_Rb_tree	access:public	signature:(_InputIterator __first, _InputIterator __last)
_Rb_tree::insert_equal	/Users/lij/.vim/stl/stl_tree.h	/^  void insert_equal(const value_type* __first, const value_type* __last);$/;"	p	class:_Rb_tree	access:public	signature:(const value_type* __first, const value_type* __last)
_Rb_tree::insert_equal	/Users/lij/.vim/stl/stl_tree.h	/^  void insert_equal(const_iterator __first, const_iterator __last);$/;"	p	class:_Rb_tree	access:public	signature:(const_iterator __first, const_iterator __last)
_Rb_tree::insert_unique	/Users/lij/.vim/stl/stl_tree.h	/^  ::insert_unique(_II __first, _II __last) {$/;"	f	class:_Rb_tree	signature:(_II __first, _II __last)
_Rb_tree::insert_unique	/Users/lij/.vim/stl/stl_tree.h	/^  ::insert_unique(const _Val* __first, const _Val* __last)$/;"	f	class:_Rb_tree	signature:(const _Val* __first, const _Val* __last)
_Rb_tree::insert_unique	/Users/lij/.vim/stl/stl_tree.h	/^  ::insert_unique(const _Value& __v)$/;"	f	class:_Rb_tree	signature:(const _Value& __v)
_Rb_tree::insert_unique	/Users/lij/.vim/stl/stl_tree.h	/^  ::insert_unique(const_iterator __first, const_iterator __last)$/;"	f	class:_Rb_tree	signature:(const_iterator __first, const_iterator __last)
_Rb_tree::insert_unique	/Users/lij/.vim/stl/stl_tree.h	/^  ::insert_unique(iterator __position, const _Val& __v)$/;"	f	class:_Rb_tree	signature:(iterator __position, const _Val& __v)
_Rb_tree::insert_unique	/Users/lij/.vim/stl/stl_tree.h	/^  iterator insert_unique(iterator __position, const value_type& __x);$/;"	p	class:_Rb_tree	access:public	signature:(iterator __position, const value_type& __x)
_Rb_tree::insert_unique	/Users/lij/.vim/stl/stl_tree.h	/^  pair<iterator,bool> insert_unique(const value_type& __x);$/;"	p	class:_Rb_tree	access:public	signature:(const value_type& __x)
_Rb_tree::insert_unique	/Users/lij/.vim/stl/stl_tree.h	/^  void insert_unique(_InputIterator __first, _InputIterator __last);$/;"	p	class:_Rb_tree	access:public	signature:(_InputIterator __first, _InputIterator __last)
_Rb_tree::insert_unique	/Users/lij/.vim/stl/stl_tree.h	/^  void insert_unique(const value_type* __first, const value_type* __last);$/;"	p	class:_Rb_tree	access:public	signature:(const value_type* __first, const value_type* __last)
_Rb_tree::insert_unique	/Users/lij/.vim/stl/stl_tree.h	/^  void insert_unique(const_iterator __first, const_iterator __last);$/;"	p	class:_Rb_tree	access:public	signature:(const_iterator __first, const_iterator __last)
_Rb_tree::iterator	/Users/lij/.vim/stl/stl_tree.h	/^  typedef _Rb_tree_iterator<value_type, reference, pointer> iterator;$/;"	t	class:_Rb_tree	access:public
_Rb_tree::key_comp	/Users/lij/.vim/stl/stl_tree.h	/^  _Compare key_comp() const { return _M_key_compare; }$/;"	f	class:_Rb_tree	access:public	signature:() const
_Rb_tree::key_type	/Users/lij/.vim/stl/stl_tree.h	/^  typedef _Key key_type;$/;"	t	class:_Rb_tree	access:public
_Rb_tree::lower_bound	/Users/lij/.vim/stl/stl_tree.h	/^  ::lower_bound(const _Key& __k) const$/;"	f	class:_Rb_tree	signature:(const _Key& __k) const
_Rb_tree::lower_bound	/Users/lij/.vim/stl/stl_tree.h	/^  ::lower_bound(const _Key& __k)$/;"	f	class:_Rb_tree	signature:(const _Key& __k)
_Rb_tree::lower_bound	/Users/lij/.vim/stl/stl_tree.h	/^  const_iterator lower_bound(const key_type& __x) const;$/;"	p	class:_Rb_tree	access:public	signature:(const key_type& __x) const
_Rb_tree::lower_bound	/Users/lij/.vim/stl/stl_tree.h	/^  iterator lower_bound(const key_type& __x);$/;"	p	class:_Rb_tree	access:public	signature:(const key_type& __x)
_Rb_tree::max_size	/Users/lij/.vim/stl/stl_tree.h	/^  size_type max_size() const { return size_type(-1); }$/;"	f	class:_Rb_tree	access:public	signature:() const
_Rb_tree::operator =	/Users/lij/.vim/stl/stl_tree.h	/^  ::operator=(const _Rb_tree<_Key,_Value,_KeyOfValue,_Compare,_Alloc>& __x)$/;"	f	class:_Rb_tree	signature:(const _Rb_tree<_Key,_Value,_KeyOfValue,_Compare,_Alloc>& __x)
_Rb_tree::operator =	/Users/lij/.vim/stl/stl_tree.h	/^  operator=(const _Rb_tree<_Key,_Value,_KeyOfValue,_Compare,_Alloc>& __x);$/;"	p	class:_Rb_tree	access:public	signature:(const _Rb_tree<_Key,_Value,_KeyOfValue,_Compare,_Alloc>& __x)
_Rb_tree::pointer	/Users/lij/.vim/stl/stl_tree.h	/^  typedef value_type* pointer;$/;"	t	class:_Rb_tree	access:public
_Rb_tree::rbegin	/Users/lij/.vim/stl/stl_tree.h	/^  const_reverse_iterator rbegin() const { $/;"	f	class:_Rb_tree	access:public	signature:() const
_Rb_tree::rbegin	/Users/lij/.vim/stl/stl_tree.h	/^  reverse_iterator rbegin() { return reverse_iterator(end()); }$/;"	f	class:_Rb_tree	access:public	signature:()
_Rb_tree::reference	/Users/lij/.vim/stl/stl_tree.h	/^  typedef value_type& reference;$/;"	t	class:_Rb_tree	access:public
_Rb_tree::rend	/Users/lij/.vim/stl/stl_tree.h	/^  const_reverse_iterator rend() const { $/;"	f	class:_Rb_tree	access:public	signature:() const
_Rb_tree::rend	/Users/lij/.vim/stl/stl_tree.h	/^  reverse_iterator rend() { return reverse_iterator(begin()); }$/;"	f	class:_Rb_tree	access:public	signature:()
_Rb_tree::reverse_iterator	/Users/lij/.vim/stl/stl_tree.h	/^          reverse_iterator; $/;"	t	class:_Rb_tree	access:public
_Rb_tree::reverse_iterator	/Users/lij/.vim/stl/stl_tree.h	/^  typedef reverse_iterator<iterator> reverse_iterator;$/;"	t	class:_Rb_tree	access:public
_Rb_tree::size	/Users/lij/.vim/stl/stl_tree.h	/^  size_type size() const { return _M_node_count; }$/;"	f	class:_Rb_tree	access:public	signature:() const
_Rb_tree::size_type	/Users/lij/.vim/stl/stl_tree.h	/^  typedef size_t size_type;$/;"	t	class:_Rb_tree	access:public
_Rb_tree::swap	/Users/lij/.vim/stl/stl_tree.h	/^  void swap(_Rb_tree<_Key,_Value,_KeyOfValue,_Compare,_Alloc>& __t) {$/;"	f	class:_Rb_tree	access:public	signature:(_Rb_tree<_Key,_Value,_KeyOfValue,_Compare,_Alloc>& __t)
_Rb_tree::upper_bound	/Users/lij/.vim/stl/stl_tree.h	/^  ::upper_bound(const _Key& __k) const$/;"	f	class:_Rb_tree	signature:(const _Key& __k) const
_Rb_tree::upper_bound	/Users/lij/.vim/stl/stl_tree.h	/^  ::upper_bound(const _Key& __k)$/;"	f	class:_Rb_tree	signature:(const _Key& __k)
_Rb_tree::upper_bound	/Users/lij/.vim/stl/stl_tree.h	/^  const_iterator upper_bound(const key_type& __x) const;$/;"	p	class:_Rb_tree	access:public	signature:(const key_type& __x) const
_Rb_tree::upper_bound	/Users/lij/.vim/stl/stl_tree.h	/^  iterator upper_bound(const key_type& __x);$/;"	p	class:_Rb_tree	access:public	signature:(const key_type& __x)
_Rb_tree::value_type	/Users/lij/.vim/stl/stl_tree.h	/^  typedef _Value value_type;$/;"	t	class:_Rb_tree	access:public
_Rb_tree::~_Rb_tree	/Users/lij/.vim/stl/stl_tree.h	/^  ~_Rb_tree() { clear(); }$/;"	f	class:_Rb_tree	access:public	signature:()
_Rb_tree_Color_type	/Users/lij/.vim/stl/stl_tree.h	/^typedef bool _Rb_tree_Color_type;$/;"	t
_Rb_tree_alloc_base	/Users/lij/.vim/stl/stl_tree.h	/^  _Rb_tree_alloc_base(const allocator_type& __a)$/;"	f	class:_Rb_tree_alloc_base	access:public	signature:(const allocator_type& __a)
_Rb_tree_alloc_base	/Users/lij/.vim/stl/stl_tree.h	/^  _Rb_tree_alloc_base(const allocator_type&) : _M_header(0) {}$/;"	f	class:_Rb_tree_alloc_base	access:public	signature:(const allocator_type&)
_Rb_tree_alloc_base	/Users/lij/.vim/stl/stl_tree.h	/^class _Rb_tree_alloc_base {$/;"	c
_Rb_tree_alloc_base	/Users/lij/.vim/stl/stl_tree.h	/^class _Rb_tree_alloc_base<_Tp, _Alloc, true> {$/;"	c
_Rb_tree_alloc_base::_Alloc_type	/Users/lij/.vim/stl/stl_tree.h	/^          _Alloc_type;$/;"	t	class:_Rb_tree_alloc_base	access:protected
_Rb_tree_alloc_base::_M_get_node	/Users/lij/.vim/stl/stl_tree.h	/^  _Rb_tree_node<_Tp>* _M_get_node() $/;"	f	class:_Rb_tree_alloc_base	access:protected	signature:()
_Rb_tree_alloc_base::_M_get_node	/Users/lij/.vim/stl/stl_tree.h	/^  _Rb_tree_node<_Tp>* _M_get_node()$/;"	f	class:_Rb_tree_alloc_base	access:protected	signature:()
_Rb_tree_alloc_base::_M_header	/Users/lij/.vim/stl/stl_tree.h	/^  _Rb_tree_node<_Tp>* _M_header;$/;"	m	class:_Rb_tree_alloc_base	access:protected
_Rb_tree_alloc_base::_M_node_allocator	/Users/lij/.vim/stl/stl_tree.h	/^           _M_node_allocator;$/;"	m	class:_Rb_tree_alloc_base	access:protected
_Rb_tree_alloc_base::_M_put_node	/Users/lij/.vim/stl/stl_tree.h	/^  void _M_put_node(_Rb_tree_node<_Tp>* __p) $/;"	f	class:_Rb_tree_alloc_base	access:protected	signature:(_Rb_tree_node<_Tp>* __p)
_Rb_tree_alloc_base::_M_put_node	/Users/lij/.vim/stl/stl_tree.h	/^  void _M_put_node(_Rb_tree_node<_Tp>* __p)$/;"	f	class:_Rb_tree_alloc_base	access:protected	signature:(_Rb_tree_node<_Tp>* __p)
_Rb_tree_alloc_base::_Rb_tree_alloc_base	/Users/lij/.vim/stl/stl_tree.h	/^  _Rb_tree_alloc_base(const allocator_type& __a)$/;"	f	class:_Rb_tree_alloc_base	access:public	signature:(const allocator_type& __a)
_Rb_tree_alloc_base::_Rb_tree_alloc_base	/Users/lij/.vim/stl/stl_tree.h	/^  _Rb_tree_alloc_base(const allocator_type&) : _M_header(0) {}$/;"	f	class:_Rb_tree_alloc_base	access:public	signature:(const allocator_type&)
_Rb_tree_alloc_base::allocator_type	/Users/lij/.vim/stl/stl_tree.h	/^  typedef typename _Alloc_traits<_Tp, _Alloc>::allocator_type allocator_type;$/;"	t	class:_Rb_tree_alloc_base	access:public
_Rb_tree_alloc_base::get_allocator	/Users/lij/.vim/stl/stl_tree.h	/^  allocator_type get_allocator() const { return _M_node_allocator; }$/;"	f	class:_Rb_tree_alloc_base	access:public	signature:() const
_Rb_tree_alloc_base::get_allocator	/Users/lij/.vim/stl/stl_tree.h	/^  allocator_type get_allocator() const { return allocator_type(); }$/;"	f	class:_Rb_tree_alloc_base	access:public	signature:() const
_Rb_tree_base	/Users/lij/.vim/stl/stl_tree.h	/^  _Rb_tree_base(const allocator_type& __a) $/;"	f	struct:_Rb_tree_base	access:public	signature:(const allocator_type& __a)
_Rb_tree_base	/Users/lij/.vim/stl/stl_tree.h	/^  _Rb_tree_base(const allocator_type&) $/;"	f	struct:_Rb_tree_base	access:public	signature:(const allocator_type&)
_Rb_tree_base	/Users/lij/.vim/stl/stl_tree.h	/^struct _Rb_tree_base$/;"	s
_Rb_tree_base	/Users/lij/.vim/stl/stl_tree.h	/^struct _Rb_tree_base$/;"	s	inherits:_Rb_tree_alloc_base
_Rb_tree_base::_Alloc_type	/Users/lij/.vim/stl/stl_tree.h	/^  typedef simple_alloc<_Rb_tree_node<_Tp>, _Alloc> _Alloc_type;$/;"	t	struct:_Rb_tree_base	access:protected
_Rb_tree_base::_Base	/Users/lij/.vim/stl/stl_tree.h	/^          _Base;$/;"	t	struct:_Rb_tree_base	access:public
_Rb_tree_base::_M_get_node	/Users/lij/.vim/stl/stl_tree.h	/^  _Rb_tree_node<_Tp>* _M_get_node()$/;"	f	struct:_Rb_tree_base	access:protected	signature:()
_Rb_tree_base::_M_header	/Users/lij/.vim/stl/stl_tree.h	/^  _Rb_tree_node<_Tp>* _M_header;$/;"	m	struct:_Rb_tree_base	access:protected
_Rb_tree_base::_M_put_node	/Users/lij/.vim/stl/stl_tree.h	/^  void _M_put_node(_Rb_tree_node<_Tp>* __p)$/;"	f	struct:_Rb_tree_base	access:protected	signature:(_Rb_tree_node<_Tp>* __p)
_Rb_tree_base::_Rb_tree_base	/Users/lij/.vim/stl/stl_tree.h	/^  _Rb_tree_base(const allocator_type& __a) $/;"	f	struct:_Rb_tree_base	access:public	signature:(const allocator_type& __a)
_Rb_tree_base::_Rb_tree_base	/Users/lij/.vim/stl/stl_tree.h	/^  _Rb_tree_base(const allocator_type&) $/;"	f	struct:_Rb_tree_base	access:public	signature:(const allocator_type&)
_Rb_tree_base::allocator_type	/Users/lij/.vim/stl/stl_tree.h	/^  typedef _Alloc allocator_type;$/;"	t	struct:_Rb_tree_base	access:public
_Rb_tree_base::allocator_type	/Users/lij/.vim/stl/stl_tree.h	/^  typedef typename _Base::allocator_type allocator_type;$/;"	t	struct:_Rb_tree_base	access:public
_Rb_tree_base::get_allocator	/Users/lij/.vim/stl/stl_tree.h	/^  allocator_type get_allocator() const { return allocator_type(); }$/;"	f	struct:_Rb_tree_base	access:public	signature:() const
_Rb_tree_base::~_Rb_tree_base	/Users/lij/.vim/stl/stl_tree.h	/^  ~_Rb_tree_base() { _M_put_node(_M_header); }$/;"	f	struct:_Rb_tree_base	access:public	signature:()
_Rb_tree_base_iterator	/Users/lij/.vim/stl/stl_tree.h	/^struct _Rb_tree_base_iterator$/;"	s
_Rb_tree_base_iterator::_Base_ptr	/Users/lij/.vim/stl/stl_tree.h	/^  typedef _Rb_tree_node_base::_Base_ptr _Base_ptr;$/;"	t	struct:_Rb_tree_base_iterator	access:public
_Rb_tree_base_iterator::_M_decrement	/Users/lij/.vim/stl/stl_tree.h	/^  void _M_decrement()$/;"	f	struct:_Rb_tree_base_iterator	access:public	signature:()
_Rb_tree_base_iterator::_M_increment	/Users/lij/.vim/stl/stl_tree.h	/^  void _M_increment()$/;"	f	struct:_Rb_tree_base_iterator	access:public	signature:()
_Rb_tree_base_iterator::_M_node	/Users/lij/.vim/stl/stl_tree.h	/^  _Base_ptr _M_node;$/;"	m	struct:_Rb_tree_base_iterator	access:public
_Rb_tree_base_iterator::difference_type	/Users/lij/.vim/stl/stl_tree.h	/^  typedef ptrdiff_t difference_type;$/;"	t	struct:_Rb_tree_base_iterator	access:public
_Rb_tree_base_iterator::iterator_category	/Users/lij/.vim/stl/stl_tree.h	/^  typedef bidirectional_iterator_tag iterator_category;$/;"	t	struct:_Rb_tree_base_iterator	access:public
_Rb_tree_iterator	/Users/lij/.vim/stl/stl_tree.h	/^  _Rb_tree_iterator() {}$/;"	f	struct:_Rb_tree_iterator	access:public	signature:()
_Rb_tree_iterator	/Users/lij/.vim/stl/stl_tree.h	/^  _Rb_tree_iterator(_Link_type __x) { _M_node = __x; }$/;"	f	struct:_Rb_tree_iterator	access:public	signature:(_Link_type __x)
_Rb_tree_iterator	/Users/lij/.vim/stl/stl_tree.h	/^  _Rb_tree_iterator(const iterator& __it) { _M_node = __it._M_node; }$/;"	f	struct:_Rb_tree_iterator	access:public	signature:(const iterator& __it)
_Rb_tree_iterator	/Users/lij/.vim/stl/stl_tree.h	/^struct _Rb_tree_iterator : public _Rb_tree_base_iterator$/;"	s	inherits:_Rb_tree_base_iterator
_Rb_tree_iterator::_Link_type	/Users/lij/.vim/stl/stl_tree.h	/^  typedef _Rb_tree_node<_Value>* _Link_type;$/;"	t	struct:_Rb_tree_iterator	access:public
_Rb_tree_iterator::_Rb_tree_iterator	/Users/lij/.vim/stl/stl_tree.h	/^  _Rb_tree_iterator() {}$/;"	f	struct:_Rb_tree_iterator	access:public	signature:()
_Rb_tree_iterator::_Rb_tree_iterator	/Users/lij/.vim/stl/stl_tree.h	/^  _Rb_tree_iterator(_Link_type __x) { _M_node = __x; }$/;"	f	struct:_Rb_tree_iterator	access:public	signature:(_Link_type __x)
_Rb_tree_iterator::_Rb_tree_iterator	/Users/lij/.vim/stl/stl_tree.h	/^  _Rb_tree_iterator(const iterator& __it) { _M_node = __it._M_node; }$/;"	f	struct:_Rb_tree_iterator	access:public	signature:(const iterator& __it)
_Rb_tree_iterator::_Self	/Users/lij/.vim/stl/stl_tree.h	/^    _Self;$/;"	t	struct:_Rb_tree_iterator	access:public
_Rb_tree_iterator::const_iterator	/Users/lij/.vim/stl/stl_tree.h	/^    const_iterator;$/;"	t	struct:_Rb_tree_iterator	access:public
_Rb_tree_iterator::iterator	/Users/lij/.vim/stl/stl_tree.h	/^    iterator;$/;"	t	struct:_Rb_tree_iterator	access:public
_Rb_tree_iterator::operator *	/Users/lij/.vim/stl/stl_tree.h	/^  reference operator*() const { return _Link_type(_M_node)->_M_value_field; }$/;"	f	struct:_Rb_tree_iterator	access:public	signature:() const
_Rb_tree_iterator::operator ++	/Users/lij/.vim/stl/stl_tree.h	/^  _Self operator++(int) {$/;"	f	struct:_Rb_tree_iterator	access:public	signature:(int)
_Rb_tree_iterator::operator ++	/Users/lij/.vim/stl/stl_tree.h	/^  _Self& operator++() { _M_increment(); return *this; }$/;"	f	struct:_Rb_tree_iterator	access:public	signature:()
_Rb_tree_iterator::operator --	/Users/lij/.vim/stl/stl_tree.h	/^  _Self operator--(int) {$/;"	f	struct:_Rb_tree_iterator	access:public	signature:(int)
_Rb_tree_iterator::operator --	/Users/lij/.vim/stl/stl_tree.h	/^  _Self& operator--() { _M_decrement(); return *this; }$/;"	f	struct:_Rb_tree_iterator	access:public	signature:()
_Rb_tree_iterator::operator ->	/Users/lij/.vim/stl/stl_tree.h	/^  pointer operator->() const { return &(operator*()); }$/;"	f	struct:_Rb_tree_iterator	access:public	signature:() const
_Rb_tree_iterator::pointer	/Users/lij/.vim/stl/stl_tree.h	/^  typedef _Ptr pointer;$/;"	t	struct:_Rb_tree_iterator	access:public
_Rb_tree_iterator::reference	/Users/lij/.vim/stl/stl_tree.h	/^  typedef _Ref reference;$/;"	t	struct:_Rb_tree_iterator	access:public
_Rb_tree_iterator::value_type	/Users/lij/.vim/stl/stl_tree.h	/^  typedef _Value value_type;$/;"	t	struct:_Rb_tree_iterator	access:public
_Rb_tree_node	/Users/lij/.vim/stl/stl_tree.h	/^  typedef _Rb_tree_node<_Value> _Rb_tree_node;$/;"	t	class:_Rb_tree	access:protected
_Rb_tree_node	/Users/lij/.vim/stl/stl_tree.h	/^struct _Rb_tree_node : public _Rb_tree_node_base$/;"	s	inherits:_Rb_tree_node_base
_Rb_tree_node::_Link_type	/Users/lij/.vim/stl/stl_tree.h	/^  typedef _Rb_tree_node<_Value>* _Link_type;$/;"	t	struct:_Rb_tree_node	access:public
_Rb_tree_node::_M_value_field	/Users/lij/.vim/stl/stl_tree.h	/^  _Value _M_value_field;$/;"	m	struct:_Rb_tree_node	access:public
_Rb_tree_node_base	/Users/lij/.vim/stl/stl_tree.h	/^struct _Rb_tree_node_base$/;"	s
_Rb_tree_node_base::_Base_ptr	/Users/lij/.vim/stl/stl_tree.h	/^  typedef _Rb_tree_node_base* _Base_ptr;$/;"	t	struct:_Rb_tree_node_base	access:public
_Rb_tree_node_base::_Color_type	/Users/lij/.vim/stl/stl_tree.h	/^  typedef _Rb_tree_Color_type _Color_type;$/;"	t	struct:_Rb_tree_node_base	access:public
_Rb_tree_node_base::_M_color	/Users/lij/.vim/stl/stl_tree.h	/^  _Color_type _M_color; $/;"	m	struct:_Rb_tree_node_base	access:public
_Rb_tree_node_base::_M_left	/Users/lij/.vim/stl/stl_tree.h	/^  _Base_ptr _M_left;$/;"	m	struct:_Rb_tree_node_base	access:public
_Rb_tree_node_base::_M_parent	/Users/lij/.vim/stl/stl_tree.h	/^  _Base_ptr _M_parent;$/;"	m	struct:_Rb_tree_node_base	access:public
_Rb_tree_node_base::_M_right	/Users/lij/.vim/stl/stl_tree.h	/^  _Base_ptr _M_right;$/;"	m	struct:_Rb_tree_node_base	access:public
_Rb_tree_node_base::_S_maximum	/Users/lij/.vim/stl/stl_tree.h	/^  static _Base_ptr _S_maximum(_Base_ptr __x)$/;"	f	struct:_Rb_tree_node_base	access:public	signature:(_Base_ptr __x)
_Rb_tree_node_base::_S_minimum	/Users/lij/.vim/stl/stl_tree.h	/^  static _Base_ptr _S_minimum(_Base_ptr __x)$/;"	f	struct:_Rb_tree_node_base	access:public	signature:(_Base_ptr __x)
_Rb_tree_rebalance	/Users/lij/.vim/stl/stl_tree.h	/^_Rb_tree_rebalance(_Rb_tree_node_base* __x, _Rb_tree_node_base*& __root)$/;"	f	signature:(_Rb_tree_node_base* __x, _Rb_tree_node_base*& __root)
_Rb_tree_rebalance_for_erase	/Users/lij/.vim/stl/stl_tree.h	/^_Rb_tree_rebalance_for_erase(_Rb_tree_node_base* __z,$/;"	f	signature:(_Rb_tree_node_base* __z, _Rb_tree_node_base*& __root, _Rb_tree_node_base*& __leftmost, _Rb_tree_node_base*& __rightmost)
_Rb_tree_rotate_left	/Users/lij/.vim/stl/stl_tree.h	/^_Rb_tree_rotate_left(_Rb_tree_node_base* __x, _Rb_tree_node_base*& __root)$/;"	f	signature:(_Rb_tree_node_base* __x, _Rb_tree_node_base*& __root)
_Rb_tree_rotate_right	/Users/lij/.vim/stl/stl_tree.h	/^_Rb_tree_rotate_right(_Rb_tree_node_base* __x, _Rb_tree_node_base*& __root)$/;"	f	signature:(_Rb_tree_node_base* __x, _Rb_tree_node_base*& __root)
_Refcount_Base	/Users/lij/.vim/stl/stl_threads.h	/^  _Refcount_Base(_RC_t __n) : _M_ref_count(__n) {}$/;"	f	struct:_Refcount_Base	access:public	signature:(_RC_t __n)
_Refcount_Base	/Users/lij/.vim/stl/stl_threads.h	/^  _Refcount_Base(_RC_t __n) : _M_ref_count(__n)$/;"	f	struct:_Refcount_Base	access:public	signature:(_RC_t __n)
_Refcount_Base	/Users/lij/.vim/stl/stl_threads.h	/^struct _Refcount_Base$/;"	s
_Refcount_Base::_M_decr	/Users/lij/.vim/stl/stl_threads.h	/^  _RC_t _M_decr() { return --_M_ref_count; }$/;"	f	struct:_Refcount_Base	access:public	signature:()
_Refcount_Base::_M_decr	/Users/lij/.vim/stl/stl_threads.h	/^  _RC_t _M_decr() { return InterlockedDecrement((_RC_t*)&_M_ref_count); }$/;"	f	struct:_Refcount_Base	access:public	signature:()
_Refcount_Base::_M_decr	/Users/lij/.vim/stl/stl_threads.h	/^  _RC_t _M_decr() { return __add_and_fetch(&_M_ref_count, (size_t) -1); }$/;"	f	struct:_Refcount_Base	access:public	signature:()
_Refcount_Base::_M_decr	/Users/lij/.vim/stl/stl_threads.h	/^  _RC_t _M_decr() {$/;"	f	struct:_Refcount_Base	access:public	signature:()
_Refcount_Base::_M_incr	/Users/lij/.vim/stl/stl_threads.h	/^   void _M_incr() { InterlockedIncrement((_RC_t*)&_M_ref_count); }$/;"	f	struct:_Refcount_Base	access:public	signature:()
_Refcount_Base::_M_incr	/Users/lij/.vim/stl/stl_threads.h	/^  void _M_incr() {  __add_and_fetch(&_M_ref_count, 1); }$/;"	f	struct:_Refcount_Base	access:public	signature:()
_Refcount_Base::_M_incr	/Users/lij/.vim/stl/stl_threads.h	/^  void _M_incr() { ++_M_ref_count; }$/;"	f	struct:_Refcount_Base	access:public	signature:()
_Refcount_Base::_M_incr	/Users/lij/.vim/stl/stl_threads.h	/^  void _M_incr() {$/;"	f	struct:_Refcount_Base	access:public	signature:()
_Refcount_Base::_M_ref_count	/Users/lij/.vim/stl/stl_threads.h	/^   volatile _RC_t _M_ref_count;$/;"	m	struct:_Refcount_Base	access:public
_Refcount_Base::_M_ref_count_lock	/Users/lij/.vim/stl/stl_threads.h	/^  mutex_t         _M_ref_count_lock;$/;"	m	struct:_Refcount_Base	access:public
_Refcount_Base::_M_ref_count_lock	/Users/lij/.vim/stl/stl_threads.h	/^  pthread_mutex_t _M_ref_count_lock;$/;"	m	struct:_Refcount_Base	access:public
_Refcount_Base::_RC_t	/Users/lij/.vim/stl/stl_threads.h	/^  typedef long _RC_t;$/;"	t	struct:_Refcount_Base	access:public
_Refcount_Base::_Refcount_Base	/Users/lij/.vim/stl/stl_threads.h	/^  _Refcount_Base(_RC_t __n) : _M_ref_count(__n) {}$/;"	f	struct:_Refcount_Base	access:public	signature:(_RC_t __n)
_Refcount_Base::_Refcount_Base	/Users/lij/.vim/stl/stl_threads.h	/^  _Refcount_Base(_RC_t __n) : _M_ref_count(__n)$/;"	f	struct:_Refcount_Base	access:public	signature:(_RC_t __n)
_Rep_type	/Users/lij/.vim/stl/stl_map.h	/^                   _Select1st<value_type>, key_compare, _Alloc> _Rep_type;$/;"	t	class:map	access:private
_Rep_type	/Users/lij/.vim/stl/stl_multimap.h	/^                  _Select1st<value_type>, key_compare, _Alloc> _Rep_type;$/;"	t	class:multimap	access:private
_Rep_type	/Users/lij/.vim/stl/stl_multiset.h	/^                  _Identity<value_type>, key_compare, _Alloc> _Rep_type;$/;"	t	class:multiset	access:private
_Rep_type	/Users/lij/.vim/stl/stl_set.h	/^                  _Identity<value_type>, key_compare, _Alloc> _Rep_type;$/;"	t	class:set	access:private
_Reserve_t	/Users/lij/.vim/stl/string	/^  struct _Reserve_t {};$/;"	s	class:basic_string	file:	access:public
_Ret	/Users/lij/.vim/stl/stl_function.h	/^  explicit const_mem_fun1_ref_t(_Ret (_Tp::*__pf)(_Arg) const) : _M_f(__pf) {}$/;"	f	class:const_mem_fun1_ref_t	access:public	signature:(_Tp::*__pf) const
_Ret	/Users/lij/.vim/stl/stl_function.h	/^  explicit const_mem_fun1_t(_Ret (_Tp::*__pf)(_Arg) const) : _M_f(__pf) {}$/;"	f	class:const_mem_fun1_t	access:public	signature:(_Tp::*__pf) const
_Ret	/Users/lij/.vim/stl/stl_function.h	/^  explicit const_mem_fun_ref_t(_Ret (_Tp::*__pf)() const) : _M_f(__pf) {}$/;"	f	class:const_mem_fun_ref_t	access:public	signature:(_Tp::*__pf) const
_Ret	/Users/lij/.vim/stl/stl_function.h	/^  explicit const_mem_fun_t(_Ret (_Tp::*__pf)() const) : _M_f(__pf) {}$/;"	f	class:const_mem_fun_t	access:public	signature:(_Tp::*__pf) const
_Ret	/Users/lij/.vim/stl/stl_function.h	/^  explicit mem_fun1_ref_t(_Ret (_Tp::*__pf)(_Arg)) : _M_f(__pf) {}$/;"	f	class:mem_fun1_ref_t	access:public	signature:(_Tp::*__pf)
_Ret	/Users/lij/.vim/stl/stl_function.h	/^  explicit mem_fun1_t(_Ret (_Tp::*__pf)(_Arg)) : _M_f(__pf) {}$/;"	f	class:mem_fun1_t	access:public	signature:(_Tp::*__pf)
_Ret	/Users/lij/.vim/stl/stl_function.h	/^  explicit mem_fun_ref_t(_Ret (_Tp::*__pf)()) : _M_f(__pf) {}$/;"	f	class:mem_fun_ref_t	access:public	signature:(_Tp::*__pf)
_Ret	/Users/lij/.vim/stl/stl_function.h	/^  explicit mem_fun_t(_Ret (_Tp::*__pf)()) : _M_f(__pf) {}$/;"	f	class:mem_fun_t	access:public	signature:(_Tp::*__pf)
_Ret	/Users/lij/.vim/stl/stl_function.h	/^inline const_mem_fun1_t<_Ret,_Tp,_Arg> mem_fun(_Ret (_Tp::*__f)(_Arg) const)$/;"	f	signature:(_Tp::*__f) const
_Ret	/Users/lij/.vim/stl/stl_function.h	/^inline const_mem_fun1_t<_Ret,_Tp,_Arg> mem_fun1(_Ret (_Tp::*__f)(_Arg) const)$/;"	f	signature:(_Tp::*__f) const
_Ret	/Users/lij/.vim/stl/stl_function.h	/^inline const_mem_fun_ref_t<_Ret,_Tp> mem_fun_ref(_Ret (_Tp::*__f)() const)$/;"	f	signature:(_Tp::*__f) const
_Ret	/Users/lij/.vim/stl/stl_function.h	/^inline const_mem_fun_t<_Ret,_Tp> mem_fun(_Ret (_Tp::*__f)() const)$/;"	f	signature:(_Tp::*__f) const
_Ret	/Users/lij/.vim/stl/stl_function.h	/^inline mem_fun1_ref_t<_Ret,_Tp,_Arg> mem_fun1_ref(_Ret (_Tp::*__f)(_Arg))$/;"	f	signature:(_Tp::*__f)
_Ret	/Users/lij/.vim/stl/stl_function.h	/^inline mem_fun1_ref_t<_Ret,_Tp,_Arg> mem_fun_ref(_Ret (_Tp::*__f)(_Arg))$/;"	f	signature:(_Tp::*__f)
_Ret	/Users/lij/.vim/stl/stl_function.h	/^inline mem_fun1_t<_Ret,_Tp,_Arg> mem_fun(_Ret (_Tp::*__f)(_Arg))$/;"	f	signature:(_Tp::*__f)
_Ret	/Users/lij/.vim/stl/stl_function.h	/^inline mem_fun1_t<_Ret,_Tp,_Arg> mem_fun1(_Ret (_Tp::*__f)(_Arg))$/;"	f	signature:(_Tp::*__f)
_Ret	/Users/lij/.vim/stl/stl_function.h	/^inline mem_fun_ref_t<_Ret,_Tp> mem_fun_ref(_Ret (_Tp::*__f)()) $/;"	f	signature:(_Tp::*__f)
_Ret	/Users/lij/.vim/stl/stl_function.h	/^inline mem_fun_t<_Ret,_Tp> mem_fun(_Ret (_Tp::*__f)())$/;"	f	signature:(_Tp::*__f)
_Ret	/Users/lij/.vim/stl/stl_function.h	/^mem_fun1_ref(_Ret (_Tp::*__f)(_Arg) const)$/;"	f	signature:(_Tp::*__f) const
_Ret	/Users/lij/.vim/stl/stl_function.h	/^mem_fun_ref(_Ret (_Tp::*__f)(_Arg) const)$/;"	f	signature:(_Tp::*__f) const
_ReversibleContainer_concept_specification	/Users/lij/.vim/stl/container_concepts.h	/^struct _ReversibleContainer_concept_specification {$/;"	s
_ReversibleContainer_concept_specification::_ReversibleContainer_requirement_violation	/Users/lij/.vim/stl/container_concepts.h	/^_ReversibleContainer_requirement_violation(_ReversibleContainer __c) {$/;"	f	struct:_ReversibleContainer_concept_specification	access:public	signature:(_ReversibleContainer __c)
_ReversibleContainer_requirement_violation	/Users/lij/.vim/stl/container_concepts.h	/^_ReversibleContainer_requirement_violation(_ReversibleContainer __c) {$/;"	f	struct:_ReversibleContainer_concept_specification	access:public	signature:(_ReversibleContainer __c)
_RopeConcatenation	/Users/lij/.vim/stl/stl_rope.h	/^        typedef _Rope_RopeConcatenation<_CharT,_Alloc> _RopeConcatenation;$/;"	t	class:rope	access:protected
_RopeFunction	/Users/lij/.vim/stl/stl_rope.h	/^        typedef _Rope_RopeFunction<_CharT,_Alloc> _RopeFunction;$/;"	t	class:rope	access:protected
_RopeLeaf	/Users/lij/.vim/stl/stl_rope.h	/^        typedef _Rope_RopeLeaf<_CharT,_Alloc> _RopeLeaf;$/;"	t	class:rope	access:protected
_RopeRep	/Users/lij/.vim/stl/stl_rope.h	/^        typedef _Rope_RopeRep<_CharT,_Alloc> _RopeRep;$/;"	t	class:rope	access:protected
_RopeRep	/Users/lij/.vim/stl/stl_rope.h	/^      typedef _Rope_RopeRep<_CharT,_Alloc> _RopeRep;$/;"	t	class:_Rope_const_iterator	access:protected
_RopeRep	/Users/lij/.vim/stl/stl_rope.h	/^    typedef _Rope_RopeRep<_CharT,_Alloc> _RopeRep;$/;"	t	class:_Rope_char_ref_proxy	access:private
_RopeRep	/Users/lij/.vim/stl/stl_rope.h	/^    typedef _Rope_RopeRep<_CharT,_Alloc> _RopeRep;$/;"	t	class:_Rope_iterator_base	access:public
_RopeRep	/Users/lij/.vim/stl/stl_rope.h	/^  typedef _Rope_RopeRep<_CharT, _Alloc> _RopeRep;$/;"	t	class:_Rope_base	access:public
_RopeRep	/Users/lij/.vim/stl/stl_rope.h	/^  typedef _Rope_RopeRep<_CharT,_Alloc> _RopeRep;$/;"	t	struct:_Rope_base	access:public
_RopeRep	/Users/lij/.vim/stl/stl_rope.h	/^  typedef _Rope_RopeRep<_CharT,_Allocator> _RopeRep;$/;"	t	class:_Rope_alloc_base	access:public
_RopeSubstring	/Users/lij/.vim/stl/stl_rope.h	/^        typedef _Rope_RopeSubstring<_CharT,_Alloc> _RopeSubstring;$/;"	t	class:rope	access:protected
_Rope_Concat_fn	/Users/lij/.vim/stl/stl_rope.h	/^struct _Rope_Concat_fn$/;"	s	inherits:binary_function
_Rope_Concat_fn::operator ()	/Users/lij/.vim/stl/stl_rope.h	/^        rope<_CharT,_Alloc> operator() (const rope<_CharT,_Alloc>& __x,$/;"	f	struct:_Rope_Concat_fn	access:public	signature:(const rope<_CharT,_Alloc>& __x, const rope<_CharT,_Alloc>& __y)
_Rope_RopeConcatenation	/Users/lij/.vim/stl/stl_rope.h	/^    _Rope_RopeConcatenation(_Rope_RopeRep<_CharT,_Alloc>* __l,$/;"	f	struct:_Rope_RopeConcatenation	access:public	signature:(_Rope_RopeRep<_CharT,_Alloc>* __l, _Rope_RopeRep<_CharT,_Alloc>* __r, allocator_type __a)
_Rope_RopeConcatenation	/Users/lij/.vim/stl/stl_rope.h	/^struct _Rope_RopeConcatenation : public _Rope_RopeRep<_CharT,_Alloc> {$/;"	s	inherits:_Rope_RopeRep
_Rope_RopeConcatenation::_M_left	/Users/lij/.vim/stl/stl_rope.h	/^    _Rope_RopeRep<_CharT,_Alloc>* _M_left;$/;"	m	struct:_Rope_RopeConcatenation	access:public
_Rope_RopeConcatenation::_M_right	/Users/lij/.vim/stl/stl_rope.h	/^    _Rope_RopeRep<_CharT,_Alloc>* _M_right;$/;"	m	struct:_Rope_RopeConcatenation	access:public
_Rope_RopeConcatenation::_Rope_RopeConcatenation	/Users/lij/.vim/stl/stl_rope.h	/^    _Rope_RopeConcatenation(_Rope_RopeRep<_CharT,_Alloc>* __l,$/;"	f	struct:_Rope_RopeConcatenation	access:public	signature:(_Rope_RopeRep<_CharT,_Alloc>* __l, _Rope_RopeRep<_CharT,_Alloc>* __r, allocator_type __a)
_Rope_RopeConcatenation::allocator_type	/Users/lij/.vim/stl/stl_rope.h	/^                        allocator_type;$/;"	t	struct:_Rope_RopeConcatenation	access:public
_Rope_RopeConcatenation::~_Rope_RopeConcatenation	/Users/lij/.vim/stl/stl_rope.h	/^    ~_Rope_RopeConcatenation() {$/;"	f	struct:_Rope_RopeConcatenation	access:public	signature:()
_Rope_RopeFunction	/Users/lij/.vim/stl/stl_rope.h	/^    _Rope_RopeFunction(char_producer<_CharT>* __f, size_t __size,$/;"	f	struct:_Rope_RopeFunction	access:public	signature:(char_producer<_CharT>* __f, size_t __size, bool __d, allocator_type __a)
_Rope_RopeFunction	/Users/lij/.vim/stl/stl_rope.h	/^struct _Rope_RopeFunction : public _Rope_RopeRep<_CharT,_Alloc> {$/;"	s	inherits:_Rope_RopeRep
_Rope_RopeFunction::_M_delete_when_done	/Users/lij/.vim/stl/stl_rope.h	/^      bool _M_delete_when_done; \/\/ Char_producer is owned by the$/;"	m	struct:_Rope_RopeFunction	access:public
_Rope_RopeFunction::_M_fn	/Users/lij/.vim/stl/stl_rope.h	/^    char_producer<_CharT>* _M_fn;$/;"	m	struct:_Rope_RopeFunction	access:public
_Rope_RopeFunction::_Rope_RopeFunction	/Users/lij/.vim/stl/stl_rope.h	/^    _Rope_RopeFunction(char_producer<_CharT>* __f, size_t __size,$/;"	f	struct:_Rope_RopeFunction	access:public	signature:(char_producer<_CharT>* __f, size_t __size, bool __d, allocator_type __a)
_Rope_RopeFunction::_S_fn_finalization_proc	/Users/lij/.vim/stl/stl_rope.h	/^      static void _S_fn_finalization_proc(void * __tree, void *) {$/;"	f	struct:_Rope_RopeFunction	access:public	signature:(void * __tree, void *)
_Rope_RopeFunction::allocator_type	/Users/lij/.vim/stl/stl_rope.h	/^                                        allocator_type;$/;"	t	struct:_Rope_RopeFunction	access:public
_Rope_RopeFunction::~_Rope_RopeFunction	/Users/lij/.vim/stl/stl_rope.h	/^    ~_Rope_RopeFunction() {$/;"	f	struct:_Rope_RopeFunction	access:public	signature:()
_Rope_RopeLeaf	/Users/lij/.vim/stl/stl_rope.h	/^    _Rope_RopeLeaf(__GC_CONST _CharT* __d, size_t __size, allocator_type __a)$/;"	f	struct:_Rope_RopeLeaf	access:public	signature:(__GC_CONST _CharT* __d, size_t __size, allocator_type __a)
_Rope_RopeLeaf	/Users/lij/.vim/stl/stl_rope.h	/^struct _Rope_RopeLeaf : public _Rope_RopeRep<_CharT,_Alloc> {$/;"	s	inherits:_Rope_RopeRep
_Rope_RopeLeaf::_M_data	/Users/lij/.vim/stl/stl_rope.h	/^    __GC_CONST _CharT* _M_data; \/* Not necessarily 0 terminated. *\/$/;"	m	struct:_Rope_RopeLeaf	access:public
_Rope_RopeLeaf::_Rope_RopeLeaf	/Users/lij/.vim/stl/stl_rope.h	/^    _Rope_RopeLeaf(__GC_CONST _CharT* __d, size_t __size, allocator_type __a)$/;"	f	struct:_Rope_RopeLeaf	access:public	signature:(__GC_CONST _CharT* __d, size_t __size, allocator_type __a)
_Rope_RopeLeaf::_S_alloc_granularity	/Users/lij/.vim/stl/stl_rope.h	/^    enum { _S_alloc_granularity = 8 };$/;"	e	enum:_Rope_RopeLeaf::__anon22
_Rope_RopeLeaf::_S_rounded_up_size	/Users/lij/.vim/stl/stl_rope.h	/^    static size_t _S_rounded_up_size(size_t __n) {$/;"	f	struct:_Rope_RopeLeaf	access:public	signature:(size_t __n)
_Rope_RopeLeaf::allocator_type	/Users/lij/.vim/stl/stl_rope.h	/^                        allocator_type;$/;"	t	struct:_Rope_RopeLeaf	access:public
_Rope_RopeLeaf::~_Rope_RopeLeaf	/Users/lij/.vim/stl/stl_rope.h	/^    ~_Rope_RopeLeaf() {$/;"	f	struct:_Rope_RopeLeaf	access:public	signature:()
_Rope_RopeRep	/Users/lij/.vim/stl/stl_rope.h	/^    _Rope_RopeRep(_Tag __t, int __d, bool __b, size_t __size,$/;"	f	struct:_Rope_RopeRep	access:public	signature:(_Tag __t, int __d, bool __b, size_t __size, allocator_type __a)
_Rope_RopeRep	/Users/lij/.vim/stl/stl_rope.h	/^struct _Rope_RopeRep : public _Rope_rep_base<_CharT,_Alloc>$/;"	s	inherits:_Rope_rep_base,_Refcount_Base
_Rope_RopeRep::_M_c_string	/Users/lij/.vim/stl/stl_rope.h	/^    __GC_CONST _CharT* _M_c_string;$/;"	m	struct:_Rope_RopeRep	access:public
_Rope_RopeRep::_M_depth	/Users/lij/.vim/stl/stl_rope.h	/^    unsigned char _M_depth;$/;"	m	struct:_Rope_RopeRep	access:public
_Rope_RopeRep::_M_free_c_string	/Users/lij/.vim/stl/ropeimpl.h	/^inline void _Rope_RopeRep<_CharT,_Alloc>::_M_free_c_string()$/;"	f	class:_Rope_RopeRep	signature:()
_Rope_RopeRep::_M_free_c_string	/Users/lij/.vim/stl/stl_rope.h	/^          void _M_free_c_string();$/;"	p	struct:_Rope_RopeRep	access:public	signature:()
_Rope_RopeRep::_M_free_tree	/Users/lij/.vim/stl/ropeimpl.h	/^void _Rope_RopeRep<_CharT,_Alloc>::_M_free_tree()$/;"	f	class:_Rope_RopeRep	signature:()
_Rope_RopeRep::_M_free_tree	/Users/lij/.vim/stl/stl_rope.h	/^          void _M_free_tree();$/;"	p	struct:_Rope_RopeRep	access:public	signature:()
_Rope_RopeRep::_M_incr	/Users/lij/.vim/stl/stl_rope.h	/^        void _M_incr () {}$/;"	f	struct:_Rope_RopeRep	access:public	signature:()
_Rope_RopeRep::_M_is_balanced	/Users/lij/.vim/stl/stl_rope.h	/^    bool _M_is_balanced:8;$/;"	m	struct:_Rope_RopeRep	access:public
_Rope_RopeRep::_M_ref_nonnil	/Users/lij/.vim/stl/stl_rope.h	/^          void _M_ref_nonnil() {}$/;"	f	struct:_Rope_RopeRep	access:public	signature:()
_Rope_RopeRep::_M_ref_nonnil	/Users/lij/.vim/stl/stl_rope.h	/^          void _M_ref_nonnil()$/;"	f	struct:_Rope_RopeRep	access:public	signature:()
_Rope_RopeRep::_M_tag	/Users/lij/.vim/stl/stl_rope.h	/^    _Tag _M_tag:8;$/;"	m	struct:_Rope_RopeRep	access:public
_Rope_RopeRep::_M_unref_nonnil	/Users/lij/.vim/stl/stl_rope.h	/^          void _M_unref_nonnil() {}$/;"	f	struct:_Rope_RopeRep	access:public	signature:()
_Rope_RopeRep::_M_unref_nonnil	/Users/lij/.vim/stl/stl_rope.h	/^          void _M_unref_nonnil()$/;"	f	struct:_Rope_RopeRep	access:public	signature:()
_Rope_RopeRep::_Rope_RopeRep	/Users/lij/.vim/stl/stl_rope.h	/^    _Rope_RopeRep(_Tag __t, int __d, bool __b, size_t __size,$/;"	f	struct:_Rope_RopeRep	access:public	signature:(_Tag __t, int __d, bool __b, size_t __size, allocator_type __a)
_Rope_RopeRep::_S_concat	/Users/lij/.vim/stl/stl_rope.h	/^    enum _Tag {_S_leaf, _S_concat, _S_substringfn, _S_function};$/;"	e	enum:_Rope_RopeRep::_Tag
_Rope_RopeRep::_S_free_if_unref	/Users/lij/.vim/stl/stl_rope.h	/^          static void _S_free_if_unref(_Rope_RopeRep* __t)$/;"	f	struct:_Rope_RopeRep	access:public	signature:(_Rope_RopeRep* __t)
_Rope_RopeRep::_S_free_if_unref	/Users/lij/.vim/stl/stl_rope.h	/^          static void _S_free_if_unref(_Rope_RopeRep*) {}$/;"	f	struct:_Rope_RopeRep	access:public	signature:(_Rope_RopeRep*)
_Rope_RopeRep::_S_free_string	/Users/lij/.vim/stl/ropeimpl.h	/^  inline void _Rope_RopeRep<_CharT,_Alloc>::_S_free_string$/;"	f	class:_Rope_RopeRep	signature:(const _CharT*, size_t, allocator_type)
_Rope_RopeRep::_S_free_string	/Users/lij/.vim/stl/ropeimpl.h	/^  inline void _Rope_RopeRep<_CharT,_Alloc>::_S_free_string(_CharT* __s,$/;"	f	class:_Rope_RopeRep	signature:(_CharT* __s, size_t __n, allocator_type __a)
_Rope_RopeRep::_S_free_string	/Users/lij/.vim/stl/stl_rope.h	/^        static void _S_free_string(__GC_CONST _CharT*, size_t __len);$/;"	p	struct:_Rope_RopeRep	access:public	signature:(__GC_CONST _CharT*, size_t __len)
_Rope_RopeRep::_S_free_string	/Users/lij/.vim/stl/stl_rope.h	/^        static void _S_free_string(__GC_CONST _CharT*, size_t __len,$/;"	p	struct:_Rope_RopeRep	access:public	signature:(__GC_CONST _CharT*, size_t __len, allocator_type __a)
_Rope_RopeRep::_S_function	/Users/lij/.vim/stl/stl_rope.h	/^    enum _Tag {_S_leaf, _S_concat, _S_substringfn, _S_function};$/;"	e	enum:_Rope_RopeRep::_Tag
_Rope_RopeRep::_S_leaf	/Users/lij/.vim/stl/stl_rope.h	/^    enum _Tag {_S_leaf, _S_concat, _S_substringfn, _S_function};$/;"	e	enum:_Rope_RopeRep::_Tag
_Rope_RopeRep::_S_max_rope_depth	/Users/lij/.vim/stl/stl_rope.h	/^    enum { _S_max_rope_depth = 45 };$/;"	e	enum:_Rope_RopeRep::__anon21
_Rope_RopeRep::_S_ref	/Users/lij/.vim/stl/stl_rope.h	/^          static void _S_ref(_Rope_RopeRep* __t)$/;"	f	struct:_Rope_RopeRep	access:public	signature:(_Rope_RopeRep* __t)
_Rope_RopeRep::_S_ref	/Users/lij/.vim/stl/stl_rope.h	/^          static void _S_ref(_Rope_RopeRep*) {}$/;"	f	struct:_Rope_RopeRep	access:public	signature:(_Rope_RopeRep*)
_Rope_RopeRep::_S_substringfn	/Users/lij/.vim/stl/stl_rope.h	/^    enum _Tag {_S_leaf, _S_concat, _S_substringfn, _S_function};$/;"	e	enum:_Rope_RopeRep::_Tag
_Rope_RopeRep::_S_unref	/Users/lij/.vim/stl/stl_rope.h	/^          static void _S_unref(_Rope_RopeRep* __t)$/;"	f	struct:_Rope_RopeRep	access:public	signature:(_Rope_RopeRep* __t)
_Rope_RopeRep::_S_unref	/Users/lij/.vim/stl/stl_rope.h	/^          static void _S_unref(_Rope_RopeRep*) {}$/;"	f	struct:_Rope_RopeRep	access:public	signature:(_Rope_RopeRep*)
_Rope_RopeRep::_Tag	/Users/lij/.vim/stl/stl_rope.h	/^    enum _Tag {_S_leaf, _S_concat, _S_substringfn, _S_function};$/;"	g	struct:_Rope_RopeRep	access:public
_Rope_RopeRep::allocator_type	/Users/lij/.vim/stl/stl_rope.h	/^                        allocator_type;$/;"	t	struct:_Rope_RopeRep	access:public
_Rope_RopeSubstring	/Users/lij/.vim/stl/stl_rope.h	/^    _Rope_RopeSubstring(_Rope_RopeRep<_CharT,_Alloc>* __b, size_t __s,$/;"	f	struct:_Rope_RopeSubstring	access:public	signature:(_Rope_RopeRep<_CharT,_Alloc>* __b, size_t __s, size_t __l, allocator_type __a)
_Rope_RopeSubstring	/Users/lij/.vim/stl/stl_rope.h	/^struct _Rope_RopeSubstring : public _Rope_RopeFunction<_CharT,_Alloc>,$/;"	s	inherits:_Rope_RopeFunction,char_producer
_Rope_RopeSubstring::_M_base	/Users/lij/.vim/stl/stl_rope.h	/^    _Rope_RopeRep<_CharT,_Alloc>* _M_base;      \/\/ not 0$/;"	m	struct:_Rope_RopeSubstring	access:public
_Rope_RopeSubstring::_M_start	/Users/lij/.vim/stl/stl_rope.h	/^    size_t _M_start;$/;"	m	struct:_Rope_RopeSubstring	access:public
_Rope_RopeSubstring::_Rope_RopeSubstring	/Users/lij/.vim/stl/stl_rope.h	/^    _Rope_RopeSubstring(_Rope_RopeRep<_CharT,_Alloc>* __b, size_t __s,$/;"	f	struct:_Rope_RopeSubstring	access:public	signature:(_Rope_RopeRep<_CharT,_Alloc>* __b, size_t __s, size_t __l, allocator_type __a)
_Rope_RopeSubstring::allocator_type	/Users/lij/.vim/stl/stl_rope.h	/^        allocator_type;$/;"	t	struct:_Rope_RopeSubstring	access:public
_Rope_RopeSubstring::operator ()	/Users/lij/.vim/stl/stl_rope.h	/^    virtual void operator()(size_t __start_pos, size_t __req_len,$/;"	f	struct:_Rope_RopeSubstring	access:public	signature:(size_t __start_pos, size_t __req_len, _CharT* __buffer)
_Rope_RopeSubstring::~_Rope_RopeSubstring	/Users/lij/.vim/stl/stl_rope.h	/^    virtual ~_Rope_RopeSubstring()$/;"	f	struct:_Rope_RopeSubstring	access:public	signature:()
_Rope_alloc_base	/Users/lij/.vim/stl/stl_rope.h	/^  _Rope_alloc_base(_RopeRep *__t, const allocator_type& __a)$/;"	f	class:_Rope_alloc_base	access:public	signature:(_RopeRep *__t, const allocator_type& __a)
_Rope_alloc_base	/Users/lij/.vim/stl/stl_rope.h	/^  _Rope_alloc_base(_RopeRep *__t, const allocator_type&)$/;"	f	class:_Rope_alloc_base	access:public	signature:(_RopeRep *__t, const allocator_type&)
_Rope_alloc_base	/Users/lij/.vim/stl/stl_rope.h	/^  _Rope_alloc_base(const allocator_type& __a)$/;"	f	class:_Rope_alloc_base	access:public	signature:(const allocator_type& __a)
_Rope_alloc_base	/Users/lij/.vim/stl/stl_rope.h	/^  _Rope_alloc_base(const allocator_type&) {}$/;"	f	class:_Rope_alloc_base	access:public	signature:(const allocator_type&)
_Rope_alloc_base	/Users/lij/.vim/stl/stl_rope.h	/^class _Rope_alloc_base {$/;"	c
_Rope_alloc_base	/Users/lij/.vim/stl/stl_rope.h	/^class _Rope_alloc_base<_CharT,_Allocator,true> {$/;"	c
_Rope_alloc_base::_M_data_allocator	/Users/lij/.vim/stl/stl_rope.h	/^    allocator_type _M_data_allocator;$/;"	m	class:_Rope_alloc_base	access:protected
_Rope_alloc_base::_M_tree_ptr	/Users/lij/.vim/stl/stl_rope.h	/^    _RopeRep *_M_tree_ptr;$/;"	m	class:_Rope_alloc_base	access:protected
_Rope_alloc_base::_M_tree_ptr	/Users/lij/.vim/stl/stl_rope.h	/^    _RopeRep* _M_tree_ptr;$/;"	m	class:_Rope_alloc_base	access:protected
_Rope_alloc_base::_RopeRep	/Users/lij/.vim/stl/stl_rope.h	/^  typedef _Rope_RopeRep<_CharT,_Allocator> _RopeRep;$/;"	t	class:_Rope_alloc_base	access:public
_Rope_alloc_base::_Rope_alloc_base	/Users/lij/.vim/stl/stl_rope.h	/^  _Rope_alloc_base(_RopeRep *__t, const allocator_type& __a)$/;"	f	class:_Rope_alloc_base	access:public	signature:(_RopeRep *__t, const allocator_type& __a)
_Rope_alloc_base::_Rope_alloc_base	/Users/lij/.vim/stl/stl_rope.h	/^  _Rope_alloc_base(_RopeRep *__t, const allocator_type&)$/;"	f	class:_Rope_alloc_base	access:public	signature:(_RopeRep *__t, const allocator_type&)
_Rope_alloc_base::_Rope_alloc_base	/Users/lij/.vim/stl/stl_rope.h	/^  _Rope_alloc_base(const allocator_type& __a)$/;"	f	class:_Rope_alloc_base	access:public	signature:(const allocator_type& __a)
_Rope_alloc_base::_Rope_alloc_base	/Users/lij/.vim/stl/stl_rope.h	/^  _Rope_alloc_base(const allocator_type&) {}$/;"	f	class:_Rope_alloc_base	access:public	signature:(const allocator_type&)
_Rope_alloc_base::allocator_type	/Users/lij/.vim/stl/stl_rope.h	/^          allocator_type;$/;"	t	class:_Rope_alloc_base	access:public
_Rope_alloc_base::get_allocator	/Users/lij/.vim/stl/stl_rope.h	/^  allocator_type get_allocator() const { return _M_data_allocator; }$/;"	f	class:_Rope_alloc_base	access:public	signature:() const
_Rope_alloc_base::get_allocator	/Users/lij/.vim/stl/stl_rope.h	/^  allocator_type get_allocator() const { return allocator_type(); }$/;"	f	class:_Rope_alloc_base	access:public	signature:() const
_Rope_base	/Users/lij/.vim/stl/stl_rope.h	/^  _Rope_base(_RopeRep * __t, const allocator_type&) : _M_tree_ptr(__t) {}$/;"	f	class:_Rope_base	access:public	signature:(_RopeRep * __t, const allocator_type&)
_Rope_base	/Users/lij/.vim/stl/stl_rope.h	/^  _Rope_base(_RopeRep* __t, const allocator_type& __a) : _Base(__t, __a) {}$/;"	f	struct:_Rope_base	access:public	signature:(_RopeRep* __t, const allocator_type& __a)
_Rope_base	/Users/lij/.vim/stl/stl_rope.h	/^  _Rope_base(const allocator_type& __a) : _Base(__a) {}$/;"	f	struct:_Rope_base	access:public	signature:(const allocator_type& __a)
_Rope_base	/Users/lij/.vim/stl/stl_rope.h	/^  _Rope_base(const allocator_type&) {}$/;"	f	class:_Rope_base	access:public	signature:(const allocator_type&)
_Rope_base	/Users/lij/.vim/stl/stl_rope.h	/^class _Rope_base {$/;"	c
_Rope_base	/Users/lij/.vim/stl/stl_rope.h	/^struct _Rope_base $/;"	s	inherits:_Rope_alloc_base
_Rope_base::_Base	/Users/lij/.vim/stl/stl_rope.h	/^          _Base;$/;"	t	struct:_Rope_base	access:public
_Rope_base::_M_tree_ptr	/Users/lij/.vim/stl/stl_rope.h	/^    _RopeRep* _M_tree_ptr;$/;"	m	class:_Rope_base	access:protected
_Rope_base::_RopeRep	/Users/lij/.vim/stl/stl_rope.h	/^  typedef _Rope_RopeRep<_CharT, _Alloc> _RopeRep;$/;"	t	class:_Rope_base	access:public
_Rope_base::_RopeRep	/Users/lij/.vim/stl/stl_rope.h	/^  typedef _Rope_RopeRep<_CharT,_Alloc> _RopeRep;$/;"	t	struct:_Rope_base	access:public
_Rope_base::_Rope_base	/Users/lij/.vim/stl/stl_rope.h	/^  _Rope_base(_RopeRep * __t, const allocator_type&) : _M_tree_ptr(__t) {}$/;"	f	class:_Rope_base	access:public	signature:(_RopeRep * __t, const allocator_type&)
_Rope_base::_Rope_base	/Users/lij/.vim/stl/stl_rope.h	/^  _Rope_base(_RopeRep* __t, const allocator_type& __a) : _Base(__t, __a) {}$/;"	f	struct:_Rope_base	access:public	signature:(_RopeRep* __t, const allocator_type& __a)
_Rope_base::_Rope_base	/Users/lij/.vim/stl/stl_rope.h	/^  _Rope_base(const allocator_type& __a) : _Base(__a) {}$/;"	f	struct:_Rope_base	access:public	signature:(const allocator_type& __a)
_Rope_base::_Rope_base	/Users/lij/.vim/stl/stl_rope.h	/^  _Rope_base(const allocator_type&) {}$/;"	f	class:_Rope_base	access:public	signature:(const allocator_type&)
_Rope_base::allocator_type	/Users/lij/.vim/stl/stl_rope.h	/^  typedef _Alloc allocator_type;$/;"	t	class:_Rope_base	access:public
_Rope_base::allocator_type	/Users/lij/.vim/stl/stl_rope.h	/^  typedef typename _Base::allocator_type allocator_type;$/;"	t	struct:_Rope_base	access:public
_Rope_base::get_allocator	/Users/lij/.vim/stl/stl_rope.h	/^  static allocator_type get_allocator() { return allocator_type(); }$/;"	f	class:_Rope_base	access:public	signature:()
_Rope_char_consumer	/Users/lij/.vim/stl/stl_rope.h	/^class _Rope_char_consumer {$/;"	c
_Rope_char_consumer::operator ()	/Users/lij/.vim/stl/stl_rope.h	/^        virtual bool operator()(const _CharT* __buffer, size_t __len) = 0;$/;"	p	class:_Rope_char_consumer	access:public	signature:(const _CharT* __buffer, size_t __len)
_Rope_char_consumer::~_Rope_char_consumer	/Users/lij/.vim/stl/stl_rope.h	/^        virtual ~_Rope_char_consumer() {};$/;"	f	class:_Rope_char_consumer	access:public	signature:()
_Rope_char_ptr_proxy	/Users/lij/.vim/stl/stl_rope.h	/^    _Rope_char_ptr_proxy() {}$/;"	f	class:_Rope_char_ptr_proxy	access:public	signature:()
_Rope_char_ptr_proxy	/Users/lij/.vim/stl/stl_rope.h	/^    _Rope_char_ptr_proxy(_CharT* __x) : _M_root(0), _M_pos(0) {$/;"	f	class:_Rope_char_ptr_proxy	access:public	signature:(_CharT* __x)
_Rope_char_ptr_proxy	/Users/lij/.vim/stl/stl_rope.h	/^    _Rope_char_ptr_proxy(const _Rope_char_ptr_proxy& __x)$/;"	f	class:_Rope_char_ptr_proxy	access:public	signature:(const _Rope_char_ptr_proxy& __x)
_Rope_char_ptr_proxy	/Users/lij/.vim/stl/stl_rope.h	/^    _Rope_char_ptr_proxy(const _Rope_char_ref_proxy<_CharT,_Alloc>& __x) $/;"	f	class:_Rope_char_ptr_proxy	access:public	signature:(const _Rope_char_ref_proxy<_CharT,_Alloc>& __x)
_Rope_char_ptr_proxy	/Users/lij/.vim/stl/stl_rope.h	/^class _Rope_char_ptr_proxy {$/;"	c
_Rope_char_ptr_proxy::_M_pos	/Users/lij/.vim/stl/stl_rope.h	/^    size_t _M_pos;$/;"	m	class:_Rope_char_ptr_proxy	access:private
_Rope_char_ptr_proxy::_M_root	/Users/lij/.vim/stl/stl_rope.h	/^    rope<_CharT,_Alloc>* _M_root;     \/\/ The whole rope.$/;"	m	class:_Rope_char_ptr_proxy	access:private
_Rope_char_ptr_proxy::_Rope_char_ptr_proxy	/Users/lij/.vim/stl/stl_rope.h	/^    _Rope_char_ptr_proxy() {}$/;"	f	class:_Rope_char_ptr_proxy	access:public	signature:()
_Rope_char_ptr_proxy::_Rope_char_ptr_proxy	/Users/lij/.vim/stl/stl_rope.h	/^    _Rope_char_ptr_proxy(_CharT* __x) : _M_root(0), _M_pos(0) {$/;"	f	class:_Rope_char_ptr_proxy	access:public	signature:(_CharT* __x)
_Rope_char_ptr_proxy::_Rope_char_ptr_proxy	/Users/lij/.vim/stl/stl_rope.h	/^    _Rope_char_ptr_proxy(const _Rope_char_ptr_proxy& __x)$/;"	f	class:_Rope_char_ptr_proxy	access:public	signature:(const _Rope_char_ptr_proxy& __x)
_Rope_char_ptr_proxy::_Rope_char_ptr_proxy	/Users/lij/.vim/stl/stl_rope.h	/^    _Rope_char_ptr_proxy(const _Rope_char_ref_proxy<_CharT,_Alloc>& __x) $/;"	f	class:_Rope_char_ptr_proxy	access:public	signature:(const _Rope_char_ref_proxy<_CharT,_Alloc>& __x)
_Rope_char_ptr_proxy::__STL_NULL_TMPL_ARGS	/Users/lij/.vim/stl/stl_rope.h	/^    friend bool operator==  __STL_NULL_TMPL_ARGS$/;"	p	class:_Rope_char_ptr_proxy	access:friend	signature:(const _Rope_char_ptr_proxy<_CharT,_Alloc>& __x, const _Rope_char_ptr_proxy<_CharT,_Alloc>& __y)
_Rope_char_ptr_proxy::operator *	/Users/lij/.vim/stl/stl_rope.h	/^    _Rope_char_ref_proxy<_CharT,_Alloc> operator*() const {$/;"	f	class:_Rope_char_ptr_proxy	access:public	signature:() const
_Rope_char_ptr_proxy::operator =	/Users/lij/.vim/stl/stl_rope.h	/^    operator= (const _Rope_char_ptr_proxy& __x) {$/;"	f	class:_Rope_char_ptr_proxy	access:public	signature:(const _Rope_char_ptr_proxy& __x)
_Rope_char_ptr_proxy::operator ==	/Users/lij/.vim/stl/stl_rope.h	/^    friend bool operator== (const _Rope_char_ptr_proxy<_CharT2,_Alloc2>& __x,$/;"	p	class:_Rope_char_ptr_proxy	access:friend	signature:(const _Rope_char_ptr_proxy<_CharT2,_Alloc2>& __x, const _Rope_char_ptr_proxy<_CharT2,_Alloc2>& __y)
_Rope_char_ref_proxy	/Users/lij/.vim/stl/stl_rope.h	/^    _Rope_char_ref_proxy(_My_rope* __r, size_t __p)$/;"	f	class:_Rope_char_ref_proxy	access:public	signature:(_My_rope* __r, size_t __p)
_Rope_char_ref_proxy	/Users/lij/.vim/stl/stl_rope.h	/^    _Rope_char_ref_proxy(_My_rope* __r, size_t __p, _CharT __c)$/;"	f	class:_Rope_char_ref_proxy	access:public	signature:(_My_rope* __r, size_t __p, _CharT __c)
_Rope_char_ref_proxy	/Users/lij/.vim/stl/stl_rope.h	/^    _Rope_char_ref_proxy(const _Rope_char_ref_proxy& __x)$/;"	f	class:_Rope_char_ref_proxy	access:public	signature:(const _Rope_char_ref_proxy& __x)
_Rope_char_ref_proxy	/Users/lij/.vim/stl/stl_rope.h	/^class _Rope_char_ref_proxy {$/;"	c
_Rope_char_ref_proxy::_M_current	/Users/lij/.vim/stl/stl_rope.h	/^    _CharT _M_current;$/;"	m	class:_Rope_char_ref_proxy	access:private
_Rope_char_ref_proxy::_M_current_valid	/Users/lij/.vim/stl/stl_rope.h	/^    bool _M_current_valid;$/;"	m	class:_Rope_char_ref_proxy	access:private
_Rope_char_ref_proxy::_M_pos	/Users/lij/.vim/stl/stl_rope.h	/^    size_t _M_pos;$/;"	m	class:_Rope_char_ref_proxy	access:private
_Rope_char_ref_proxy::_M_root	/Users/lij/.vim/stl/stl_rope.h	/^    _My_rope* _M_root;     \/\/ The whole rope.$/;"	m	class:_Rope_char_ref_proxy	access:private
_Rope_char_ref_proxy::_My_rope	/Users/lij/.vim/stl/stl_rope.h	/^    typedef rope<_CharT,_Alloc> _My_rope;$/;"	t	class:_Rope_char_ref_proxy	access:private
_Rope_char_ref_proxy::_RopeRep	/Users/lij/.vim/stl/stl_rope.h	/^    typedef _Rope_RopeRep<_CharT,_Alloc> _RopeRep;$/;"	t	class:_Rope_char_ref_proxy	access:private
_Rope_char_ref_proxy::_Rope_char_ref_proxy	/Users/lij/.vim/stl/stl_rope.h	/^    _Rope_char_ref_proxy(_My_rope* __r, size_t __p)$/;"	f	class:_Rope_char_ref_proxy	access:public	signature:(_My_rope* __r, size_t __p)
_Rope_char_ref_proxy::_Rope_char_ref_proxy	/Users/lij/.vim/stl/stl_rope.h	/^    _Rope_char_ref_proxy(_My_rope* __r, size_t __p, _CharT __c)$/;"	f	class:_Rope_char_ref_proxy	access:public	signature:(_My_rope* __r, size_t __p, _CharT __c)
_Rope_char_ref_proxy::_Rope_char_ref_proxy	/Users/lij/.vim/stl/stl_rope.h	/^    _Rope_char_ref_proxy(const _Rope_char_ref_proxy& __x)$/;"	f	class:_Rope_char_ref_proxy	access:public	signature:(const _Rope_char_ref_proxy& __x)
_Rope_char_ref_proxy::_Self_destruct_ptr	/Users/lij/.vim/stl/stl_rope.h	/^        typedef _Rope_RopeRep<_CharT,_Alloc>* _Self_destruct_ptr;$/;"	t	class:_Rope_char_ref_proxy	access:private
_Rope_char_ref_proxy::_Self_destruct_ptr	/Users/lij/.vim/stl/stl_rope.h	/^        typedef _Rope_self_destruct_ptr<_CharT,_Alloc> _Self_destruct_ptr;$/;"	t	class:_Rope_char_ref_proxy	access:private
_Rope_char_ref_proxy::operator &	/Users/lij/.vim/stl/ropeimpl.h	/^_Rope_char_ref_proxy<_CharT, _Alloc>::operator& () const {$/;"	f	class:_Rope_char_ref_proxy	signature:() const
_Rope_char_ref_proxy::operator &	/Users/lij/.vim/stl/stl_rope.h	/^    _Rope_char_ptr_proxy<_CharT,_Alloc> operator& () const;$/;"	p	class:_Rope_char_ref_proxy	access:public	signature:() const
_Rope_char_ref_proxy::operator =	/Users/lij/.vim/stl/ropeimpl.h	/^_Rope_char_ref_proxy<_CharT, _Alloc>::operator= (_CharT __c) {$/;"	f	class:_Rope_char_ref_proxy	signature:(_CharT __c)
_Rope_char_ref_proxy::operator =	/Users/lij/.vim/stl/stl_rope.h	/^    _Rope_char_ref_proxy& operator= (_CharT __c);$/;"	p	class:_Rope_char_ref_proxy	access:public	signature:(_CharT __c)
_Rope_char_ref_proxy::operator =	/Users/lij/.vim/stl/stl_rope.h	/^    _Rope_char_ref_proxy& operator= (const _Rope_char_ref_proxy& __c) {$/;"	f	class:_Rope_char_ref_proxy	access:public	signature:(const _Rope_char_ref_proxy& __c)
_Rope_char_ref_proxy::operator _CharT	/Users/lij/.vim/stl/ropeimpl.h	/^inline _Rope_char_ref_proxy<_CharT, _Alloc>::operator _CharT () const$/;"	f	class:_Rope_char_ref_proxy	signature:() const
_Rope_char_ref_proxy::operator _CharT	/Users/lij/.vim/stl/stl_rope.h	/^    inline operator _CharT () const;$/;"	p	class:_Rope_char_ref_proxy	access:public	signature:() const
_Rope_const_iterator	/Users/lij/.vim/stl/ropeimpl.h	/^_Rope_const_iterator<_CharT, _Alloc>::_Rope_const_iterator($/;"	f	class:_Rope_const_iterator	signature:( const _Rope_iterator<_CharT,_Alloc>& __x)
_Rope_const_iterator	/Users/lij/.vim/stl/stl_rope.h	/^    _Rope_const_iterator() {};$/;"	f	class:_Rope_const_iterator	access:public	signature:()
_Rope_const_iterator	/Users/lij/.vim/stl/stl_rope.h	/^    _Rope_const_iterator(const _RopeRep* __root, size_t __pos):$/;"	f	class:_Rope_const_iterator	access:protected	signature:(const _RopeRep* __root, size_t __pos)
_Rope_const_iterator	/Users/lij/.vim/stl/stl_rope.h	/^    _Rope_const_iterator(const _Rope_const_iterator& __x) :$/;"	f	class:_Rope_const_iterator	access:public	signature:(const _Rope_const_iterator& __x)
_Rope_const_iterator	/Users/lij/.vim/stl/stl_rope.h	/^    _Rope_const_iterator(const _Rope_iterator<_CharT,_Alloc>& __x);$/;"	p	class:_Rope_const_iterator	access:public	signature:(const _Rope_iterator<_CharT,_Alloc>& __x)
_Rope_const_iterator	/Users/lij/.vim/stl/stl_rope.h	/^    _Rope_const_iterator(const rope<_CharT,_Alloc>& __r, size_t __pos) :$/;"	f	class:_Rope_const_iterator	access:public	signature:(const rope<_CharT,_Alloc>& __r, size_t __pos)
_Rope_const_iterator	/Users/lij/.vim/stl/stl_rope.h	/^class _Rope_const_iterator : public _Rope_iterator_base<_CharT,_Alloc> {$/;"	c	inherits:_Rope_iterator_base
_Rope_const_iterator::_RopeRep	/Users/lij/.vim/stl/stl_rope.h	/^      typedef _Rope_RopeRep<_CharT,_Alloc> _RopeRep;$/;"	t	class:_Rope_const_iterator	access:protected
_Rope_const_iterator::_Rope_const_iterator	/Users/lij/.vim/stl/ropeimpl.h	/^_Rope_const_iterator<_CharT, _Alloc>::_Rope_const_iterator($/;"	f	class:_Rope_const_iterator	signature:( const _Rope_iterator<_CharT,_Alloc>& __x)
_Rope_const_iterator::_Rope_const_iterator	/Users/lij/.vim/stl/stl_rope.h	/^    _Rope_const_iterator() {};$/;"	f	class:_Rope_const_iterator	access:public	signature:()
_Rope_const_iterator::_Rope_const_iterator	/Users/lij/.vim/stl/stl_rope.h	/^    _Rope_const_iterator(const _RopeRep* __root, size_t __pos):$/;"	f	class:_Rope_const_iterator	access:protected	signature:(const _RopeRep* __root, size_t __pos)
_Rope_const_iterator::_Rope_const_iterator	/Users/lij/.vim/stl/stl_rope.h	/^    _Rope_const_iterator(const _Rope_const_iterator& __x) :$/;"	f	class:_Rope_const_iterator	access:public	signature:(const _Rope_const_iterator& __x)
_Rope_const_iterator::_Rope_const_iterator	/Users/lij/.vim/stl/stl_rope.h	/^    _Rope_const_iterator(const _Rope_iterator<_CharT,_Alloc>& __x);$/;"	p	class:_Rope_const_iterator	access:public	signature:(const _Rope_iterator<_CharT,_Alloc>& __x)
_Rope_const_iterator::_Rope_const_iterator	/Users/lij/.vim/stl/stl_rope.h	/^    _Rope_const_iterator(const rope<_CharT,_Alloc>& __r, size_t __pos) :$/;"	f	class:_Rope_const_iterator	access:public	signature:(const rope<_CharT,_Alloc>& __r, size_t __pos)
_Rope_const_iterator::__STL_NULL_TMPL_ARGS	/Users/lij/.vim/stl/stl_rope.h	/^    friend _Rope_const_iterator<_CharT,_Alloc> operator+ __STL_NULL_TMPL_ARGS$/;"	p	class:_Rope_const_iterator	access:friend	signature:(const _Rope_const_iterator<_CharT,_Alloc>& __x, ptrdiff_t __n)
_Rope_const_iterator::__STL_NULL_TMPL_ARGS	/Users/lij/.vim/stl/stl_rope.h	/^    friend _Rope_const_iterator<_CharT,_Alloc> operator+ __STL_NULL_TMPL_ARGS$/;"	p	class:_Rope_const_iterator	access:friend	signature:(ptrdiff_t __n, const _Rope_const_iterator<_CharT,_Alloc>& __x)
_Rope_const_iterator::__STL_NULL_TMPL_ARGS	/Users/lij/.vim/stl/stl_rope.h	/^    friend _Rope_const_iterator<_CharT,_Alloc> operator- __STL_NULL_TMPL_ARGS$/;"	p	class:_Rope_const_iterator	access:friend	signature:(const _Rope_const_iterator<_CharT,_Alloc>& __x, ptrdiff_t __n)
_Rope_const_iterator::__STL_NULL_TMPL_ARGS	/Users/lij/.vim/stl/stl_rope.h	/^    friend bool operator< __STL_NULL_TMPL_ARGS$/;"	p	class:_Rope_const_iterator	access:friend	signature:(const _Rope_const_iterator<_CharT,_Alloc>& __x, const _Rope_const_iterator<_CharT,_Alloc>& __y)
_Rope_const_iterator::__STL_NULL_TMPL_ARGS	/Users/lij/.vim/stl/stl_rope.h	/^    friend bool operator== __STL_NULL_TMPL_ARGS$/;"	p	class:_Rope_const_iterator	access:friend	signature:(const _Rope_const_iterator<_CharT,_Alloc>& __x, const _Rope_const_iterator<_CharT,_Alloc>& __y)
_Rope_const_iterator::__STL_NULL_TMPL_ARGS	/Users/lij/.vim/stl/stl_rope.h	/^    friend ptrdiff_t operator- __STL_NULL_TMPL_ARGS$/;"	p	class:_Rope_const_iterator	access:friend	signature:(const _Rope_const_iterator<_CharT,_Alloc>& __x, const _Rope_const_iterator<_CharT,_Alloc>& __y)
_Rope_const_iterator::operator *	/Users/lij/.vim/stl/stl_rope.h	/^    reference operator*() {$/;"	f	class:_Rope_const_iterator	access:public	signature:()
_Rope_const_iterator::operator +	/Users/lij/.vim/stl/stl_rope.h	/^    friend _Rope_const_iterator<_CharT2,_Alloc2> operator+$/;"	p	class:_Rope_const_iterator	access:friend	signature:(const _Rope_const_iterator<_CharT2,_Alloc2>& __x, ptrdiff_t __n)
_Rope_const_iterator::operator +	/Users/lij/.vim/stl/stl_rope.h	/^    friend _Rope_const_iterator<_CharT2,_Alloc2> operator+$/;"	p	class:_Rope_const_iterator	access:friend	signature:(ptrdiff_t __n, const _Rope_const_iterator<_CharT2,_Alloc2>& __x)
_Rope_const_iterator::operator ++	/Users/lij/.vim/stl/stl_rope.h	/^    _Rope_const_iterator operator++(int) {$/;"	f	class:_Rope_const_iterator	access:public	signature:(int)
_Rope_const_iterator::operator ++	/Users/lij/.vim/stl/stl_rope.h	/^    _Rope_const_iterator& operator++() {$/;"	f	class:_Rope_const_iterator	access:public	signature:()
_Rope_const_iterator::operator +=	/Users/lij/.vim/stl/stl_rope.h	/^    _Rope_const_iterator& operator+=(ptrdiff_t __n) {$/;"	f	class:_Rope_const_iterator	access:public	signature:(ptrdiff_t __n)
_Rope_const_iterator::operator -	/Users/lij/.vim/stl/stl_rope.h	/^    friend _Rope_const_iterator<_CharT2,_Alloc2> operator-$/;"	p	class:_Rope_const_iterator	access:friend	signature:(const _Rope_const_iterator<_CharT2,_Alloc2>& __x, ptrdiff_t __n)
_Rope_const_iterator::operator -	/Users/lij/.vim/stl/stl_rope.h	/^    friend ptrdiff_t operator-$/;"	p	class:_Rope_const_iterator	access:friend	signature:(const _Rope_const_iterator<_CharT2,_Alloc2>& __x, const _Rope_const_iterator<_CharT2,_Alloc2>& __y)
_Rope_const_iterator::operator --	/Users/lij/.vim/stl/stl_rope.h	/^    _Rope_const_iterator operator--(int) {$/;"	f	class:_Rope_const_iterator	access:public	signature:(int)
_Rope_const_iterator::operator --	/Users/lij/.vim/stl/stl_rope.h	/^    _Rope_const_iterator& operator--() {$/;"	f	class:_Rope_const_iterator	access:public	signature:()
_Rope_const_iterator::operator -=	/Users/lij/.vim/stl/stl_rope.h	/^    _Rope_const_iterator& operator-=(ptrdiff_t __n) {$/;"	f	class:_Rope_const_iterator	access:public	signature:(ptrdiff_t __n)
_Rope_const_iterator::operator <	/Users/lij/.vim/stl/stl_rope.h	/^    friend bool operator< $/;"	p	class:_Rope_const_iterator	access:friend	signature:(const _Rope_const_iterator<_CharT2,_Alloc2>& __x, const _Rope_const_iterator<_CharT2,_Alloc2>& __y)
_Rope_const_iterator::operator =	/Users/lij/.vim/stl/stl_rope.h	/^    _Rope_const_iterator& operator= (const _Rope_const_iterator& __x) {$/;"	f	class:_Rope_const_iterator	access:public	signature:(const _Rope_const_iterator& __x)
_Rope_const_iterator::operator ==	/Users/lij/.vim/stl/stl_rope.h	/^    friend bool operator==$/;"	p	class:_Rope_const_iterator	access:friend	signature:(const _Rope_const_iterator<_CharT2,_Alloc2>& __x, const _Rope_const_iterator<_CharT2,_Alloc2>& __y)
_Rope_const_iterator::operator []	/Users/lij/.vim/stl/stl_rope.h	/^    reference operator[](size_t __n) {$/;"	f	class:_Rope_const_iterator	access:public	signature:(size_t __n)
_Rope_const_iterator::pointer	/Users/lij/.vim/stl/stl_rope.h	/^    typedef const _CharT* pointer;$/;"	t	class:_Rope_const_iterator	access:public
_Rope_const_iterator::reference	/Users/lij/.vim/stl/stl_rope.h	/^    typedef _CharT reference;   \/\/ Really a value.  Returning a reference$/;"	t	class:_Rope_const_iterator	access:public
_Rope_fill	/Users/lij/.vim/stl/ropeimpl.h	/^  inline void _Rope_fill(basic_ostream<_CharT, _Traits>& __o, size_t __n)$/;"	f	signature:(basic_ostream<_CharT, _Traits>& __o, size_t __n)
_Rope_find_char_char_consumer	/Users/lij/.vim/stl/ropeimpl.h	/^	_Rope_find_char_char_consumer(_CharT __p) $/;"	f	class:_Rope_find_char_char_consumer	access:public	signature:(_CharT __p)
_Rope_find_char_char_consumer	/Users/lij/.vim/stl/ropeimpl.h	/^class _Rope_find_char_char_consumer : public _Rope_char_consumer<_CharT> {$/;"	c	inherits:_Rope_char_consumer
_Rope_find_char_char_consumer::_M_count	/Users/lij/.vim/stl/ropeimpl.h	/^	size_t _M_count;  \/\/ Number of nonmatching characters$/;"	m	class:_Rope_find_char_char_consumer	access:public
_Rope_find_char_char_consumer::_M_pattern	/Users/lij/.vim/stl/ropeimpl.h	/^	_CharT _M_pattern;$/;"	m	class:_Rope_find_char_char_consumer	access:private
_Rope_find_char_char_consumer::_Rope_find_char_char_consumer	/Users/lij/.vim/stl/ropeimpl.h	/^	_Rope_find_char_char_consumer(_CharT __p) $/;"	f	class:_Rope_find_char_char_consumer	access:public	signature:(_CharT __p)
_Rope_find_char_char_consumer::operator ()	/Users/lij/.vim/stl/ropeimpl.h	/^	bool operator() (const _CharT* __leaf, size_t __n) {$/;"	f	class:_Rope_find_char_char_consumer	access:public	signature:(const _CharT* __leaf, size_t __n)
_Rope_find_char_char_consumer::~_Rope_find_char_char_consumer	/Users/lij/.vim/stl/ropeimpl.h	/^	~_Rope_find_char_char_consumer() {}$/;"	f	class:_Rope_find_char_char_consumer	access:public	signature:()
_Rope_flatten_char_consumer	/Users/lij/.vim/stl/ropeimpl.h	/^	_Rope_flatten_char_consumer(_CharT* __buffer) {$/;"	f	class:_Rope_flatten_char_consumer	access:public	signature:(_CharT* __buffer)
_Rope_flatten_char_consumer	/Users/lij/.vim/stl/ropeimpl.h	/^class _Rope_flatten_char_consumer : public _Rope_char_consumer<_CharT> {$/;"	c	inherits:_Rope_char_consumer
_Rope_flatten_char_consumer::_M_buf_ptr	/Users/lij/.vim/stl/ropeimpl.h	/^	_CharT* _M_buf_ptr;$/;"	m	class:_Rope_flatten_char_consumer	access:private
_Rope_flatten_char_consumer::_Rope_flatten_char_consumer	/Users/lij/.vim/stl/ropeimpl.h	/^	_Rope_flatten_char_consumer(_CharT* __buffer) {$/;"	f	class:_Rope_flatten_char_consumer	access:public	signature:(_CharT* __buffer)
_Rope_flatten_char_consumer::operator ()	/Users/lij/.vim/stl/ropeimpl.h	/^	bool operator() (const _CharT* __leaf, size_t __n) {$/;"	f	class:_Rope_flatten_char_consumer	access:public	signature:(const _CharT* __leaf, size_t __n)
_Rope_flatten_char_consumer::~_Rope_flatten_char_consumer	/Users/lij/.vim/stl/ropeimpl.h	/^	~_Rope_flatten_char_consumer() {}$/;"	f	class:_Rope_flatten_char_consumer	access:public	signature:()
_Rope_insert_char_consumer	/Users/lij/.vim/stl/ropeimpl.h	/^	_Rope_insert_char_consumer(_Insert_ostream& __writer) $/;"	f	class:_Rope_insert_char_consumer	access:public	signature:(_Insert_ostream& __writer)
_Rope_insert_char_consumer	/Users/lij/.vim/stl/ropeimpl.h	/^class _Rope_insert_char_consumer : public _Rope_char_consumer<_CharT> {$/;"	c	inherits:_Rope_char_consumer
_Rope_insert_char_consumer::_Insert_ostream	/Users/lij/.vim/stl/ropeimpl.h	/^	  typedef basic_ostream<_CharT,_Traits> _Insert_ostream;$/;"	t	class:_Rope_insert_char_consumer	access:private
_Rope_insert_char_consumer::_M_o	/Users/lij/.vim/stl/ropeimpl.h	/^	_Insert_ostream& _M_o;$/;"	m	class:_Rope_insert_char_consumer	access:private
_Rope_insert_char_consumer::_Rope_insert_char_consumer	/Users/lij/.vim/stl/ropeimpl.h	/^	_Rope_insert_char_consumer(_Insert_ostream& __writer) $/;"	f	class:_Rope_insert_char_consumer	access:public	signature:(_Insert_ostream& __writer)
_Rope_insert_char_consumer::operator ()	/Users/lij/.vim/stl/ropeimpl.h	/^	bool operator() (const _CharT* __leaf, size_t __n);$/;"	p	class:_Rope_insert_char_consumer	access:public	signature:(const _CharT* __leaf, size_t __n)
_Rope_insert_char_consumer::operator ()	/Users/lij/.vim/stl/ropeimpl.h	/^  bool _Rope_insert_char_consumer<_CharT, _Traits>::operator()$/;"	f	class:_Rope_insert_char_consumer	signature:(const _CharT* __leaf, size_t __n)
_Rope_insert_char_consumer::operator ()	/Users/lij/.vim/stl/ropeimpl.h	/^  bool _Rope_insert_char_consumer<_CharT>::operator()$/;"	f	class:_Rope_insert_char_consumer	signature:(const _CharT* __leaf, size_t __n)
_Rope_insert_char_consumer::operator ()	/Users/lij/.vim/stl/ropeimpl.h	/^  inline bool _Rope_insert_char_consumer<char>::operator()$/;"	f	class:_Rope_insert_char_consumer	signature:(const char* __leaf, size_t __n)
_Rope_insert_char_consumer::~_Rope_insert_char_consumer	/Users/lij/.vim/stl/ropeimpl.h	/^	~_Rope_insert_char_consumer() { };$/;"	f	class:_Rope_insert_char_consumer	access:public	signature:()
_Rope_is_simple	/Users/lij/.vim/stl/ropeimpl.h	/^inline bool _Rope_is_simple(char*) { return true; }$/;"	f	signature:(char*)
_Rope_is_simple	/Users/lij/.vim/stl/ropeimpl.h	/^inline bool _Rope_is_simple(wchar_t*) { return true; }$/;"	f	signature:(wchar_t*)
_Rope_is_simple	/Users/lij/.vim/stl/ropeimpl.h	/^template <class _CharT> inline bool _Rope_is_simple(_CharT*) { return false; }$/;"	f	signature:(_CharT*)
_Rope_iterator	/Users/lij/.vim/stl/ropeimpl.h	/^inline _Rope_iterator<_CharT,_Alloc>::_Rope_iterator($/;"	f	class:_Rope_iterator	signature:( rope<_CharT,_Alloc>& __r, size_t __pos)
_Rope_iterator	/Users/lij/.vim/stl/stl_rope.h	/^    _Rope_iterator() {$/;"	f	class:_Rope_iterator	access:public	signature:()
_Rope_iterator	/Users/lij/.vim/stl/stl_rope.h	/^    _Rope_iterator(const _Rope_iterator& __x) :$/;"	f	class:_Rope_iterator	access:public	signature:(const _Rope_iterator& __x)
_Rope_iterator	/Users/lij/.vim/stl/stl_rope.h	/^    _Rope_iterator(rope<_CharT,_Alloc>& __r, size_t __pos);$/;"	p	class:_Rope_iterator	access:public	signature:(rope<_CharT,_Alloc>& __r, size_t __pos)
_Rope_iterator	/Users/lij/.vim/stl/stl_rope.h	/^    _Rope_iterator(rope<_CharT,_Alloc>* __r, size_t __pos)$/;"	f	class:_Rope_iterator	access:protected	signature:(rope<_CharT,_Alloc>* __r, size_t __pos)
_Rope_iterator	/Users/lij/.vim/stl/stl_rope.h	/^class _Rope_iterator : public _Rope_iterator_base<_CharT,_Alloc> {$/;"	c	inherits:_Rope_iterator_base
_Rope_iterator::_M_check	/Users/lij/.vim/stl/ropeimpl.h	/^void _Rope_iterator<_CharT,_Alloc>::_M_check() {$/;"	f	class:_Rope_iterator	signature:()
_Rope_iterator::_M_check	/Users/lij/.vim/stl/stl_rope.h	/^    void _M_check();$/;"	p	class:_Rope_iterator	access:protected	signature:()
_Rope_iterator::_M_root_rope	/Users/lij/.vim/stl/stl_rope.h	/^    rope<_CharT,_Alloc>* _M_root_rope;$/;"	m	class:_Rope_iterator	access:protected
_Rope_iterator::_Rope_iterator	/Users/lij/.vim/stl/ropeimpl.h	/^inline _Rope_iterator<_CharT,_Alloc>::_Rope_iterator($/;"	f	class:_Rope_iterator	signature:( rope<_CharT,_Alloc>& __r, size_t __pos)
_Rope_iterator::_Rope_iterator	/Users/lij/.vim/stl/stl_rope.h	/^    _Rope_iterator() {$/;"	f	class:_Rope_iterator	access:public	signature:()
_Rope_iterator::_Rope_iterator	/Users/lij/.vim/stl/stl_rope.h	/^    _Rope_iterator(const _Rope_iterator& __x) :$/;"	f	class:_Rope_iterator	access:public	signature:(const _Rope_iterator& __x)
_Rope_iterator::_Rope_iterator	/Users/lij/.vim/stl/stl_rope.h	/^    _Rope_iterator(rope<_CharT,_Alloc>& __r, size_t __pos);$/;"	p	class:_Rope_iterator	access:public	signature:(rope<_CharT,_Alloc>& __r, size_t __pos)
_Rope_iterator::_Rope_iterator	/Users/lij/.vim/stl/stl_rope.h	/^    _Rope_iterator(rope<_CharT,_Alloc>* __r, size_t __pos)$/;"	f	class:_Rope_iterator	access:protected	signature:(rope<_CharT,_Alloc>* __r, size_t __pos)
_Rope_iterator::__STL_NULL_TMPL_ARGS	/Users/lij/.vim/stl/stl_rope.h	/^    friend _Rope_iterator<_CharT,_Alloc> operator+ __STL_NULL_TMPL_ARGS$/;"	p	class:_Rope_iterator	access:friend	signature:(const _Rope_iterator<_CharT,_Alloc>& __x, ptrdiff_t __n)
_Rope_iterator::__STL_NULL_TMPL_ARGS	/Users/lij/.vim/stl/stl_rope.h	/^    friend _Rope_iterator<_CharT,_Alloc> operator+ __STL_NULL_TMPL_ARGS$/;"	p	class:_Rope_iterator	access:friend	signature:(ptrdiff_t __n, const _Rope_iterator<_CharT,_Alloc>& __x)
_Rope_iterator::__STL_NULL_TMPL_ARGS	/Users/lij/.vim/stl/stl_rope.h	/^    friend _Rope_iterator<_CharT,_Alloc> operator- __STL_NULL_TMPL_ARGS$/;"	p	class:_Rope_iterator	access:friend	signature:(const _Rope_iterator<_CharT,_Alloc>& __x, ptrdiff_t __n)
_Rope_iterator::__STL_NULL_TMPL_ARGS	/Users/lij/.vim/stl/stl_rope.h	/^    friend bool operator< __STL_NULL_TMPL_ARGS$/;"	p	class:_Rope_iterator	access:friend	signature:(const _Rope_iterator<_CharT,_Alloc>& __x, const _Rope_iterator<_CharT,_Alloc>& __y)
_Rope_iterator::__STL_NULL_TMPL_ARGS	/Users/lij/.vim/stl/stl_rope.h	/^    friend bool operator== __STL_NULL_TMPL_ARGS$/;"	p	class:_Rope_iterator	access:friend	signature:(const _Rope_iterator<_CharT,_Alloc>& __x, const _Rope_iterator<_CharT,_Alloc>& __y)
_Rope_iterator::__STL_NULL_TMPL_ARGS	/Users/lij/.vim/stl/stl_rope.h	/^    friend ptrdiff_t operator- __STL_NULL_TMPL_ARGS$/;"	p	class:_Rope_iterator	access:friend	signature:(const _Rope_iterator<_CharT,_Alloc>& __x, const _Rope_iterator<_CharT,_Alloc>& __y)
_Rope_iterator::container	/Users/lij/.vim/stl/stl_rope.h	/^    rope<_CharT,_Alloc>& container() { return *_M_root_rope; }$/;"	f	class:_Rope_iterator	access:public	signature:()
_Rope_iterator::operator *	/Users/lij/.vim/stl/stl_rope.h	/^    reference operator*() {$/;"	f	class:_Rope_iterator	access:public	signature:()
_Rope_iterator::operator +	/Users/lij/.vim/stl/stl_rope.h	/^    friend _Rope_iterator<_CharT2,_Alloc2> operator+$/;"	p	class:_Rope_iterator	access:friend	signature:(const _Rope_iterator<_CharT2,_Alloc2>& __x, ptrdiff_t __n)
_Rope_iterator::operator +	/Users/lij/.vim/stl/stl_rope.h	/^    friend _Rope_iterator<_CharT2,_Alloc2> operator+$/;"	p	class:_Rope_iterator	access:friend	signature:(ptrdiff_t __n, const _Rope_iterator<_CharT2,_Alloc2>& __x)
_Rope_iterator::operator ++	/Users/lij/.vim/stl/stl_rope.h	/^    _Rope_iterator operator++(int) {$/;"	f	class:_Rope_iterator	access:public	signature:(int)
_Rope_iterator::operator ++	/Users/lij/.vim/stl/stl_rope.h	/^    _Rope_iterator& operator++() {$/;"	f	class:_Rope_iterator	access:public	signature:()
_Rope_iterator::operator +=	/Users/lij/.vim/stl/stl_rope.h	/^    _Rope_iterator& operator+=(ptrdiff_t __n) {$/;"	f	class:_Rope_iterator	access:public	signature:(ptrdiff_t __n)
_Rope_iterator::operator -	/Users/lij/.vim/stl/stl_rope.h	/^    friend _Rope_iterator<_CharT2,_Alloc2> operator-$/;"	p	class:_Rope_iterator	access:friend	signature:(const _Rope_iterator<_CharT2,_Alloc2>& __x, ptrdiff_t __n)
_Rope_iterator::operator -	/Users/lij/.vim/stl/stl_rope.h	/^    friend ptrdiff_t operator-$/;"	p	class:_Rope_iterator	access:friend	signature:(const _Rope_iterator<_CharT2,_Alloc2>& __x, const _Rope_iterator<_CharT2,_Alloc2>& __y)
_Rope_iterator::operator --	/Users/lij/.vim/stl/stl_rope.h	/^    _Rope_iterator operator--(int) {$/;"	f	class:_Rope_iterator	access:public	signature:(int)
_Rope_iterator::operator --	/Users/lij/.vim/stl/stl_rope.h	/^    _Rope_iterator& operator--() {$/;"	f	class:_Rope_iterator	access:public	signature:()
_Rope_iterator::operator -=	/Users/lij/.vim/stl/stl_rope.h	/^    _Rope_iterator& operator-=(ptrdiff_t __n) {$/;"	f	class:_Rope_iterator	access:public	signature:(ptrdiff_t __n)
_Rope_iterator::operator <	/Users/lij/.vim/stl/stl_rope.h	/^    friend bool operator<$/;"	p	class:_Rope_iterator	access:friend	signature:(const _Rope_iterator<_CharT2,_Alloc2>& __x, const _Rope_iterator<_CharT2,_Alloc2>& __y)
_Rope_iterator::operator =	/Users/lij/.vim/stl/stl_rope.h	/^    _Rope_iterator& operator= (const _Rope_iterator& __x) {$/;"	f	class:_Rope_iterator	access:public	signature:(const _Rope_iterator& __x)
_Rope_iterator::operator ==	/Users/lij/.vim/stl/stl_rope.h	/^    friend bool operator==$/;"	p	class:_Rope_iterator	access:friend	signature:(const _Rope_iterator<_CharT2,_Alloc2>& __x, const _Rope_iterator<_CharT2,_Alloc2>& __y)
_Rope_iterator::operator []	/Users/lij/.vim/stl/stl_rope.h	/^    reference operator[](ptrdiff_t __n) {$/;"	f	class:_Rope_iterator	access:public	signature:(ptrdiff_t __n)
_Rope_iterator::pointer	/Users/lij/.vim/stl/stl_rope.h	/^    typedef _Rope_char_ref_proxy<_CharT,_Alloc>* pointer;$/;"	t	class:_Rope_iterator	access:public
_Rope_iterator::reference	/Users/lij/.vim/stl/stl_rope.h	/^    typedef _Rope_char_ref_proxy<_CharT,_Alloc>  reference;$/;"	t	class:_Rope_iterator	access:public
_Rope_iterator::~_Rope_iterator	/Users/lij/.vim/stl/stl_rope.h	/^    ~_Rope_iterator() {$/;"	f	class:_Rope_iterator	access:public	signature:()
_Rope_iterator_base	/Users/lij/.vim/stl/stl_rope.h	/^    _Rope_iterator_base() {}$/;"	f	class:_Rope_iterator_base	access:protected	signature:()
_Rope_iterator_base	/Users/lij/.vim/stl/stl_rope.h	/^    _Rope_iterator_base(_RopeRep* __root, size_t __pos)$/;"	f	class:_Rope_iterator_base	access:protected	signature:(_RopeRep* __root, size_t __pos)
_Rope_iterator_base	/Users/lij/.vim/stl/stl_rope.h	/^    _Rope_iterator_base(const _Rope_iterator_base& __x) {$/;"	f	class:_Rope_iterator_base	access:public	signature:(const _Rope_iterator_base& __x)
_Rope_iterator_base	/Users/lij/.vim/stl/stl_rope.h	/^class _Rope_iterator_base$/;"	c	inherits:random_access_iterator
_Rope_iterator_base::_M_buf_end	/Users/lij/.vim/stl/stl_rope.h	/^    __GC_CONST _CharT* _M_buf_end;$/;"	m	class:_Rope_iterator_base	access:protected
_Rope_iterator_base::_M_buf_ptr	/Users/lij/.vim/stl/stl_rope.h	/^    __GC_CONST _CharT* _M_buf_ptr;$/;"	m	class:_Rope_iterator_base	access:protected
_Rope_iterator_base::_M_buf_start	/Users/lij/.vim/stl/stl_rope.h	/^    __GC_CONST _CharT* _M_buf_start;$/;"	m	class:_Rope_iterator_base	access:protected
_Rope_iterator_base::_M_current_pos	/Users/lij/.vim/stl/stl_rope.h	/^    size_t _M_current_pos;$/;"	m	class:_Rope_iterator_base	access:protected
_Rope_iterator_base::_M_decr	/Users/lij/.vim/stl/ropeimpl.h	/^void _Rope_iterator_base<_CharT,_Alloc>::_M_decr(size_t __n) {$/;"	f	class:_Rope_iterator_base	signature:(size_t __n)
_Rope_iterator_base::_M_decr	/Users/lij/.vim/stl/stl_rope.h	/^    void _M_decr(size_t __n);$/;"	p	class:_Rope_iterator_base	access:protected	signature:(size_t __n)
_Rope_iterator_base::_M_incr	/Users/lij/.vim/stl/ropeimpl.h	/^void _Rope_iterator_base<_CharT,_Alloc>::_M_incr(size_t __n) {$/;"	f	class:_Rope_iterator_base	signature:(size_t __n)
_Rope_iterator_base::_M_incr	/Users/lij/.vim/stl/stl_rope.h	/^    void _M_incr(size_t __n);$/;"	p	class:_Rope_iterator_base	access:protected	signature:(size_t __n)
_Rope_iterator_base::_M_leaf_index	/Users/lij/.vim/stl/stl_rope.h	/^    int _M_leaf_index;     \/\/ Last valid __pos in path_end;$/;"	m	class:_Rope_iterator_base	access:protected
_Rope_iterator_base::_M_leaf_pos	/Users/lij/.vim/stl/stl_rope.h	/^    size_t _M_leaf_pos;    \/\/ Starting position for current leaf$/;"	m	class:_Rope_iterator_base	access:protected
_Rope_iterator_base::_M_path_directions	/Users/lij/.vim/stl/stl_rope.h	/^    unsigned char _M_path_directions;$/;"	m	class:_Rope_iterator_base	access:protected
_Rope_iterator_base::_M_path_end	/Users/lij/.vim/stl/stl_rope.h	/^    const _RopeRep* _M_path_end[_S_path_cache_len];$/;"	m	class:_Rope_iterator_base	access:protected
_Rope_iterator_base::_M_root	/Users/lij/.vim/stl/stl_rope.h	/^    _RopeRep* _M_root;     \/\/ The whole rope.$/;"	m	class:_Rope_iterator_base	access:protected
_Rope_iterator_base::_M_tmp_buf	/Users/lij/.vim/stl/stl_rope.h	/^    _CharT _M_tmp_buf[_S_iterator_buf_len];$/;"	m	class:_Rope_iterator_base	access:protected
_Rope_iterator_base::_RopeRep	/Users/lij/.vim/stl/stl_rope.h	/^    typedef _Rope_RopeRep<_CharT,_Alloc> _RopeRep;$/;"	t	class:_Rope_iterator_base	access:public
_Rope_iterator_base::_Rope_iterator_base	/Users/lij/.vim/stl/stl_rope.h	/^    _Rope_iterator_base() {}$/;"	f	class:_Rope_iterator_base	access:protected	signature:()
_Rope_iterator_base::_Rope_iterator_base	/Users/lij/.vim/stl/stl_rope.h	/^    _Rope_iterator_base(_RopeRep* __root, size_t __pos)$/;"	f	class:_Rope_iterator_base	access:protected	signature:(_RopeRep* __root, size_t __pos)
_Rope_iterator_base::_Rope_iterator_base	/Users/lij/.vim/stl/stl_rope.h	/^    _Rope_iterator_base(const _Rope_iterator_base& __x) {$/;"	f	class:_Rope_iterator_base	access:public	signature:(const _Rope_iterator_base& __x)
_Rope_iterator_base::_S_iterator_buf_len	/Users/lij/.vim/stl/stl_rope.h	/^    enum { _S_iterator_buf_len = 15 };$/;"	e	enum:_Rope_iterator_base::__anon24
_Rope_iterator_base::_S_path_cache_len	/Users/lij/.vim/stl/stl_rope.h	/^    enum { _S_path_cache_len = 4 }; \/\/ Must be <= 9.$/;"	e	enum:_Rope_iterator_base::__anon23
_Rope_iterator_base::_S_setbuf	/Users/lij/.vim/stl/ropeimpl.h	/^void _Rope_iterator_base<_CharT,_Alloc>::_S_setbuf( $/;"	f	class:_Rope_iterator_base	signature:( _Rope_iterator_base<_CharT,_Alloc>& __x)
_Rope_iterator_base::_S_setbuf	/Users/lij/.vim/stl/stl_rope.h	/^    static void _S_setbuf(_Rope_iterator_base& __x);$/;"	p	class:_Rope_iterator_base	access:protected	signature:(_Rope_iterator_base& __x)
_Rope_iterator_base::_S_setcache	/Users/lij/.vim/stl/ropeimpl.h	/^void _Rope_iterator_base<_CharT,_Alloc>::_S_setcache$/;"	f	class:_Rope_iterator_base	signature:(_Rope_iterator_base<_CharT,_Alloc>& __x)
_Rope_iterator_base::_S_setcache	/Users/lij/.vim/stl/stl_rope.h	/^    static void _S_setcache(_Rope_iterator_base& __x);$/;"	p	class:_Rope_iterator_base	access:protected	signature:(_Rope_iterator_base& __x)
_Rope_iterator_base::_S_setcache_for_incr	/Users/lij/.vim/stl/ropeimpl.h	/^void _Rope_iterator_base<_CharT,_Alloc>::_S_setcache_for_incr$/;"	f	class:_Rope_iterator_base	signature:(_Rope_iterator_base<_CharT,_Alloc>& __x)
_Rope_iterator_base::_S_setcache_for_incr	/Users/lij/.vim/stl/stl_rope.h	/^    static void _S_setcache_for_incr(_Rope_iterator_base& __x);$/;"	p	class:_Rope_iterator_base	access:protected	signature:(_Rope_iterator_base& __x)
_Rope_iterator_base::_allocator_type	/Users/lij/.vim/stl/stl_rope.h	/^    typedef _Alloc _allocator_type; \/\/ used in _Rope_rotate, VC++ workaround$/;"	t	class:_Rope_iterator_base	access:public
_Rope_iterator_base::index	/Users/lij/.vim/stl/stl_rope.h	/^    size_t index() const { return _M_current_pos; }$/;"	f	class:_Rope_iterator_base	access:public	signature:() const
_Rope_rep_alloc_base	/Users/lij/.vim/stl/stl_rope.h	/^  _Rope_rep_alloc_base(size_t __size, const allocator_type& __a)$/;"	f	class:_Rope_rep_alloc_base	access:public	signature:(size_t __size, const allocator_type& __a)
_Rope_rep_alloc_base	/Users/lij/.vim/stl/stl_rope.h	/^  _Rope_rep_alloc_base(size_t __size, const allocator_type&)$/;"	f	class:_Rope_rep_alloc_base	access:public	signature:(size_t __size, const allocator_type&)
_Rope_rep_alloc_base	/Users/lij/.vim/stl/stl_rope.h	/^class _Rope_rep_alloc_base {$/;"	c
_Rope_rep_alloc_base	/Users/lij/.vim/stl/stl_rope.h	/^class _Rope_rep_alloc_base<_CharT,_Allocator,true> {$/;"	c
_Rope_rep_alloc_base::_M_data_allocator	/Users/lij/.vim/stl/stl_rope.h	/^    allocator_type _M_data_allocator;$/;"	m	class:_Rope_rep_alloc_base	access:protected
_Rope_rep_alloc_base::_M_size	/Users/lij/.vim/stl/stl_rope.h	/^  size_t _M_size;       \/\/ This is here only to avoid wasting space$/;"	m	class:_Rope_rep_alloc_base	access:public
_Rope_rep_alloc_base::_M_size	/Users/lij/.vim/stl/stl_rope.h	/^  size_t _M_size;$/;"	m	class:_Rope_rep_alloc_base	access:public
_Rope_rep_alloc_base::_Rope_rep_alloc_base	/Users/lij/.vim/stl/stl_rope.h	/^  _Rope_rep_alloc_base(size_t __size, const allocator_type& __a)$/;"	f	class:_Rope_rep_alloc_base	access:public	signature:(size_t __size, const allocator_type& __a)
_Rope_rep_alloc_base::_Rope_rep_alloc_base	/Users/lij/.vim/stl/stl_rope.h	/^  _Rope_rep_alloc_base(size_t __size, const allocator_type&)$/;"	f	class:_Rope_rep_alloc_base	access:public	signature:(size_t __size, const allocator_type&)
_Rope_rep_alloc_base::__ROPE_DEFINE_ALLOCS	/Users/lij/.vim/stl/stl_rope.h	/^  __ROPE_DEFINE_ALLOCS(_Allocator);$/;"	p	class:_Rope_rep_alloc_base	access:protected	signature:(_Allocator)
_Rope_rep_alloc_base::allocator_type	/Users/lij/.vim/stl/stl_rope.h	/^          allocator_type;$/;"	t	class:_Rope_rep_alloc_base	access:public
_Rope_rep_alloc_base::get_allocator	/Users/lij/.vim/stl/stl_rope.h	/^  allocator_type get_allocator() const { return _M_data_allocator; }$/;"	f	class:_Rope_rep_alloc_base	access:public	signature:() const
_Rope_rep_alloc_base::get_allocator	/Users/lij/.vim/stl/stl_rope.h	/^  allocator_type get_allocator() const { return allocator_type(); }$/;"	f	class:_Rope_rep_alloc_base	access:public	signature:() const
_Rope_rep_base	/Users/lij/.vim/stl/stl_rope.h	/^  _Rope_rep_base(size_t __size, const allocator_type& __a)$/;"	f	struct:_Rope_rep_base	access:public	signature:(size_t __size, const allocator_type& __a)
_Rope_rep_base	/Users/lij/.vim/stl/stl_rope.h	/^  _Rope_rep_base(size_t __size, const allocator_type&) : _M_size(__size) {}$/;"	f	class:_Rope_rep_base	access:public	signature:(size_t __size, const allocator_type&)
_Rope_rep_base	/Users/lij/.vim/stl/stl_rope.h	/^class _Rope_rep_base {$/;"	c
_Rope_rep_base	/Users/lij/.vim/stl/stl_rope.h	/^struct _Rope_rep_base$/;"	s	inherits:_Rope_rep_alloc_base
_Rope_rep_base::_Base	/Users/lij/.vim/stl/stl_rope.h	/^          _Base;$/;"	t	struct:_Rope_rep_base	access:public
_Rope_rep_base::_M_size	/Users/lij/.vim/stl/stl_rope.h	/^  size_t _M_size;$/;"	m	class:_Rope_rep_base	access:public
_Rope_rep_base::_Rope_rep_base	/Users/lij/.vim/stl/stl_rope.h	/^  _Rope_rep_base(size_t __size, const allocator_type& __a)$/;"	f	struct:_Rope_rep_base	access:public	signature:(size_t __size, const allocator_type& __a)
_Rope_rep_base::_Rope_rep_base	/Users/lij/.vim/stl/stl_rope.h	/^  _Rope_rep_base(size_t __size, const allocator_type&) : _M_size(__size) {}$/;"	f	class:_Rope_rep_base	access:public	signature:(size_t __size, const allocator_type&)
_Rope_rep_base::__ROPE_DEFINE_ALLOCS	/Users/lij/.vim/stl/stl_rope.h	/^  __ROPE_DEFINE_ALLOCS(_Alloc);$/;"	p	class:_Rope_rep_base	access:protected	signature:(_Alloc)
_Rope_rep_base::allocator_type	/Users/lij/.vim/stl/stl_rope.h	/^  typedef _Alloc allocator_type;$/;"	t	class:_Rope_rep_base	access:public
_Rope_rep_base::allocator_type	/Users/lij/.vim/stl/stl_rope.h	/^  typedef typename _Base::allocator_type allocator_type;$/;"	t	struct:_Rope_rep_base	access:public
_Rope_rep_base::get_allocator	/Users/lij/.vim/stl/stl_rope.h	/^  static allocator_type get_allocator() { return allocator_type(); }$/;"	f	class:_Rope_rep_base	access:public	signature:()
_Rope_rotate	/Users/lij/.vim/stl/ropeimpl.h	/^_Rope_rotate(_Rope_iterator __first,$/;"	f	signature:(_Rope_iterator __first, _Rope_iterator __middle, _Rope_iterator __last)
_Rope_self_destruct_ptr	/Users/lij/.vim/stl/stl_rope.h	/^        _Rope_self_destruct_ptr() : _M_ptr(0) {};$/;"	f	struct:_Rope_self_destruct_ptr	access:public	signature:()
_Rope_self_destruct_ptr	/Users/lij/.vim/stl/stl_rope.h	/^        _Rope_self_destruct_ptr() {};$/;"	f	struct:_Rope_self_destruct_ptr	access:public	signature:()
_Rope_self_destruct_ptr	/Users/lij/.vim/stl/stl_rope.h	/^    _Rope_self_destruct_ptr(_Rope_RopeRep<_CharT,_Alloc>* __p) : _M_ptr(__p) {}$/;"	f	struct:_Rope_self_destruct_ptr	access:public	signature:(_Rope_RopeRep<_CharT,_Alloc>* __p)
_Rope_self_destruct_ptr	/Users/lij/.vim/stl/stl_rope.h	/^  struct _Rope_self_destruct_ptr {$/;"	s
_Rope_self_destruct_ptr::_M_ptr	/Users/lij/.vim/stl/stl_rope.h	/^    _Rope_RopeRep<_CharT,_Alloc>* _M_ptr;$/;"	m	struct:_Rope_self_destruct_ptr	access:public
_Rope_self_destruct_ptr::_Rope_self_destruct_ptr	/Users/lij/.vim/stl/stl_rope.h	/^        _Rope_self_destruct_ptr() : _M_ptr(0) {};$/;"	f	struct:_Rope_self_destruct_ptr	access:public	signature:()
_Rope_self_destruct_ptr::_Rope_self_destruct_ptr	/Users/lij/.vim/stl/stl_rope.h	/^        _Rope_self_destruct_ptr() {};$/;"	f	struct:_Rope_self_destruct_ptr	access:public	signature:()
_Rope_self_destruct_ptr::_Rope_self_destruct_ptr	/Users/lij/.vim/stl/stl_rope.h	/^    _Rope_self_destruct_ptr(_Rope_RopeRep<_CharT,_Alloc>* __p) : _M_ptr(__p) {}$/;"	f	struct:_Rope_self_destruct_ptr	access:public	signature:(_Rope_RopeRep<_CharT,_Alloc>* __p)
_Rope_self_destruct_ptr::operator *	/Users/lij/.vim/stl/stl_rope.h	/^    _Rope_RopeRep<_CharT,_Alloc>& operator*() { return *_M_ptr; }$/;"	f	struct:_Rope_self_destruct_ptr	access:public	signature:()
_Rope_self_destruct_ptr::operator ->	/Users/lij/.vim/stl/stl_rope.h	/^    _Rope_RopeRep<_CharT,_Alloc>* operator->() { return _M_ptr; }$/;"	f	struct:_Rope_self_destruct_ptr	access:public	signature:()
_Rope_self_destruct_ptr::operator =	/Users/lij/.vim/stl/stl_rope.h	/^    _Rope_self_destruct_ptr& operator= (_Rope_RopeRep<_CharT,_Alloc>* __x)$/;"	f	struct:_Rope_self_destruct_ptr	access:public	signature:(_Rope_RopeRep<_CharT,_Alloc>* __x)
_Rope_self_destruct_ptr::operator _Rope_RopeRep<_CharT,_Alloc>*	/Users/lij/.vim/stl/stl_rope.h	/^    operator _Rope_RopeRep<_CharT,_Alloc>*() { return _M_ptr; }$/;"	f	struct:_Rope_self_destruct_ptr	access:public	signature:()
_Rope_self_destruct_ptr::~_Rope_self_destruct_ptr	/Users/lij/.vim/stl/stl_rope.h	/^    ~_Rope_self_destruct_ptr() $/;"	f	struct:_Rope_self_destruct_ptr	access:public	signature:()
_STL_BINARY_FUNCTION_ERROR	/Users/lij/.vim/stl/concept_checks.h	/^struct _STL_BINARY_FUNCTION_ERROR {$/;"	s
_STL_BINARY_FUNCTION_ERROR	/Users/lij/.vim/stl/concept_checks.h	/^struct _STL_BINARY_FUNCTION_ERROR<_Func, void, _First, _Second> {$/;"	s
_STL_BINARY_FUNCTION_ERROR::__binary_function_requirement_violation	/Users/lij/.vim/stl/concept_checks.h	/^  __binary_function_requirement_violation(_Func& __f,$/;"	f	struct:_STL_BINARY_FUNCTION_ERROR	access:public	signature:(_Func& __f, const _First& __first, const _Second& __second)
_STL_CONVERT_ERROR	/Users/lij/.vim/stl/concept_checks.h	/^struct _STL_CONVERT_ERROR {$/;"	s
_STL_CONVERT_ERROR::__type_X_is_not_convertible_to_type_Y	/Users/lij/.vim/stl/concept_checks.h	/^  __type_X_is_not_convertible_to_type_Y(_TypeX __x, _TypeY) {$/;"	f	struct:_STL_CONVERT_ERROR	access:public	signature:(_TypeX __x, _TypeY)
_STL_ERROR	/Users/lij/.vim/stl/concept_checks.h	/^struct _STL_ERROR {$/;"	s
_STL_ERROR::__assignment_operator_requirement_violation	/Users/lij/.vim/stl/concept_checks.h	/^  __assignment_operator_requirement_violation(_Type __a) {$/;"	f	struct:_STL_ERROR	access:public	signature:(_Type __a)
_STL_ERROR::__const_parameter_required_for_assignment_operator	/Users/lij/.vim/stl/concept_checks.h	/^  __const_parameter_required_for_assignment_operator(_Type __a, $/;"	f	struct:_STL_ERROR	access:public	signature:(_Type __a, const _Type& __b)
_STL_ERROR::__const_parameter_required_for_copy_constructor	/Users/lij/.vim/stl/concept_checks.h	/^  __const_parameter_required_for_copy_constructor(_Type \/* __a *\/, $/;"	f	struct:_STL_ERROR	access:public	signature:(_Type , const _Type& __b)
_STL_ERROR::__copy_constructor_requirement_violation	/Users/lij/.vim/stl/concept_checks.h	/^  __copy_constructor_requirement_violation(_Type __a) {$/;"	f	struct:_STL_ERROR	access:public	signature:(_Type __a)
_STL_ERROR::__default_constructor_requirement_violation	/Users/lij/.vim/stl/concept_checks.h	/^  __default_constructor_requirement_violation(_Type) {$/;"	f	struct:_STL_ERROR	access:public	signature:(_Type)
_STL_ERROR::__dereference_operator_and_assignment_requirement_violation	/Users/lij/.vim/stl/concept_checks.h	/^  __dereference_operator_and_assignment_requirement_violation(_Iterator __i) {$/;"	f	struct:_STL_ERROR	access:public	signature:(_Iterator __i)
_STL_ERROR::__dereference_operator_requirement_violation	/Users/lij/.vim/stl/concept_checks.h	/^  __dereference_operator_requirement_violation(_Iterator __i) {$/;"	f	struct:_STL_ERROR	access:public	signature:(_Iterator __i)
_STL_ERROR::__difference_operator_requirement_violation	/Users/lij/.vim/stl/concept_checks.h	/^  __difference_operator_requirement_violation(_Iterator __i, _Iterator __j,$/;"	f	struct:_STL_ERROR	access:public	signature:(_Iterator __i, _Iterator __j, _Distance __n)
_STL_ERROR::__element_access_operator_requirement_violation	/Users/lij/.vim/stl/concept_checks.h	/^  __element_access_operator_requirement_violation(_Exp __x, _Type*,$/;"	f	struct:_STL_ERROR	access:public	signature:(_Exp __x, _Type*, _Distance __n)
_STL_ERROR::__element_assignment_operator_requirement_violation	/Users/lij/.vim/stl/concept_checks.h	/^  __element_assignment_operator_requirement_violation(_Exp __x,$/;"	f	struct:_STL_ERROR	access:public	signature:(_Exp __x, _Type* __t, _Distance __n)
_STL_ERROR::__equality_comparable_requirement_violation	/Users/lij/.vim/stl/concept_checks.h	/^  __equality_comparable_requirement_violation(_Type __a, _Type __b) {$/;"	f	struct:_STL_ERROR	access:public	signature:(_Type __a, _Type __b)
_STL_ERROR::__iterator_addition_assignment_requirement_violation	/Users/lij/.vim/stl/concept_checks.h	/^  __iterator_addition_assignment_requirement_violation(_Iterator __i, $/;"	f	struct:_STL_ERROR	access:public	signature:(_Iterator __i, _Distance __n)
_STL_ERROR::__iterator_addition_requirement_violation	/Users/lij/.vim/stl/concept_checks.h	/^  __iterator_addition_requirement_violation(_Iterator __i, _Distance __n) {$/;"	f	struct:_STL_ERROR	access:public	signature:(_Iterator __i, _Distance __n)
_STL_ERROR::__iterator_subtraction_assignment_requirement_violation	/Users/lij/.vim/stl/concept_checks.h	/^  __iterator_subtraction_assignment_requirement_violation(_Iterator __i,$/;"	f	struct:_STL_ERROR	access:public	signature:(_Iterator __i, _Distance __n)
_STL_ERROR::__iterator_subtraction_requirement_violation	/Users/lij/.vim/stl/concept_checks.h	/^  __iterator_subtraction_requirement_violation(_Iterator __i, _Distance __n) {$/;"	f	struct:_STL_ERROR	access:public	signature:(_Iterator __i, _Distance __n)
_STL_ERROR::__less_than_comparable_requirement_violation	/Users/lij/.vim/stl/concept_checks.h	/^  __less_than_comparable_requirement_violation(_Type __a, _Type __b) {$/;"	f	struct:_STL_ERROR	access:public	signature:(_Type __a, _Type __b)
_STL_ERROR::__postdecrement_operator_requirement_violation	/Users/lij/.vim/stl/concept_checks.h	/^  __postdecrement_operator_requirement_violation(_Iterator __i) {$/;"	f	struct:_STL_ERROR	access:public	signature:(_Iterator __i)
_STL_ERROR::__postincrement_operator_and_assignment_requirement_violation	/Users/lij/.vim/stl/concept_checks.h	/^  __postincrement_operator_and_assignment_requirement_violation(_Iterator __i,$/;"	f	struct:_STL_ERROR	access:public	signature:(_Iterator __i, _Type __t)
_STL_ERROR::__postincrement_operator_requirement_violation	/Users/lij/.vim/stl/concept_checks.h	/^  __postincrement_operator_requirement_violation(_Iterator __i) {$/;"	f	struct:_STL_ERROR	access:public	signature:(_Iterator __i)
_STL_ERROR::__predecrement_operator_requirement_violation	/Users/lij/.vim/stl/concept_checks.h	/^  __predecrement_operator_requirement_violation(_Iterator __i) {$/;"	f	struct:_STL_ERROR	access:public	signature:(_Iterator __i)
_STL_ERROR::__preincrement_operator_requirement_violation	/Users/lij/.vim/stl/concept_checks.h	/^  __preincrement_operator_requirement_violation(_Iterator __i) {$/;"	f	struct:_STL_ERROR	access:public	signature:(_Iterator __i)
_STL_GENERATOR_ERROR	/Users/lij/.vim/stl/concept_checks.h	/^struct _STL_GENERATOR_ERROR {$/;"	s
_STL_GENERATOR_ERROR	/Users/lij/.vim/stl/concept_checks.h	/^struct _STL_GENERATOR_ERROR<_Func, void> {$/;"	s
_STL_GENERATOR_ERROR::__generator_requirement_violation	/Users/lij/.vim/stl/concept_checks.h	/^  static _Ret __generator_requirement_violation(_Func& __f) {$/;"	f	struct:_STL_GENERATOR_ERROR	access:public	signature:(_Func& __f)
_STL_GENERATOR_ERROR::__generator_requirement_violation	/Users/lij/.vim/stl/concept_checks.h	/^  static void __generator_requirement_violation(_Func& __f) {$/;"	f	struct:_STL_GENERATOR_ERROR	access:public	signature:(_Func& __f)
_STL_SAME_TYPE_ERROR	/Users/lij/.vim/stl/concept_checks.h	/^struct _STL_SAME_TYPE_ERROR {$/;"	s
_STL_SAME_TYPE_ERROR::__type_X_not_same_as_type_Y	/Users/lij/.vim/stl/concept_checks.h	/^  __type_X_not_same_as_type_Y(_TypeX , _TypeY ) { $/;"	f	struct:_STL_SAME_TYPE_ERROR	access:public	signature:(_TypeX , _TypeY )
_STL_UNARY_FUNCTION_ERROR	/Users/lij/.vim/stl/concept_checks.h	/^struct _STL_UNARY_FUNCTION_ERROR {$/;"	s
_STL_UNARY_FUNCTION_ERROR	/Users/lij/.vim/stl/concept_checks.h	/^struct _STL_UNARY_FUNCTION_ERROR<_Func, void, _Arg> {$/;"	s
_STL_UNARY_FUNCTION_ERROR::__unary_function_requirement_violation	/Users/lij/.vim/stl/concept_checks.h	/^  __unary_function_requirement_violation(_Func& __f,$/;"	f	struct:_STL_UNARY_FUNCTION_ERROR	access:public	signature:(_Func& __f, const _Arg& __arg)
_STL_auto_lock	/Users/lij/.vim/stl/stl_threads.h	/^  _STL_auto_lock(_STL_mutex_lock& __lock) : _M_lock(__lock)$/;"	f	struct:_STL_auto_lock	access:public	signature:(_STL_mutex_lock& __lock)
_STL_auto_lock	/Users/lij/.vim/stl/stl_threads.h	/^  _STL_auto_lock(const _STL_auto_lock&);$/;"	p	struct:_STL_auto_lock	access:private	signature:(const _STL_auto_lock&)
_STL_auto_lock	/Users/lij/.vim/stl/stl_threads.h	/^struct _STL_auto_lock$/;"	s
_STL_auto_lock::_M_lock	/Users/lij/.vim/stl/stl_threads.h	/^  _STL_mutex_lock& _M_lock;$/;"	m	struct:_STL_auto_lock	access:public
_STL_auto_lock::_STL_auto_lock	/Users/lij/.vim/stl/stl_threads.h	/^  _STL_auto_lock(_STL_mutex_lock& __lock) : _M_lock(__lock)$/;"	f	struct:_STL_auto_lock	access:public	signature:(_STL_mutex_lock& __lock)
_STL_auto_lock::_STL_auto_lock	/Users/lij/.vim/stl/stl_threads.h	/^  _STL_auto_lock(const _STL_auto_lock&);$/;"	p	struct:_STL_auto_lock	access:private	signature:(const _STL_auto_lock&)
_STL_auto_lock::operator =	/Users/lij/.vim/stl/stl_threads.h	/^  void operator=(const _STL_auto_lock&);$/;"	p	struct:_STL_auto_lock	access:private	signature:(const _STL_auto_lock&)
_STL_auto_lock::~_STL_auto_lock	/Users/lij/.vim/stl/stl_threads.h	/^  ~_STL_auto_lock() { _M_lock._M_release_lock(); }$/;"	f	struct:_STL_auto_lock	access:public	signature:()
_STL_mutex_lock	/Users/lij/.vim/stl/stl_threads.h	/^struct _STL_mutex_lock$/;"	s
_STL_mutex_lock::_M_acquire_lock	/Users/lij/.vim/stl/stl_threads.h	/^  void _M_acquire_lock() {$/;"	f	struct:_STL_mutex_lock	access:public	signature:()
_STL_mutex_lock::_M_initialize	/Users/lij/.vim/stl/stl_threads.h	/^  void _M_initialize() { _M_lock = 0; }$/;"	f	struct:_STL_mutex_lock	access:public	signature:()
_STL_mutex_lock::_M_lock	/Users/lij/.vim/stl/stl_threads.h	/^  volatile unsigned long _M_lock;$/;"	m	struct:_STL_mutex_lock	access:public
_STL_mutex_lock::_M_release_lock	/Users/lij/.vim/stl/stl_threads.h	/^  void _M_release_lock() {$/;"	f	struct:_STL_mutex_lock	access:public	signature:()
_STL_mutex_lock::_S_nsec_sleep	/Users/lij/.vim/stl/stl_threads.h	/^  static void _S_nsec_sleep(int __log_nsec) {$/;"	f	struct:_STL_mutex_lock	access:public	signature:(int __log_nsec)
_STL_mutex_spin	/Users/lij/.vim/stl/stl_threads.h	/^struct _STL_mutex_spin {$/;"	s
_STL_mutex_spin::__high_max	/Users/lij/.vim/stl/stl_threads.h	/^  enum { __low_max = 30, __high_max = 1000 };$/;"	e	enum:_STL_mutex_spin::__anon26
_STL_mutex_spin::__last	/Users/lij/.vim/stl/stl_threads.h	/^  static unsigned __last;$/;"	m	struct:_STL_mutex_spin	access:public
_STL_mutex_spin::__last	/Users/lij/.vim/stl/stl_threads.h	/^unsigned _STL_mutex_spin<__inst>::__last = 0;$/;"	m	class:_STL_mutex_spin
_STL_mutex_spin::__low_max	/Users/lij/.vim/stl/stl_threads.h	/^  enum { __low_max = 30, __high_max = 1000 };$/;"	e	enum:_STL_mutex_spin::__anon26
_STL_mutex_spin::__max	/Users/lij/.vim/stl/stl_threads.h	/^  static unsigned __max;$/;"	m	struct:_STL_mutex_spin	access:public
_STL_mutex_spin::__max	/Users/lij/.vim/stl/stl_threads.h	/^unsigned _STL_mutex_spin<__inst>::__max = _STL_mutex_spin<__inst>::__low_max;$/;"	m	class:_STL_mutex_spin
_S_ALIGN	/Users/lij/.vim/stl/pthread_alloc	/^  enum {_S_ALIGN = __STL_DATA_ALIGNMENT};$/;"	e	enum:_Pthread_alloc_template::__anon2	file:
_S_Alloc	/Users/lij/.vim/stl/pthread_alloc	/^  typedef pthread_alloc _S_Alloc;          \/\/ The underlying allocator.$/;"	t	class:pthread_allocator	file:	access:private
_S_NFREELISTS	/Users/lij/.vim/stl/pthread_alloc	/^  enum { _S_NFREELISTS = _Max_size\/__STL_DATA_ALIGNMENT };$/;"	e	enum:_Pthread_alloc_per_thread_state::__anon1	file:
_S_RopeLeaf_from_unowned_char_ptr	/Users/lij/.vim/stl/stl_rope.h	/^          _RopeLeaf* _S_RopeLeaf_from_unowned_char_ptr(const _CharT *__s,$/;"	f	class:rope	access:protected	signature:(const _CharT *__s, size_t __size, allocator_type __a)
_S_add_leaf_to_forest	/Users/lij/.vim/stl/ropeimpl.h	/^rope<_CharT,_Alloc>::_S_add_leaf_to_forest(_RopeRep* __r, _RopeRep** __forest)$/;"	f	class:rope	signature:(_RopeRep* __r, _RopeRep** __forest)
_S_add_leaf_to_forest	/Users/lij/.vim/stl/stl_rope.h	/^        static void _S_add_leaf_to_forest(_RopeRep* __r, _RopeRep** __forest);$/;"	p	class:rope	access:private	signature:(_RopeRep* __r, _RopeRep** __forest)
_S_add_to_forest	/Users/lij/.vim/stl/ropeimpl.h	/^rope<_CharT,_Alloc>::_S_add_to_forest(_RopeRep* __r, _RopeRep** __forest)$/;"	f	class:rope	signature:(_RopeRep* __r, _RopeRep** __forest)
_S_add_to_forest	/Users/lij/.vim/stl/stl_rope.h	/^        static void _S_add_to_forest(_RopeRep*__r, _RopeRep** __forest);$/;"	p	class:rope	access:private	signature:(_RopeRep*__r, _RopeRep** __forest)
_S_alloc_granularity	/Users/lij/.vim/stl/stl_rope.h	/^    enum { _S_alloc_granularity = 8 };$/;"	e	enum:_Rope_RopeLeaf::__anon22
_S_allocated_capacity	/Users/lij/.vim/stl/stl_rope.h	/^        static size_t _S_allocated_capacity(size_t __n) {$/;"	f	class:rope	access:protected	signature:(size_t __n)
_S_apply_to_pieces	/Users/lij/.vim/stl/ropeimpl.h	/^bool rope<_CharT, _Alloc>::_S_apply_to_pieces($/;"	f	class:rope	signature:( _Rope_char_consumer<_CharT>& __c, const _RopeRep* __r, size_t __begin, size_t __end)
_S_apply_to_pieces	/Users/lij/.vim/stl/stl_rope.h	/^        static bool _S_apply_to_pieces($/;"	p	class:rope	access:protected	signature:( _Rope_char_consumer<_CharT>& __c, const _RopeRep* __r, size_t __begin, size_t __end)
_S_balance	/Users/lij/.vim/stl/ropeimpl.h	/^rope<_CharT,_Alloc>::_S_balance(_RopeRep* __r)$/;"	f	class:rope	signature:(_RopeRep* __r)
_S_balance	/Users/lij/.vim/stl/stl_rope.h	/^        static _RopeRep* _S_balance(_RopeRep* __r);$/;"	p	class:rope	access:private	signature:(_RopeRep* __r)
_S_bit_count	/Users/lij/.vim/stl/bitset	/^  static unsigned char _S_bit_count[256];$/;"	m	struct:_Bit_count	file:	access:public
_S_bit_count	/Users/lij/.vim/stl/bitset	/^unsigned char _Bit_count<__dummy>::_S_bit_count[] = {$/;"	m	class:_Bit_count	file:
_S_buffer_size	/Users/lij/.vim/stl/stl_deque.h	/^  static size_t _S_buffer_size() { return __deque_buf_size(sizeof(_Tp)); }$/;"	f	class:deque	access:protected	signature:()
_S_buffer_size	/Users/lij/.vim/stl/stl_deque.h	/^  static size_t _S_buffer_size() { return __deque_buf_size(sizeof(_Tp)); }$/;"	f	struct:_Deque_iterator	access:public	signature:()
_S_bufsize	/Users/lij/.vim/stl/stdexcept	/^  enum { _S_bufsize = 256 };$/;"	e	enum:__Named_exception::__anon3	file:
_S_char_ptr_len	/Users/lij/.vim/stl/ropeimpl.h	/^rope<_CharT,_Alloc>::_S_char_ptr_len(const _CharT* __s)$/;"	f	class:rope	signature:(const _CharT* __s)
_S_char_ptr_len	/Users/lij/.vim/stl/stl_rope.h	/^        static size_t _S_char_ptr_len(const _CharT* __s);$/;"	p	class:rope	access:private	signature:(const _CharT* __s)
_S_chunk_alloc	/Users/lij/.vim/stl/pthread_alloc	/^  static char *_S_chunk_alloc(size_t __size, int &__nobjs);$/;"	p	class:_Pthread_alloc_template	file:	access:public	signature:(size_t __size, int &__nobjs)
_S_chunk_alloc	/Users/lij/.vim/stl/pthread_alloc	/^::_S_chunk_alloc(size_t __size, int &__nobjs)$/;"	f	class:_Pthread_alloc_template	signature:(size_t __size, int &__nobjs)
_S_chunk_alloc	/Users/lij/.vim/stl/stl_alloc.h	/^  static char* _S_chunk_alloc(size_t __size, int& __nobjs);$/;"	p	class:__default_alloc_template	access:private	signature:(size_t __size, int& __nobjs)
_S_chunk_alloc	/Users/lij/.vim/stl/stl_alloc.h	/^__default_alloc_template<__threads, __inst>::_S_chunk_alloc(size_t __size, $/;"	f	class:__default_alloc_template	signature:(size_t __size, int& __nobjs)
_S_chunk_allocator_lock	/Users/lij/.vim/stl/pthread_alloc	/^  static pthread_mutex_t _S_chunk_allocator_lock;$/;"	m	class:_Pthread_alloc_template	file:	access:private
_S_chunk_allocator_lock	/Users/lij/.vim/stl/pthread_alloc	/^pthread_mutex_t _Pthread_alloc_template<_Max_size>::_S_chunk_allocator_lock$/;"	m	class:_Pthread_alloc_template	file:
_S_color	/Users/lij/.vim/stl/stl_tree.h	/^  static _Color_type& _S_color(_Base_ptr __x)$/;"	f	class:_Rb_tree	access:protected	signature:(_Base_ptr __x)
_S_color	/Users/lij/.vim/stl/stl_tree.h	/^  static _Color_type& _S_color(_Link_type __x)$/;"	f	class:_Rb_tree	access:protected	signature:(_Link_type __x)
_S_compare	/Users/lij/.vim/stl/ropeimpl.h	/^rope<_CharT,_Alloc>::_S_compare (const _RopeRep* __left, $/;"	f	class:rope	signature:(const _RopeRep* __left, const _RopeRep* __right)
_S_compare	/Users/lij/.vim/stl/stl_rope.h	/^        static int _S_compare(const _RopeRep* __x, const _RopeRep* __y);$/;"	p	class:rope	access:private	signature:(const _RopeRep* __x, const _RopeRep* __y)
_S_concat	/Users/lij/.vim/stl/ropeimpl.h	/^rope<_CharT,_Alloc>::_S_concat(_RopeRep* __left, _RopeRep* __right)$/;"	f	class:rope	signature:(_RopeRep* __left, _RopeRep* __right)
_S_concat	/Users/lij/.vim/stl/stl_rope.h	/^        static _RopeRep* _S_concat(_RopeRep* __left, _RopeRep* __right);$/;"	p	class:rope	access:protected	signature:(_RopeRep* __left, _RopeRep* __right)
_S_concat	/Users/lij/.vim/stl/stl_rope.h	/^    enum _Tag {_S_leaf, _S_concat, _S_substringfn, _S_function};$/;"	e	enum:_Rope_RopeRep::_Tag
_S_concat_and_set_balanced	/Users/lij/.vim/stl/stl_rope.h	/^        static _RopeRep* _S_concat_and_set_balanced(_RopeRep* __left,$/;"	f	class:rope	access:private	signature:(_RopeRep* __left, _RopeRep* __right)
_S_concat_char_iter	/Users/lij/.vim/stl/ropeimpl.h	/^rope<_CharT,_Alloc>::_RopeRep* rope<_CharT,_Alloc>::_S_concat_char_iter$/;"	f	class:rope	signature:(_RopeRep* __r, const _CharT*__s, size_t __slen)
_S_concat_char_iter	/Users/lij/.vim/stl/stl_rope.h	/^        static _RopeRep* _S_concat_char_iter(_RopeRep* __r,$/;"	p	class:rope	access:protected	signature:(_RopeRep* __r, const _CharT* __iter, size_t __slen)
_S_cond_store_eos	/Users/lij/.vim/stl/stl_rope.h	/^inline void _S_cond_store_eos(_CharT&) {}$/;"	f	signature:(_CharT&)
_S_cond_store_eos	/Users/lij/.vim/stl/stl_rope.h	/^inline void _S_cond_store_eos(char& __c) { __c = 0; }$/;"	f	signature:(char& __c)
_S_cond_store_eos	/Users/lij/.vim/stl/stl_rope.h	/^inline void _S_cond_store_eos(wchar_t& __c) { __c = 0; }$/;"	f	signature:(wchar_t& __c)
_S_copy_max	/Users/lij/.vim/stl/stl_rope.h	/^        enum { _S_copy_max = 23 };$/;"	e	enum:rope::__anon25
_S_destr_concat_char_iter	/Users/lij/.vim/stl/ropeimpl.h	/^rope<_CharT,_Alloc>::_S_destr_concat_char_iter($/;"	f	class:rope	signature:( _RopeRep* __r, const _CharT* __s, size_t __slen)
_S_destr_concat_char_iter	/Users/lij/.vim/stl/stl_rope.h	/^        static _RopeRep* _S_destr_concat_char_iter(_RopeRep* __r,$/;"	f	class:rope	access:protected	signature:(_RopeRep* __r, const _CharT* __iter, size_t __slen)
_S_destr_leaf_concat_char_iter	/Users/lij/.vim/stl/ropeimpl.h	/^rope<_CharT,_Alloc>::_S_destr_leaf_concat_char_iter$/;"	f	class:rope	signature:(_RopeLeaf* __r, const _CharT* __iter, size_t __len)
_S_destr_leaf_concat_char_iter	/Users/lij/.vim/stl/stl_rope.h	/^          static _RopeLeaf* _S_destr_leaf_concat_char_iter$/;"	p	class:rope	access:protected	signature:(_RopeLeaf* __r, const _CharT* __iter, size_t __slen)
_S_destructor	/Users/lij/.vim/stl/pthread_alloc	/^  static void _S_destructor(void *instance);$/;"	p	class:_Pthread_alloc_template	file:	access:private	signature:(void *instance)
_S_destructor	/Users/lij/.vim/stl/pthread_alloc	/^void _Pthread_alloc_template<_Max_size>::_S_destructor(void * __instance)$/;"	f	class:_Pthread_alloc_template	signature:(void * __instance)
_S_dump	/Users/lij/.vim/stl/ropeimpl.h	/^rope<_CharT,_Alloc>::_S_dump(_RopeRep* __r, int __indent)$/;"	f	class:rope	signature:(_RopeRep* __r, int __indent)
_S_dump	/Users/lij/.vim/stl/stl_rope.h	/^        static void _S_dump(_RopeRep* __r, int __indent = 0);$/;"	p	class:rope	access:private	signature:(_RopeRep* __r, int __indent = 0)
_S_empty_c_str	/Users/lij/.vim/stl/ropeimpl.h	/^  _CharT rope<_CharT,_Alloc>::_S_empty_c_str[1];$/;"	m	class:rope
_S_empty_c_str	/Users/lij/.vim/stl/stl_rope.h	/^        static _CharT _S_empty_c_str[1];$/;"	m	class:rope	access:protected
_S_end_free	/Users/lij/.vim/stl/pthread_alloc	/^  static char *_S_end_free;$/;"	m	class:_Pthread_alloc_template	file:	access:private
_S_end_free	/Users/lij/.vim/stl/pthread_alloc	/^::_S_end_free = 0;$/;"	m	class:_Pthread_alloc_template	file:
_S_end_free	/Users/lij/.vim/stl/stl_alloc.h	/^  static char* _S_end_free;$/;"	m	class:__default_alloc_template	access:private
_S_end_free	/Users/lij/.vim/stl/stl_alloc.h	/^char* __default_alloc_template<__threads, __inst>::_S_end_free = 0;$/;"	m	class:__default_alloc_template
_S_eos	/Users/lij/.vim/stl/stl_rope.h	/^inline _CharT _S_eos(_CharT*) { return _CharT(); }$/;"	f	signature:(_CharT*)
_S_extra	/Users/lij/.vim/stl/stl_alloc.h	/^  enum {_S_extra = 8};  \/\/ Size of space used to store size.  Note$/;"	e	enum:debug_alloc::__anon11
_S_fetch	/Users/lij/.vim/stl/ropeimpl.h	/^rope<_CharT,_Alloc>::_S_fetch(_RopeRep* __r, size_type __i)$/;"	f	class:rope	signature:(_RopeRep* __r, size_type __i)
_S_fetch	/Users/lij/.vim/stl/stl_rope.h	/^        static _CharT _S_fetch(_RopeRep* __r, size_type __pos);$/;"	p	class:rope	access:protected	signature:(_RopeRep* __r, size_type __pos)
_S_fetch_ptr	/Users/lij/.vim/stl/ropeimpl.h	/^rope<_CharT,_Alloc>::_S_fetch_ptr(_RopeRep* __r, size_type __i)$/;"	f	class:rope	signature:(_RopeRep* __r, size_type __i)
_S_fetch_ptr	/Users/lij/.vim/stl/stl_rope.h	/^            static _CharT* _S_fetch_ptr(_RopeRep* __r, size_type __pos);$/;"	p	class:rope	access:protected	signature:(_RopeRep* __r, size_type __pos)
_S_first_one	/Users/lij/.vim/stl/bitset	/^  static unsigned char _S_first_one[256];$/;"	m	struct:_First_one	file:	access:public
_S_first_one	/Users/lij/.vim/stl/bitset	/^unsigned char _First_one<__dummy>::_S_first_one[] = {$/;"	m	class:_First_one	file:
_S_flatten	/Users/lij/.vim/stl/ropeimpl.h	/^rope<_CharT,_Alloc>::_S_flatten(_RopeRep* __r, _CharT* __buffer)$/;"	f	class:rope	signature:(_RopeRep* __r, _CharT* __buffer)
_S_flatten	/Users/lij/.vim/stl/ropeimpl.h	/^rope<_CharT,_Alloc>::_S_flatten(_RopeRep* __r,$/;"	f	class:rope	signature:(_RopeRep* __r, size_t __start, size_t __len, _CharT* __buffer)
_S_flatten	/Users/lij/.vim/stl/stl_rope.h	/^        static _CharT* _S_flatten(_RopeRep* __r, _CharT* __buffer);$/;"	p	class:rope	access:private	signature:(_RopeRep* __r, _CharT* __buffer)
_S_flatten	/Users/lij/.vim/stl/stl_rope.h	/^        static _CharT* _S_flatten(_RopeRep* __r,$/;"	p	class:rope	access:private	signature:(_RopeRep* __r, size_t __start, size_t __len, _CharT* __buffer)
_S_fn_finalization_proc	/Users/lij/.vim/stl/stl_rope.h	/^      static void _S_fn_finalization_proc(void * __tree, void *) {$/;"	f	struct:_Rope_RopeFunction	access:public	signature:(void * __tree, void *)
_S_free_if_unref	/Users/lij/.vim/stl/stl_rope.h	/^          static void _S_free_if_unref(_Rope_RopeRep* __t)$/;"	f	struct:_Rope_RopeRep	access:public	signature:(_Rope_RopeRep* __t)
_S_free_if_unref	/Users/lij/.vim/stl/stl_rope.h	/^          static void _S_free_if_unref(_Rope_RopeRep*) {}$/;"	f	struct:_Rope_RopeRep	access:public	signature:(_Rope_RopeRep*)
_S_free_list	/Users/lij/.vim/stl/stl_alloc.h	/^    static _Obj* __STL_VOLATILE _S_free_list[]; $/;"	m	class:__default_alloc_template	access:private
_S_free_list	/Users/lij/.vim/stl/stl_alloc.h	/^    static _Obj* __STL_VOLATILE _S_free_list[_NFREELISTS]; $/;"	m	class:__default_alloc_template	access:private
_S_free_list	/Users/lij/.vim/stl/stl_alloc.h	/^__default_alloc_template<__threads, __inst> ::_S_free_list[$/;"	m	class:__default_alloc_template
_S_free_per_thread_states	/Users/lij/.vim/stl/pthread_alloc	/^  static _Pthread_alloc_per_thread_state<_Max_size>* _S_free_per_thread_states;$/;"	m	class:_Pthread_alloc_template	file:	access:private
_S_free_per_thread_states	/Users/lij/.vim/stl/pthread_alloc	/^_Pthread_alloc_template<_Max_size>::_S_free_per_thread_states = 0;$/;"	m	class:_Pthread_alloc_template	file:
_S_free_string	/Users/lij/.vim/stl/ropeimpl.h	/^  inline void _Rope_RopeRep<_CharT,_Alloc>::_S_free_string$/;"	f	class:_Rope_RopeRep	signature:(const _CharT*, size_t, allocator_type)
_S_free_string	/Users/lij/.vim/stl/ropeimpl.h	/^  inline void _Rope_RopeRep<_CharT,_Alloc>::_S_free_string(_CharT* __s,$/;"	f	class:_Rope_RopeRep	signature:(_CharT* __s, size_t __n, allocator_type __a)
_S_free_string	/Users/lij/.vim/stl/stl_rope.h	/^        static void _S_free_string(__GC_CONST _CharT*, size_t __len);$/;"	p	struct:_Rope_RopeRep	access:public	signature:(__GC_CONST _CharT*, size_t __len)
_S_free_string	/Users/lij/.vim/stl/stl_rope.h	/^        static void _S_free_string(__GC_CONST _CharT*, size_t __len,$/;"	p	struct:_Rope_RopeRep	access:public	signature:(__GC_CONST _CharT*, size_t __len, allocator_type __a)
_S_freelist_index	/Users/lij/.vim/stl/pthread_alloc	/^  static size_t _S_freelist_index(size_t __bytes) {$/;"	f	class:_Pthread_alloc_template	access:public	signature:(size_t __bytes)
_S_freelist_index	/Users/lij/.vim/stl/stl_alloc.h	/^  static  size_t _S_freelist_index(size_t __bytes) {$/;"	f	class:__default_alloc_template	access:private	signature:(size_t __bytes)
_S_function	/Users/lij/.vim/stl/stl_rope.h	/^    enum _Tag {_S_leaf, _S_concat, _S_substringfn, _S_function};$/;"	e	enum:_Rope_RopeRep::_Tag
_S_get_per_thread_state	/Users/lij/.vim/stl/pthread_alloc	/^  static _Pthread_alloc_per_thread_state<_Max_size> *_S_get_per_thread_state();$/;"	p	class:_Pthread_alloc_template	file:	access:private	signature:()
_S_get_per_thread_state	/Users/lij/.vim/stl/pthread_alloc	/^_Pthread_alloc_template<_Max_size>::_S_get_per_thread_state()$/;"	f	class:_Pthread_alloc_template	signature:()
_S_heap_size	/Users/lij/.vim/stl/pthread_alloc	/^  static size_t _S_heap_size;$/;"	m	class:_Pthread_alloc_template	file:	access:private
_S_heap_size	/Users/lij/.vim/stl/pthread_alloc	/^::_S_heap_size = 0;$/;"	m	class:_Pthread_alloc_template	file:
_S_heap_size	/Users/lij/.vim/stl/stl_alloc.h	/^  static size_t _S_heap_size;$/;"	m	class:__default_alloc_template	access:private
_S_heap_size	/Users/lij/.vim/stl/stl_alloc.h	/^size_t __default_alloc_template<__threads, __inst>::_S_heap_size = 0;$/;"	m	class:__default_alloc_template
_S_initial_map_size	/Users/lij/.vim/stl/stl_deque.h	/^  enum { _S_initial_map_size = 8 };$/;"	e	enum:_Deque_base::__anon18
_S_initial_map_size	/Users/lij/.vim/stl/stl_deque.h	/^  enum { _S_initial_map_size = 8 };$/;"	e	enum:_Deque_base::__anon19
_S_instanceless	/Users/lij/.vim/stl/pthread_alloc	/^  static const bool _S_instanceless = true;$/;"	m	struct:_Alloc_traits	file:	access:public
_S_is0	/Users/lij/.vim/stl/stl_rope.h	/^        static bool _S_is0(_CharT __c) { return __c == _S_eos((_CharT*)0); }$/;"	f	class:rope	access:protected	signature:(_CharT __c)
_S_is_almost_balanced	/Users/lij/.vim/stl/stl_rope.h	/^        static bool _S_is_almost_balanced(_RopeRep* __r)$/;"	f	class:rope	access:private	signature:(_RopeRep* __r)
_S_is_balanced	/Users/lij/.vim/stl/stl_rope.h	/^        static bool _S_is_balanced(_RopeRep* __r)$/;"	f	class:rope	access:private	signature:(_RopeRep* __r)
_S_is_basic_char_type	/Users/lij/.vim/stl/stl_rope.h	/^inline bool _S_is_basic_char_type(_CharT*) { return false; }$/;"	f	signature:(_CharT*)
_S_is_basic_char_type	/Users/lij/.vim/stl/stl_rope.h	/^inline bool _S_is_basic_char_type(char*) { return true; }$/;"	f	signature:(char*)
_S_is_basic_char_type	/Users/lij/.vim/stl/stl_rope.h	/^inline bool _S_is_basic_char_type(wchar_t*) { return true; }$/;"	f	signature:(wchar_t*)
_S_is_one_byte_char_type	/Users/lij/.vim/stl/stl_rope.h	/^inline bool _S_is_one_byte_char_type(_CharT*) { return false; }$/;"	f	signature:(_CharT*)
_S_is_one_byte_char_type	/Users/lij/.vim/stl/stl_rope.h	/^inline bool _S_is_one_byte_char_type(char*) { return true; }$/;"	f	signature:(char*)
_S_is_roughly_balanced	/Users/lij/.vim/stl/stl_rope.h	/^        static bool _S_is_roughly_balanced(_RopeRep* __r)$/;"	f	class:rope	access:private	signature:(_RopeRep* __r)
_S_iterator_buf_len	/Users/lij/.vim/stl/stl_rope.h	/^    enum { _S_iterator_buf_len = 15 };$/;"	e	enum:_Rope_iterator_base::__anon24
_S_key	/Users/lij/.vim/stl/pthread_alloc	/^  static pthread_key_t _S_key;$/;"	m	class:_Pthread_alloc_template	file:	access:private
_S_key	/Users/lij/.vim/stl/pthread_alloc	/^pthread_key_t _Pthread_alloc_template<_Max_size>::_S_key;$/;"	m	class:_Pthread_alloc_template	file:
_S_key	/Users/lij/.vim/stl/stl_tree.h	/^  static const _Key& _S_key(_Base_ptr __x)$/;"	f	class:_Rb_tree	access:protected	signature:(_Base_ptr __x)
_S_key	/Users/lij/.vim/stl/stl_tree.h	/^  static const _Key& _S_key(_Link_type __x)$/;"	f	class:_Rb_tree	access:protected	signature:(_Link_type __x)
_S_key_initialized	/Users/lij/.vim/stl/pthread_alloc	/^  static bool _S_key_initialized;$/;"	m	class:_Pthread_alloc_template	file:	access:private
_S_key_initialized	/Users/lij/.vim/stl/pthread_alloc	/^bool _Pthread_alloc_template<_Max_size>::_S_key_initialized = false;$/;"	m	class:_Pthread_alloc_template	file:
_S_leaf	/Users/lij/.vim/stl/stl_rope.h	/^    enum _Tag {_S_leaf, _S_concat, _S_substringfn, _S_function};$/;"	e	enum:_Rope_RopeRep::_Tag
_S_leaf_concat_char_iter	/Users/lij/.vim/stl/ropeimpl.h	/^rope<_CharT,_Alloc>::_S_leaf_concat_char_iter$/;"	f	class:rope	signature:(_RopeLeaf* __r, const _CharT* __iter, size_t __len)
_S_leaf_concat_char_iter	/Users/lij/.vim/stl/stl_rope.h	/^        _S_leaf_concat_char_iter(_RopeLeaf* __r,$/;"	p	class:rope	access:protected	signature:(_RopeLeaf* __r, const _CharT* __iter, size_t __slen)
_S_left	/Users/lij/.vim/stl/stl_tree.h	/^  static _Link_type& _S_left(_Base_ptr __x)$/;"	f	class:_Rb_tree	access:protected	signature:(_Base_ptr __x)
_S_left	/Users/lij/.vim/stl/stl_tree.h	/^  static _Link_type& _S_left(_Link_type __x)$/;"	f	class:_Rb_tree	access:protected	signature:(_Link_type __x)
_S_maskbit	/Users/lij/.vim/stl/bitset	/^  static _WordT _S_maskbit( size_t __pos )$/;"	f	struct:_Base_bitset	access:public	signature:( size_t __pos )
_S_max_rope_depth	/Users/lij/.vim/stl/stl_rope.h	/^    enum { _S_max_rope_depth = 45 };$/;"	e	enum:_Rope_RopeRep::__anon21
_S_maximum	/Users/lij/.vim/stl/stl_tree.h	/^  static _Base_ptr _S_maximum(_Base_ptr __x)$/;"	f	struct:_Rb_tree_node_base	access:public	signature:(_Base_ptr __x)
_S_maximum	/Users/lij/.vim/stl/stl_tree.h	/^  static _Link_type _S_maximum(_Link_type __x)$/;"	f	class:_Rb_tree	access:protected	signature:(_Link_type __x)
_S_min_len	/Users/lij/.vim/stl/ropeimpl.h	/^rope<_CharT,_Alloc>::_S_min_len[$/;"	m	class:rope
_S_min_len	/Users/lij/.vim/stl/stl_rope.h	/^          _S_min_len[_RopeRep::_S_max_rope_depth + 1];$/;"	m	class:rope	access:private
_S_minimum	/Users/lij/.vim/stl/stl_tree.h	/^  static _Base_ptr _S_minimum(_Base_ptr __x)$/;"	f	struct:_Rb_tree_node_base	access:public	signature:(_Base_ptr __x)
_S_minimum	/Users/lij/.vim/stl/stl_tree.h	/^  static _Link_type _S_minimum(_Link_type __x) $/;"	f	class:_Rb_tree	access:protected	signature:(_Link_type __x)
_S_new_RopeConcatenation	/Users/lij/.vim/stl/stl_rope.h	/^        static _RopeConcatenation* _S_new_RopeConcatenation($/;"	f	class:rope	access:protected	signature:( _RopeRep* __left, _RopeRep* __right, allocator_type __a)
_S_new_RopeFunction	/Users/lij/.vim/stl/stl_rope.h	/^        static _RopeFunction* _S_new_RopeFunction(char_producer<_CharT>* __f,$/;"	f	class:rope	access:protected	signature:(char_producer<_CharT>* __f, size_t __size, bool __d, allocator_type __a)
_S_new_RopeLeaf	/Users/lij/.vim/stl/stl_rope.h	/^        static _RopeLeaf* _S_new_RopeLeaf(__GC_CONST _CharT *__s,$/;"	f	class:rope	access:protected	signature:(__GC_CONST _CharT *__s, size_t __size, allocator_type __a)
_S_new_RopeSubstring	/Users/lij/.vim/stl/stl_rope.h	/^        static _RopeSubstring* _S_new_RopeSubstring($/;"	f	class:rope	access:protected	signature:( _Rope_RopeRep<_CharT,_Alloc>* __b, size_t __s, size_t __l, allocator_type __a)
_S_new_per_thread_state	/Users/lij/.vim/stl/pthread_alloc	/^  static _Pthread_alloc_per_thread_state<_Max_size> *_S_new_per_thread_state();$/;"	p	class:_Pthread_alloc_template	file:	access:private	signature:()
_S_new_per_thread_state	/Users/lij/.vim/stl/pthread_alloc	/^_Pthread_alloc_template<_Max_size>::_S_new_per_thread_state()$/;"	f	class:_Pthread_alloc_template	signature:()
_S_node_allocator_lock	/Users/lij/.vim/stl/stl_alloc.h	/^    static _STL_mutex_lock _S_node_allocator_lock;$/;"	m	class:__default_alloc_template	access:private
_S_nsec_sleep	/Users/lij/.vim/stl/stl_threads.h	/^  static void _S_nsec_sleep(int __log_nsec) {$/;"	f	struct:_STL_mutex_lock	access:public	signature:(int __log_nsec)
_S_oom_malloc	/Users/lij/.vim/stl/stl_alloc.h	/^  static void* _S_oom_malloc(size_t);$/;"	p	class:__malloc_alloc_template	access:private	signature:(size_t)
_S_oom_malloc	/Users/lij/.vim/stl/stl_alloc.h	/^__malloc_alloc_template<__inst>::_S_oom_malloc(size_t __n)$/;"	f	class:__malloc_alloc_template	signature:(size_t __n)
_S_oom_realloc	/Users/lij/.vim/stl/stl_alloc.h	/^  static void* _S_oom_realloc(void*, size_t);$/;"	p	class:__malloc_alloc_template	access:private	signature:(void*, size_t)
_S_oom_realloc	/Users/lij/.vim/stl/stl_alloc.h	/^void* __malloc_alloc_template<__inst>::_S_oom_realloc(void* __p, size_t __n)$/;"	f	class:__malloc_alloc_template	signature:(void* __p, size_t __n)
_S_parent	/Users/lij/.vim/stl/stl_tree.h	/^  static _Link_type& _S_parent(_Base_ptr __x)$/;"	f	class:_Rb_tree	access:protected	signature:(_Base_ptr __x)
_S_parent	/Users/lij/.vim/stl/stl_tree.h	/^  static _Link_type& _S_parent(_Link_type __x)$/;"	f	class:_Rb_tree	access:protected	signature:(_Link_type __x)
_S_path_cache_len	/Users/lij/.vim/stl/stl_rope.h	/^    enum { _S_path_cache_len = 4 }; \/\/ Must be <= 9.$/;"	e	enum:_Rope_iterator_base::__anon23
_S_rb_tree_black	/Users/lij/.vim/stl/stl_tree.h	/^const _Rb_tree_Color_type _S_rb_tree_black = true;$/;"	v
_S_rb_tree_red	/Users/lij/.vim/stl/stl_tree.h	/^const _Rb_tree_Color_type _S_rb_tree_red = false;$/;"	v
_S_ref	/Users/lij/.vim/stl/stl_rope.h	/^          static void _S_ref(_RopeRep* __t)$/;"	f	class:rope	access:protected	signature:(_RopeRep* __t)
_S_ref	/Users/lij/.vim/stl/stl_rope.h	/^          static void _S_ref(_RopeRep*) {}$/;"	f	class:rope	access:protected	signature:(_RopeRep*)
_S_ref	/Users/lij/.vim/stl/stl_rope.h	/^          static void _S_ref(_Rope_RopeRep* __t)$/;"	f	struct:_Rope_RopeRep	access:public	signature:(_Rope_RopeRep* __t)
_S_ref	/Users/lij/.vim/stl/stl_rope.h	/^          static void _S_ref(_Rope_RopeRep*) {}$/;"	f	struct:_Rope_RopeRep	access:public	signature:(_Rope_RopeRep*)
_S_refill	/Users/lij/.vim/stl/stl_alloc.h	/^  static void* _S_refill(size_t __n);$/;"	p	class:__default_alloc_template	access:private	signature:(size_t __n)
_S_refill	/Users/lij/.vim/stl/stl_alloc.h	/^__default_alloc_template<__threads, __inst>::_S_refill(size_t __n)$/;"	f	class:__default_alloc_template	signature:(size_t __n)
_S_right	/Users/lij/.vim/stl/stl_tree.h	/^  static _Link_type& _S_right(_Base_ptr __x)$/;"	f	class:_Rb_tree	access:protected	signature:(_Base_ptr __x)
_S_right	/Users/lij/.vim/stl/stl_tree.h	/^  static _Link_type& _S_right(_Link_type __x)$/;"	f	class:_Rb_tree	access:protected	signature:(_Link_type __x)
_S_round_up	/Users/lij/.vim/stl/pthread_alloc	/^  static size_t _S_round_up(size_t __bytes) {$/;"	f	class:_Pthread_alloc_template	access:public	signature:(size_t __bytes)
_S_round_up	/Users/lij/.vim/stl/stl_alloc.h	/^  _S_round_up(size_t __bytes) $/;"	f	class:__default_alloc_template	access:private	signature:(size_t __bytes)
_S_rounded_up_size	/Users/lij/.vim/stl/stl_rope.h	/^        static size_t _S_rounded_up_size(size_t __n) {$/;"	f	class:rope	access:protected	signature:(size_t __n)
_S_rounded_up_size	/Users/lij/.vim/stl/stl_rope.h	/^    static size_t _S_rounded_up_size(size_t __n) {$/;"	f	struct:_Rope_RopeLeaf	access:public	signature:(size_t __n)
_S_setbuf	/Users/lij/.vim/stl/ropeimpl.h	/^void _Rope_iterator_base<_CharT,_Alloc>::_S_setbuf( $/;"	f	class:_Rope_iterator_base	signature:( _Rope_iterator_base<_CharT,_Alloc>& __x)
_S_setbuf	/Users/lij/.vim/stl/stl_rope.h	/^    static void _S_setbuf(_Rope_iterator_base& __x);$/;"	p	class:_Rope_iterator_base	access:protected	signature:(_Rope_iterator_base& __x)
_S_setcache	/Users/lij/.vim/stl/ropeimpl.h	/^void _Rope_iterator_base<_CharT,_Alloc>::_S_setcache$/;"	f	class:_Rope_iterator_base	signature:(_Rope_iterator_base<_CharT,_Alloc>& __x)
_S_setcache	/Users/lij/.vim/stl/stl_rope.h	/^    static void _S_setcache(_Rope_iterator_base& __x);$/;"	p	class:_Rope_iterator_base	access:protected	signature:(_Rope_iterator_base& __x)
_S_setcache_for_incr	/Users/lij/.vim/stl/ropeimpl.h	/^void _Rope_iterator_base<_CharT,_Alloc>::_S_setcache_for_incr$/;"	f	class:_Rope_iterator_base	signature:(_Rope_iterator_base<_CharT,_Alloc>& __x)
_S_setcache_for_incr	/Users/lij/.vim/stl/stl_rope.h	/^    static void _S_setcache_for_incr(_Rope_iterator_base& __x);$/;"	p	class:_Rope_iterator_base	access:protected	signature:(_Rope_iterator_base& __x)
_S_start_free	/Users/lij/.vim/stl/pthread_alloc	/^  static char *_S_start_free;$/;"	m	class:_Pthread_alloc_template	file:	access:private
_S_start_free	/Users/lij/.vim/stl/pthread_alloc	/^::_S_start_free = 0;$/;"	m	class:_Pthread_alloc_template	file:
_S_start_free	/Users/lij/.vim/stl/stl_alloc.h	/^  static char* _S_start_free;$/;"	m	class:__default_alloc_template	access:private
_S_start_free	/Users/lij/.vim/stl/stl_alloc.h	/^char* __default_alloc_template<__threads, __inst>::_S_start_free = 0;$/;"	m	class:__default_alloc_template
_S_string_copy	/Users/lij/.vim/stl/string	/^void _S_string_copy(const basic_string<_CharT,_Traits,_Alloc>& __s,$/;"	f	signature:(const basic_string<_CharT,_Traits,_Alloc>& __s, _CharT* __buf, size_t __n)
_S_substring	/Users/lij/.vim/stl/ropeimpl.h	/^rope<_CharT,_Alloc>::_S_substring(_RopeRep* __base, $/;"	f	class:rope	signature:(_RopeRep* __base, size_t __start, size_t __endp1)
_S_substring	/Users/lij/.vim/stl/stl_rope.h	/^        static _RopeRep* _S_substring(_RopeRep* __base,$/;"	p	class:rope	access:protected	signature:(_RopeRep* __base, size_t __start, size_t __endp1)
_S_substringfn	/Users/lij/.vim/stl/stl_rope.h	/^    enum _Tag {_S_leaf, _S_concat, _S_substringfn, _S_function};$/;"	e	enum:_Rope_RopeRep::_Tag
_S_swap_lock	/Users/lij/.vim/stl/stl_threads.h	/^        static mutex_t _S_swap_lock;$/;"	m	struct:_Swap_lock_struct	access:public
_S_swap_lock	/Users/lij/.vim/stl/stl_threads.h	/^        static pthread_mutex_t _S_swap_lock;$/;"	m	struct:_Swap_lock_struct	access:public
_S_swap_lock	/Users/lij/.vim/stl/stl_threads.h	/^    _Swap_lock_struct<__dummy>::_S_swap_lock = DEFAULTMUTEX;$/;"	m	class:_Swap_lock_struct
_S_swap_lock	/Users/lij/.vim/stl/stl_threads.h	/^    _Swap_lock_struct<__dummy>::_S_swap_lock = PTHREAD_MUTEX_INITIALIZER;$/;"	m	class:_Swap_lock_struct
_S_tree_concat	/Users/lij/.vim/stl/ropeimpl.h	/^rope<_CharT,_Alloc>::_S_tree_concat (_RopeRep* __left, _RopeRep* __right)$/;"	f	class:rope	signature:(_RopeRep* __left, _RopeRep* __right)
_S_tree_concat	/Users/lij/.vim/stl/stl_rope.h	/^        _S_tree_concat(_RopeRep* __left, _RopeRep* __right);$/;"	p	class:rope	access:protected	signature:(_RopeRep* __left, _RopeRep* __right)
_S_unref	/Users/lij/.vim/stl/stl_rope.h	/^          static void _S_unref(_RopeRep* __t)$/;"	f	class:rope	access:protected	signature:(_RopeRep* __t)
_S_unref	/Users/lij/.vim/stl/stl_rope.h	/^          static void _S_unref(_RopeRep*) {}$/;"	f	class:rope	access:protected	signature:(_RopeRep*)
_S_unref	/Users/lij/.vim/stl/stl_rope.h	/^          static void _S_unref(_Rope_RopeRep* __t)$/;"	f	struct:_Rope_RopeRep	access:public	signature:(_Rope_RopeRep* __t)
_S_unref	/Users/lij/.vim/stl/stl_rope.h	/^          static void _S_unref(_Rope_RopeRep*) {}$/;"	f	struct:_Rope_RopeRep	access:public	signature:(_Rope_RopeRep*)
_S_value	/Users/lij/.vim/stl/stl_tree.h	/^  static reference _S_value(_Base_ptr __x)$/;"	f	class:_Rb_tree	access:protected	signature:(_Base_ptr __x)
_S_value	/Users/lij/.vim/stl/stl_tree.h	/^  static reference _S_value(_Link_type __x)$/;"	f	class:_Rb_tree	access:protected	signature:(_Link_type __x)
_S_whichbit	/Users/lij/.vim/stl/bitset	/^  static size_t _S_whichbit( size_t __pos )$/;"	f	struct:_Base_bitset	access:public	signature:( size_t __pos )
_S_whichbyte	/Users/lij/.vim/stl/bitset	/^  static size_t _S_whichbyte( size_t __pos )$/;"	f	struct:_Base_bitset	access:public	signature:( size_t __pos )
_S_whichword	/Users/lij/.vim/stl/bitset	/^  static size_t _S_whichword( size_t __pos )$/;"	f	struct:_Base_bitset	access:public	signature:( size_t __pos )
_Sanitize	/Users/lij/.vim/stl/bitset	/^__STL_TEMPLATE_NULL struct _Sanitize<0> {$/;"	s	file:
_Sanitize	/Users/lij/.vim/stl/bitset	/^template <size_t _Extrabits> struct _Sanitize {$/;"	s	file:
_Sanitize::_M_do_sanitize	/Users/lij/.vim/stl/bitset	/^  static void _M_do_sanitize(unsigned long& __val)$/;"	f	struct:_Sanitize	access:public	signature:(unsigned long& __val)
_Sanitize::_M_do_sanitize	/Users/lij/.vim/stl/bitset	/^  static void _M_do_sanitize(unsigned long) {}$/;"	f	struct:_Sanitize	access:public	signature:(unsigned long)
_Select1st	/Users/lij/.vim/stl/stl_function.h	/^struct _Select1st : public unary_function<_Pair, typename _Pair::first_type> {$/;"	s	inherits:unary_function
_Select1st::operator ()	/Users/lij/.vim/stl/stl_function.h	/^  const typename _Pair::first_type& operator()(const _Pair& __x) const {$/;"	f	struct:_Select1st	access:public	signature:(const _Pair& __x) const
_Select2nd	/Users/lij/.vim/stl/stl_function.h	/^struct _Select2nd : public unary_function<_Pair, typename _Pair::second_type>$/;"	s	inherits:unary_function
_Select2nd::operator ()	/Users/lij/.vim/stl/stl_function.h	/^  const typename _Pair::second_type& operator()(const _Pair& __x) const {$/;"	f	struct:_Select2nd	access:public	signature:(const _Pair& __x) const
_Self	/Users/lij/.vim/stl/stl_deque.h	/^  typedef _Deque_iterator _Self;$/;"	t	struct:_Deque_iterator	access:public
_Self	/Users/lij/.vim/stl/stl_iterator.h	/^                                         _Reference, _Distance>  _Self;$/;"	t	class:reverse_bidirectional_iterator	access:private
_Self	/Users/lij/.vim/stl/stl_iterator.h	/^        _Self;$/;"	t	class:reverse_iterator	access:private
_Self	/Users/lij/.vim/stl/stl_iterator.h	/^  typedef reverse_iterator<_Iterator> _Self;$/;"	t	class:reverse_iterator	access:public
_Self	/Users/lij/.vim/stl/stl_list.h	/^  typedef _List_iterator<_Tp,_Ref,_Ptr>             _Self;$/;"	t	struct:_List_iterator	access:public
_Self	/Users/lij/.vim/stl/stl_slist.h	/^  typedef _Slist_iterator<_Tp, _Ref, _Ptr>             _Self;$/;"	t	struct:_Slist_iterator	access:public
_Self	/Users/lij/.vim/stl/stl_tree.h	/^    _Self;$/;"	t	struct:_Rb_tree_iterator	access:public
_Self_destruct_ptr	/Users/lij/.vim/stl/stl_rope.h	/^            typedef _Rope_RopeRep<_CharT,_Alloc>* _Self_destruct_ptr;$/;"	t	class:rope	access:protected
_Self_destruct_ptr	/Users/lij/.vim/stl/stl_rope.h	/^            typedef _Rope_self_destruct_ptr<_CharT,_Alloc> _Self_destruct_ptr;$/;"	t	class:rope	access:protected
_Self_destruct_ptr	/Users/lij/.vim/stl/stl_rope.h	/^        typedef _Rope_RopeRep<_CharT,_Alloc>* _Self_destruct_ptr;$/;"	t	class:_Rope_char_ref_proxy	access:private
_Self_destruct_ptr	/Users/lij/.vim/stl/stl_rope.h	/^        typedef _Rope_self_destruct_ptr<_CharT,_Alloc> _Self_destruct_ptr;$/;"	t	class:_Rope_char_ref_proxy	access:private
_Sequence_concept_specification	/Users/lij/.vim/stl/sequence_concepts.h	/^struct _Sequence_concept_specification {$/;"	s
_Sequence_concept_specification::_Sequence_requirement_violation	/Users/lij/.vim/stl/sequence_concepts.h	/^_Sequence_requirement_violation(_Sequence __s) {$/;"	f	struct:_Sequence_concept_specification	access:public	signature:(_Sequence __s)
_Sequence_requirement_violation	/Users/lij/.vim/stl/sequence_concepts.h	/^_Sequence_requirement_violation(_Sequence __s) {$/;"	f	struct:_Sequence_concept_specification	access:public	signature:(_Sequence __s)
_Sequence_value_type	/Users/lij/.vim/stl/stl_queue.h	/^  typedef typename _Sequence::value_type _Sequence_value_type;$/;"	t	class:priority_queue	access:private
_Sequence_value_type	/Users/lij/.vim/stl/stl_queue.h	/^  typedef typename _Sequence::value_type _Sequence_value_type;$/;"	t	class:queue	access:private
_Sequence_value_type	/Users/lij/.vim/stl/stl_stack.h	/^  typedef typename _Sequence::value_type _Sequence_value_type;$/;"	t	class:stack	access:private
_Slist_alloc_base	/Users/lij/.vim/stl/stl_slist.h	/^  _Slist_alloc_base(const allocator_type& __a) : _M_node_allocator(__a) {}$/;"	f	class:_Slist_alloc_base	access:public	signature:(const allocator_type& __a)
_Slist_alloc_base	/Users/lij/.vim/stl/stl_slist.h	/^  _Slist_alloc_base(const allocator_type&) {}$/;"	f	class:_Slist_alloc_base	access:public	signature:(const allocator_type&)
_Slist_alloc_base	/Users/lij/.vim/stl/stl_slist.h	/^class _Slist_alloc_base {$/;"	c
_Slist_alloc_base	/Users/lij/.vim/stl/stl_slist.h	/^class _Slist_alloc_base<_Tp,_Allocator, true> {$/;"	c
_Slist_alloc_base::_Alloc_type	/Users/lij/.vim/stl/stl_slist.h	/^          _Alloc_type;$/;"	t	class:_Slist_alloc_base	access:protected
_Slist_alloc_base::_M_get_node	/Users/lij/.vim/stl/stl_slist.h	/^  _Slist_node<_Tp>* _M_get_node() $/;"	f	class:_Slist_alloc_base	access:protected	signature:()
_Slist_alloc_base::_M_get_node	/Users/lij/.vim/stl/stl_slist.h	/^  _Slist_node<_Tp>* _M_get_node() { return _Alloc_type::allocate(1); }$/;"	f	class:_Slist_alloc_base	access:protected	signature:()
_Slist_alloc_base::_M_head	/Users/lij/.vim/stl/stl_slist.h	/^  _Slist_node_base _M_head;$/;"	m	class:_Slist_alloc_base	access:protected
_Slist_alloc_base::_M_node_allocator	/Users/lij/.vim/stl/stl_slist.h	/^           _M_node_allocator;$/;"	m	class:_Slist_alloc_base	access:protected
_Slist_alloc_base::_M_put_node	/Users/lij/.vim/stl/stl_slist.h	/^  void _M_put_node(_Slist_node<_Tp>* __p) $/;"	f	class:_Slist_alloc_base	access:protected	signature:(_Slist_node<_Tp>* __p)
_Slist_alloc_base::_M_put_node	/Users/lij/.vim/stl/stl_slist.h	/^  void _M_put_node(_Slist_node<_Tp>* __p) { _Alloc_type::deallocate(__p, 1); }$/;"	f	class:_Slist_alloc_base	access:protected	signature:(_Slist_node<_Tp>* __p)
_Slist_alloc_base::_Slist_alloc_base	/Users/lij/.vim/stl/stl_slist.h	/^  _Slist_alloc_base(const allocator_type& __a) : _M_node_allocator(__a) {}$/;"	f	class:_Slist_alloc_base	access:public	signature:(const allocator_type& __a)
_Slist_alloc_base::_Slist_alloc_base	/Users/lij/.vim/stl/stl_slist.h	/^  _Slist_alloc_base(const allocator_type&) {}$/;"	f	class:_Slist_alloc_base	access:public	signature:(const allocator_type&)
_Slist_alloc_base::allocator_type	/Users/lij/.vim/stl/stl_slist.h	/^          allocator_type;$/;"	t	class:_Slist_alloc_base	access:public
_Slist_alloc_base::get_allocator	/Users/lij/.vim/stl/stl_slist.h	/^  allocator_type get_allocator() const { return _M_node_allocator; }$/;"	f	class:_Slist_alloc_base	access:public	signature:() const
_Slist_alloc_base::get_allocator	/Users/lij/.vim/stl/stl_slist.h	/^  allocator_type get_allocator() const { return allocator_type(); }$/;"	f	class:_Slist_alloc_base	access:public	signature:() const
_Slist_base	/Users/lij/.vim/stl/stl_slist.h	/^  _Slist_base(const allocator_type& __a)$/;"	f	struct:_Slist_base	access:public	signature:(const allocator_type& __a)
_Slist_base	/Users/lij/.vim/stl/stl_slist.h	/^  _Slist_base(const allocator_type&) { _M_head._M_next = 0; }$/;"	f	struct:_Slist_base	access:public	signature:(const allocator_type&)
_Slist_base	/Users/lij/.vim/stl/stl_slist.h	/^struct _Slist_base {$/;"	s
_Slist_base	/Users/lij/.vim/stl/stl_slist.h	/^struct _Slist_base$/;"	s	inherits:_Slist_alloc_base
_Slist_base::_Alloc_type	/Users/lij/.vim/stl/stl_slist.h	/^  typedef simple_alloc<_Slist_node<_Tp>, _Alloc> _Alloc_type;$/;"	t	struct:_Slist_base	access:protected
_Slist_base::_Base	/Users/lij/.vim/stl/stl_slist.h	/^          _Base;$/;"	t	struct:_Slist_base	access:public
_Slist_base::_M_erase_after	/Users/lij/.vim/stl/stl_slist.h	/^  _Slist_node_base* _M_erase_after(_Slist_node_base* __pos)$/;"	f	struct:_Slist_base	access:protected	signature:(_Slist_node_base* __pos)
_Slist_base::_M_erase_after	/Users/lij/.vim/stl/stl_slist.h	/^  _Slist_node_base* _M_erase_after(_Slist_node_base*, _Slist_node_base*);$/;"	p	struct:_Slist_base	access:protected	signature:(_Slist_node_base*, _Slist_node_base*)
_Slist_base::_M_erase_after	/Users/lij/.vim/stl/stl_slist.h	/^_Slist_base<_Tp,_Alloc>::_M_erase_after(_Slist_node_base* __before_first,$/;"	f	class:_Slist_base	signature:(_Slist_node_base* __before_first, _Slist_node_base* __last_node)
_Slist_base::_M_get_node	/Users/lij/.vim/stl/stl_slist.h	/^  _Slist_node<_Tp>* _M_get_node() { return _Alloc_type::allocate(1); }$/;"	f	struct:_Slist_base	access:protected	signature:()
_Slist_base::_M_head	/Users/lij/.vim/stl/stl_slist.h	/^  _Slist_node_base _M_head;$/;"	m	struct:_Slist_base	access:protected
_Slist_base::_M_put_node	/Users/lij/.vim/stl/stl_slist.h	/^  void _M_put_node(_Slist_node<_Tp>* __p) { _Alloc_type::deallocate(__p, 1); }$/;"	f	struct:_Slist_base	access:protected	signature:(_Slist_node<_Tp>* __p)
_Slist_base::_Slist_base	/Users/lij/.vim/stl/stl_slist.h	/^  _Slist_base(const allocator_type& __a)$/;"	f	struct:_Slist_base	access:public	signature:(const allocator_type& __a)
_Slist_base::_Slist_base	/Users/lij/.vim/stl/stl_slist.h	/^  _Slist_base(const allocator_type&) { _M_head._M_next = 0; }$/;"	f	struct:_Slist_base	access:public	signature:(const allocator_type&)
_Slist_base::allocator_type	/Users/lij/.vim/stl/stl_slist.h	/^  typedef _Alloc allocator_type;$/;"	t	struct:_Slist_base	access:public
_Slist_base::allocator_type	/Users/lij/.vim/stl/stl_slist.h	/^  typedef typename _Base::allocator_type allocator_type;$/;"	t	struct:_Slist_base	access:public
_Slist_base::get_allocator	/Users/lij/.vim/stl/stl_slist.h	/^  allocator_type get_allocator() const { return allocator_type(); }$/;"	f	struct:_Slist_base	access:public	signature:() const
_Slist_base::~_Slist_base	/Users/lij/.vim/stl/stl_slist.h	/^  ~_Slist_base() { _M_erase_after(&_M_head, 0); }$/;"	f	struct:_Slist_base	access:public	signature:()
_Slist_base::~_Slist_base	/Users/lij/.vim/stl/stl_slist.h	/^  ~_Slist_base() { _M_erase_after(&this->_M_head, 0); }$/;"	f	struct:_Slist_base	access:public	signature:()
_Slist_iterator	/Users/lij/.vim/stl/stl_slist.h	/^  _Slist_iterator() : _Slist_iterator_base(0) {}$/;"	f	struct:_Slist_iterator	access:public	signature:()
_Slist_iterator	/Users/lij/.vim/stl/stl_slist.h	/^  _Slist_iterator(_Node* __x) : _Slist_iterator_base(__x) {}$/;"	f	struct:_Slist_iterator	access:public	signature:(_Node* __x)
_Slist_iterator	/Users/lij/.vim/stl/stl_slist.h	/^  _Slist_iterator(const iterator& __x) : _Slist_iterator_base(__x._M_node) {}$/;"	f	struct:_Slist_iterator	access:public	signature:(const iterator& __x)
_Slist_iterator	/Users/lij/.vim/stl/stl_slist.h	/^struct _Slist_iterator : public _Slist_iterator_base$/;"	s	inherits:_Slist_iterator_base
_Slist_iterator::_Node	/Users/lij/.vim/stl/stl_slist.h	/^  typedef _Slist_node<_Tp> _Node;$/;"	t	struct:_Slist_iterator	access:public
_Slist_iterator::_Self	/Users/lij/.vim/stl/stl_slist.h	/^  typedef _Slist_iterator<_Tp, _Ref, _Ptr>             _Self;$/;"	t	struct:_Slist_iterator	access:public
_Slist_iterator::_Slist_iterator	/Users/lij/.vim/stl/stl_slist.h	/^  _Slist_iterator() : _Slist_iterator_base(0) {}$/;"	f	struct:_Slist_iterator	access:public	signature:()
_Slist_iterator::_Slist_iterator	/Users/lij/.vim/stl/stl_slist.h	/^  _Slist_iterator(_Node* __x) : _Slist_iterator_base(__x) {}$/;"	f	struct:_Slist_iterator	access:public	signature:(_Node* __x)
_Slist_iterator::_Slist_iterator	/Users/lij/.vim/stl/stl_slist.h	/^  _Slist_iterator(const iterator& __x) : _Slist_iterator_base(__x._M_node) {}$/;"	f	struct:_Slist_iterator	access:public	signature:(const iterator& __x)
_Slist_iterator::const_iterator	/Users/lij/.vim/stl/stl_slist.h	/^  typedef _Slist_iterator<_Tp, const _Tp&, const _Tp*> const_iterator;$/;"	t	struct:_Slist_iterator	access:public
_Slist_iterator::iterator	/Users/lij/.vim/stl/stl_slist.h	/^  typedef _Slist_iterator<_Tp, _Tp&, _Tp*>             iterator;$/;"	t	struct:_Slist_iterator	access:public
_Slist_iterator::operator *	/Users/lij/.vim/stl/stl_slist.h	/^  reference operator*() const { return ((_Node*) _M_node)->_M_data; }$/;"	f	struct:_Slist_iterator	access:public	signature:() const
_Slist_iterator::operator ++	/Users/lij/.vim/stl/stl_slist.h	/^  _Self operator++(int)$/;"	f	struct:_Slist_iterator	access:public	signature:(int)
_Slist_iterator::operator ++	/Users/lij/.vim/stl/stl_slist.h	/^  _Self& operator++()$/;"	f	struct:_Slist_iterator	access:public	signature:()
_Slist_iterator::operator ->	/Users/lij/.vim/stl/stl_slist.h	/^  pointer operator->() const { return &(operator*()); }$/;"	f	struct:_Slist_iterator	access:public	signature:() const
_Slist_iterator::pointer	/Users/lij/.vim/stl/stl_slist.h	/^  typedef _Ptr             pointer;$/;"	t	struct:_Slist_iterator	access:public
_Slist_iterator::reference	/Users/lij/.vim/stl/stl_slist.h	/^  typedef _Ref             reference;$/;"	t	struct:_Slist_iterator	access:public
_Slist_iterator::value_type	/Users/lij/.vim/stl/stl_slist.h	/^  typedef _Tp              value_type;$/;"	t	struct:_Slist_iterator	access:public
_Slist_iterator_base	/Users/lij/.vim/stl/stl_slist.h	/^  _Slist_iterator_base(_Slist_node_base* __x) : _M_node(__x) {}$/;"	f	struct:_Slist_iterator_base	access:public	signature:(_Slist_node_base* __x)
_Slist_iterator_base	/Users/lij/.vim/stl/stl_slist.h	/^struct _Slist_iterator_base$/;"	s
_Slist_iterator_base::_M_incr	/Users/lij/.vim/stl/stl_slist.h	/^  void _M_incr() { _M_node = _M_node->_M_next; }$/;"	f	struct:_Slist_iterator_base	access:public	signature:()
_Slist_iterator_base::_M_node	/Users/lij/.vim/stl/stl_slist.h	/^  _Slist_node_base* _M_node;$/;"	m	struct:_Slist_iterator_base	access:public
_Slist_iterator_base::_Slist_iterator_base	/Users/lij/.vim/stl/stl_slist.h	/^  _Slist_iterator_base(_Slist_node_base* __x) : _M_node(__x) {}$/;"	f	struct:_Slist_iterator_base	access:public	signature:(_Slist_node_base* __x)
_Slist_iterator_base::difference_type	/Users/lij/.vim/stl/stl_slist.h	/^  typedef ptrdiff_t            difference_type;$/;"	t	struct:_Slist_iterator_base	access:public
_Slist_iterator_base::iterator_category	/Users/lij/.vim/stl/stl_slist.h	/^  typedef forward_iterator_tag iterator_category;$/;"	t	struct:_Slist_iterator_base	access:public
_Slist_iterator_base::operator !=	/Users/lij/.vim/stl/stl_slist.h	/^  bool operator!=(const _Slist_iterator_base& __x) const {$/;"	f	struct:_Slist_iterator_base	access:public	signature:(const _Slist_iterator_base& __x) const
_Slist_iterator_base::operator ==	/Users/lij/.vim/stl/stl_slist.h	/^  bool operator==(const _Slist_iterator_base& __x) const {$/;"	f	struct:_Slist_iterator_base	access:public	signature:(const _Slist_iterator_base& __x) const
_Slist_iterator_base::size_type	/Users/lij/.vim/stl/stl_slist.h	/^  typedef size_t               size_type;$/;"	t	struct:_Slist_iterator_base	access:public
_Slist_node	/Users/lij/.vim/stl/stl_slist.h	/^struct _Slist_node : public _Slist_node_base$/;"	s	inherits:_Slist_node_base
_Slist_node::_M_data	/Users/lij/.vim/stl/stl_slist.h	/^  _Tp _M_data;$/;"	m	struct:_Slist_node	access:public
_Slist_node_base	/Users/lij/.vim/stl/stl_slist.h	/^struct _Slist_node_base$/;"	s
_Slist_node_base::_M_next	/Users/lij/.vim/stl/stl_slist.h	/^  _Slist_node_base* _M_next;$/;"	m	struct:_Slist_node_base	access:public
_String_alloc_base	/Users/lij/.vim/stl/string	/^  _String_alloc_base(const allocator_type& __a)$/;"	f	class:_String_alloc_base	access:public	signature:(const allocator_type& __a)
_String_alloc_base	/Users/lij/.vim/stl/string	/^  _String_alloc_base(const allocator_type&)$/;"	f	class:_String_alloc_base	access:public	signature:(const allocator_type&)
_String_alloc_base	/Users/lij/.vim/stl/string	/^class _String_alloc_base {$/;"	c	file:
_String_alloc_base	/Users/lij/.vim/stl/string	/^class _String_alloc_base<_Tp,_Alloc,true> {$/;"	c	file:
_String_alloc_base::_Alloc_type	/Users/lij/.vim/stl/string	/^  typedef typename _Alloc_traits<_Tp, _Alloc>::_Alloc_type _Alloc_type;$/;"	t	class:_String_alloc_base	file:	access:protected
_String_alloc_base::_M_allocate	/Users/lij/.vim/stl/string	/^  _Tp* _M_allocate(size_t __n)$/;"	f	class:_String_alloc_base	access:protected	signature:(size_t __n)
_String_alloc_base::_M_data_allocator	/Users/lij/.vim/stl/string	/^  allocator_type _M_data_allocator;$/;"	m	class:_String_alloc_base	file:	access:protected
_String_alloc_base::_M_deallocate	/Users/lij/.vim/stl/string	/^  void _M_deallocate(_Tp* __p, size_t __n) {$/;"	f	class:_String_alloc_base	access:protected	signature:(_Tp* __p, size_t __n)
_String_alloc_base::_M_deallocate	/Users/lij/.vim/stl/string	/^  void _M_deallocate(_Tp* __p, size_t __n)$/;"	f	class:_String_alloc_base	access:protected	signature:(_Tp* __p, size_t __n)
_String_alloc_base::_M_end_of_storage	/Users/lij/.vim/stl/string	/^  _Tp* _M_end_of_storage;$/;"	m	class:_String_alloc_base	file:	access:protected
_String_alloc_base::_M_finish	/Users/lij/.vim/stl/string	/^  _Tp* _M_finish;$/;"	m	class:_String_alloc_base	file:	access:protected
_String_alloc_base::_M_start	/Users/lij/.vim/stl/string	/^  _Tp* _M_start;$/;"	m	class:_String_alloc_base	file:	access:protected
_String_alloc_base::_String_alloc_base	/Users/lij/.vim/stl/string	/^  _String_alloc_base(const allocator_type& __a)$/;"	f	class:_String_alloc_base	access:public	signature:(const allocator_type& __a)
_String_alloc_base::_String_alloc_base	/Users/lij/.vim/stl/string	/^  _String_alloc_base(const allocator_type&)$/;"	f	class:_String_alloc_base	access:public	signature:(const allocator_type&)
_String_alloc_base::allocator_type	/Users/lij/.vim/stl/string	/^  typedef typename _Alloc_traits<_Tp, _Alloc>::allocator_type allocator_type;$/;"	t	class:_String_alloc_base	file:	access:public
_String_alloc_base::get_allocator	/Users/lij/.vim/stl/string	/^  allocator_type get_allocator() const { return _M_data_allocator; }$/;"	f	class:_String_alloc_base	access:public	signature:() const
_String_alloc_base::get_allocator	/Users/lij/.vim/stl/string	/^  allocator_type get_allocator() const { return allocator_type(); }$/;"	f	class:_String_alloc_base	access:public	signature:() const
_String_base	/Users/lij/.vim/stl/string	/^  _String_base(const allocator_type& __a) : _Base(__a) { }$/;"	f	class:_String_base	access:protected	signature:(const allocator_type& __a)
_String_base	/Users/lij/.vim/stl/string	/^  _String_base(const allocator_type& __a, size_t __n) : _Base(__a)$/;"	f	class:_String_base	access:protected	signature:(const allocator_type& __a, size_t __n)
_String_base	/Users/lij/.vim/stl/string	/^  _String_base(const allocator_type&)$/;"	f	class:_String_base	access:protected	signature:(const allocator_type&)
_String_base	/Users/lij/.vim/stl/string	/^  _String_base(const allocator_type&, size_t __n)$/;"	f	class:_String_base	access:protected	signature:(const allocator_type&, size_t __n)
_String_base	/Users/lij/.vim/stl/string	/^class _String_base $/;"	c	file:	inherits:_String_alloc_base
_String_base	/Users/lij/.vim/stl/string	/^template <class _Tp, class _Alloc> class _String_base {$/;"	c	file:
_String_base::_Alloc_type	/Users/lij/.vim/stl/string	/^  typedef simple_alloc<_Tp, _Alloc> _Alloc_type;$/;"	t	class:_String_base	file:	access:protected
_String_base::_Base	/Users/lij/.vim/stl/string	/^          _Base;$/;"	t	class:_String_base	file:	access:protected
_String_base::_M_allocate	/Users/lij/.vim/stl/string	/^  _Tp* _M_allocate(size_t __n) { return _Alloc_type::allocate(__n); }$/;"	f	class:_String_base	access:protected	signature:(size_t __n)
_String_base::_M_allocate_block	/Users/lij/.vim/stl/string	/^  void _M_allocate_block(size_t __n) { $/;"	f	class:_String_base	access:protected	signature:(size_t __n)
_String_base::_M_deallocate	/Users/lij/.vim/stl/string	/^  void _M_deallocate(_Tp* __p, size_t __n) {$/;"	f	class:_String_base	access:protected	signature:(_Tp* __p, size_t __n)
_String_base::_M_deallocate_block	/Users/lij/.vim/stl/string	/^  void _M_deallocate_block() $/;"	f	class:_String_base	access:protected	signature:()
_String_base::_M_end_of_storage	/Users/lij/.vim/stl/string	/^  _Tp* _M_end_of_storage;$/;"	m	class:_String_base	file:	access:protected
_String_base::_M_finish	/Users/lij/.vim/stl/string	/^  _Tp* _M_finish;$/;"	m	class:_String_base	file:	access:protected
_String_base::_M_start	/Users/lij/.vim/stl/string	/^  _Tp* _M_start;$/;"	m	class:_String_base	file:	access:protected
_String_base::_M_throw_length_error	/Users/lij/.vim/stl/string	/^  void _M_throw_length_error() const;$/;"	p	class:_String_base	file:	access:protected	signature:() const
_String_base::_M_throw_length_error	/Users/lij/.vim/stl/string	/^void _String_base<_Tp,_Alloc>::_M_throw_length_error() const {$/;"	f	class:_String_base	signature:() const
_String_base::_M_throw_out_of_range	/Users/lij/.vim/stl/string	/^  void _M_throw_out_of_range() const;$/;"	p	class:_String_base	file:	access:protected	signature:() const
_String_base::_M_throw_out_of_range	/Users/lij/.vim/stl/string	/^void _String_base<_Tp, _Alloc>::_M_throw_out_of_range() const {$/;"	f	class:_String_base	signature:() const
_String_base::_String_base	/Users/lij/.vim/stl/string	/^  _String_base(const allocator_type& __a) : _Base(__a) { }$/;"	f	class:_String_base	access:protected	signature:(const allocator_type& __a)
_String_base::_String_base	/Users/lij/.vim/stl/string	/^  _String_base(const allocator_type& __a, size_t __n) : _Base(__a)$/;"	f	class:_String_base	access:protected	signature:(const allocator_type& __a, size_t __n)
_String_base::_String_base	/Users/lij/.vim/stl/string	/^  _String_base(const allocator_type&)$/;"	f	class:_String_base	access:protected	signature:(const allocator_type&)
_String_base::_String_base	/Users/lij/.vim/stl/string	/^  _String_base(const allocator_type&, size_t __n)$/;"	f	class:_String_base	access:protected	signature:(const allocator_type&, size_t __n)
_String_base::allocator_type	/Users/lij/.vim/stl/string	/^  typedef _Alloc allocator_type;$/;"	t	class:_String_base	file:	access:public
_String_base::allocator_type	/Users/lij/.vim/stl/string	/^  typedef typename _Base::allocator_type allocator_type;$/;"	t	class:_String_base	file:	access:protected
_String_base::get_allocator	/Users/lij/.vim/stl/string	/^  allocator_type get_allocator() const { return allocator_type(); }$/;"	f	class:_String_base	access:public	signature:() const
_String_base::max_size	/Users/lij/.vim/stl/string	/^  size_t max_size() const { return (size_t(-1) \/ sizeof(_Tp)) - 1; }$/;"	f	class:_String_base	access:protected	signature:() const
_String_base::~_String_base	/Users/lij/.vim/stl/string	/^  ~_String_base() { _M_deallocate_block(); }$/;"	f	class:_String_base	access:protected	signature:()
_Swap_lock_struct	/Users/lij/.vim/stl/stl_threads.h	/^    struct _Swap_lock_struct {$/;"	s
_Swap_lock_struct::_S_swap_lock	/Users/lij/.vim/stl/stl_threads.h	/^        static mutex_t _S_swap_lock;$/;"	m	struct:_Swap_lock_struct	access:public
_Swap_lock_struct::_S_swap_lock	/Users/lij/.vim/stl/stl_threads.h	/^        static pthread_mutex_t _S_swap_lock;$/;"	m	struct:_Swap_lock_struct	access:public
_Swap_lock_struct::_S_swap_lock	/Users/lij/.vim/stl/stl_threads.h	/^    _Swap_lock_struct<__dummy>::_S_swap_lock = DEFAULTMUTEX;$/;"	m	class:_Swap_lock_struct
_Swap_lock_struct::_S_swap_lock	/Users/lij/.vim/stl/stl_threads.h	/^    _Swap_lock_struct<__dummy>::_S_swap_lock = PTHREAD_MUTEX_INITIALIZER;$/;"	m	class:_Swap_lock_struct
_Tag	/Users/lij/.vim/stl/stl_rope.h	/^    enum _Tag {_S_leaf, _S_concat, _S_substringfn, _S_function};$/;"	g	struct:_Rope_RopeRep	access:public
_Temporary_buffer	/Users/lij/.vim/stl/stl_tempbuf.h	/^  _Temporary_buffer(_ForwardIterator __first, _ForwardIterator __last) {$/;"	f	class:_Temporary_buffer	access:public	signature:(_ForwardIterator __first, _ForwardIterator __last)
_Temporary_buffer	/Users/lij/.vim/stl/stl_tempbuf.h	/^  _Temporary_buffer(const _Temporary_buffer&) {}$/;"	f	class:_Temporary_buffer	access:private	signature:(const _Temporary_buffer&)
_Temporary_buffer	/Users/lij/.vim/stl/stl_tempbuf.h	/^class _Temporary_buffer {$/;"	c
_Temporary_buffer::_M_allocate_buffer	/Users/lij/.vim/stl/stl_tempbuf.h	/^  void _M_allocate_buffer() {$/;"	f	class:_Temporary_buffer	access:private	signature:()
_Temporary_buffer::_M_buffer	/Users/lij/.vim/stl/stl_tempbuf.h	/^  _Tp*       _M_buffer;$/;"	m	class:_Temporary_buffer	access:private
_Temporary_buffer::_M_initialize_buffer	/Users/lij/.vim/stl/stl_tempbuf.h	/^  void _M_initialize_buffer(const _Tp& val, __false_type) {$/;"	f	class:_Temporary_buffer	access:private	signature:(const _Tp& val, __false_type)
_Temporary_buffer::_M_initialize_buffer	/Users/lij/.vim/stl/stl_tempbuf.h	/^  void _M_initialize_buffer(const _Tp&, __true_type) {}$/;"	f	class:_Temporary_buffer	access:private	signature:(const _Tp&, __true_type)
_Temporary_buffer::_M_len	/Users/lij/.vim/stl/stl_tempbuf.h	/^  ptrdiff_t  _M_len;$/;"	m	class:_Temporary_buffer	access:private
_Temporary_buffer::_M_original_len	/Users/lij/.vim/stl/stl_tempbuf.h	/^  ptrdiff_t  _M_original_len;$/;"	m	class:_Temporary_buffer	access:private
_Temporary_buffer::_Temporary_buffer	/Users/lij/.vim/stl/stl_tempbuf.h	/^  _Temporary_buffer(_ForwardIterator __first, _ForwardIterator __last) {$/;"	f	class:_Temporary_buffer	access:public	signature:(_ForwardIterator __first, _ForwardIterator __last)
_Temporary_buffer::_Temporary_buffer	/Users/lij/.vim/stl/stl_tempbuf.h	/^  _Temporary_buffer(const _Temporary_buffer&) {}$/;"	f	class:_Temporary_buffer	access:private	signature:(const _Temporary_buffer&)
_Temporary_buffer::begin	/Users/lij/.vim/stl/stl_tempbuf.h	/^  _Tp* begin() { return _M_buffer; }$/;"	f	class:_Temporary_buffer	access:public	signature:()
_Temporary_buffer::end	/Users/lij/.vim/stl/stl_tempbuf.h	/^  _Tp* end() { return _M_buffer + _M_len; }$/;"	f	class:_Temporary_buffer	access:public	signature:()
_Temporary_buffer::operator =	/Users/lij/.vim/stl/stl_tempbuf.h	/^  void operator=(const _Temporary_buffer&) {}$/;"	f	class:_Temporary_buffer	access:private	signature:(const _Temporary_buffer&)
_Temporary_buffer::requested_size	/Users/lij/.vim/stl/stl_tempbuf.h	/^  ptrdiff_t requested_size() const { return _M_original_len; }$/;"	f	class:_Temporary_buffer	access:public	signature:() const
_Temporary_buffer::size	/Users/lij/.vim/stl/stl_tempbuf.h	/^  ptrdiff_t size() const { return _M_len; }$/;"	f	class:_Temporary_buffer	access:public	signature:() const
_Temporary_buffer::~_Temporary_buffer	/Users/lij/.vim/stl/stl_tempbuf.h	/^  ~_Temporary_buffer() {  $/;"	f	class:_Temporary_buffer	access:public	signature:()
_TrivialIterator_concept_specification	/Users/lij/.vim/stl/concept_checks.h	/^struct _TrivialIterator_concept_specification {$/;"	s
_TrivialIterator_concept_specification::_TrivialIterator_requirement_violation	/Users/lij/.vim/stl/concept_checks.h	/^_TrivialIterator_requirement_violation(_TrivialIterator __i) {$/;"	f	struct:_TrivialIterator_concept_specification	access:public	signature:(_TrivialIterator __i)
_TrivialIterator_requirement_violation	/Users/lij/.vim/stl/concept_checks.h	/^_TrivialIterator_requirement_violation(_TrivialIterator __i) {$/;"	f	struct:_TrivialIterator_concept_specification	access:public	signature:(_TrivialIterator __i)
_Type	/Users/lij/.vim/stl/concept_checks.h	/^  typedef _Tp _Type;$/;"	t	struct:_Mutable_trait	access:public
_UITHREADS	/Users/lij/.vim/stl/stl_config.h	/^#           define _UITHREADS /;"	d
_Unchecked_flip	/Users/lij/.vim/stl/bitset	/^  bitset<_Nb>& _Unchecked_flip(size_t __pos) {$/;"	f	class:bitset	access:public	signature:(size_t __pos)
_Unchecked_reset	/Users/lij/.vim/stl/bitset	/^  bitset<_Nb>& _Unchecked_reset(size_t __pos) {$/;"	f	class:bitset	access:public	signature:(size_t __pos)
_Unchecked_set	/Users/lij/.vim/stl/bitset	/^  bitset<_Nb>& _Unchecked_set(size_t __pos) {$/;"	f	class:bitset	access:public	signature:(size_t __pos)
_Unchecked_set	/Users/lij/.vim/stl/bitset	/^  bitset<_Nb>& _Unchecked_set(size_t __pos, int __val) {$/;"	f	class:bitset	access:public	signature:(size_t __pos, int __val)
_Unchecked_test	/Users/lij/.vim/stl/bitset	/^  bool _Unchecked_test(size_t __pos) const {$/;"	f	class:bitset	access:public	signature:(size_t __pos) const
_Valarray_base	/Users/lij/.vim/stl/valarray	/^  _Valarray_base() : _M_first(0), _M_size(0) {}$/;"	f	struct:_Valarray_base	access:public	signature:()
_Valarray_base	/Users/lij/.vim/stl/valarray	/^  _Valarray_base(size_t __n) : _M_first(0), _M_size(0) { _M_allocate(__n); }$/;"	f	struct:_Valarray_base	access:public	signature:(size_t __n)
_Valarray_base	/Users/lij/.vim/stl/valarray	/^struct _Valarray_base$/;"	s	file:
_Valarray_base::_M_allocate	/Users/lij/.vim/stl/valarray	/^  void _M_allocate(size_t __n) {$/;"	f	struct:_Valarray_base	access:public	signature:(size_t __n)
_Valarray_base::_M_deallocate	/Users/lij/.vim/stl/valarray	/^  void _M_deallocate() {$/;"	f	struct:_Valarray_base	access:public	signature:()
_Valarray_base::_M_first	/Users/lij/.vim/stl/valarray	/^  _Tp*   _M_first;$/;"	m	struct:_Valarray_base	file:	access:public
_Valarray_base::_M_size	/Users/lij/.vim/stl/valarray	/^  size_t _M_size;$/;"	m	struct:_Valarray_base	file:	access:public
_Valarray_base::_Valarray_base	/Users/lij/.vim/stl/valarray	/^  _Valarray_base() : _M_first(0), _M_size(0) {}$/;"	f	struct:_Valarray_base	access:public	signature:()
_Valarray_base::_Valarray_base	/Users/lij/.vim/stl/valarray	/^  _Valarray_base(size_t __n) : _M_first(0), _M_size(0) { _M_allocate(__n); }$/;"	f	struct:_Valarray_base	access:public	signature:(size_t __n)
_Valarray_base::~_Valarray_base	/Users/lij/.vim/stl/valarray	/^  ~_Valarray_base() { _M_deallocate(); }$/;"	f	struct:_Valarray_base	access:public	signature:()
_Vector_alloc_base	/Users/lij/.vim/stl/stl_vector.h	/^  _Vector_alloc_base(const allocator_type& __a)$/;"	f	class:_Vector_alloc_base	access:public	signature:(const allocator_type& __a)
_Vector_alloc_base	/Users/lij/.vim/stl/stl_vector.h	/^  _Vector_alloc_base(const allocator_type&)$/;"	f	class:_Vector_alloc_base	access:public	signature:(const allocator_type&)
_Vector_alloc_base	/Users/lij/.vim/stl/stl_vector.h	/^class _Vector_alloc_base {$/;"	c
_Vector_alloc_base	/Users/lij/.vim/stl/stl_vector.h	/^class _Vector_alloc_base<_Tp, _Allocator, true> {$/;"	c
_Vector_alloc_base::_Alloc_type	/Users/lij/.vim/stl/stl_vector.h	/^  typedef typename _Alloc_traits<_Tp, _Allocator>::_Alloc_type _Alloc_type;$/;"	t	class:_Vector_alloc_base	access:protected
_Vector_alloc_base::_M_allocate	/Users/lij/.vim/stl/stl_vector.h	/^  _Tp* _M_allocate(size_t __n)$/;"	f	class:_Vector_alloc_base	access:protected	signature:(size_t __n)
_Vector_alloc_base::_M_data_allocator	/Users/lij/.vim/stl/stl_vector.h	/^  allocator_type _M_data_allocator;$/;"	m	class:_Vector_alloc_base	access:protected
_Vector_alloc_base::_M_deallocate	/Users/lij/.vim/stl/stl_vector.h	/^  void _M_deallocate(_Tp* __p, size_t __n)$/;"	f	class:_Vector_alloc_base	access:protected	signature:(_Tp* __p, size_t __n)
_Vector_alloc_base::_M_end_of_storage	/Users/lij/.vim/stl/stl_vector.h	/^  _Tp* _M_end_of_storage;$/;"	m	class:_Vector_alloc_base	access:protected
_Vector_alloc_base::_M_finish	/Users/lij/.vim/stl/stl_vector.h	/^  _Tp* _M_finish;$/;"	m	class:_Vector_alloc_base	access:protected
_Vector_alloc_base::_M_start	/Users/lij/.vim/stl/stl_vector.h	/^  _Tp* _M_start;$/;"	m	class:_Vector_alloc_base	access:protected
_Vector_alloc_base::_Vector_alloc_base	/Users/lij/.vim/stl/stl_vector.h	/^  _Vector_alloc_base(const allocator_type& __a)$/;"	f	class:_Vector_alloc_base	access:public	signature:(const allocator_type& __a)
_Vector_alloc_base::_Vector_alloc_base	/Users/lij/.vim/stl/stl_vector.h	/^  _Vector_alloc_base(const allocator_type&)$/;"	f	class:_Vector_alloc_base	access:public	signature:(const allocator_type&)
_Vector_alloc_base::allocator_type	/Users/lij/.vim/stl/stl_vector.h	/^          allocator_type;$/;"	t	class:_Vector_alloc_base	access:public
_Vector_alloc_base::get_allocator	/Users/lij/.vim/stl/stl_vector.h	/^  allocator_type get_allocator() const { return _M_data_allocator; }$/;"	f	class:_Vector_alloc_base	access:public	signature:() const
_Vector_alloc_base::get_allocator	/Users/lij/.vim/stl/stl_vector.h	/^  allocator_type get_allocator() const { return allocator_type(); }$/;"	f	class:_Vector_alloc_base	access:public	signature:() const
_Vector_base	/Users/lij/.vim/stl/stl_vector.h	/^  _Vector_base(const allocator_type& __a) : _Base(__a) {}$/;"	f	struct:_Vector_base	access:public	signature:(const allocator_type& __a)
_Vector_base	/Users/lij/.vim/stl/stl_vector.h	/^  _Vector_base(size_t __n, const allocator_type& __a) : _Base(__a) {$/;"	f	struct:_Vector_base	access:public	signature:(size_t __n, const allocator_type& __a)
_Vector_base	/Users/lij/.vim/stl/stl_vector.h	/^struct _Vector_base$/;"	s	inherits:_Vector_alloc_base
_Vector_base::_Base	/Users/lij/.vim/stl/stl_vector.h	/^          _Base;$/;"	t	struct:_Vector_base	access:public
_Vector_base::_Vector_base	/Users/lij/.vim/stl/stl_vector.h	/^  _Vector_base(const allocator_type& __a) : _Base(__a) {}$/;"	f	struct:_Vector_base	access:public	signature:(const allocator_type& __a)
_Vector_base::_Vector_base	/Users/lij/.vim/stl/stl_vector.h	/^  _Vector_base(size_t __n, const allocator_type& __a) : _Base(__a) {$/;"	f	struct:_Vector_base	access:public	signature:(size_t __n, const allocator_type& __a)
_Vector_base::allocator_type	/Users/lij/.vim/stl/stl_vector.h	/^  typedef typename _Base::allocator_type allocator_type;$/;"	t	struct:_Vector_base	access:public
_Vector_base::~_Vector_base	/Users/lij/.vim/stl/stl_vector.h	/^  ~_Vector_base() { _M_deallocate(_M_start, _M_end_of_storage - _M_start); }$/;"	f	struct:_Vector_base	access:public	signature:()
_Void_pointer	/Users/lij/.vim/stl/stl_list.h	/^  typedef void* _Void_pointer;$/;"	t	class:list	access:protected
_WordT	/Users/lij/.vim/stl/bitset	/^  typedef unsigned long _WordT;$/;"	t	class:bitset	file:	access:private
_WordT	/Users/lij/.vim/stl/bitset	/^  typedef unsigned long _WordT;$/;"	t	struct:_Base_bitset	file:	access:public
__BITSET_WORDS	/Users/lij/.vim/stl/bitset	/^#define __BITSET_WORDS(/;"	d	file:
__BITSET_WORDS	/Users/lij/.vim/stl/bitset	/^#undef __BITSET_WORDS$/;"	d	file:
__BITS_PER_WORD	/Users/lij/.vim/stl/bitset	/^#define __BITS_PER_WORD /;"	d	file:
__BITS_PER_WORD	/Users/lij/.vim/stl/bitset	/^#undef __BITS_PER_WORD$/;"	d	file:
__BVECTOR	/Users/lij/.vim/stl/stl_bvector.h	/^#  define __BVECTOR /;"	d
__BVECTOR	/Users/lij/.vim/stl/stl_bvector.h	/^#undef __BVECTOR$/;"	d
__BVECTOR	/Users/lij/.vim/stl/stl_bvector.h	/^class __BVECTOR : public __BVECTOR_BASE $/;"	c	inherits:__BVECTOR_BASE
__BVECTOR::_M_assign_aux	/Users/lij/.vim/stl/stl_bvector.h	/^  void _M_assign_aux(_ForwardIterator __first, _ForwardIterator __last,$/;"	f	class:__BVECTOR	access:public	signature:(_ForwardIterator __first, _ForwardIterator __last, forward_iterator_tag)
__BVECTOR::_M_assign_aux	/Users/lij/.vim/stl/stl_bvector.h	/^  void _M_assign_aux(_InputIterator __first, _InputIterator __last,$/;"	f	class:__BVECTOR	access:public	signature:(_InputIterator __first, _InputIterator __last, input_iterator_tag)
__BVECTOR::_M_assign_dispatch	/Users/lij/.vim/stl/stl_bvector.h	/^  void _M_assign_dispatch(_InputIter __first, _InputIter __last, __false_type)$/;"	f	class:__BVECTOR	access:public	signature:(_InputIter __first, _InputIter __last, __false_type)
__BVECTOR::_M_assign_dispatch	/Users/lij/.vim/stl/stl_bvector.h	/^  void _M_assign_dispatch(_Integer __n, _Integer __val, __true_type)$/;"	f	class:__BVECTOR	access:public	signature:(_Integer __n, _Integer __val, __true_type)
__BVECTOR::_M_fill_assign	/Users/lij/.vim/stl/stl_bvector.h	/^  void _M_fill_assign(size_t __n, bool __x) {$/;"	f	class:__BVECTOR	access:public	signature:(size_t __n, bool __x)
__BVECTOR::_M_fill_insert	/Users/lij/.vim/stl/stl_bvector.h	/^  void _M_fill_insert(iterator __position, size_type __n, bool __x) {$/;"	f	class:__BVECTOR	access:public	signature:(iterator __position, size_type __n, bool __x)
__BVECTOR::_M_initialize	/Users/lij/.vim/stl/stl_bvector.h	/^  void _M_initialize(size_type __n) {$/;"	f	class:__BVECTOR	access:protected	signature:(size_type __n)
__BVECTOR::_M_initialize_dispatch	/Users/lij/.vim/stl/stl_bvector.h	/^  void _M_initialize_dispatch(_InputIterator __first, _InputIterator __last,$/;"	f	class:__BVECTOR	access:public	signature:(_InputIterator __first, _InputIterator __last, __false_type)
__BVECTOR::_M_initialize_dispatch	/Users/lij/.vim/stl/stl_bvector.h	/^  void _M_initialize_dispatch(_Integer __n, _Integer __x, __true_type) {$/;"	f	class:__BVECTOR	access:public	signature:(_Integer __n, _Integer __x, __true_type)
__BVECTOR::_M_initialize_range	/Users/lij/.vim/stl/stl_bvector.h	/^  void _M_initialize_range(_ForwardIterator __first, _ForwardIterator __last,$/;"	f	class:__BVECTOR	access:protected	signature:(_ForwardIterator __first, _ForwardIterator __last, forward_iterator_tag)
__BVECTOR::_M_initialize_range	/Users/lij/.vim/stl/stl_bvector.h	/^  void _M_initialize_range(_InputIterator __first, _InputIterator __last,$/;"	f	class:__BVECTOR	access:protected	signature:(_InputIterator __first, _InputIterator __last, input_iterator_tag)
__BVECTOR::_M_insert_aux	/Users/lij/.vim/stl/stl_bvector.h	/^  void _M_insert_aux(iterator __position, bool __x) {$/;"	f	class:__BVECTOR	access:protected	signature:(iterator __position, bool __x)
__BVECTOR::_M_insert_dispatch	/Users/lij/.vim/stl/stl_bvector.h	/^  void _M_insert_dispatch(iterator __pos, _Integer __n, _Integer __x,$/;"	f	class:__BVECTOR	access:public	signature:(iterator __pos, _Integer __n, _Integer __x, __true_type)
__BVECTOR::_M_insert_dispatch	/Users/lij/.vim/stl/stl_bvector.h	/^  void _M_insert_dispatch(iterator __pos,$/;"	f	class:__BVECTOR	access:public	signature:(iterator __pos, _InputIterator __first, _InputIterator __last, __false_type)
__BVECTOR::_M_insert_range	/Users/lij/.vim/stl/stl_bvector.h	/^  void _M_insert_range(iterator __pos,$/;"	f	class:__BVECTOR	access:protected	signature:(iterator __pos, _InputIterator __first, _InputIterator __last, input_iterator_tag)
__BVECTOR::_M_insert_range	/Users/lij/.vim/stl/stl_bvector.h	/^  void _M_insert_range(iterator __position,$/;"	f	class:__BVECTOR	access:protected	signature:(iterator __position, _ForwardIterator __first, _ForwardIterator __last, forward_iterator_tag)
__BVECTOR::_M_range_check	/Users/lij/.vim/stl/stl_bvector.h	/^  void _M_range_check(size_type __n) const {$/;"	f	class:__BVECTOR	access:public	signature:(size_type __n) const
__BVECTOR::__VECTOR	/Users/lij/.vim/stl/stl_bvector.h	/^  __VECTOR(_InputIterator __first, _InputIterator __last,$/;"	f	class:__BVECTOR	access:public	signature:(_InputIterator __first, _InputIterator __last, const allocator_type& __a = allocator_type())
__BVECTOR::__VECTOR	/Users/lij/.vim/stl/stl_bvector.h	/^  __VECTOR(const __VECTOR& __x) : __BVECTOR_BASE(__x.get_allocator()) {$/;"	f	class:__BVECTOR	access:public	signature:(const __VECTOR& __x)
__BVECTOR::__VECTOR	/Users/lij/.vim/stl/stl_bvector.h	/^  __VECTOR(const bool* __first, const bool* __last,$/;"	f	class:__BVECTOR	access:public	signature:(const bool* __first, const bool* __last, const allocator_type& __a = allocator_type())
__BVECTOR::__VECTOR	/Users/lij/.vim/stl/stl_bvector.h	/^  __VECTOR(const_iterator __first, const_iterator __last,$/;"	f	class:__BVECTOR	access:public	signature:(const_iterator __first, const_iterator __last, const allocator_type& __a = allocator_type())
__BVECTOR::__VECTOR	/Users/lij/.vim/stl/stl_bvector.h	/^  __VECTOR(size_type __n, bool __value,$/;"	f	class:__BVECTOR	access:public	signature:(size_type __n, bool __value, const allocator_type& __a = allocator_type())
__BVECTOR::__VECTOR	/Users/lij/.vim/stl/stl_bvector.h	/^  explicit __VECTOR(const allocator_type& __a = allocator_type())$/;"	f	class:__BVECTOR	access:public	signature:(const allocator_type& __a = allocator_type())
__BVECTOR::__VECTOR	/Users/lij/.vim/stl/stl_bvector.h	/^  explicit __VECTOR(size_type __n)$/;"	f	class:__BVECTOR	access:public	signature:(size_type __n)
__BVECTOR::allocator_type	/Users/lij/.vim/stl/stl_bvector.h	/^  typedef typename __BVECTOR_BASE::allocator_type allocator_type;$/;"	t	class:__BVECTOR	access:public
__BVECTOR::assign	/Users/lij/.vim/stl/stl_bvector.h	/^  void assign(_InputIterator __first, _InputIterator __last) {$/;"	f	class:__BVECTOR	access:public	signature:(_InputIterator __first, _InputIterator __last)
__BVECTOR::assign	/Users/lij/.vim/stl/stl_bvector.h	/^  void assign(size_t __n, bool __x) { _M_fill_assign(__n, __x); }$/;"	f	class:__BVECTOR	access:public	signature:(size_t __n, bool __x)
__BVECTOR::at	/Users/lij/.vim/stl/stl_bvector.h	/^  const_reference at(size_type __n) const$/;"	f	class:__BVECTOR	access:public	signature:(size_type __n) const
__BVECTOR::at	/Users/lij/.vim/stl/stl_bvector.h	/^  reference at(size_type __n)$/;"	f	class:__BVECTOR	access:public	signature:(size_type __n)
__BVECTOR::back	/Users/lij/.vim/stl/stl_bvector.h	/^  const_reference back() const { return *(end() - 1); }$/;"	f	class:__BVECTOR	access:public	signature:() const
__BVECTOR::back	/Users/lij/.vim/stl/stl_bvector.h	/^  reference back() { return *(end() - 1); }$/;"	f	class:__BVECTOR	access:public	signature:()
__BVECTOR::begin	/Users/lij/.vim/stl/stl_bvector.h	/^  const_iterator begin() const { return _M_start; }$/;"	f	class:__BVECTOR	access:public	signature:() const
__BVECTOR::begin	/Users/lij/.vim/stl/stl_bvector.h	/^  iterator begin() { return _M_start; }$/;"	f	class:__BVECTOR	access:public	signature:()
__BVECTOR::capacity	/Users/lij/.vim/stl/stl_bvector.h	/^  size_type capacity() const {$/;"	f	class:__BVECTOR	access:public	signature:() const
__BVECTOR::clear	/Users/lij/.vim/stl/stl_bvector.h	/^  void clear() { erase(begin(), end()); }$/;"	f	class:__BVECTOR	access:public	signature:()
__BVECTOR::const_iterator	/Users/lij/.vim/stl/stl_bvector.h	/^  typedef _Bit_const_iterator          const_iterator;$/;"	t	class:__BVECTOR	access:public
__BVECTOR::const_pointer	/Users/lij/.vim/stl/stl_bvector.h	/^  typedef const bool* const_pointer;$/;"	t	class:__BVECTOR	access:public
__BVECTOR::const_reference	/Users/lij/.vim/stl/stl_bvector.h	/^  typedef bool const_reference;$/;"	t	class:__BVECTOR	access:public
__BVECTOR::const_reverse_iterator	/Users/lij/.vim/stl/stl_bvector.h	/^                           difference_type> const_reverse_iterator;$/;"	t	class:__BVECTOR	access:public
__BVECTOR::const_reverse_iterator	/Users/lij/.vim/stl/stl_bvector.h	/^  typedef reverse_iterator<const_iterator> const_reverse_iterator;$/;"	t	class:__BVECTOR	access:public
__BVECTOR::difference_type	/Users/lij/.vim/stl/stl_bvector.h	/^  typedef ptrdiff_t difference_type; $/;"	t	class:__BVECTOR	access:public
__BVECTOR::empty	/Users/lij/.vim/stl/stl_bvector.h	/^  bool empty() const { return begin() == end(); }$/;"	f	class:__BVECTOR	access:public	signature:() const
__BVECTOR::end	/Users/lij/.vim/stl/stl_bvector.h	/^  const_iterator end() const { return _M_finish; }$/;"	f	class:__BVECTOR	access:public	signature:() const
__BVECTOR::end	/Users/lij/.vim/stl/stl_bvector.h	/^  iterator end() { return _M_finish; }$/;"	f	class:__BVECTOR	access:public	signature:()
__BVECTOR::erase	/Users/lij/.vim/stl/stl_bvector.h	/^  iterator erase(iterator __first, iterator __last) {$/;"	f	class:__BVECTOR	access:public	signature:(iterator __first, iterator __last)
__BVECTOR::erase	/Users/lij/.vim/stl/stl_bvector.h	/^  iterator erase(iterator __position) {$/;"	f	class:__BVECTOR	access:public	signature:(iterator __position)
__BVECTOR::flip	/Users/lij/.vim/stl/stl_bvector.h	/^  void flip() {$/;"	f	class:__BVECTOR	access:public	signature:()
__BVECTOR::front	/Users/lij/.vim/stl/stl_bvector.h	/^  const_reference front() const { return *begin(); }$/;"	f	class:__BVECTOR	access:public	signature:() const
__BVECTOR::front	/Users/lij/.vim/stl/stl_bvector.h	/^  reference front() { return *begin(); }$/;"	f	class:__BVECTOR	access:public	signature:()
__BVECTOR::get_allocator	/Users/lij/.vim/stl/stl_bvector.h	/^  allocator_type get_allocator() const {$/;"	f	class:__BVECTOR	access:public	signature:() const
__BVECTOR::insert	/Users/lij/.vim/stl/stl_bvector.h	/^  iterator insert(iterator __position, bool __x = bool()) {$/;"	f	class:__BVECTOR	access:public	signature:(iterator __position, bool __x = bool())
__BVECTOR::insert	/Users/lij/.vim/stl/stl_bvector.h	/^  void insert(iterator __position, const bool* __first, const bool* __last) {$/;"	f	class:__BVECTOR	access:public	signature:(iterator __position, const bool* __first, const bool* __last)
__BVECTOR::insert	/Users/lij/.vim/stl/stl_bvector.h	/^  void insert(iterator __position, size_type __n, bool __x) {$/;"	f	class:__BVECTOR	access:public	signature:(iterator __position, size_type __n, bool __x)
__BVECTOR::insert	/Users/lij/.vim/stl/stl_bvector.h	/^  void insert(iterator __position,$/;"	f	class:__BVECTOR	access:public	signature:(iterator __position, _InputIterator __first, _InputIterator __last)
__BVECTOR::insert	/Users/lij/.vim/stl/stl_bvector.h	/^  void insert(iterator __position,$/;"	f	class:__BVECTOR	access:public	signature:(iterator __position, const_iterator __first, const_iterator __last)
__BVECTOR::iterator	/Users/lij/.vim/stl/stl_bvector.h	/^  typedef _Bit_iterator                iterator;$/;"	t	class:__BVECTOR	access:public
__BVECTOR::max_size	/Users/lij/.vim/stl/stl_bvector.h	/^  size_type max_size() const { return size_type(-1); }$/;"	f	class:__BVECTOR	access:public	signature:() const
__BVECTOR::operator =	/Users/lij/.vim/stl/stl_bvector.h	/^  __VECTOR& operator=(const __VECTOR& __x) {$/;"	f	class:__BVECTOR	access:public	signature:(const __VECTOR& __x)
__BVECTOR::operator []	/Users/lij/.vim/stl/stl_bvector.h	/^  const_reference operator[](size_type __n) const$/;"	f	class:__BVECTOR	access:public	signature:(size_type __n) const
__BVECTOR::operator []	/Users/lij/.vim/stl/stl_bvector.h	/^  reference operator[](size_type __n)$/;"	f	class:__BVECTOR	access:public	signature:(size_type __n)
__BVECTOR::pointer	/Users/lij/.vim/stl/stl_bvector.h	/^  typedef _Bit_reference* pointer;$/;"	t	class:__BVECTOR	access:public
__BVECTOR::pop_back	/Users/lij/.vim/stl/stl_bvector.h	/^  void pop_back() { --_M_finish; }$/;"	f	class:__BVECTOR	access:public	signature:()
__BVECTOR::push_back	/Users/lij/.vim/stl/stl_bvector.h	/^  void push_back(bool __x) {$/;"	f	class:__BVECTOR	access:public	signature:(bool __x)
__BVECTOR::rbegin	/Users/lij/.vim/stl/stl_bvector.h	/^  const_reverse_iterator rbegin() const { $/;"	f	class:__BVECTOR	access:public	signature:() const
__BVECTOR::rbegin	/Users/lij/.vim/stl/stl_bvector.h	/^  reverse_iterator rbegin() { return reverse_iterator(end()); }$/;"	f	class:__BVECTOR	access:public	signature:()
__BVECTOR::reference	/Users/lij/.vim/stl/stl_bvector.h	/^  typedef _Bit_reference reference;$/;"	t	class:__BVECTOR	access:public
__BVECTOR::rend	/Users/lij/.vim/stl/stl_bvector.h	/^  const_reverse_iterator rend() const { $/;"	f	class:__BVECTOR	access:public	signature:() const
__BVECTOR::rend	/Users/lij/.vim/stl/stl_bvector.h	/^  reverse_iterator rend() { return reverse_iterator(begin()); }$/;"	f	class:__BVECTOR	access:public	signature:()
__BVECTOR::reserve	/Users/lij/.vim/stl/stl_bvector.h	/^  void reserve(size_type __n) {$/;"	f	class:__BVECTOR	access:public	signature:(size_type __n)
__BVECTOR::resize	/Users/lij/.vim/stl/stl_bvector.h	/^  void resize(size_type __new_size, bool __x = bool()) {$/;"	f	class:__BVECTOR	access:public	signature:(size_type __new_size, bool __x = bool())
__BVECTOR::reverse_iterator	/Users/lij/.vim/stl/stl_bvector.h	/^          reverse_iterator;$/;"	t	class:__BVECTOR	access:public
__BVECTOR::reverse_iterator	/Users/lij/.vim/stl/stl_bvector.h	/^  typedef reverse_iterator<iterator> reverse_iterator;$/;"	t	class:__BVECTOR	access:public
__BVECTOR::size	/Users/lij/.vim/stl/stl_bvector.h	/^  size_type size() const { return size_type(end() - begin()); }$/;"	f	class:__BVECTOR	access:public	signature:() const
__BVECTOR::size_type	/Users/lij/.vim/stl/stl_bvector.h	/^  typedef size_t size_type;$/;"	t	class:__BVECTOR	access:public
__BVECTOR::swap	/Users/lij/.vim/stl/stl_bvector.h	/^  void swap(__BVECTOR& __x) {$/;"	f	class:__BVECTOR	access:public	signature:(__BVECTOR& __x)
__BVECTOR::value_type	/Users/lij/.vim/stl/stl_bvector.h	/^  typedef bool value_type;$/;"	t	class:__BVECTOR	access:public
__BVECTOR::~__VECTOR	/Users/lij/.vim/stl/stl_bvector.h	/^  ~__VECTOR() { }$/;"	f	class:__BVECTOR	access:public	signature:()
__BVECTOR_BASE	/Users/lij/.vim/stl/stl_bvector.h	/^#  define __BVECTOR_BASE /;"	d
__BVECTOR_BASE	/Users/lij/.vim/stl/stl_bvector.h	/^#undef __BVECTOR_BASE$/;"	d
__BVECTOR_TMPL_LIST	/Users/lij/.vim/stl/stl_bvector.h	/^#  define __BVECTOR_TMPL_LIST /;"	d
__BVECTOR_TMPL_LIST	/Users/lij/.vim/stl/stl_bvector.h	/^#undef __BVECTOR_TMPL_LIST /;"	d
__CONCEPT_CHECKS_H	/Users/lij/.vim/stl/concept_checks.h	/^#define __CONCEPT_CHECKS_H$/;"	d
__DISTANCE_TYPE	/Users/lij/.vim/stl/stl_iterator_base.h	/^#define __DISTANCE_TYPE(/;"	d
__GC_CONST	/Users/lij/.vim/stl/stl_rope.h	/^#   define __GC_CONST /;"	d
__HASH_ALLOC_INIT	/Users/lij/.vim/stl/stl_hashtable.h	/^# define __HASH_ALLOC_INIT(/;"	d
__HASH_ALLOC_INIT	/Users/lij/.vim/stl/stl_hashtable.h	/^#undef __HASH_ALLOC_INIT$/;"	d
__ITERATOR_CATEGORY	/Users/lij/.vim/stl/stl_iterator_base.h	/^#define __ITERATOR_CATEGORY(/;"	d
__List_base_reverse	/Users/lij/.vim/stl/stl_list.h	/^inline void __List_base_reverse(_List_node_base* __p)$/;"	f	signature:(_List_node_base* __p)
__NODE_ALLOCATOR_LOCK	/Users/lij/.vim/stl/stl_alloc.h	/^#   define __NODE_ALLOCATOR_LOCK /;"	d
__NODE_ALLOCATOR_LOCK	/Users/lij/.vim/stl/stl_alloc.h	/^#   define __NODE_ALLOCATOR_LOCK$/;"	d
__NODE_ALLOCATOR_THREADS	/Users/lij/.vim/stl/stl_alloc.h	/^#   define __NODE_ALLOCATOR_THREADS /;"	d
__NODE_ALLOCATOR_THREADS	/Users/lij/.vim/stl/stl_alloc.h	/^# define __NODE_ALLOCATOR_THREADS /;"	d
__NODE_ALLOCATOR_UNLOCK	/Users/lij/.vim/stl/stl_alloc.h	/^#   define __NODE_ALLOCATOR_UNLOCK /;"	d
__NODE_ALLOCATOR_UNLOCK	/Users/lij/.vim/stl/stl_alloc.h	/^#   define __NODE_ALLOCATOR_UNLOCK$/;"	d
__Named_exception	/Users/lij/.vim/stl/stdexcept	/^  __Named_exception(const string& __str) {$/;"	f	class:__Named_exception	access:public	signature:(const string& __str)
__Named_exception	/Users/lij/.vim/stl/stdexcept	/^class __Named_exception : public __STL_EXCEPTION_BASE {$/;"	c	file:	inherits:__STL_EXCEPTION_BASE
__Named_exception::_M_name	/Users/lij/.vim/stl/stdexcept	/^  char _M_name[_S_bufsize];$/;"	m	class:__Named_exception	file:	access:private
__Named_exception::_S_bufsize	/Users/lij/.vim/stl/stdexcept	/^  enum { _S_bufsize = 256 };$/;"	e	enum:__Named_exception::__anon3	file:
__Named_exception::__Named_exception	/Users/lij/.vim/stl/stdexcept	/^  __Named_exception(const string& __str) {$/;"	f	class:__Named_exception	access:public	signature:(const string& __str)
__PRIVATE	/Users/lij/.vim/stl/stl_alloc.h	/^#  define __PRIVATE /;"	d
__RESTRICT	/Users/lij/.vim/stl/pthread_alloc	/^#  define __RESTRICT$/;"	d	file:
__RESTRICT	/Users/lij/.vim/stl/stl_alloc.h	/^#  define __RESTRICT$/;"	d
__ROPE_DEFINE_ALLOC	/Users/lij/.vim/stl/stl_rope.h	/^# define __ROPE_DEFINE_ALLOC(/;"	d
__ROPE_DEFINE_ALLOC	/Users/lij/.vim/stl/stl_rope.h	/^# undef __ROPE_DEFINE_ALLOC$/;"	d
__ROPE_DEFINE_ALLOCS	/Users/lij/.vim/stl/stl_rope.h	/^  __ROPE_DEFINE_ALLOCS(_Alloc);$/;"	p	class:_Rope_rep_base	access:protected	signature:(_Alloc)
__ROPE_DEFINE_ALLOCS	/Users/lij/.vim/stl/stl_rope.h	/^  __ROPE_DEFINE_ALLOCS(_Allocator);$/;"	p	class:_Rope_rep_alloc_base	access:protected	signature:(_Allocator)
__ROPE_DEFINE_ALLOCS	/Users/lij/.vim/stl/stl_rope.h	/^#define __ROPE_DEFINE_ALLOCS(/;"	d
__SGI_CPP_LIMITS	/Users/lij/.vim/stl/limits	/^#define __SGI_CPP_LIMITS$/;"	d	file:
__SGI_STDEXCEPT	/Users/lij/.vim/stl/stdexcept	/^#define __SGI_STDEXCEPT$/;"	d	file:
__SGI_STL_ALGOBASE_H	/Users/lij/.vim/stl/algobase.h	/^#define __SGI_STL_ALGOBASE_H$/;"	d
__SGI_STL_ALGORITHM	/Users/lij/.vim/stl/algorithm	/^#define __SGI_STL_ALGORITHM$/;"	d	file:
__SGI_STL_ALGO_H	/Users/lij/.vim/stl/algo.h	/^#define __SGI_STL_ALGO_H$/;"	d
__SGI_STL_ALLOC_H	/Users/lij/.vim/stl/alloc.h	/^#define __SGI_STL_ALLOC_H$/;"	d
__SGI_STL_BITSET	/Users/lij/.vim/stl/bitset	/^#define __SGI_STL_BITSET$/;"	d	file:
__SGI_STL_BVECTOR_H	/Users/lij/.vim/stl/bvector.h	/^#define __SGI_STL_BVECTOR_H$/;"	d
__SGI_STL_CHAR_TRAITS_H	/Users/lij/.vim/stl/char_traits.h	/^#define __SGI_STL_CHAR_TRAITS_H$/;"	d
__SGI_STL_DECLARE_COPY_TRIVIAL	/Users/lij/.vim/stl/stl_algobase.h	/^#define __SGI_STL_DECLARE_COPY_TRIVIAL(/;"	d
__SGI_STL_DECLARE_COPY_TRIVIAL	/Users/lij/.vim/stl/stl_algobase.h	/^#undef __SGI_STL_DECLARE_COPY_TRIVIAL$/;"	d
__SGI_STL_DEQUE	/Users/lij/.vim/stl/deque	/^#define __SGI_STL_DEQUE$/;"	d	file:
__SGI_STL_DEQUE_H	/Users/lij/.vim/stl/deque.h	/^#define __SGI_STL_DEQUE_H$/;"	d
__SGI_STL_EXCEPTION_H	/Users/lij/.vim/stl/stl_exception.h	/^#define __SGI_STL_EXCEPTION_H$/;"	d
__SGI_STL_FUNCTIONAL	/Users/lij/.vim/stl/functional	/^#define __SGI_STL_FUNCTIONAL$/;"	d	file:
__SGI_STL_FUNCTION_H	/Users/lij/.vim/stl/function.h	/^#define __SGI_STL_FUNCTION_H$/;"	d
__SGI_STL_HASHTABLE_H	/Users/lij/.vim/stl/hashtable.h	/^#define __SGI_STL_HASHTABLE_H$/;"	d
__SGI_STL_HASH_FUN_H	/Users/lij/.vim/stl/stl_hash_fun.h	/^#define __SGI_STL_HASH_FUN_H$/;"	d
__SGI_STL_HASH_MAP	/Users/lij/.vim/stl/hash_map	/^#define __SGI_STL_HASH_MAP$/;"	d	file:
__SGI_STL_HASH_MAP_H	/Users/lij/.vim/stl/hash_map.h	/^#define __SGI_STL_HASH_MAP_H$/;"	d
__SGI_STL_HASH_SET	/Users/lij/.vim/stl/hash_set	/^#define __SGI_STL_HASH_SET$/;"	d	file:
__SGI_STL_HASH_SET_H	/Users/lij/.vim/stl/hash_set.h	/^#define __SGI_STL_HASH_SET_H$/;"	d
__SGI_STL_HEAP_H	/Users/lij/.vim/stl/heap.h	/^#define __SGI_STL_HEAP_H$/;"	d
__SGI_STL_INTERNAL_ALGOBASE_H	/Users/lij/.vim/stl/stl_algobase.h	/^#define __SGI_STL_INTERNAL_ALGOBASE_H$/;"	d
__SGI_STL_INTERNAL_ALGO_H	/Users/lij/.vim/stl/stl_algo.h	/^#define __SGI_STL_INTERNAL_ALGO_H$/;"	d
__SGI_STL_INTERNAL_ALLOC_H	/Users/lij/.vim/stl/stl_alloc.h	/^#define __SGI_STL_INTERNAL_ALLOC_H$/;"	d
__SGI_STL_INTERNAL_BVECTOR_H	/Users/lij/.vim/stl/stl_bvector.h	/^#define __SGI_STL_INTERNAL_BVECTOR_H$/;"	d
__SGI_STL_INTERNAL_CONSTRUCT_H	/Users/lij/.vim/stl/stl_construct.h	/^#define __SGI_STL_INTERNAL_CONSTRUCT_H$/;"	d
__SGI_STL_INTERNAL_CTRAITS_FUNCTIONS_H	/Users/lij/.vim/stl/stl_ctraits_fns.h	/^#define __SGI_STL_INTERNAL_CTRAITS_FUNCTIONS_H$/;"	d
__SGI_STL_INTERNAL_DEQUE_H	/Users/lij/.vim/stl/stl_deque.h	/^#define __SGI_STL_INTERNAL_DEQUE_H$/;"	d
__SGI_STL_INTERNAL_FUNCTION_H	/Users/lij/.vim/stl/stl_function.h	/^#define __SGI_STL_INTERNAL_FUNCTION_H$/;"	d
__SGI_STL_INTERNAL_HASHTABLE_H	/Users/lij/.vim/stl/stl_hashtable.h	/^#define __SGI_STL_INTERNAL_HASHTABLE_H$/;"	d
__SGI_STL_INTERNAL_HASH_MAP_H	/Users/lij/.vim/stl/stl_hash_map.h	/^#define __SGI_STL_INTERNAL_HASH_MAP_H$/;"	d
__SGI_STL_INTERNAL_HASH_SET_H	/Users/lij/.vim/stl/stl_hash_set.h	/^#define __SGI_STL_INTERNAL_HASH_SET_H$/;"	d
__SGI_STL_INTERNAL_HEAP_H	/Users/lij/.vim/stl/stl_heap.h	/^#define __SGI_STL_INTERNAL_HEAP_H$/;"	d
__SGI_STL_INTERNAL_ITERATOR_BASE_H	/Users/lij/.vim/stl/stl_iterator_base.h	/^#define __SGI_STL_INTERNAL_ITERATOR_BASE_H$/;"	d
__SGI_STL_INTERNAL_ITERATOR_H	/Users/lij/.vim/stl/stl_iterator.h	/^#define __SGI_STL_INTERNAL_ITERATOR_H$/;"	d
__SGI_STL_INTERNAL_LIST_H	/Users/lij/.vim/stl/stl_list.h	/^#define __SGI_STL_INTERNAL_LIST_H$/;"	d
__SGI_STL_INTERNAL_MAP_H	/Users/lij/.vim/stl/stl_map.h	/^#define __SGI_STL_INTERNAL_MAP_H$/;"	d
__SGI_STL_INTERNAL_MULTIMAP_H	/Users/lij/.vim/stl/stl_multimap.h	/^#define __SGI_STL_INTERNAL_MULTIMAP_H$/;"	d
__SGI_STL_INTERNAL_MULTISET_H	/Users/lij/.vim/stl/stl_multiset.h	/^#define __SGI_STL_INTERNAL_MULTISET_H$/;"	d
__SGI_STL_INTERNAL_NUMERIC_H	/Users/lij/.vim/stl/stl_numeric.h	/^#define __SGI_STL_INTERNAL_NUMERIC_H$/;"	d
__SGI_STL_INTERNAL_PAIR_H	/Users/lij/.vim/stl/stl_pair.h	/^#define __SGI_STL_INTERNAL_PAIR_H$/;"	d
__SGI_STL_INTERNAL_QUEUE_H	/Users/lij/.vim/stl/stl_queue.h	/^#define __SGI_STL_INTERNAL_QUEUE_H$/;"	d
__SGI_STL_INTERNAL_RAW_STORAGE_ITERATOR_H	/Users/lij/.vim/stl/stl_raw_storage_iter.h	/^#define __SGI_STL_INTERNAL_RAW_STORAGE_ITERATOR_H$/;"	d
__SGI_STL_INTERNAL_RELOPS	/Users/lij/.vim/stl/stl_relops.h	/^#define __SGI_STL_INTERNAL_RELOPS$/;"	d
__SGI_STL_INTERNAL_ROPE_H	/Users/lij/.vim/stl/stl_rope.h	/^# define __SGI_STL_INTERNAL_ROPE_H$/;"	d
__SGI_STL_INTERNAL_SET_H	/Users/lij/.vim/stl/stl_set.h	/^#define __SGI_STL_INTERNAL_SET_H$/;"	d
__SGI_STL_INTERNAL_SLIST_H	/Users/lij/.vim/stl/stl_slist.h	/^#define __SGI_STL_INTERNAL_SLIST_H$/;"	d
__SGI_STL_INTERNAL_STACK_H	/Users/lij/.vim/stl/stl_stack.h	/^#define __SGI_STL_INTERNAL_STACK_H$/;"	d
__SGI_STL_INTERNAL_TEMPBUF_H	/Users/lij/.vim/stl/stl_tempbuf.h	/^#define __SGI_STL_INTERNAL_TEMPBUF_H$/;"	d
__SGI_STL_INTERNAL_THREADS_H	/Users/lij/.vim/stl/stl_threads.h	/^#define __SGI_STL_INTERNAL_THREADS_H$/;"	d
__SGI_STL_INTERNAL_TREE_H	/Users/lij/.vim/stl/stl_tree.h	/^#define __SGI_STL_INTERNAL_TREE_H$/;"	d
__SGI_STL_INTERNAL_UNINITIALIZED_H	/Users/lij/.vim/stl/stl_uninitialized.h	/^#define __SGI_STL_INTERNAL_UNINITIALIZED_H$/;"	d
__SGI_STL_INTERNAL_VECTOR_H	/Users/lij/.vim/stl/stl_vector.h	/^#define __SGI_STL_INTERNAL_VECTOR_H$/;"	d
__SGI_STL_ITERATOR	/Users/lij/.vim/stl/iterator	/^#define __SGI_STL_ITERATOR$/;"	d	file:
__SGI_STL_ITERATOR_H	/Users/lij/.vim/stl/iterator.h	/^#define __SGI_STL_ITERATOR_H$/;"	d
__SGI_STL_LIST	/Users/lij/.vim/stl/list	/^#define __SGI_STL_LIST$/;"	d	file:
__SGI_STL_LIST_H	/Users/lij/.vim/stl/list.h	/^#define __SGI_STL_LIST_H$/;"	d
__SGI_STL_MAP	/Users/lij/.vim/stl/map	/^#define __SGI_STL_MAP$/;"	d	file:
__SGI_STL_MAP_H	/Users/lij/.vim/stl/map.h	/^#define __SGI_STL_MAP_H$/;"	d
__SGI_STL_MEMORY	/Users/lij/.vim/stl/memory	/^#define __SGI_STL_MEMORY$/;"	d	file:
__SGI_STL_MULTIMAP_H	/Users/lij/.vim/stl/multimap.h	/^#define __SGI_STL_MULTIMAP_H$/;"	d
__SGI_STL_MULTISET_H	/Users/lij/.vim/stl/multiset.h	/^#define __SGI_STL_MULTISET_H$/;"	d
__SGI_STL_NO_ARROW_OPERATOR	/Users/lij/.vim/stl/stl_config.h	/^#     define __SGI_STL_NO_ARROW_OPERATOR$/;"	d
__SGI_STL_NO_ARROW_OPERATOR	/Users/lij/.vim/stl/stl_config.h	/^#   define __SGI_STL_NO_ARROW_OPERATOR$/;"	d
__SGI_STL_NUMERIC	/Users/lij/.vim/stl/numeric	/^#define __SGI_STL_NUMERIC$/;"	d	file:
__SGI_STL_PAIR_H	/Users/lij/.vim/stl/pair.h	/^#define __SGI_STL_PAIR_H$/;"	d
__SGI_STL_PTHREAD_ALLOC	/Users/lij/.vim/stl/pthread_alloc	/^#define __SGI_STL_PTHREAD_ALLOC$/;"	d	file:
__SGI_STL_PTHREAD_ALLOC_H	/Users/lij/.vim/stl/pthread_alloc.h	/^#define __SGI_STL_PTHREAD_ALLOC_H$/;"	d
__SGI_STL_QUEUE	/Users/lij/.vim/stl/queue	/^#define __SGI_STL_QUEUE$/;"	d	file:
__SGI_STL_ROPE	/Users/lij/.vim/stl/rope	/^#define __SGI_STL_ROPE$/;"	d	file:
__SGI_STL_ROPE_H	/Users/lij/.vim/stl/rope.h	/^#define __SGI_STL_ROPE_H$/;"	d
__SGI_STL_SET	/Users/lij/.vim/stl/set	/^#define __SGI_STL_SET$/;"	d	file:
__SGI_STL_SET_H	/Users/lij/.vim/stl/set.h	/^#define __SGI_STL_SET_H$/;"	d
__SGI_STL_SLIST	/Users/lij/.vim/stl/slist	/^#define __SGI_STL_SLIST$/;"	d	file:
__SGI_STL_SLIST_H	/Users/lij/.vim/stl/slist.h	/^#define __SGI_STL_SLIST_H$/;"	d
__SGI_STL_STACK	/Users/lij/.vim/stl/stack	/^#define __SGI_STL_STACK$/;"	d	file:
__SGI_STL_STACK_H	/Users/lij/.vim/stl/stack.h	/^#define __SGI_STL_STACK_H$/;"	d
__SGI_STL_STRING	/Users/lij/.vim/stl/string	/^#define __SGI_STL_STRING$/;"	d	file:
__SGI_STL_STRING_FWD_H	/Users/lij/.vim/stl/stl_string_fwd.h	/^#define __SGI_STL_STRING_FWD_H$/;"	d
__SGI_STL_TEMPBUF_H	/Users/lij/.vim/stl/tempbuf.h	/^#define __SGI_STL_TEMPBUF_H$/;"	d
__SGI_STL_TREE_H	/Users/lij/.vim/stl/tree.h	/^#define __SGI_STL_TREE_H$/;"	d
__SGI_STL_USE_AUTO_PTR_CONVERSIONS	/Users/lij/.vim/stl/stl_config.h	/^#       define __SGI_STL_USE_AUTO_PTR_CONVERSIONS$/;"	d
__SGI_STL_USE_AUTO_PTR_CONVERSIONS	/Users/lij/.vim/stl/stl_config.h	/^#     define __SGI_STL_USE_AUTO_PTR_CONVERSIONS$/;"	d
__SGI_STL_UTILITY	/Users/lij/.vim/stl/utility	/^#define __SGI_STL_UTILITY$/;"	d	file:
__SGI_STL_VALARRAY	/Users/lij/.vim/stl/valarray	/^#define __SGI_STL_VALARRAY$/;"	d	file:
__SGI_STL_VECBOOL_TEMPLATE	/Users/lij/.vim/stl/stl_bvector.h	/^#  define __SGI_STL_VECBOOL_TEMPLATE$/;"	d
__SGI_STL_VECBOOL_TEMPLATE	/Users/lij/.vim/stl/stl_bvector.h	/^#undef __SGI_STL_VECBOOL_TEMPLATE$/;"	d
__SGI_STL_VECTOR	/Users/lij/.vim/stl/vector	/^#define __SGI_STL_VECTOR$/;"	d	file:
__SGI_STL_VECTOR_H	/Users/lij/.vim/stl/vector.h	/^#define __SGI_STL_VECTOR_H$/;"	d
__STATIC_IF_SGI_ALLOC	/Users/lij/.vim/stl/stl_rope.h	/^#define __STATIC_IF_SGI_ALLOC /;"	d
__STD	/Users/lij/.vim/stl/stl_config.h	/^#   define __STD /;"	d
__STD_QUALIFIER	/Users/lij/.vim/stl/stl_config.h	/^#   define __STD_QUALIFIER /;"	d
__STD_QUALIFIER	/Users/lij/.vim/stl/stl_config.h	/^#   define __STD_QUALIFIER$/;"	d
__STD_RELOPS	/Users/lij/.vim/stl/stl_config.h	/^#     define __STD_RELOPS /;"	d
__STD_RELOPS	/Users/lij/.vim/stl/stl_config.h	/^#   define __STD_RELOPS /;"	d
__STL_BEGIN_NAMESPACE	/Users/lij/.vim/stl/stl_config.h	/^#   define __STL_BEGIN_NAMESPACE /;"	d
__STL_BEGIN_RELOPS_NAMESPACE	/Users/lij/.vim/stl/stl_config.h	/^#     define __STL_BEGIN_RELOPS_NAMESPACE /;"	d
__STL_BEGIN_RELOPS_NAMESPACE	/Users/lij/.vim/stl/stl_config.h	/^#   define __STL_BEGIN_RELOPS_NAMESPACE /;"	d
__STL_BINARY_FUNCTION_CHECK	/Users/lij/.vim/stl/concept_checks.h	/^#define __STL_BINARY_FUNCTION_CHECK(/;"	d
__STL_CAN_THROW_RANGE_ERRORS	/Users/lij/.vim/stl/stl_config.h	/^#     define __STL_CAN_THROW_RANGE_ERRORS$/;"	d
__STL_CATCH_ALL	/Users/lij/.vim/stl/stl_config.h	/^#   define __STL_CATCH_ALL /;"	d
__STL_CLASS_BINARY_FUNCTION_CHECK	/Users/lij/.vim/stl/concept_checks.h	/^#define __STL_CLASS_BINARY_FUNCTION_CHECK(/;"	d
__STL_CLASS_BINARY_FUNCTION_CHECK	/Users/lij/.vim/stl/stl_hash_map.h	/^  __STL_CLASS_BINARY_FUNCTION_CHECK(_EqualKey, bool, _Key, _Key);$/;"	p	class:hash_map	access:private	signature:(_EqualKey, bool, _Key, _Key)
__STL_CLASS_BINARY_FUNCTION_CHECK	/Users/lij/.vim/stl/stl_hash_map.h	/^  __STL_CLASS_BINARY_FUNCTION_CHECK(_EqualKey, bool, _Key, _Key);$/;"	p	class:hash_multimap	access:private	signature:(_EqualKey, bool, _Key, _Key)
__STL_CLASS_BINARY_FUNCTION_CHECK	/Users/lij/.vim/stl/stl_hash_set.h	/^  __STL_CLASS_BINARY_FUNCTION_CHECK(_EqualKey, bool, _Value, _Value);$/;"	p	class:hash_multiset	access:private	signature:(_EqualKey, bool, _Value, _Value)
__STL_CLASS_BINARY_FUNCTION_CHECK	/Users/lij/.vim/stl/stl_hash_set.h	/^  __STL_CLASS_BINARY_FUNCTION_CHECK(_EqualKey, bool, _Value, _Value);$/;"	p	class:hash_set	access:private	signature:(_EqualKey, bool, _Value, _Value)
__STL_CLASS_BINARY_FUNCTION_CHECK	/Users/lij/.vim/stl/stl_map.h	/^  __STL_CLASS_BINARY_FUNCTION_CHECK(_Compare, bool, _Key, _Key);$/;"	p	class:map	access:public	signature:(_Compare, bool, _Key, _Key)
__STL_CLASS_BINARY_FUNCTION_CHECK	/Users/lij/.vim/stl/stl_multimap.h	/^  __STL_CLASS_BINARY_FUNCTION_CHECK(_Compare, bool, _Key, _Key);$/;"	p	class:multimap	access:private	signature:(_Compare, bool, _Key, _Key)
__STL_CLASS_BINARY_FUNCTION_CHECK	/Users/lij/.vim/stl/stl_multiset.h	/^  __STL_CLASS_BINARY_FUNCTION_CHECK(_Compare, bool, _Key, _Key);$/;"	p	class:multiset	access:private	signature:(_Compare, bool, _Key, _Key)
__STL_CLASS_BINARY_FUNCTION_CHECK	/Users/lij/.vim/stl/stl_queue.h	/^  __STL_CLASS_BINARY_FUNCTION_CHECK(_Compare, bool, _Tp, _Tp);$/;"	p	class:priority_queue	access:private	signature:(_Compare, bool, _Tp, _Tp)
__STL_CLASS_BINARY_FUNCTION_CHECK	/Users/lij/.vim/stl/stl_set.h	/^  __STL_CLASS_BINARY_FUNCTION_CHECK(_Compare, bool, _Key, _Key);$/;"	p	class:set	access:private	signature:(_Compare, bool, _Key, _Key)
__STL_CLASS_GENERATOR_CHECK	/Users/lij/.vim/stl/concept_checks.h	/^#define __STL_CLASS_GENERATOR_CHECK(/;"	d
__STL_CLASS_PARTIAL_SPECIALIZATION	/Users/lij/.vim/stl/stl_config.h	/^#     define __STL_CLASS_PARTIAL_SPECIALIZATION$/;"	d
__STL_CLASS_PARTIAL_SPECIALIZATION	/Users/lij/.vim/stl/stl_config.h	/^#   define __STL_CLASS_PARTIAL_SPECIALIZATION$/;"	d
__STL_CLASS_REQUIRES	/Users/lij/.vim/stl/concept_checks.h	/^#define __STL_CLASS_REQUIRES(/;"	d
__STL_CLASS_REQUIRES	/Users/lij/.vim/stl/stl_deque.h	/^  __STL_CLASS_REQUIRES(_Tp, _Assignable);$/;"	p	class:deque	access:private	signature:(_Tp, _Assignable)
__STL_CLASS_REQUIRES	/Users/lij/.vim/stl/stl_hash_map.h	/^  __STL_CLASS_REQUIRES(_Key, _Assignable);$/;"	p	class:hash_map	access:private	signature:(_Key, _Assignable)
__STL_CLASS_REQUIRES	/Users/lij/.vim/stl/stl_hash_map.h	/^  __STL_CLASS_REQUIRES(_Key, _Assignable);$/;"	p	class:hash_multimap	access:private	signature:(_Key, _Assignable)
__STL_CLASS_REQUIRES	/Users/lij/.vim/stl/stl_hash_map.h	/^  __STL_CLASS_REQUIRES(_Tp, _Assignable);$/;"	p	class:hash_map	access:private	signature:(_Tp, _Assignable)
__STL_CLASS_REQUIRES	/Users/lij/.vim/stl/stl_hash_map.h	/^  __STL_CLASS_REQUIRES(_Tp, _Assignable);$/;"	p	class:hash_multimap	access:private	signature:(_Tp, _Assignable)
__STL_CLASS_REQUIRES	/Users/lij/.vim/stl/stl_hash_set.h	/^  __STL_CLASS_REQUIRES(_Value, _Assignable);$/;"	p	class:hash_multiset	access:private	signature:(_Value, _Assignable)
__STL_CLASS_REQUIRES	/Users/lij/.vim/stl/stl_hash_set.h	/^  __STL_CLASS_REQUIRES(_Value, _Assignable);$/;"	p	class:hash_set	access:private	signature:(_Value, _Assignable)
__STL_CLASS_REQUIRES	/Users/lij/.vim/stl/stl_list.h	/^  __STL_CLASS_REQUIRES(_Tp, _Assignable);$/;"	p	class:list	access:private	signature:(_Tp, _Assignable)
__STL_CLASS_REQUIRES	/Users/lij/.vim/stl/stl_map.h	/^  __STL_CLASS_REQUIRES(_Tp, _Assignable);$/;"	p	class:map	access:public	signature:(_Tp, _Assignable)
__STL_CLASS_REQUIRES	/Users/lij/.vim/stl/stl_multimap.h	/^  __STL_CLASS_REQUIRES(_Tp, _Assignable);$/;"	p	class:multimap	access:private	signature:(_Tp, _Assignable)
__STL_CLASS_REQUIRES	/Users/lij/.vim/stl/stl_multiset.h	/^  __STL_CLASS_REQUIRES(_Key, _Assignable);$/;"	p	class:multiset	access:private	signature:(_Key, _Assignable)
__STL_CLASS_REQUIRES	/Users/lij/.vim/stl/stl_queue.h	/^  __STL_CLASS_REQUIRES(_Sequence, _BackInsertionSequence);$/;"	p	class:queue	access:private	signature:(_Sequence, _BackInsertionSequence)
__STL_CLASS_REQUIRES	/Users/lij/.vim/stl/stl_queue.h	/^  __STL_CLASS_REQUIRES(_Sequence, _FrontInsertionSequence);$/;"	p	class:queue	access:private	signature:(_Sequence, _FrontInsertionSequence)
__STL_CLASS_REQUIRES	/Users/lij/.vim/stl/stl_queue.h	/^  __STL_CLASS_REQUIRES(_Sequence, _RandomAccessContainer);$/;"	p	class:priority_queue	access:private	signature:(_Sequence, _RandomAccessContainer)
__STL_CLASS_REQUIRES	/Users/lij/.vim/stl/stl_queue.h	/^  __STL_CLASS_REQUIRES(_Sequence, _Sequence);$/;"	p	class:priority_queue	access:private	signature:(_Sequence, _Sequence)
__STL_CLASS_REQUIRES	/Users/lij/.vim/stl/stl_queue.h	/^  __STL_CLASS_REQUIRES(_Tp, _Assignable);$/;"	p	class:priority_queue	access:private	signature:(_Tp, _Assignable)
__STL_CLASS_REQUIRES	/Users/lij/.vim/stl/stl_queue.h	/^  __STL_CLASS_REQUIRES(_Tp, _Assignable);$/;"	p	class:queue	access:private	signature:(_Tp, _Assignable)
__STL_CLASS_REQUIRES	/Users/lij/.vim/stl/stl_set.h	/^  __STL_CLASS_REQUIRES(_Key, _Assignable);$/;"	p	class:set	access:private	signature:(_Key, _Assignable)
__STL_CLASS_REQUIRES	/Users/lij/.vim/stl/stl_slist.h	/^  __STL_CLASS_REQUIRES(_Tp, _Assignable);$/;"	p	class:slist	access:private	signature:(_Tp, _Assignable)
__STL_CLASS_REQUIRES	/Users/lij/.vim/stl/stl_stack.h	/^  __STL_CLASS_REQUIRES(_Sequence, _BackInsertionSequence);$/;"	p	class:stack	access:private	signature:(_Sequence, _BackInsertionSequence)
__STL_CLASS_REQUIRES	/Users/lij/.vim/stl/stl_stack.h	/^  __STL_CLASS_REQUIRES(_Tp, _Assignable);$/;"	p	class:stack	access:private	signature:(_Tp, _Assignable)
__STL_CLASS_REQUIRES	/Users/lij/.vim/stl/stl_vector.h	/^  __STL_CLASS_REQUIRES(_Tp, _Assignable);$/;"	p	class:vector	access:private	signature:(_Tp, _Assignable)
__STL_CLASS_REQUIRES_BINARY_OP	/Users/lij/.vim/stl/concept_checks.h	/^#define __STL_CLASS_REQUIRES_BINARY_OP(/;"	d
__STL_CLASS_REQUIRES_SAME_TYPE	/Users/lij/.vim/stl/concept_checks.h	/^#define __STL_CLASS_REQUIRES_SAME_TYPE(/;"	d
__STL_CLASS_REQUIRES_SAME_TYPE	/Users/lij/.vim/stl/stl_queue.h	/^  __STL_CLASS_REQUIRES_SAME_TYPE(_Tp, _Sequence_value_type);$/;"	p	class:priority_queue	access:private	signature:(_Tp, _Sequence_value_type)
__STL_CLASS_REQUIRES_SAME_TYPE	/Users/lij/.vim/stl/stl_queue.h	/^  __STL_CLASS_REQUIRES_SAME_TYPE(_Tp, _Sequence_value_type);$/;"	p	class:queue	access:private	signature:(_Tp, _Sequence_value_type)
__STL_CLASS_REQUIRES_SAME_TYPE	/Users/lij/.vim/stl/stl_stack.h	/^  __STL_CLASS_REQUIRES_SAME_TYPE(_Tp, _Sequence_value_type);$/;"	p	class:stack	access:private	signature:(_Tp, _Sequence_value_type)
__STL_CLASS_UNARY_FUNCTION_CHECK	/Users/lij/.vim/stl/concept_checks.h	/^#define __STL_CLASS_UNARY_FUNCTION_CHECK(/;"	d
__STL_CLASS_UNARY_FUNCTION_CHECK	/Users/lij/.vim/stl/stl_hash_map.h	/^  __STL_CLASS_UNARY_FUNCTION_CHECK(_HashFcn, size_t, _Key);$/;"	p	class:hash_map	access:private	signature:(_HashFcn, size_t, _Key)
__STL_CLASS_UNARY_FUNCTION_CHECK	/Users/lij/.vim/stl/stl_hash_map.h	/^  __STL_CLASS_UNARY_FUNCTION_CHECK(_HashFcn, size_t, _Key);$/;"	p	class:hash_multimap	access:private	signature:(_HashFcn, size_t, _Key)
__STL_CLASS_UNARY_FUNCTION_CHECK	/Users/lij/.vim/stl/stl_hash_set.h	/^  __STL_CLASS_UNARY_FUNCTION_CHECK(_HashFcn, size_t, _Value);$/;"	p	class:hash_multiset	access:private	signature:(_HashFcn, size_t, _Value)
__STL_CLASS_UNARY_FUNCTION_CHECK	/Users/lij/.vim/stl/stl_hash_set.h	/^  __STL_CLASS_UNARY_FUNCTION_CHECK(_HashFcn, size_t, _Value);$/;"	p	class:hash_set	access:private	signature:(_HashFcn, size_t, _Value)
__STL_CONFIG_H	/Users/lij/.vim/stl/stl_config.h	/^# define __STL_CONFIG_H$/;"	d
__STL_CONTAINER_CONCEPTS_H	/Users/lij/.vim/stl/container_concepts.h	/^#define __STL_CONTAINER_CONCEPTS_H$/;"	d
__STL_CONVERTIBLE	/Users/lij/.vim/stl/concept_checks.h	/^#define __STL_CONVERTIBLE(/;"	d
__STL_DATA_ALIGNMENT	/Users/lij/.vim/stl/pthread_alloc	/^#define __STL_DATA_ALIGNMENT /;"	d	file:
__STL_DECLARE_LIMITS_MEMBER	/Users/lij/.vim/stl/limits	/^  __STL_DECLARE_LIMITS_MEMBER(bool, has_denorm_loss,   false);$/;"	p	class:_Floating_limits	file:	access:public	signature:(bool, has_denorm_loss, false)
__STL_DECLARE_LIMITS_MEMBER	/Users/lij/.vim/stl/limits	/^  __STL_DECLARE_LIMITS_MEMBER(bool, has_denorm_loss,   false);$/;"	p	class:_Numeric_limits_base	file:	access:public	signature:(bool, has_denorm_loss, false)
__STL_DECLARE_LIMITS_MEMBER	/Users/lij/.vim/stl/limits	/^  __STL_DECLARE_LIMITS_MEMBER(bool, has_infinity,      false);$/;"	p	class:_Numeric_limits_base	file:	access:public	signature:(bool, has_infinity, false)
__STL_DECLARE_LIMITS_MEMBER	/Users/lij/.vim/stl/limits	/^  __STL_DECLARE_LIMITS_MEMBER(bool, has_infinity,      true);$/;"	p	class:_Floating_limits	file:	access:public	signature:(bool, has_infinity, true)
__STL_DECLARE_LIMITS_MEMBER	/Users/lij/.vim/stl/limits	/^  __STL_DECLARE_LIMITS_MEMBER(bool, has_quiet_NaN,     false);$/;"	p	class:_Numeric_limits_base	file:	access:public	signature:(bool, has_quiet_NaN, false)
__STL_DECLARE_LIMITS_MEMBER	/Users/lij/.vim/stl/limits	/^  __STL_DECLARE_LIMITS_MEMBER(bool, has_quiet_NaN,     true);$/;"	p	class:_Floating_limits	file:	access:public	signature:(bool, has_quiet_NaN, true)
__STL_DECLARE_LIMITS_MEMBER	/Users/lij/.vim/stl/limits	/^  __STL_DECLARE_LIMITS_MEMBER(bool, has_signaling_NaN, false);$/;"	p	class:_Numeric_limits_base	file:	access:public	signature:(bool, has_signaling_NaN, false)
__STL_DECLARE_LIMITS_MEMBER	/Users/lij/.vim/stl/limits	/^  __STL_DECLARE_LIMITS_MEMBER(bool, has_signaling_NaN, true);$/;"	p	class:_Floating_limits	file:	access:public	signature:(bool, has_signaling_NaN, true)
__STL_DECLARE_LIMITS_MEMBER	/Users/lij/.vim/stl/limits	/^  __STL_DECLARE_LIMITS_MEMBER(bool, is_bounded,      true);$/;"	p	class:_Floating_limits	file:	access:public	signature:(bool, is_bounded, true)
__STL_DECLARE_LIMITS_MEMBER	/Users/lij/.vim/stl/limits	/^  __STL_DECLARE_LIMITS_MEMBER(bool, is_bounded, false);$/;"	p	class:_Numeric_limits_base	file:	access:public	signature:(bool, is_bounded, false)
__STL_DECLARE_LIMITS_MEMBER	/Users/lij/.vim/stl/limits	/^  __STL_DECLARE_LIMITS_MEMBER(bool, is_bounded, true);$/;"	p	class:_Integer_limits	file:	access:public	signature:(bool, is_bounded, true)
__STL_DECLARE_LIMITS_MEMBER	/Users/lij/.vim/stl/limits	/^  __STL_DECLARE_LIMITS_MEMBER(bool, is_exact,   false);$/;"	p	class:_Numeric_limits_base	file:	access:public	signature:(bool, is_exact, false)
__STL_DECLARE_LIMITS_MEMBER	/Users/lij/.vim/stl/limits	/^  __STL_DECLARE_LIMITS_MEMBER(bool, is_exact,   true);$/;"	p	class:_Integer_limits	file:	access:public	signature:(bool, is_exact, true)
__STL_DECLARE_LIMITS_MEMBER	/Users/lij/.vim/stl/limits	/^  __STL_DECLARE_LIMITS_MEMBER(bool, is_iec559,       __IsIEC559);$/;"	p	class:_Floating_limits	file:	access:public	signature:(bool, is_iec559, __IsIEC559)
__STL_DECLARE_LIMITS_MEMBER	/Users/lij/.vim/stl/limits	/^  __STL_DECLARE_LIMITS_MEMBER(bool, is_iec559,  false);$/;"	p	class:_Numeric_limits_base	file:	access:public	signature:(bool, is_iec559, false)
__STL_DECLARE_LIMITS_MEMBER	/Users/lij/.vim/stl/limits	/^  __STL_DECLARE_LIMITS_MEMBER(bool, is_integer, false);$/;"	p	class:_Numeric_limits_base	file:	access:public	signature:(bool, is_integer, false)
__STL_DECLARE_LIMITS_MEMBER	/Users/lij/.vim/stl/limits	/^  __STL_DECLARE_LIMITS_MEMBER(bool, is_integer, true);$/;"	p	class:_Integer_limits	file:	access:public	signature:(bool, is_integer, true)
__STL_DECLARE_LIMITS_MEMBER	/Users/lij/.vim/stl/limits	/^  __STL_DECLARE_LIMITS_MEMBER(bool, is_modulo,  false);$/;"	p	class:_Numeric_limits_base	file:	access:public	signature:(bool, is_modulo, false)
__STL_DECLARE_LIMITS_MEMBER	/Users/lij/.vim/stl/limits	/^  __STL_DECLARE_LIMITS_MEMBER(bool, is_modulo, __ismod);$/;"	p	class:_Integer_limits	file:	access:public	signature:(bool, is_modulo, __ismod)
__STL_DECLARE_LIMITS_MEMBER	/Users/lij/.vim/stl/limits	/^  __STL_DECLARE_LIMITS_MEMBER(bool, is_signed,  __imin != 0);$/;"	p	class:_Integer_limits	file:	access:public	signature:(bool, is_signed, __imin != 0)
__STL_DECLARE_LIMITS_MEMBER	/Users/lij/.vim/stl/limits	/^  __STL_DECLARE_LIMITS_MEMBER(bool, is_signed,  false);$/;"	p	class:_Numeric_limits_base	file:	access:public	signature:(bool, is_signed, false)
__STL_DECLARE_LIMITS_MEMBER	/Users/lij/.vim/stl/limits	/^  __STL_DECLARE_LIMITS_MEMBER(bool, is_signed, true);$/;"	p	class:_Floating_limits	file:	access:public	signature:(bool, is_signed, true)
__STL_DECLARE_LIMITS_MEMBER	/Users/lij/.vim/stl/limits	/^  __STL_DECLARE_LIMITS_MEMBER(bool, is_specialized, false);$/;"	p	class:_Numeric_limits_base	file:	access:public	signature:(bool, is_specialized, false)
__STL_DECLARE_LIMITS_MEMBER	/Users/lij/.vim/stl/limits	/^  __STL_DECLARE_LIMITS_MEMBER(bool, is_specialized, true);$/;"	p	class:_Floating_limits	file:	access:public	signature:(bool, is_specialized, true)
__STL_DECLARE_LIMITS_MEMBER	/Users/lij/.vim/stl/limits	/^  __STL_DECLARE_LIMITS_MEMBER(bool, is_specialized, true);$/;"	p	class:_Integer_limits	file:	access:public	signature:(bool, is_specialized, true)
__STL_DECLARE_LIMITS_MEMBER	/Users/lij/.vim/stl/limits	/^  __STL_DECLARE_LIMITS_MEMBER(bool, tinyness_before,  false);$/;"	p	class:_Numeric_limits_base	file:	access:public	signature:(bool, tinyness_before, false)
__STL_DECLARE_LIMITS_MEMBER	/Users/lij/.vim/stl/limits	/^  __STL_DECLARE_LIMITS_MEMBER(bool, tinyness_before, false);$/;"	p	class:_Floating_limits	file:	access:public	signature:(bool, tinyness_before, false)
__STL_DECLARE_LIMITS_MEMBER	/Users/lij/.vim/stl/limits	/^  __STL_DECLARE_LIMITS_MEMBER(bool, traps,            false);$/;"	p	class:_Numeric_limits_base	file:	access:public	signature:(bool, traps, false)
__STL_DECLARE_LIMITS_MEMBER	/Users/lij/.vim/stl/limits	/^  __STL_DECLARE_LIMITS_MEMBER(bool, traps,           true);$/;"	p	class:_Floating_limits	file:	access:public	signature:(bool, traps, true)
__STL_DECLARE_LIMITS_MEMBER	/Users/lij/.vim/stl/limits	/^  __STL_DECLARE_LIMITS_MEMBER(float_denorm_style,$/;"	p	class:_Floating_limits	file:	access:public	signature:(float_denorm_style, has_denorm, denorm_indeterminate)
__STL_DECLARE_LIMITS_MEMBER	/Users/lij/.vim/stl/limits	/^  __STL_DECLARE_LIMITS_MEMBER(float_denorm_style,$/;"	p	class:_Numeric_limits_base	file:	access:public	signature:(float_denorm_style, has_denorm, denorm_absent)
__STL_DECLARE_LIMITS_MEMBER	/Users/lij/.vim/stl/limits	/^  __STL_DECLARE_LIMITS_MEMBER(float_round_style, round_style, __RoundStyle);$/;"	p	class:_Floating_limits	file:	access:public	signature:(float_round_style, round_style, __RoundStyle)
__STL_DECLARE_LIMITS_MEMBER	/Users/lij/.vim/stl/limits	/^  __STL_DECLARE_LIMITS_MEMBER(float_round_style,$/;"	p	class:_Numeric_limits_base	file:	access:public	signature:(float_round_style, round_style, round_toward_zero)
__STL_DECLARE_LIMITS_MEMBER	/Users/lij/.vim/stl/limits	/^  __STL_DECLARE_LIMITS_MEMBER(int,  radix,      2);$/;"	p	class:_Integer_limits	file:	access:public	signature:(int, radix, 2)
__STL_DECLARE_LIMITS_MEMBER	/Users/lij/.vim/stl/limits	/^  __STL_DECLARE_LIMITS_MEMBER(int, digits,   0);$/;"	p	class:_Numeric_limits_base	file:	access:public	signature:(int, digits, 0)
__STL_DECLARE_LIMITS_MEMBER	/Users/lij/.vim/stl/limits	/^  __STL_DECLARE_LIMITS_MEMBER(int, digits,   __Digits);$/;"	p	class:_Floating_limits	file:	access:public	signature:(int, digits, __Digits)
__STL_DECLARE_LIMITS_MEMBER	/Users/lij/.vim/stl/limits	/^  __STL_DECLARE_LIMITS_MEMBER(int, digits10, (digits * 301) \/ 1000); $/;"	p	class:_Integer_limits	file:	access:public	signature:(int, digits10, (digits * 301) / 1000)
__STL_DECLARE_LIMITS_MEMBER	/Users/lij/.vim/stl/limits	/^  __STL_DECLARE_LIMITS_MEMBER(int, digits10, 0);$/;"	p	class:_Numeric_limits_base	file:	access:public	signature:(int, digits10, 0)
__STL_DECLARE_LIMITS_MEMBER	/Users/lij/.vim/stl/limits	/^  __STL_DECLARE_LIMITS_MEMBER(int, digits10, __Digits10);$/;"	p	class:_Floating_limits	file:	access:public	signature:(int, digits10, __Digits10)
__STL_DECLARE_LIMITS_MEMBER	/Users/lij/.vim/stl/limits	/^  __STL_DECLARE_LIMITS_MEMBER(int, max_exponent,   0);$/;"	p	class:_Numeric_limits_base	file:	access:public	signature:(int, max_exponent, 0)
__STL_DECLARE_LIMITS_MEMBER	/Users/lij/.vim/stl/limits	/^  __STL_DECLARE_LIMITS_MEMBER(int, max_exponent,   __MaxExp);$/;"	p	class:_Floating_limits	file:	access:public	signature:(int, max_exponent, __MaxExp)
__STL_DECLARE_LIMITS_MEMBER	/Users/lij/.vim/stl/limits	/^  __STL_DECLARE_LIMITS_MEMBER(int, max_exponent10, 0);$/;"	p	class:_Numeric_limits_base	file:	access:public	signature:(int, max_exponent10, 0)
__STL_DECLARE_LIMITS_MEMBER	/Users/lij/.vim/stl/limits	/^  __STL_DECLARE_LIMITS_MEMBER(int, max_exponent10, __MaxExp10);$/;"	p	class:_Floating_limits	file:	access:public	signature:(int, max_exponent10, __MaxExp10)
__STL_DECLARE_LIMITS_MEMBER	/Users/lij/.vim/stl/limits	/^  __STL_DECLARE_LIMITS_MEMBER(int, min_exponent,   0);$/;"	p	class:_Numeric_limits_base	file:	access:public	signature:(int, min_exponent, 0)
__STL_DECLARE_LIMITS_MEMBER	/Users/lij/.vim/stl/limits	/^  __STL_DECLARE_LIMITS_MEMBER(int, min_exponent,   __MinExp);$/;"	p	class:_Floating_limits	file:	access:public	signature:(int, min_exponent, __MinExp)
__STL_DECLARE_LIMITS_MEMBER	/Users/lij/.vim/stl/limits	/^  __STL_DECLARE_LIMITS_MEMBER(int, min_exponent10, 0);$/;"	p	class:_Numeric_limits_base	file:	access:public	signature:(int, min_exponent10, 0)
__STL_DECLARE_LIMITS_MEMBER	/Users/lij/.vim/stl/limits	/^  __STL_DECLARE_LIMITS_MEMBER(int, min_exponent10, __MinExp10);$/;"	p	class:_Floating_limits	file:	access:public	signature:(int, min_exponent10, __MinExp10)
__STL_DECLARE_LIMITS_MEMBER	/Users/lij/.vim/stl/limits	/^  __STL_DECLARE_LIMITS_MEMBER(int, radix, 0);$/;"	p	class:_Numeric_limits_base	file:	access:public	signature:(int, radix, 0)
__STL_DECLARE_LIMITS_MEMBER	/Users/lij/.vim/stl/limits	/^  __STL_DECLARE_LIMITS_MEMBER(int, radix, 2);$/;"	p	class:_Floating_limits	file:	access:public	signature:(int, radix, 2)
__STL_DECLARE_LIMITS_MEMBER	/Users/lij/.vim/stl/limits	/^  __STL_DECLARE_LIMITS_MEMBER(int,$/;"	p	class:_Integer_limits	file:	access:public	signature:(int, digits, (__idigits < 0) ? (int)(sizeof(_Int) * CHAR_BIT) - (__imin == 0 ? 0 : 1) : __idigits)
__STL_DECLARE_LIMITS_MEMBER	/Users/lij/.vim/stl/limits	/^# define __STL_DECLARE_LIMITS_MEMBER(/;"	d	file:
__STL_DECLARE_NUMERIC_LIMITS_MEMBER	/Users/lij/.vim/stl/limits	/^#undef __STL_DECLARE_NUMERIC_LIMITS_MEMBER$/;"	d	file:
__STL_DEFAULT_ALLOCATOR	/Users/lij/.vim/stl/stl_config.h	/^#     define __STL_DEFAULT_ALLOCATOR(/;"	d
__STL_DEFAULT_CONSTRUCTOR_BUG	/Users/lij/.vim/stl/stl_config.h	/^#     define __STL_DEFAULT_CONSTRUCTOR_BUG$/;"	d
__STL_DEFAULT_CONSTRUCTOR_BUG	/Users/lij/.vim/stl/stl_config.h	/^#   define __STL_DEFAULT_CONSTRUCTOR_BUG$/;"	d
__STL_DEFINE_BINARY_OP_CHECK	/Users/lij/.vim/stl/concept_checks.h	/^#define __STL_DEFINE_BINARY_OP_CHECK(/;"	d
__STL_DEFINE_FLOAT_LIMITS_MEMBER	/Users/lij/.vim/stl/limits	/^# define __STL_DEFINE_FLOAT_LIMITS_MEMBER(/;"	d	file:
__STL_DEFINE_FLOAT_LIMITS_MEMBER	/Users/lij/.vim/stl/limits	/^#undef __STL_DEFINE_FLOAT_LIMITS_MEMBER$/;"	d	file:
__STL_DEFINE_INTEGER_LIMITS_MEMBER	/Users/lij/.vim/stl/limits	/^# define __STL_DEFINE_INTEGER_LIMITS_MEMBER(/;"	d	file:
__STL_DEFINE_INTEGER_LIMITS_MEMBER	/Users/lij/.vim/stl/limits	/^#undef __STL_DEFINE_INTEGER_LIMITS_MEMBER$/;"	d	file:
__STL_DEFINE_NUMERIC_BASE_MEMBER	/Users/lij/.vim/stl/limits	/^# define __STL_DEFINE_NUMERIC_BASE_MEMBER(/;"	d	file:
__STL_DEFINE_NUMERIC_BASE_MEMBER	/Users/lij/.vim/stl/limits	/^#undef __STL_DEFINE_NUMERIC_BASE_MEMBER$/;"	d	file:
__STL_DEPENDENT_DEFAULT_TMPL	/Users/lij/.vim/stl/stl_config.h	/^#   define __STL_DEPENDENT_DEFAULT_TMPL(/;"	d
__STL_DONT_USE_BOOL_TYPEDEF	/Users/lij/.vim/stl/stl_config.h	/^#     define __STL_DONT_USE_BOOL_TYPEDEF$/;"	d
__STL_END_NAMESPACE	/Users/lij/.vim/stl/stl_config.h	/^#   define __STL_END_NAMESPACE /;"	d
__STL_END_RELOPS_NAMESPACE	/Users/lij/.vim/stl/stl_config.h	/^#     define __STL_END_RELOPS_NAMESPACE /;"	d
__STL_END_RELOPS_NAMESPACE	/Users/lij/.vim/stl/stl_config.h	/^#   define __STL_END_RELOPS_NAMESPACE /;"	d
__STL_EXCEPTION_BASE	/Users/lij/.vim/stl/stl_exception.h	/^#define __STL_EXCEPTION_BASE /;"	d
__STL_EXPLICIT_FUNCTION_TMPL_ARGS	/Users/lij/.vim/stl/stl_config.h	/^#     define __STL_EXPLICIT_FUNCTION_TMPL_ARGS$/;"	d
__STL_FREE_STRING	/Users/lij/.vim/stl/stl_rope.h	/^#       define __STL_FREE_STRING(/;"	d
__STL_FUNCTION_TMPL_PARTIAL_ORDER	/Users/lij/.vim/stl/stl_config.h	/^#     define __STL_FUNCTION_TMPL_PARTIAL_ORDER$/;"	d
__STL_FUNCTION_TMPL_PARTIAL_ORDER	/Users/lij/.vim/stl/stl_config.h	/^#   define __STL_FUNCTION_TMPL_PARTIAL_ORDER$/;"	d
__STL_GENERATOR_CHECK	/Users/lij/.vim/stl/concept_checks.h	/^#define __STL_GENERATOR_CHECK(/;"	d
__STL_HAS_NAMESPACES	/Users/lij/.vim/stl/stl_config.h	/^#       define __STL_HAS_NAMESPACES$/;"	d
__STL_HAS_NAMESPACES	/Users/lij/.vim/stl/stl_config.h	/^#     define __STL_HAS_NAMESPACES$/;"	d
__STL_HAS_NAMESPACES	/Users/lij/.vim/stl/stl_config.h	/^#   define __STL_HAS_NAMESPACES$/;"	d
__STL_HAS_WCHAR_T	/Users/lij/.vim/stl/stl_config.h	/^#     define __STL_HAS_WCHAR_T /;"	d
__STL_LIMITED_DEFAULT_TEMPLATES	/Users/lij/.vim/stl/stl_config.h	/^#     define __STL_LIMITED_DEFAULT_TEMPLATES$/;"	d
__STL_LONG_LONG	/Users/lij/.vim/stl/stl_config.h	/^#     define __STL_LONG_LONG$/;"	d
__STL_LONG_LONG	/Users/lij/.vim/stl/stl_config.h	/^#   define __STL_LONG_LONG /;"	d
__STL_MEMBER_TEMPLATES	/Users/lij/.vim/stl/stl_config.h	/^#     define __STL_MEMBER_TEMPLATES$/;"	d
__STL_MEMBER_TEMPLATES	/Users/lij/.vim/stl/stl_config.h	/^#   define __STL_MEMBER_TEMPLATES$/;"	d
__STL_MEMBER_TEMPLATE_CLASSES	/Users/lij/.vim/stl/stl_config.h	/^#       define __STL_MEMBER_TEMPLATE_CLASSES$/;"	d
__STL_MEMBER_TEMPLATE_CLASSES	/Users/lij/.vim/stl/stl_config.h	/^#     define __STL_MEMBER_TEMPLATE_CLASSES$/;"	d
__STL_MEMBER_TEMPLATE_CLASSES	/Users/lij/.vim/stl/stl_config.h	/^#   define __STL_MEMBER_TEMPLATE_CLASSES$/;"	d
__STL_MEMBER_TEMPLATE_KEYWORD	/Users/lij/.vim/stl/stl_config.h	/^#     define __STL_MEMBER_TEMPLATE_KEYWORD$/;"	d
__STL_MEMBER_TEMPLATE_KEYWORD	/Users/lij/.vim/stl/stl_config.h	/^#   define __STL_MEMBER_TEMPLATE_KEYWORD$/;"	d
__STL_MUTEX_INITIALIZER	/Users/lij/.vim/stl/stl_alloc.h	/^        __STL_MUTEX_INITIALIZER;$/;"	v
__STL_MUTEX_INITIALIZER	/Users/lij/.vim/stl/stl_threads.h	/^#   define __STL_MUTEX_INITIALIZER /;"	d
__STL_MUTEX_INITIALIZER	/Users/lij/.vim/stl/stl_threads.h	/^#   define __STL_MUTEX_INITIALIZER$/;"	d
__STL_NEED_EXPLICIT	/Users/lij/.vim/stl/stl_config.h	/^#     define __STL_NEED_EXPLICIT$/;"	d
__STL_NEED_EXPLICIT	/Users/lij/.vim/stl/stl_config.h	/^#   define __STL_NEED_EXPLICIT$/;"	d
__STL_NEED_TYPENAME	/Users/lij/.vim/stl/stl_config.h	/^#     define __STL_NEED_TYPENAME$/;"	d
__STL_NEED_TYPENAME	/Users/lij/.vim/stl/stl_config.h	/^#   define __STL_NEED_TYPENAME$/;"	d
__STL_NON_TYPE_TMPL_PARAM_BUG	/Users/lij/.vim/stl/stl_config.h	/^#     define __STL_NON_TYPE_TMPL_PARAM_BUG$/;"	d
__STL_NON_TYPE_TMPL_PARAM_BUG	/Users/lij/.vim/stl/stl_config.h	/^#   define __STL_NON_TYPE_TMPL_PARAM_BUG$/;"	d
__STL_NOTHROW	/Users/lij/.vim/stl/limits	/^  static double infinity() __STL_NOTHROW;$/;"	m	class:numeric_limits	file:	access:public
__STL_NOTHROW	/Users/lij/.vim/stl/limits	/^  static double quiet_NaN() __STL_NOTHROW;$/;"	m	class:numeric_limits	file:	access:public
__STL_NOTHROW	/Users/lij/.vim/stl/limits	/^  static double signaling_NaN() __STL_NOTHROW;$/;"	m	class:numeric_limits	file:	access:public
__STL_NOTHROW	/Users/lij/.vim/stl/limits	/^  static float infinity() __STL_NOTHROW;$/;"	m	class:numeric_limits	file:	access:public
__STL_NOTHROW	/Users/lij/.vim/stl/limits	/^  static float quiet_NaN() __STL_NOTHROW;$/;"	m	class:numeric_limits	file:	access:public
__STL_NOTHROW	/Users/lij/.vim/stl/limits	/^  static float signaling_NaN() __STL_NOTHROW;$/;"	m	class:numeric_limits	file:	access:public
__STL_NOTHROW	/Users/lij/.vim/stl/limits	/^  static long double infinity() __STL_NOTHROW;$/;"	m	class:numeric_limits	file:	access:public
__STL_NOTHROW	/Users/lij/.vim/stl/limits	/^  static long double quiet_NaN() __STL_NOTHROW;$/;"	m	class:numeric_limits	file:	access:public
__STL_NOTHROW	/Users/lij/.vim/stl/limits	/^  static long double signaling_NaN() __STL_NOTHROW;$/;"	m	class:numeric_limits	file:	access:public
__STL_NOTHROW	/Users/lij/.vim/stl/stl_alloc.h	/^  __allocator(const __allocator& __a) __STL_NOTHROW$/;"	m	struct:__allocator	access:public
__STL_NOTHROW	/Users/lij/.vim/stl/stl_alloc.h	/^  __allocator(const __allocator<_Tp1, _Alloc>& __a) __STL_NOTHROW$/;"	m	struct:__allocator	access:public
__STL_NOTHROW	/Users/lij/.vim/stl/stl_config.h	/^#   define __STL_NOTHROW /;"	d
__STL_NO_BAD_ALLOC	/Users/lij/.vim/stl/stl_config.h	/^#     define __STL_NO_BAD_ALLOC$/;"	d
__STL_NO_BAD_ALLOC	/Users/lij/.vim/stl/stl_config.h	/^#   define __STL_NO_BAD_ALLOC$/;"	d
__STL_NO_BOOL	/Users/lij/.vim/stl/stl_config.h	/^#     define __STL_NO_BOOL$/;"	d
__STL_NO_BOOL	/Users/lij/.vim/stl/stl_config.h	/^#   define __STL_NO_BOOL$/;"	d
__STL_NO_DRAND48	/Users/lij/.vim/stl/stl_config.h	/^#     define __STL_NO_DRAND48$/;"	d
__STL_NO_DRAND48	/Users/lij/.vim/stl/stl_config.h	/^#   define __STL_NO_DRAND48$/;"	d
__STL_NO_EXCEPTION_HEADER	/Users/lij/.vim/stl/stl_config.h	/^#     define __STL_NO_EXCEPTION_HEADER$/;"	d
__STL_NO_EXCEPTION_HEADER	/Users/lij/.vim/stl/stl_config.h	/^#   define __STL_NO_EXCEPTION_HEADER$/;"	d
__STL_NO_FRIEND_TEMPLATE_CLASS	/Users/lij/.vim/stl/stl_config.h	/^#   define __STL_NO_FRIEND_TEMPLATE_CLASS$/;"	d
__STL_NO_FUNCTION_PTR_IN_CLASS_TEMPLATE	/Users/lij/.vim/stl/stl_config.h	/^#     define __STL_NO_FUNCTION_PTR_IN_CLASS_TEMPLATE$/;"	d
__STL_NO_USING_CLAUSE_IN_CLASS	/Users/lij/.vim/stl/stl_config.h	/^#   define __STL_NO_USING_CLAUSE_IN_CLASS$/;"	d
__STL_NULL_TMPL_ARGS	/Users/lij/.vim/stl/stl_config.h	/^#   define __STL_NULL_TMPL_ARGS /;"	d
__STL_NULL_TMPL_ARGS	/Users/lij/.vim/stl/stl_config.h	/^#   define __STL_NULL_TMPL_ARGS$/;"	d
__STL_NULL_TMPL_ARGS	/Users/lij/.vim/stl/stl_hash_map.h	/^  operator== __STL_NULL_TMPL_ARGS (const hash_map&, const hash_map&);$/;"	p	class:hash_map	access:friend	signature:(const hash_map&, const hash_map&)
__STL_NULL_TMPL_ARGS	/Users/lij/.vim/stl/stl_hash_map.h	/^  operator== __STL_NULL_TMPL_ARGS (const hash_multimap&,const hash_multimap&);$/;"	p	class:hash_multimap	access:friend	signature:(const hash_multimap&,const hash_multimap&)
__STL_NULL_TMPL_ARGS	/Users/lij/.vim/stl/stl_hash_set.h	/^  operator== __STL_NULL_TMPL_ARGS (const hash_multiset&,const hash_multiset&);$/;"	p	class:hash_multiset	access:friend	signature:(const hash_multiset&,const hash_multiset&)
__STL_NULL_TMPL_ARGS	/Users/lij/.vim/stl/stl_hash_set.h	/^  operator== __STL_NULL_TMPL_ARGS (const hash_set&, const hash_set&);$/;"	p	class:hash_set	access:friend	signature:(const hash_set&, const hash_set&)
__STL_NULL_TMPL_ARGS	/Users/lij/.vim/stl/stl_hashtable.h	/^  operator== __STL_NULL_TMPL_ARGS (const hashtable&, const hashtable&);$/;"	p	class:hashtable	access:friend	signature:(const hashtable&, const hashtable&)
__STL_NULL_TMPL_ARGS	/Users/lij/.vim/stl/stl_map.h	/^  operator< __STL_NULL_TMPL_ARGS (const map&, const map&);$/;"	p	class:map	access:friend	signature:(const map&, const map&)
__STL_NULL_TMPL_ARGS	/Users/lij/.vim/stl/stl_map.h	/^  operator== __STL_NULL_TMPL_ARGS (const map&, const map&);$/;"	p	class:map	access:friend	signature:(const map&, const map&)
__STL_NULL_TMPL_ARGS	/Users/lij/.vim/stl/stl_multimap.h	/^  operator< __STL_NULL_TMPL_ARGS (const multimap&, const multimap&);$/;"	p	class:multimap	access:friend	signature:(const multimap&, const multimap&)
__STL_NULL_TMPL_ARGS	/Users/lij/.vim/stl/stl_multimap.h	/^  operator== __STL_NULL_TMPL_ARGS (const multimap&, const multimap&);$/;"	p	class:multimap	access:friend	signature:(const multimap&, const multimap&)
__STL_NULL_TMPL_ARGS	/Users/lij/.vim/stl/stl_multiset.h	/^  operator< __STL_NULL_TMPL_ARGS (const multiset&, const multiset&);$/;"	p	class:multiset	access:friend	signature:(const multiset&, const multiset&)
__STL_NULL_TMPL_ARGS	/Users/lij/.vim/stl/stl_multiset.h	/^  operator== __STL_NULL_TMPL_ARGS (const multiset&, const multiset&);$/;"	p	class:multiset	access:friend	signature:(const multiset&, const multiset&)
__STL_NULL_TMPL_ARGS	/Users/lij/.vim/stl/stl_queue.h	/^  operator<  __STL_NULL_TMPL_ARGS (const queue&, const queue&);$/;"	p	class:queue	access:friend	signature:(const queue&, const queue&)
__STL_NULL_TMPL_ARGS	/Users/lij/.vim/stl/stl_queue.h	/^  operator== __STL_NULL_TMPL_ARGS (const queue&, const queue&);$/;"	p	class:queue	access:friend	signature:(const queue&, const queue&)
__STL_NULL_TMPL_ARGS	/Users/lij/.vim/stl/stl_rope.h	/^        operator+ __STL_NULL_TMPL_ARGS (const rope<_CharT,_Alloc>& __left,$/;"	p	class:rope	access:friend	signature:(const rope<_CharT,_Alloc>& __left, _CharT __right)
__STL_NULL_TMPL_ARGS	/Users/lij/.vim/stl/stl_rope.h	/^        operator+ __STL_NULL_TMPL_ARGS (const rope<_CharT,_Alloc>& __left,$/;"	p	class:rope	access:friend	signature:(const rope<_CharT,_Alloc>& __left, const _CharT* __right)
__STL_NULL_TMPL_ARGS	/Users/lij/.vim/stl/stl_rope.h	/^        operator+ __STL_NULL_TMPL_ARGS (const rope<_CharT,_Alloc>& __left,$/;"	p	class:rope	access:friend	signature:(const rope<_CharT,_Alloc>& __left, const rope<_CharT,_Alloc>& __right)
__STL_NULL_TMPL_ARGS	/Users/lij/.vim/stl/stl_rope.h	/^    friend _Rope_const_iterator<_CharT,_Alloc> operator+ __STL_NULL_TMPL_ARGS$/;"	p	class:_Rope_const_iterator	access:friend	signature:(const _Rope_const_iterator<_CharT,_Alloc>& __x, ptrdiff_t __n)
__STL_NULL_TMPL_ARGS	/Users/lij/.vim/stl/stl_rope.h	/^    friend _Rope_const_iterator<_CharT,_Alloc> operator+ __STL_NULL_TMPL_ARGS$/;"	p	class:_Rope_const_iterator	access:friend	signature:(ptrdiff_t __n, const _Rope_const_iterator<_CharT,_Alloc>& __x)
__STL_NULL_TMPL_ARGS	/Users/lij/.vim/stl/stl_rope.h	/^    friend _Rope_const_iterator<_CharT,_Alloc> operator- __STL_NULL_TMPL_ARGS$/;"	p	class:_Rope_const_iterator	access:friend	signature:(const _Rope_const_iterator<_CharT,_Alloc>& __x, ptrdiff_t __n)
__STL_NULL_TMPL_ARGS	/Users/lij/.vim/stl/stl_rope.h	/^    friend _Rope_iterator<_CharT,_Alloc> operator+ __STL_NULL_TMPL_ARGS$/;"	p	class:_Rope_iterator	access:friend	signature:(const _Rope_iterator<_CharT,_Alloc>& __x, ptrdiff_t __n)
__STL_NULL_TMPL_ARGS	/Users/lij/.vim/stl/stl_rope.h	/^    friend _Rope_iterator<_CharT,_Alloc> operator+ __STL_NULL_TMPL_ARGS$/;"	p	class:_Rope_iterator	access:friend	signature:(ptrdiff_t __n, const _Rope_iterator<_CharT,_Alloc>& __x)
__STL_NULL_TMPL_ARGS	/Users/lij/.vim/stl/stl_rope.h	/^    friend _Rope_iterator<_CharT,_Alloc> operator- __STL_NULL_TMPL_ARGS$/;"	p	class:_Rope_iterator	access:friend	signature:(const _Rope_iterator<_CharT,_Alloc>& __x, ptrdiff_t __n)
__STL_NULL_TMPL_ARGS	/Users/lij/.vim/stl/stl_rope.h	/^    friend bool operator< __STL_NULL_TMPL_ARGS$/;"	p	class:_Rope_const_iterator	access:friend	signature:(const _Rope_const_iterator<_CharT,_Alloc>& __x, const _Rope_const_iterator<_CharT,_Alloc>& __y)
__STL_NULL_TMPL_ARGS	/Users/lij/.vim/stl/stl_rope.h	/^    friend bool operator< __STL_NULL_TMPL_ARGS$/;"	p	class:_Rope_iterator	access:friend	signature:(const _Rope_iterator<_CharT,_Alloc>& __x, const _Rope_iterator<_CharT,_Alloc>& __y)
__STL_NULL_TMPL_ARGS	/Users/lij/.vim/stl/stl_rope.h	/^    friend bool operator==  __STL_NULL_TMPL_ARGS$/;"	p	class:_Rope_char_ptr_proxy	access:friend	signature:(const _Rope_char_ptr_proxy<_CharT,_Alloc>& __x, const _Rope_char_ptr_proxy<_CharT,_Alloc>& __y)
__STL_NULL_TMPL_ARGS	/Users/lij/.vim/stl/stl_rope.h	/^    friend bool operator== __STL_NULL_TMPL_ARGS$/;"	p	class:_Rope_const_iterator	access:friend	signature:(const _Rope_const_iterator<_CharT,_Alloc>& __x, const _Rope_const_iterator<_CharT,_Alloc>& __y)
__STL_NULL_TMPL_ARGS	/Users/lij/.vim/stl/stl_rope.h	/^    friend bool operator== __STL_NULL_TMPL_ARGS$/;"	p	class:_Rope_iterator	access:friend	signature:(const _Rope_iterator<_CharT,_Alloc>& __x, const _Rope_iterator<_CharT,_Alloc>& __y)
__STL_NULL_TMPL_ARGS	/Users/lij/.vim/stl/stl_rope.h	/^    friend ptrdiff_t operator- __STL_NULL_TMPL_ARGS$/;"	p	class:_Rope_const_iterator	access:friend	signature:(const _Rope_const_iterator<_CharT,_Alloc>& __x, const _Rope_const_iterator<_CharT,_Alloc>& __y)
__STL_NULL_TMPL_ARGS	/Users/lij/.vim/stl/stl_rope.h	/^    friend ptrdiff_t operator- __STL_NULL_TMPL_ARGS$/;"	p	class:_Rope_iterator	access:friend	signature:(const _Rope_iterator<_CharT,_Alloc>& __x, const _Rope_iterator<_CharT,_Alloc>& __y)
__STL_NULL_TMPL_ARGS	/Users/lij/.vim/stl/stl_set.h	/^  operator<  __STL_NULL_TMPL_ARGS (const set&, const set&);$/;"	p	class:set	access:friend	signature:(const set&, const set&)
__STL_NULL_TMPL_ARGS	/Users/lij/.vim/stl/stl_set.h	/^  operator== __STL_NULL_TMPL_ARGS (const set&, const set&);$/;"	p	class:set	access:friend	signature:(const set&, const set&)
__STL_NULL_TMPL_ARGS	/Users/lij/.vim/stl/stl_stack.h	/^  operator< __STL_NULL_TMPL_ARGS (const stack&, const stack&);$/;"	p	class:stack	access:friend	signature:(const stack&, const stack&)
__STL_NULL_TMPL_ARGS	/Users/lij/.vim/stl/stl_stack.h	/^  operator== __STL_NULL_TMPL_ARGS (const stack&, const stack&);$/;"	p	class:stack	access:friend	signature:(const stack&, const stack&)
__STL_PARTIAL_SPECIALIZATION_SYNTAX	/Users/lij/.vim/stl/stl_config.h	/^#     define __STL_PARTIAL_SPECIALIZATION_SYNTAX$/;"	d
__STL_PARTIAL_SPECIALIZATION_SYNTAX	/Users/lij/.vim/stl/stl_config.h	/^#   define __STL_PARTIAL_SPECIALIZATION_SYNTAX$/;"	d
__STL_PTHREADS	/Users/lij/.vim/stl/stl_config.h	/^#     define __STL_PTHREADS$/;"	d
__STL_RANGE_ERRORS_H	/Users/lij/.vim/stl/stl_range_errors.h	/^#define __STL_RANGE_ERRORS_H$/;"	d
__STL_REQUIRES	/Users/lij/.vim/stl/concept_checks.h	/^#define __STL_REQUIRES(/;"	d
__STL_REQUIRES_BINARY_OP	/Users/lij/.vim/stl/concept_checks.h	/^#define __STL_REQUIRES_BINARY_OP(/;"	d
__STL_REQUIRES_SAME_TYPE	/Users/lij/.vim/stl/concept_checks.h	/^#define __STL_REQUIRES_SAME_TYPE(/;"	d
__STL_RETHROW	/Users/lij/.vim/stl/stl_config.h	/^#   define __STL_RETHROW /;"	d
__STL_ROPE_FROM_UNOWNED_CHAR_PTR	/Users/lij/.vim/stl/stl_rope.h	/^#         define __STL_ROPE_FROM_UNOWNED_CHAR_PTR(/;"	d
__STL_SGI_THREADS	/Users/lij/.vim/stl/stl_config.h	/^#     define __STL_SGI_THREADS$/;"	d
__STL_STATIC_CONST_INIT_BUG	/Users/lij/.vim/stl/stl_config.h	/^#     define __STL_STATIC_CONST_INIT_BUG$/;"	d
__STL_STATIC_CONST_INIT_BUG	/Users/lij/.vim/stl/stl_config.h	/^#   define __STL_STATIC_CONST_INIT_BUG$/;"	d
__STL_STATIC_TEMPLATE_MEMBER_BUG	/Users/lij/.vim/stl/stl_config.h	/^#     define __STL_STATIC_TEMPLATE_MEMBER_BUG$/;"	d
__STL_TEMPLATE	/Users/lij/.vim/stl/stl_config.h	/^#   define __STL_TEMPLATE /;"	d
__STL_TEMPLATE	/Users/lij/.vim/stl/stl_config.h	/^#   define __STL_TEMPLATE$/;"	d
__STL_TEMPLATE_FRIENDS	/Users/lij/.vim/stl/stl_config.h	/^#       define __STL_TEMPLATE_FRIENDS$/;"	d
__STL_TEMPLATE_FRIENDS	/Users/lij/.vim/stl/stl_config.h	/^#     define __STL_TEMPLATE_FRIENDS$/;"	d
__STL_TEMPLATE_FRIENDS	/Users/lij/.vim/stl/stl_config.h	/^#   define __STL_TEMPLATE_FRIENDS$/;"	d
__STL_TEMPLATE_NULL	/Users/lij/.vim/stl/stl_config.h	/^#   define __STL_TEMPLATE_NULL /;"	d
__STL_TEMPLATE_NULL	/Users/lij/.vim/stl/stl_config.h	/^#   define __STL_TEMPLATE_NULL$/;"	d
__STL_THREADS	/Users/lij/.vim/stl/stl_config.h	/^#   define __STL_THREADS$/;"	d
__STL_THROW	/Users/lij/.vim/stl/stl_config.h	/^#   define __STL_THROW(/;"	d
__STL_THROW_RANGE_ERRORS	/Users/lij/.vim/stl/stl_range_errors.h	/^# define __STL_THROW_RANGE_ERRORS$/;"	d
__STL_TRY	/Users/lij/.vim/stl/stl_config.h	/^#   define __STL_TRY /;"	d
__STL_TYPEDEF_REQUIREMENT	/Users/lij/.vim/stl/concept_checks.h	/^#define __STL_TYPEDEF_REQUIREMENT(/;"	d
__STL_UITHREADS	/Users/lij/.vim/stl/stl_config.h	/^#           define __STL_UITHREADS$/;"	d
__STL_UITHREADS	/Users/lij/.vim/stl/stl_config.h	/^#     define __STL_UITHREADS$/;"	d
__STL_UNARY_FUNCTION_CHECK	/Users/lij/.vim/stl/concept_checks.h	/^#define __STL_UNARY_FUNCTION_CHECK(/;"	d
__STL_UNWIND	/Users/lij/.vim/stl/stl_config.h	/^#   define __STL_UNWIND(/;"	d
__STL_USE_CONCEPT_CHECKS	/Users/lij/.vim/stl/stl_config.h	/^#  define __STL_USE_CONCEPT_CHECKS$/;"	d
__STL_USE_EXCEPTIONS	/Users/lij/.vim/stl/stl_config.h	/^#     define __STL_USE_EXCEPTIONS$/;"	d
__STL_USE_EXCEPTIONS	/Users/lij/.vim/stl/stl_config.h	/^#   define __STL_USE_EXCEPTIONS$/;"	d
__STL_USE_NAMESPACES	/Users/lij/.vim/stl/stl_config.h	/^#     define __STL_USE_NAMESPACES$/;"	d
__STL_USE_NAMESPACES	/Users/lij/.vim/stl/stl_config.h	/^#   define __STL_USE_NAMESPACES$/;"	d
__STL_USE_NAMESPACES	/Users/lij/.vim/stl/stl_config.h	/^#   undef  __STL_USE_NAMESPACES$/;"	d
__STL_USE_NAMESPACE_FOR_RELOPS	/Users/lij/.vim/stl/stl_config.h	/^#     define __STL_USE_NAMESPACE_FOR_RELOPS$/;"	d
__STL_USE_NAMESPACE_FOR_RELOPS	/Users/lij/.vim/stl/stl_config.h	/^#   undef  __STL_USE_NAMESPACE_FOR_RELOPS$/;"	d
__STL_USE_NEW_IOSTREAMS	/Users/lij/.vim/stl/stl_config.h	/^#     define __STL_USE_NEW_IOSTREAMS$/;"	d
__STL_USE_STD_ALLOCATORS	/Users/lij/.vim/stl/stl_config.h	/^#   define __STL_USE_STD_ALLOCATORS$/;"	d
__STL_VOLATILE	/Users/lij/.vim/stl/stl_config.h	/^#   define __STL_VOLATILE /;"	d
__STL_VOLATILE	/Users/lij/.vim/stl/stl_config.h	/^#   define __STL_VOLATILE$/;"	d
__STL_WIN32THREADS	/Users/lij/.vim/stl/stl_config.h	/^#     define __STL_WIN32THREADS$/;"	d
__THROW_BAD_ALLOC	/Users/lij/.vim/stl/stl_alloc.h	/^#    define __THROW_BAD_ALLOC /;"	d
__TYPEDEF_WORKAROUND	/Users/lij/.vim/stl/stl_rope.h	/^#        define __TYPEDEF_WORKAROUND$/;"	d
__TYPE_TRAITS_H	/Users/lij/.vim/stl/type_traits.h	/^#define __TYPE_TRAITS_H$/;"	d
__USE_MALLOC	/Users/lij/.vim/stl/stl_alloc.h	/^#  define __USE_MALLOC$/;"	d
__VALUE_TYPE	/Users/lij/.vim/stl/stl_iterator_base.h	/^#define __VALUE_TYPE(/;"	d
__VECTOR	/Users/lij/.vim/stl/stl_bvector.h	/^  __VECTOR(_InputIterator __first, _InputIterator __last,$/;"	f	class:__BVECTOR	access:public	signature:(_InputIterator __first, _InputIterator __last, const allocator_type& __a = allocator_type())
__VECTOR	/Users/lij/.vim/stl/stl_bvector.h	/^  __VECTOR(const __VECTOR& __x) : __BVECTOR_BASE(__x.get_allocator()) {$/;"	f	class:__BVECTOR	access:public	signature:(const __VECTOR& __x)
__VECTOR	/Users/lij/.vim/stl/stl_bvector.h	/^  __VECTOR(const bool* __first, const bool* __last,$/;"	f	class:__BVECTOR	access:public	signature:(const bool* __first, const bool* __last, const allocator_type& __a = allocator_type())
__VECTOR	/Users/lij/.vim/stl/stl_bvector.h	/^  __VECTOR(const_iterator __first, const_iterator __last,$/;"	f	class:__BVECTOR	access:public	signature:(const_iterator __first, const_iterator __last, const allocator_type& __a = allocator_type())
__VECTOR	/Users/lij/.vim/stl/stl_bvector.h	/^  __VECTOR(size_type __n, bool __value,$/;"	f	class:__BVECTOR	access:public	signature:(size_type __n, bool __value, const allocator_type& __a = allocator_type())
__VECTOR	/Users/lij/.vim/stl/stl_bvector.h	/^  explicit __VECTOR(const allocator_type& __a = allocator_type())$/;"	f	class:__BVECTOR	access:public	signature:(const allocator_type& __a = allocator_type())
__VECTOR	/Users/lij/.vim/stl/stl_bvector.h	/^  explicit __VECTOR(size_type __n)$/;"	f	class:__BVECTOR	access:public	signature:(size_type __n)
__VECTOR	/Users/lij/.vim/stl/stl_bvector.h	/^#  define __VECTOR /;"	d
__VECTOR	/Users/lij/.vim/stl/stl_bvector.h	/^#undef __VECTOR$/;"	d
__WORD_BIT	/Users/lij/.vim/stl/stl_bvector.h	/^static const int __WORD_BIT = int(CHAR_BIT*sizeof(unsigned int));$/;"	v
__add_and_fetch	/Users/lij/.vim/stl/stl_threads.h	/^#  define __add_and_fetch(/;"	d
__adjacent_difference	/Users/lij/.vim/stl/stl_numeric.h	/^__adjacent_difference(_InputIterator __first, _InputIterator __last, $/;"	f	signature:(_InputIterator __first, _InputIterator __last, _OutputIterator __result, _Tp*, _BinaryOperation __binary_op)
__adjacent_difference	/Users/lij/.vim/stl/stl_numeric.h	/^__adjacent_difference(_InputIterator __first, _InputIterator __last,$/;"	f	signature:(_InputIterator __first, _InputIterator __last, _OutputIterator __result, _Tp*)
__adjust_heap	/Users/lij/.vim/stl/stl_heap.h	/^__adjust_heap(_RandomAccessIterator __first, _Distance __holeIndex,$/;"	f	signature:(_RandomAccessIterator __first, _Distance __holeIndex, _Distance __len, _Tp __value)
__adjust_heap	/Users/lij/.vim/stl/stl_heap.h	/^__adjust_heap(_RandomAccessIterator __first, _Distance __holeIndex,$/;"	f	signature:(_RandomAccessIterator __first, _Distance __holeIndex, _Distance __len, _Tp __value, _Compare __comp)
__advance	/Users/lij/.vim/stl/stl_iterator_base.h	/^inline void __advance(_BidirectionalIterator& __i, _Distance __n, $/;"	f	signature:(_BidirectionalIterator& __i, _Distance __n, bidirectional_iterator_tag)
__advance	/Users/lij/.vim/stl/stl_iterator_base.h	/^inline void __advance(_InputIter& __i, _Distance __n, input_iterator_tag) {$/;"	f	signature:(_InputIter& __i, _Distance __n, input_iterator_tag)
__advance	/Users/lij/.vim/stl/stl_iterator_base.h	/^inline void __advance(_RandomAccessIterator& __i, _Distance __n, $/;"	f	signature:(_RandomAccessIterator& __i, _Distance __n, random_access_iterator_tag)
__allocator	/Users/lij/.vim/stl/stl_alloc.h	/^struct __allocator {$/;"	s
__allocator::__STL_NOTHROW	/Users/lij/.vim/stl/stl_alloc.h	/^  __allocator(const __allocator& __a) __STL_NOTHROW$/;"	m	struct:__allocator	access:public
__allocator::__STL_NOTHROW	/Users/lij/.vim/stl/stl_alloc.h	/^  __allocator(const __allocator<_Tp1, _Alloc>& __a) __STL_NOTHROW$/;"	m	struct:__allocator	access:public
__allocator::__underlying_alloc	/Users/lij/.vim/stl/stl_alloc.h	/^  _Alloc __underlying_alloc;$/;"	m	struct:__allocator	access:public
__allocator::const_pointer	/Users/lij/.vim/stl/stl_alloc.h	/^  typedef const _Tp* const_pointer;$/;"	t	struct:__allocator	access:public
__allocator::const_reference	/Users/lij/.vim/stl/stl_alloc.h	/^  typedef const _Tp& const_reference;$/;"	t	struct:__allocator	access:public
__allocator::difference_type	/Users/lij/.vim/stl/stl_alloc.h	/^  typedef ptrdiff_t difference_type;$/;"	t	struct:__allocator	access:public
__allocator::pointer	/Users/lij/.vim/stl/stl_alloc.h	/^  typedef _Tp*       pointer;$/;"	t	struct:__allocator	access:public
__allocator::rebind	/Users/lij/.vim/stl/stl_alloc.h	/^  template <class _Tp1> struct rebind {$/;"	s	struct:__allocator	access:public
__allocator::rebind::other	/Users/lij/.vim/stl/stl_alloc.h	/^    typedef __allocator<_Tp1, _Alloc> other;$/;"	t	struct:__allocator::rebind	access:public
__allocator::reference	/Users/lij/.vim/stl/stl_alloc.h	/^  typedef _Tp&       reference;$/;"	t	struct:__allocator	access:public
__allocator::size_type	/Users/lij/.vim/stl/stl_alloc.h	/^  typedef size_t    size_type;$/;"	t	struct:__allocator	access:public
__allocator::value_type	/Users/lij/.vim/stl/stl_alloc.h	/^  typedef _Tp        value_type;$/;"	t	struct:__allocator	access:public
__assignment_operator_requirement_violation	/Users/lij/.vim/stl/concept_checks.h	/^  __assignment_operator_requirement_violation(_Type __a) {$/;"	f	struct:_STL_ERROR	access:public	signature:(_Type __a)
__back_function_requirement_violation	/Users/lij/.vim/stl/sequence_concepts.h	/^  __back_function_requirement_violation(_XX& __s) {$/;"	f	struct:_ERROR_IN_STL_SEQ	access:public	signature:(_XX& __s)
__begin_iterator_accessor_requirement_violation	/Users/lij/.vim/stl/container_concepts.h	/^  __begin_iterator_accessor_requirement_violation(_Container __c) {$/;"	f	struct:_ERROR_IN_STL_CONTAINER	access:public	signature:(_Container __c)
__binary_function_requirement_violation	/Users/lij/.vim/stl/concept_checks.h	/^  __binary_function_requirement_violation(_Func& __f,$/;"	f	struct:_STL_BINARY_FUNCTION_ERROR	access:public	signature:(_Func& __f, const _First& __first, const _Second& __second)
__black_count	/Users/lij/.vim/stl/stl_tree.h	/^__black_count(_Rb_tree_node_base* __node, _Rb_tree_node_base* __root)$/;"	f	signature:(_Rb_tree_node_base* __node, _Rb_tree_node_base* __root)
__char_traits_base	/Users/lij/.vim/stl/char_traits.h	/^template <class _CharT, class _IntT> class __char_traits_base {$/;"	c
__char_traits_base::assign	/Users/lij/.vim/stl/char_traits.h	/^  static _CharT* assign(_CharT* __s, size_t __n, _CharT __c) {$/;"	f	class:__char_traits_base	access:public	signature:(_CharT* __s, size_t __n, _CharT __c)
__char_traits_base::assign	/Users/lij/.vim/stl/char_traits.h	/^  static void assign(char_type& __c1, const char_type& __c2) { __c1 = __c2; }$/;"	f	class:__char_traits_base	access:public	signature:(char_type& __c1, const char_type& __c2)
__char_traits_base::char_type	/Users/lij/.vim/stl/char_traits.h	/^  typedef _CharT char_type;$/;"	t	class:__char_traits_base	access:public
__char_traits_base::compare	/Users/lij/.vim/stl/char_traits.h	/^  static int compare(const _CharT* __s1, const _CharT* __s2, size_t __n) {$/;"	f	class:__char_traits_base	access:public	signature:(const _CharT* __s1, const _CharT* __s2, size_t __n)
__char_traits_base::copy	/Users/lij/.vim/stl/char_traits.h	/^  static _CharT* copy(_CharT* __s1, const _CharT* __s2, size_t __n) {$/;"	f	class:__char_traits_base	access:public	signature:(_CharT* __s1, const _CharT* __s2, size_t __n)
__char_traits_base::eof	/Users/lij/.vim/stl/char_traits.h	/^  static int_type eof() {$/;"	f	class:__char_traits_base	access:public	signature:()
__char_traits_base::eq	/Users/lij/.vim/stl/char_traits.h	/^  static bool eq(const _CharT& __c1, const _CharT& __c2) $/;"	f	class:__char_traits_base	access:public	signature:(const _CharT& __c1, const _CharT& __c2)
__char_traits_base::eq_int_type	/Users/lij/.vim/stl/char_traits.h	/^  static bool eq_int_type(const int_type& __c1, const int_type& __c2) {$/;"	f	class:__char_traits_base	access:public	signature:(const int_type& __c1, const int_type& __c2)
__char_traits_base::find	/Users/lij/.vim/stl/char_traits.h	/^  static const _CharT* find(const _CharT* __s, size_t __n, const _CharT& __c)$/;"	f	class:__char_traits_base	access:public	signature:(const _CharT* __s, size_t __n, const _CharT& __c)
__char_traits_base::int_type	/Users/lij/.vim/stl/char_traits.h	/^  typedef _IntT int_type;$/;"	t	class:__char_traits_base	access:public
__char_traits_base::length	/Users/lij/.vim/stl/char_traits.h	/^  static size_t length(const _CharT* __s) {$/;"	f	class:__char_traits_base	access:public	signature:(const _CharT* __s)
__char_traits_base::lt	/Users/lij/.vim/stl/char_traits.h	/^  static bool lt(const _CharT& __c1, const _CharT& __c2) $/;"	f	class:__char_traits_base	access:public	signature:(const _CharT& __c1, const _CharT& __c2)
__char_traits_base::move	/Users/lij/.vim/stl/char_traits.h	/^  static _CharT* move(_CharT* __s1, const _CharT* __s2, size_t __n) {$/;"	f	class:__char_traits_base	access:public	signature:(_CharT* __s1, const _CharT* __s2, size_t __n)
__char_traits_base::not_eof	/Users/lij/.vim/stl/char_traits.h	/^  static int_type not_eof(const int_type& __c) {$/;"	f	class:__char_traits_base	access:public	signature:(const int_type& __c)
__char_traits_base::off_type	/Users/lij/.vim/stl/char_traits.h	/^  typedef streamoff off_type;$/;"	t	class:__char_traits_base	access:public
__char_traits_base::pos_type	/Users/lij/.vim/stl/char_traits.h	/^  typedef streampos pos_type;$/;"	t	class:__char_traits_base	access:public
__char_traits_base::state_type	/Users/lij/.vim/stl/char_traits.h	/^  typedef mbstate_t state_type;$/;"	t	class:__char_traits_base	access:public
__char_traits_base::to_char_type	/Users/lij/.vim/stl/char_traits.h	/^  static char_type to_char_type(const int_type& __c) {$/;"	f	class:__char_traits_base	access:public	signature:(const int_type& __c)
__char_traits_base::to_int_type	/Users/lij/.vim/stl/char_traits.h	/^  static int_type to_int_type(const char_type& __c) {$/;"	f	class:__char_traits_base	access:public	signature:(const char_type& __c)
__check_equal	/Users/lij/.vim/stl/concept_checks.h	/^template <class _Type> struct __check_equal { };$/;"	s
__chunk_insertion_sort	/Users/lij/.vim/stl/stl_algo.h	/^void __chunk_insertion_sort(_RandomAccessIter __first, $/;"	f	signature:(_RandomAccessIter __first, _RandomAccessIter __last, _Distance __chunk_size)
__chunk_insertion_sort	/Users/lij/.vim/stl/stl_algo.h	/^void __chunk_insertion_sort(_RandomAccessIter __first, $/;"	f	signature:(_RandomAccessIter __first, _RandomAccessIter __last, _Distance __chunk_size, _Compare __comp)
__client_data	/Users/lij/.vim/stl/pthread_alloc	/^    char __client_data[__STL_DATA_ALIGNMENT];    \/* The client sees this.    *\/$/;"	m	union:_Pthread_alloc_obj	file:	access:public
__const_back_function_requirement_violation	/Users/lij/.vim/stl/sequence_concepts.h	/^  __const_back_function_requirement_violation(const _XX& __s) {$/;"	f	struct:_ERROR_IN_STL_SEQ	access:public	signature:(const _XX& __s)
__const_begin_iterator_accessor_requirement_violation	/Users/lij/.vim/stl/container_concepts.h	/^  __const_begin_iterator_accessor_requirement_violation(const _Container& __c) {$/;"	f	struct:_ERROR_IN_STL_CONTAINER	access:public	signature:(const _Container& __c)
__const_end_iterator_accessor_requirement_violation	/Users/lij/.vim/stl/container_concepts.h	/^  __const_end_iterator_accessor_requirement_violation(const _Container& __c) {$/;"	f	struct:_ERROR_IN_STL_CONTAINER	access:public	signature:(const _Container& __c)
__const_front_function_requirement_violation	/Users/lij/.vim/stl/sequence_concepts.h	/^  __const_front_function_requirement_violation(const _XX& __s) {$/;"	f	struct:_ERROR_IN_STL_SEQ	access:public	signature:(const _XX& __s)
__const_parameter_required_for_assignment_operator	/Users/lij/.vim/stl/concept_checks.h	/^  __const_parameter_required_for_assignment_operator(_Type __a, $/;"	f	struct:_STL_ERROR	access:public	signature:(_Type __a, const _Type& __b)
__const_parameter_required_for_copy_constructor	/Users/lij/.vim/stl/concept_checks.h	/^  __const_parameter_required_for_copy_constructor(_Type \/* __a *\/, $/;"	f	struct:_STL_ERROR	access:public	signature:(_Type , const _Type& __b)
__const_rbegin_iterator_accessor_requirement_violation	/Users/lij/.vim/stl/container_concepts.h	/^  __const_rbegin_iterator_accessor_requirement_violation(const _Container& __c) {$/;"	f	struct:_ERROR_IN_STL_CONTAINER	access:public	signature:(const _Container& __c)
__const_rend_iterator_accessor_requirement_violation	/Users/lij/.vim/stl/container_concepts.h	/^  __const_rend_iterator_accessor_requirement_violation(const _Container& __c) {$/;"	f	struct:_ERROR_IN_STL_CONTAINER	access:public	signature:(const _Container& __c)
__copy	/Users/lij/.vim/stl/stl_algobase.h	/^__copy(_RandomAccessIter __first, _RandomAccessIter __last,$/;"	f	signature:(_RandomAccessIter __first, _RandomAccessIter __last, _OutputIter __result, random_access_iterator_tag, _Distance*)
__copy	/Users/lij/.vim/stl/stl_algobase.h	/^inline _OutputIter __copy(_InputIter __first, _InputIter __last,$/;"	f	signature:(_InputIter __first, _InputIter __last, _OutputIter __result, input_iterator_tag, _Distance*)
__copy_aux	/Users/lij/.vim/stl/stl_algobase.h	/^inline _OutputIter __copy_aux(_InputIter __first, _InputIter __last,$/;"	f	signature:(_InputIter __first, _InputIter __last, _OutputIter __result, _Tp*)
__copy_aux2	/Users/lij/.vim/stl/stl_algobase.h	/^inline _OutputIter __copy_aux2(_InputIter __first, _InputIter __last,$/;"	f	signature:(_InputIter __first, _InputIter __last, _OutputIter __result, __false_type)
__copy_aux2	/Users/lij/.vim/stl/stl_algobase.h	/^inline _OutputIter __copy_aux2(_InputIter __first, _InputIter __last,$/;"	f	signature:(_InputIter __first, _InputIter __last, _OutputIter __result, __true_type)
__copy_aux2	/Users/lij/.vim/stl/stl_algobase.h	/^inline _Tp* __copy_aux2(_Tp* __first, _Tp* __last, _Tp* __result,$/;"	f	signature:(_Tp* __first, _Tp* __last, _Tp* __result, __true_type)
__copy_aux2	/Users/lij/.vim/stl/stl_algobase.h	/^inline _Tp* __copy_aux2(const _Tp* __first, const _Tp* __last, _Tp* __result,$/;"	f	signature:(const _Tp* __first, const _Tp* __last, _Tp* __result, __true_type)
__copy_backward	/Users/lij/.vim/stl/stl_algobase.h	/^inline _BidirectionalIter __copy_backward(_RandomAccessIter __first, $/;"	f	signature:(_RandomAccessIter __first, _RandomAccessIter __last, _BidirectionalIter __result, random_access_iterator_tag, _Distance*)
__copy_backward	/Users/lij/.vim/stl/stl_algobase.h	/^inline _BidirectionalIter2 __copy_backward(_BidirectionalIter1 __first, $/;"	f	signature:(_BidirectionalIter1 __first, _BidirectionalIter1 __last, _BidirectionalIter2 __result, bidirectional_iterator_tag, _Distance*)
__copy_backward_dispatch	/Users/lij/.vim/stl/stl_algobase.h	/^struct __copy_backward_dispatch$/;"	s
__copy_backward_dispatch	/Users/lij/.vim/stl/stl_algobase.h	/^struct __copy_backward_dispatch<_Tp*, _Tp*, __true_type>$/;"	s
__copy_backward_dispatch	/Users/lij/.vim/stl/stl_algobase.h	/^struct __copy_backward_dispatch<const _Tp*, _Tp*, __true_type>$/;"	s
__copy_backward_dispatch::_Cat	/Users/lij/.vim/stl/stl_algobase.h	/^          _Cat;$/;"	t	struct:__copy_backward_dispatch	access:public
__copy_backward_dispatch::_Distance	/Users/lij/.vim/stl/stl_algobase.h	/^          _Distance;$/;"	t	struct:__copy_backward_dispatch	access:public
__copy_backward_dispatch::copy	/Users/lij/.vim/stl/stl_algobase.h	/^  static _BidirectionalIter2 copy(_BidirectionalIter1 __first, $/;"	f	struct:__copy_backward_dispatch	access:public	signature:(_BidirectionalIter1 __first, _BidirectionalIter1 __last, _BidirectionalIter2 __result)
__copy_backward_dispatch::copy	/Users/lij/.vim/stl/stl_algobase.h	/^  static _Tp* copy(const _Tp* __first, const _Tp* __last, _Tp* __result) {$/;"	f	struct:__copy_backward_dispatch	access:public	signature:(const _Tp* __first, const _Tp* __last, _Tp* __result)
__copy_constructor_requirement_violation	/Users/lij/.vim/stl/concept_checks.h	/^  __copy_constructor_requirement_violation(_Type __a) {$/;"	f	struct:_STL_ERROR	access:public	signature:(_Type __a)
__copy_dispatch	/Users/lij/.vim/stl/stl_algobase.h	/^struct __copy_dispatch {$/;"	s
__copy_dispatch	/Users/lij/.vim/stl/stl_algobase.h	/^struct __copy_dispatch<_Tp*, _Tp*, __true_type>$/;"	s
__copy_dispatch	/Users/lij/.vim/stl/stl_algobase.h	/^struct __copy_dispatch<const _Tp*, _Tp*, __true_type>$/;"	s
__copy_dispatch::copy	/Users/lij/.vim/stl/stl_algobase.h	/^  static _OutputIter copy(_InputIter __first, _InputIter __last,$/;"	f	struct:__copy_dispatch	access:public	signature:(_InputIter __first, _InputIter __last, _OutputIter __result)
__copy_dispatch::copy	/Users/lij/.vim/stl/stl_algobase.h	/^  static _Tp* copy(const _Tp* __first, const _Tp* __last, _Tp* __result) {$/;"	f	struct:__copy_dispatch	access:public	signature:(const _Tp* __first, const _Tp* __last, _Tp* __result)
__copy_n	/Users/lij/.vim/stl/stl_algobase.h	/^__copy_n(_InputIter __first, _Size __count, _OutputIter __result) {$/;"	f	signature:(_InputIter __first, _Size __count, _OutputIter __result)
__copy_n	/Users/lij/.vim/stl/stl_algobase.h	/^__copy_n(_RAIter __first, _Size __count,$/;"	f	signature:(_RAIter __first, _Size __count, _OutputIter __result, random_access_iterator_tag)
__copy_n	/Users/lij/.vim/stl/stl_algobase.h	/^pair<_InputIter, _OutputIter> __copy_n(_InputIter __first, _Size __count,$/;"	f	signature:(_InputIter __first, _Size __count, _OutputIter __result, input_iterator_tag)
__copy_trivial	/Users/lij/.vim/stl/stl_algobase.h	/^__copy_trivial(const _Tp* __first, const _Tp* __last, _Tp* __result) {$/;"	f	signature:(const _Tp* __first, const _Tp* __last, _Tp* __result)
__default_alloc_template	/Users/lij/.vim/stl/stl_alloc.h	/^class __default_alloc_template {$/;"	c
__default_alloc_template::_ALIGN	/Users/lij/.vim/stl/stl_alloc.h	/^    enum {_ALIGN = 8};$/;"	e	enum:__default_alloc_template::__anon15
__default_alloc_template::_Lock	/Users/lij/.vim/stl/stl_alloc.h	/^    class _Lock {$/;"	c	class:__default_alloc_template	access:private
__default_alloc_template::_Lock::_Lock	/Users/lij/.vim/stl/stl_alloc.h	/^            _Lock() { __NODE_ALLOCATOR_LOCK; }$/;"	f	class:__default_alloc_template::_Lock	access:public	signature:()
__default_alloc_template::_Lock::~_Lock	/Users/lij/.vim/stl/stl_alloc.h	/^            ~_Lock() { __NODE_ALLOCATOR_UNLOCK; }$/;"	f	class:__default_alloc_template::_Lock	access:public	signature:()
__default_alloc_template::_MAX_BYTES	/Users/lij/.vim/stl/stl_alloc.h	/^    enum {_MAX_BYTES = 128};$/;"	e	enum:__default_alloc_template::__anon16
__default_alloc_template::_NFREELISTS	/Users/lij/.vim/stl/stl_alloc.h	/^    enum {_NFREELISTS = 16}; \/\/ _MAX_BYTES\/_ALIGN$/;"	e	enum:__default_alloc_template::__anon17
__default_alloc_template::_Obj	/Users/lij/.vim/stl/stl_alloc.h	/^  union _Obj {$/;"	u	class:__default_alloc_template	access:private
__default_alloc_template::_Obj::_M_client_data	/Users/lij/.vim/stl/stl_alloc.h	/^        char _M_client_data[1];    \/* The client sees this.        *\/$/;"	m	union:__default_alloc_template::_Obj	access:public
__default_alloc_template::_Obj::_M_free_list_link	/Users/lij/.vim/stl/stl_alloc.h	/^        union _Obj* _M_free_list_link;$/;"	m	union:__default_alloc_template::_Obj	typeref:union:__default_alloc_template::_Obj::_Obj	access:public
__default_alloc_template::_S_chunk_alloc	/Users/lij/.vim/stl/stl_alloc.h	/^  static char* _S_chunk_alloc(size_t __size, int& __nobjs);$/;"	p	class:__default_alloc_template	access:private	signature:(size_t __size, int& __nobjs)
__default_alloc_template::_S_chunk_alloc	/Users/lij/.vim/stl/stl_alloc.h	/^__default_alloc_template<__threads, __inst>::_S_chunk_alloc(size_t __size, $/;"	f	class:__default_alloc_template	signature:(size_t __size, int& __nobjs)
__default_alloc_template::_S_end_free	/Users/lij/.vim/stl/stl_alloc.h	/^  static char* _S_end_free;$/;"	m	class:__default_alloc_template	access:private
__default_alloc_template::_S_end_free	/Users/lij/.vim/stl/stl_alloc.h	/^char* __default_alloc_template<__threads, __inst>::_S_end_free = 0;$/;"	m	class:__default_alloc_template
__default_alloc_template::_S_free_list	/Users/lij/.vim/stl/stl_alloc.h	/^    static _Obj* __STL_VOLATILE _S_free_list[]; $/;"	m	class:__default_alloc_template	access:private
__default_alloc_template::_S_free_list	/Users/lij/.vim/stl/stl_alloc.h	/^    static _Obj* __STL_VOLATILE _S_free_list[_NFREELISTS]; $/;"	m	class:__default_alloc_template	access:private
__default_alloc_template::_S_free_list	/Users/lij/.vim/stl/stl_alloc.h	/^__default_alloc_template<__threads, __inst> ::_S_free_list[$/;"	m	class:__default_alloc_template
__default_alloc_template::_S_freelist_index	/Users/lij/.vim/stl/stl_alloc.h	/^  static  size_t _S_freelist_index(size_t __bytes) {$/;"	f	class:__default_alloc_template	access:private	signature:(size_t __bytes)
__default_alloc_template::_S_heap_size	/Users/lij/.vim/stl/stl_alloc.h	/^  static size_t _S_heap_size;$/;"	m	class:__default_alloc_template	access:private
__default_alloc_template::_S_heap_size	/Users/lij/.vim/stl/stl_alloc.h	/^size_t __default_alloc_template<__threads, __inst>::_S_heap_size = 0;$/;"	m	class:__default_alloc_template
__default_alloc_template::_S_node_allocator_lock	/Users/lij/.vim/stl/stl_alloc.h	/^    static _STL_mutex_lock _S_node_allocator_lock;$/;"	m	class:__default_alloc_template	access:private
__default_alloc_template::_S_refill	/Users/lij/.vim/stl/stl_alloc.h	/^  static void* _S_refill(size_t __n);$/;"	p	class:__default_alloc_template	access:private	signature:(size_t __n)
__default_alloc_template::_S_refill	/Users/lij/.vim/stl/stl_alloc.h	/^__default_alloc_template<__threads, __inst>::_S_refill(size_t __n)$/;"	f	class:__default_alloc_template	signature:(size_t __n)
__default_alloc_template::_S_round_up	/Users/lij/.vim/stl/stl_alloc.h	/^  _S_round_up(size_t __bytes) $/;"	f	class:__default_alloc_template	access:private	signature:(size_t __bytes)
__default_alloc_template::_S_start_free	/Users/lij/.vim/stl/stl_alloc.h	/^  static char* _S_start_free;$/;"	m	class:__default_alloc_template	access:private
__default_alloc_template::_S_start_free	/Users/lij/.vim/stl/stl_alloc.h	/^char* __default_alloc_template<__threads, __inst>::_S_start_free = 0;$/;"	m	class:__default_alloc_template
__default_alloc_template::allocate	/Users/lij/.vim/stl/stl_alloc.h	/^  static void* allocate(size_t __n)$/;"	f	class:__default_alloc_template	access:public	signature:(size_t __n)
__default_alloc_template::deallocate	/Users/lij/.vim/stl/stl_alloc.h	/^  static void deallocate(void* __p, size_t __n)$/;"	f	class:__default_alloc_template	access:public	signature:(void* __p, size_t __n)
__default_alloc_template::reallocate	/Users/lij/.vim/stl/stl_alloc.h	/^  static void* reallocate(void* __p, size_t __old_sz, size_t __new_sz);$/;"	p	class:__default_alloc_template	access:public	signature:(void* __p, size_t __old_sz, size_t __new_sz)
__default_alloc_template::reallocate	/Users/lij/.vim/stl/stl_alloc.h	/^__default_alloc_template<threads, inst>::reallocate(void* __p,$/;"	f	class:__default_alloc_template	signature:(void* __p, size_t __old_sz, size_t __new_sz)
__default_constructor_requirement_violation	/Users/lij/.vim/stl/concept_checks.h	/^  __default_constructor_requirement_violation(_Type) {$/;"	f	struct:_STL_ERROR	access:public	signature:(_Type)
__deque_buf_size	/Users/lij/.vim/stl/stl_deque.h	/^inline size_t __deque_buf_size(size_t __size) {$/;"	f	signature:(size_t __size)
__dereference_operator_and_assignment_requirement_violation	/Users/lij/.vim/stl/concept_checks.h	/^  __dereference_operator_and_assignment_requirement_violation(_Iterator __i) {$/;"	f	struct:_STL_ERROR	access:public	signature:(_Iterator __i)
__dereference_operator_requirement_violation	/Users/lij/.vim/stl/concept_checks.h	/^  __dereference_operator_requirement_violation(_Iterator __i) {$/;"	f	struct:_STL_ERROR	access:public	signature:(_Iterator __i)
__destroy	/Users/lij/.vim/stl/stl_construct.h	/^__destroy(_ForwardIterator __first, _ForwardIterator __last, _Tp*)$/;"	f	signature:(_ForwardIterator __first, _ForwardIterator __last, _Tp*)
__destroy_aux	/Users/lij/.vim/stl/stl_construct.h	/^__destroy_aux(_ForwardIterator __first, _ForwardIterator __last, __false_type)$/;"	f	signature:(_ForwardIterator __first, _ForwardIterator __last, __false_type)
__destroy_aux	/Users/lij/.vim/stl/stl_construct.h	/^inline void __destroy_aux(_ForwardIterator, _ForwardIterator, __true_type) {}$/;"	f	signature:(_ForwardIterator, _ForwardIterator, __true_type)
__difference_operator_requirement_violation	/Users/lij/.vim/stl/concept_checks.h	/^  __difference_operator_requirement_violation(_Iterator __i, _Iterator __j,$/;"	f	struct:_STL_ERROR	access:public	signature:(_Iterator __i, _Iterator __j, _Distance __n)
__difference_type_type_definition_requirement_violation	/Users/lij/.vim/stl/concept_checks.h	/^struct __difference_type_type_definition_requirement_violation {$/;"	s
__difference_type_type_definition_requirement_violation::difference_type	/Users/lij/.vim/stl/concept_checks.h	/^          difference_type;$/;"	t	struct:__difference_type_type_definition_requirement_violation	access:public
__distance	/Users/lij/.vim/stl/stl_iterator_base.h	/^__distance(_InputIterator __first, _InputIterator __last, input_iterator_tag)$/;"	f	signature:(_InputIterator __first, _InputIterator __last, input_iterator_tag)
__distance	/Users/lij/.vim/stl/stl_iterator_base.h	/^__distance(_RandomAccessIterator __first, _RandomAccessIterator __last,$/;"	f	signature:(_RandomAccessIterator __first, _RandomAccessIterator __last, random_access_iterator_tag)
__distance	/Users/lij/.vim/stl/stl_iterator_base.h	/^inline void __distance(_InputIterator __first, _InputIterator __last,$/;"	f	signature:(_InputIterator __first, _InputIterator __last, _Distance& __n, input_iterator_tag)
__distance	/Users/lij/.vim/stl/stl_iterator_base.h	/^inline void __distance(_RandomAccessIterator __first, $/;"	f	signature:(_RandomAccessIterator __first, _RandomAccessIterator __last, _Distance& __n, random_access_iterator_tag)
__distance_type	/Users/lij/.vim/stl/stl_iterator_base.h	/^__distance_type(const _Iter&)$/;"	f	signature:(const _Iter&)
__element_access_operator_requirement_violation	/Users/lij/.vim/stl/concept_checks.h	/^  __element_access_operator_requirement_violation(_Exp __x, _Type*,$/;"	f	struct:_STL_ERROR	access:public	signature:(_Exp __x, _Type*, _Distance __n)
__element_assignment_operator_requirement_violation	/Users/lij/.vim/stl/concept_checks.h	/^  __element_assignment_operator_requirement_violation(_Exp __x,$/;"	f	struct:_STL_ERROR	access:public	signature:(_Exp __x, _Type* __t, _Distance __n)
__empty_function_must_be_const	/Users/lij/.vim/stl/container_concepts.h	/^  __empty_function_must_be_const(const _Container& __c) {$/;"	f	struct:_ERROR_IN_STL_CONTAINER	access:public	signature:(const _Container& __c)
__empty_function_requirement_violation	/Users/lij/.vim/stl/container_concepts.h	/^  __empty_function_requirement_violation(_Container& __c) {$/;"	f	struct:_ERROR_IN_STL_CONTAINER	access:public	signature:(_Container& __c)
__end_iterator_accessor_requirement_violation	/Users/lij/.vim/stl/container_concepts.h	/^  __end_iterator_accessor_requirement_violation(_Container __c) {$/;"	f	struct:_ERROR_IN_STL_CONTAINER	access:public	signature:(_Container __c)
__equal_range	/Users/lij/.vim/stl/stl_algo.h	/^__equal_range(_ForwardIter __first, _ForwardIter __last, const _Tp& __val,$/;"	f	signature:(_ForwardIter __first, _ForwardIter __last, const _Tp& __val, _Compare __comp, _Distance*)
__equal_range	/Users/lij/.vim/stl/stl_algo.h	/^__equal_range(_ForwardIter __first, _ForwardIter __last, const _Tp& __val,$/;"	f	signature:(_ForwardIter __first, _ForwardIter __last, const _Tp& __val, _Distance*)
__equality_comparable_requirement_violation	/Users/lij/.vim/stl/concept_checks.h	/^  __equality_comparable_requirement_violation(_Type __a, _Type __b) {$/;"	f	struct:_STL_ERROR	access:public	signature:(_Type __a, _Type __b)
__erase_function_requirement_violation	/Users/lij/.vim/stl/sequence_concepts.h	/^  __erase_function_requirement_violation(_XX& __s) {$/;"	f	struct:_ERROR_IN_STL_SEQ	access:public	signature:(_XX& __s)
__f	/Users/lij/.vim/stl/valarray	/^  valarray apply(value_type __f(const value_type&)) const {$/;"	f	class:valarray	access:public	signature:(const value_type&) const
__f	/Users/lij/.vim/stl/valarray	/^  valarray apply(value_type __f(value_type)) const {$/;"	f	class:valarray	access:public	signature:(value_type) const
__false_type	/Users/lij/.vim/stl/type_traits.h	/^struct __false_type {$/;"	s
__fill_constructor_requirement_violation	/Users/lij/.vim/stl/sequence_concepts.h	/^  __fill_constructor_requirement_violation(_XX& __s) {$/;"	f	struct:_ERROR_IN_STL_SEQ	access:public	signature:(_XX& __s)
__fill_default_constructor_requirement_violation	/Users/lij/.vim/stl/sequence_concepts.h	/^  __fill_default_constructor_requirement_violation(_XX& __s) {$/;"	f	struct:_ERROR_IN_STL_SEQ	access:public	signature:(_XX& __s)
__fill_insert_function_requirement_violation	/Users/lij/.vim/stl/sequence_concepts.h	/^  __fill_insert_function_requirement_violation(_XX& __s) {$/;"	f	struct:_ERROR_IN_STL_SEQ	access:public	signature:(_XX& __s)
__final_insertion_sort	/Users/lij/.vim/stl/stl_algo.h	/^void __final_insertion_sort(_RandomAccessIter __first, $/;"	f	signature:(_RandomAccessIter __first, _RandomAccessIter __last)
__final_insertion_sort	/Users/lij/.vim/stl/stl_algo.h	/^void __final_insertion_sort(_RandomAccessIter __first, $/;"	f	signature:(_RandomAccessIter __first, _RandomAccessIter __last, _Compare __comp)
__find_end	/Users/lij/.vim/stl/stl_algo.h	/^_ForwardIter1 __find_end(_ForwardIter1 __first1, _ForwardIter1 __last1,$/;"	f	signature:(_ForwardIter1 __first1, _ForwardIter1 __last1, _ForwardIter2 __first2, _ForwardIter2 __last2, forward_iterator_tag, forward_iterator_tag)
__find_end	/Users/lij/.vim/stl/stl_algo.h	/^_ForwardIter1 __find_end(_ForwardIter1 __first1, _ForwardIter1 __last1,$/;"	f	signature:(_ForwardIter1 __first1, _ForwardIter1 __last1, _ForwardIter2 __first2, _ForwardIter2 __last2, forward_iterator_tag, forward_iterator_tag, _BinaryPredicate __comp)
__find_end	/Users/lij/.vim/stl/stl_algo.h	/^__find_end(_BidirectionalIter1 __first1, _BidirectionalIter1 __last1,$/;"	f	signature:(_BidirectionalIter1 __first1, _BidirectionalIter1 __last1, _BidirectionalIter2 __first2, _BidirectionalIter2 __last2, bidirectional_iterator_tag, bidirectional_iterator_tag)
__find_end	/Users/lij/.vim/stl/stl_algo.h	/^__find_end(_BidirectionalIter1 __first1, _BidirectionalIter1 __last1,$/;"	f	signature:(_BidirectionalIter1 __first1, _BidirectionalIter1 __last1, _BidirectionalIter2 __first2, _BidirectionalIter2 __last2, bidirectional_iterator_tag, bidirectional_iterator_tag, _BinaryPredicate __comp)
__free_list	/Users/lij/.vim/stl/pthread_alloc	/^  _Pthread_alloc_obj* volatile __free_list[_S_NFREELISTS]; $/;"	m	struct:_Pthread_alloc_per_thread_state	file:	access:public
__free_list_link	/Users/lij/.vim/stl/pthread_alloc	/^    union _Pthread_alloc_obj * __free_list_link;$/;"	m	union:_Pthread_alloc_obj	typeref:union:_Pthread_alloc_obj::_Pthread_alloc_obj	file:	access:public
__front_function_requirement_violation	/Users/lij/.vim/stl/sequence_concepts.h	/^  __front_function_requirement_violation(_XX& __s) {$/;"	f	struct:_ERROR_IN_STL_SEQ	access:public	signature:(_XX& __s)
__gcd	/Users/lij/.vim/stl/stl_algo.h	/^_EuclideanRingElement __gcd(_EuclideanRingElement __m,$/;"	f	signature:(_EuclideanRingElement __m, _EuclideanRingElement __n)
__generator_requirement_violation	/Users/lij/.vim/stl/concept_checks.h	/^  static _Ret __generator_requirement_violation(_Func& __f) {$/;"	f	struct:_STL_GENERATOR_ERROR	access:public	signature:(_Func& __f)
__generator_requirement_violation	/Users/lij/.vim/stl/concept_checks.h	/^  static void __generator_requirement_violation(_Func& __f) {$/;"	f	struct:_STL_GENERATOR_ERROR	access:public	signature:(_Func& __f)
__get_c_string	/Users/lij/.vim/stl/stl_string_fwd.h	/^static const char* __get_c_string(const string&);$/;"	p	signature:(const string&)
__get_c_string	/Users/lij/.vim/stl/string	/^inline const char* __get_c_string(const string& __s) { return __s.c_str(); }$/;"	f	signature:(const string& __s)
__get_temporary_buffer	/Users/lij/.vim/stl/stl_tempbuf.h	/^__get_temporary_buffer(ptrdiff_t __len, _Tp*)$/;"	f	signature:(ptrdiff_t __len, _Tp*)
__high_max	/Users/lij/.vim/stl/stl_threads.h	/^  enum { __low_max = 30, __high_max = 1000 };$/;"	e	enum:_STL_mutex_spin::__anon26
__inplace_merge_aux	/Users/lij/.vim/stl/stl_algo.h	/^inline void __inplace_merge_aux(_BidirectionalIter __first,$/;"	f	signature:(_BidirectionalIter __first, _BidirectionalIter __middle, _BidirectionalIter __last, _Tp*, _Distance*)
__inplace_merge_aux	/Users/lij/.vim/stl/stl_algo.h	/^inline void __inplace_merge_aux(_BidirectionalIter __first,$/;"	f	signature:(_BidirectionalIter __first, _BidirectionalIter __middle, _BidirectionalIter __last, _Tp*, _Distance*, _Compare __comp)
__inplace_stable_partition	/Users/lij/.vim/stl/stl_algo.h	/^_ForwardIter __inplace_stable_partition(_ForwardIter __first,$/;"	f	signature:(_ForwardIter __first, _ForwardIter __last, _Predicate __pred, _Distance __len)
__inplace_stable_sort	/Users/lij/.vim/stl/stl_algo.h	/^void __inplace_stable_sort(_RandomAccessIter __first,$/;"	f	signature:(_RandomAccessIter __first, _RandomAccessIter __last)
__inplace_stable_sort	/Users/lij/.vim/stl/stl_algo.h	/^void __inplace_stable_sort(_RandomAccessIter __first,$/;"	f	signature:(_RandomAccessIter __first, _RandomAccessIter __last, _Compare __comp)
__insert_element_function_requirement_violation	/Users/lij/.vim/stl/sequence_concepts.h	/^  __insert_element_function_requirement_violation(_XX& __s) {$/;"	f	struct:_ERROR_IN_STL_SEQ	access:public	signature:(_XX& __s)
__insert_function_requirement_violation	/Users/lij/.vim/stl/sequence_concepts.h	/^  __insert_function_requirement_violation(_XX& __s) {$/;"	f	struct:_ERROR_IN_STL_SEQ	access:public	signature:(_XX& __s)
__insertion_sort	/Users/lij/.vim/stl/stl_algo.h	/^void __insertion_sort(_RandomAccessIter __first, _RandomAccessIter __last) {$/;"	f	signature:(_RandomAccessIter __first, _RandomAccessIter __last)
__insertion_sort	/Users/lij/.vim/stl/stl_algo.h	/^void __insertion_sort(_RandomAccessIter __first,$/;"	f	signature:(_RandomAccessIter __first, _RandomAccessIter __last, _Compare __comp)
__introsort_loop	/Users/lij/.vim/stl/stl_algo.h	/^void __introsort_loop(_RandomAccessIter __first,$/;"	f	signature:(_RandomAccessIter __first, _RandomAccessIter __last, _Tp*, _Size __depth_limit)
__introsort_loop	/Users/lij/.vim/stl/stl_algo.h	/^void __introsort_loop(_RandomAccessIter __first,$/;"	f	signature:(_RandomAccessIter __first, _RandomAccessIter __last, _Tp*, _Size __depth_limit, _Compare __comp)
__is_heap	/Users/lij/.vim/stl/stl_algo.h	/^bool __is_heap(_RandomAccessIter __first, _Distance __n)$/;"	f	signature:(_RandomAccessIter __first, _Distance __n)
__is_heap	/Users/lij/.vim/stl/stl_algo.h	/^bool __is_heap(_RandomAccessIter __first, _StrictWeakOrdering __comp,$/;"	f	signature:(_RandomAccessIter __first, _StrictWeakOrdering __comp, _Distance __n)
__iter_swap	/Users/lij/.vim/stl/stl_algobase.h	/^inline void __iter_swap(_ForwardIter1 __a, _ForwardIter2 __b, _Tp*) {$/;"	f	signature:(_ForwardIter1 __a, _ForwardIter2 __b, _Tp*)
__iterator_addition_assignment_requirement_violation	/Users/lij/.vim/stl/concept_checks.h	/^  __iterator_addition_assignment_requirement_violation(_Iterator __i, $/;"	f	struct:_STL_ERROR	access:public	signature:(_Iterator __i, _Distance __n)
__iterator_addition_requirement_violation	/Users/lij/.vim/stl/concept_checks.h	/^  __iterator_addition_requirement_violation(_Iterator __i, _Distance __n) {$/;"	f	struct:_STL_ERROR	access:public	signature:(_Iterator __i, _Distance __n)
__iterator_category	/Users/lij/.vim/stl/stl_iterator_base.h	/^__iterator_category(const _Iter&)$/;"	f	signature:(const _Iter&)
__iterator_category_type_definition_requirement_violation	/Users/lij/.vim/stl/concept_checks.h	/^struct __iterator_category_type_definition_requirement_violation {$/;"	s
__iterator_category_type_definition_requirement_violation::iterator_category	/Users/lij/.vim/stl/concept_checks.h	/^          iterator_category;$/;"	t	struct:__iterator_category_type_definition_requirement_violation	access:public
__iterator_subtraction_assignment_requirement_violation	/Users/lij/.vim/stl/concept_checks.h	/^  __iterator_subtraction_assignment_requirement_violation(_Iterator __i,$/;"	f	struct:_STL_ERROR	access:public	signature:(_Iterator __i, _Distance __n)
__iterator_subtraction_requirement_violation	/Users/lij/.vim/stl/concept_checks.h	/^  __iterator_subtraction_requirement_violation(_Iterator __i, _Distance __n) {$/;"	f	struct:_STL_ERROR	access:public	signature:(_Iterator __i, _Distance __n)
__last	/Users/lij/.vim/stl/stl_threads.h	/^  static unsigned __last;$/;"	m	struct:_STL_mutex_spin	access:public
__last	/Users/lij/.vim/stl/stl_threads.h	/^unsigned _STL_mutex_spin<__inst>::__last = 0;$/;"	m	class:_STL_mutex_spin
__less_than_comparable_requirement_violation	/Users/lij/.vim/stl/concept_checks.h	/^  __less_than_comparable_requirement_violation(_Type __a, _Type __b) {$/;"	f	struct:_STL_ERROR	access:public	signature:(_Type __a, _Type __b)
__lexicographical_compare_3way	/Users/lij/.vim/stl/stl_algobase.h	/^__lexicographical_compare_3way(const char* __first1, const char* __last1,$/;"	f	signature:(const char* __first1, const char* __last1, const char* __first2, const char* __last2)
__lexicographical_compare_3way	/Users/lij/.vim/stl/stl_algobase.h	/^__lexicographical_compare_3way(const unsigned char* __first1,$/;"	f	signature:(const unsigned char* __first1, const unsigned char* __last1, const unsigned char* __first2, const unsigned char* __last2)
__lexicographical_compare_3way	/Users/lij/.vim/stl/stl_algobase.h	/^int __lexicographical_compare_3way(_InputIter1 __first1, _InputIter1 __last1,$/;"	f	signature:(_InputIter1 __first1, _InputIter1 __last1, _InputIter2 __first2, _InputIter2 __last2)
__lg	/Users/lij/.vim/stl/stl_algo.h	/^inline _Size __lg(_Size __n) {$/;"	f	signature:(_Size __n)
__linear_insert	/Users/lij/.vim/stl/stl_algo.h	/^inline void __linear_insert(_RandomAccessIter __first, $/;"	f	signature:(_RandomAccessIter __first, _RandomAccessIter __last, _Tp*)
__linear_insert	/Users/lij/.vim/stl/stl_algo.h	/^inline void __linear_insert(_RandomAccessIter __first, $/;"	f	signature:(_RandomAccessIter __first, _RandomAccessIter __last, _Tp*, _Compare __comp)
__low_max	/Users/lij/.vim/stl/stl_threads.h	/^  enum { __low_max = 30, __high_max = 1000 };$/;"	e	enum:_STL_mutex_spin::__anon26
__lower_bound	/Users/lij/.vim/stl/stl_algo.h	/^_ForwardIter __lower_bound(_ForwardIter __first, _ForwardIter __last,$/;"	f	signature:(_ForwardIter __first, _ForwardIter __last, const _Tp& __val, _Compare __comp, _Distance*)
__lower_bound	/Users/lij/.vim/stl/stl_algo.h	/^_ForwardIter __lower_bound(_ForwardIter __first, _ForwardIter __last,$/;"	f	signature:(_ForwardIter __first, _ForwardIter __last, const _Tp& __val, _Distance*)
__make_heap	/Users/lij/.vim/stl/stl_heap.h	/^__make_heap(_RandomAccessIterator __first, _RandomAccessIterator __last,$/;"	f	signature:(_RandomAccessIterator __first, _RandomAccessIterator __last, _Compare __comp, _Tp*, _Distance*)
__make_heap	/Users/lij/.vim/stl/stl_heap.h	/^__make_heap(_RandomAccessIterator __first,$/;"	f	signature:(_RandomAccessIterator __first, _RandomAccessIterator __last, _Tp*, _Distance*)
__malloc_alloc_oom_handler	/Users/lij/.vim/stl/stl_alloc.h	/^    void (* __malloc_alloc_oom_handler)() = 0;$/;"	v
__malloc_alloc_oom_handler	/Users/lij/.vim/stl/stl_alloc.h	/^  static void (* __malloc_alloc_oom_handler)();$/;"	m	class:__malloc_alloc_template	access:private
__malloc_alloc_oom_handler	/Users/lij/.vim/stl/stl_alloc.h	/^void (* __malloc_alloc_template<__inst>::__malloc_alloc_oom_handler)() = 0;$/;"	v
__malloc_alloc_template	/Users/lij/.vim/stl/stl_alloc.h	/^class __malloc_alloc_template {$/;"	c
__malloc_alloc_template::_S_oom_malloc	/Users/lij/.vim/stl/stl_alloc.h	/^  static void* _S_oom_malloc(size_t);$/;"	p	class:__malloc_alloc_template	access:private	signature:(size_t)
__malloc_alloc_template::_S_oom_malloc	/Users/lij/.vim/stl/stl_alloc.h	/^__malloc_alloc_template<__inst>::_S_oom_malloc(size_t __n)$/;"	f	class:__malloc_alloc_template	signature:(size_t __n)
__malloc_alloc_template::_S_oom_realloc	/Users/lij/.vim/stl/stl_alloc.h	/^  static void* _S_oom_realloc(void*, size_t);$/;"	p	class:__malloc_alloc_template	access:private	signature:(void*, size_t)
__malloc_alloc_template::_S_oom_realloc	/Users/lij/.vim/stl/stl_alloc.h	/^void* __malloc_alloc_template<__inst>::_S_oom_realloc(void* __p, size_t __n)$/;"	f	class:__malloc_alloc_template	signature:(void* __p, size_t __n)
__malloc_alloc_template::__malloc_alloc_oom_handler	/Users/lij/.vim/stl/stl_alloc.h	/^  static void (* __malloc_alloc_oom_handler)();$/;"	m	class:__malloc_alloc_template	access:private
__malloc_alloc_template::__set_malloc_handler	/Users/lij/.vim/stl/stl_alloc.h	/^  static void (* __set_malloc_handler(void (*__f)()))()$/;"	f	class:__malloc_alloc_template	access:public	signature:(void (*__f)())
__malloc_alloc_template::allocate	/Users/lij/.vim/stl/stl_alloc.h	/^  static void* allocate(size_t __n)$/;"	f	class:__malloc_alloc_template	access:public	signature:(size_t __n)
__malloc_alloc_template::deallocate	/Users/lij/.vim/stl/stl_alloc.h	/^  static void deallocate(void* __p, size_t \/* __n *\/)$/;"	f	class:__malloc_alloc_template	access:public	signature:(void* __p, size_t )
__malloc_alloc_template::reallocate	/Users/lij/.vim/stl/stl_alloc.h	/^  static void* reallocate(void* __p, size_t \/* old_sz *\/, size_t __new_sz)$/;"	f	class:__malloc_alloc_template	access:public	signature:(void* __p, size_t , size_t __new_sz)
__max	/Users/lij/.vim/stl/stl_threads.h	/^  static unsigned __max;$/;"	m	struct:_STL_mutex_spin	access:public
__max	/Users/lij/.vim/stl/stl_threads.h	/^unsigned _STL_mutex_spin<__inst>::__max = _STL_mutex_spin<__inst>::__low_max;$/;"	m	class:_STL_mutex_spin
__max_size_function_must_be_const	/Users/lij/.vim/stl/container_concepts.h	/^  __max_size_function_must_be_const(const _Container& __c) {$/;"	f	struct:_ERROR_IN_STL_CONTAINER	access:public	signature:(const _Container& __c)
__max_size_function_requirement_violation	/Users/lij/.vim/stl/container_concepts.h	/^  __max_size_function_requirement_violation(_Container& __c) {$/;"	f	struct:_ERROR_IN_STL_CONTAINER	access:public	signature:(_Container& __c)
__median	/Users/lij/.vim/stl/stl_algo.h	/^__median(const _Tp& __a, const _Tp& __b, const _Tp& __c, _Compare __comp) {$/;"	f	signature:(const _Tp& __a, const _Tp& __b, const _Tp& __c, _Compare __comp)
__median	/Users/lij/.vim/stl/stl_algo.h	/^inline const _Tp& __median(const _Tp& __a, const _Tp& __b, const _Tp& __c) {$/;"	f	signature:(const _Tp& __a, const _Tp& __b, const _Tp& __c)
__merge_adaptive	/Users/lij/.vim/stl/stl_algo.h	/^void __merge_adaptive(_BidirectionalIter __first, $/;"	f	signature:(_BidirectionalIter __first, _BidirectionalIter __middle, _BidirectionalIter __last, _Distance __len1, _Distance __len2, _Pointer __buffer, _Distance __buffer_size, _Compare __comp)
__merge_adaptive	/Users/lij/.vim/stl/stl_algo.h	/^void __merge_adaptive(_BidirectionalIter __first,$/;"	f	signature:(_BidirectionalIter __first, _BidirectionalIter __middle, _BidirectionalIter __last, _Distance __len1, _Distance __len2, _Pointer __buffer, _Distance __buffer_size)
__merge_backward	/Users/lij/.vim/stl/stl_algo.h	/^_BidirectionalIter3 __merge_backward(_BidirectionalIter1 __first1,$/;"	f	signature:(_BidirectionalIter1 __first1, _BidirectionalIter1 __last1, _BidirectionalIter2 __first2, _BidirectionalIter2 __last2, _BidirectionalIter3 __result)
__merge_backward	/Users/lij/.vim/stl/stl_algo.h	/^_BidirectionalIter3 __merge_backward(_BidirectionalIter1 __first1,$/;"	f	signature:(_BidirectionalIter1 __first1, _BidirectionalIter1 __last1, _BidirectionalIter2 __first2, _BidirectionalIter2 __last2, _BidirectionalIter3 __result, _Compare __comp)
__merge_sort_loop	/Users/lij/.vim/stl/stl_algo.h	/^void __merge_sort_loop(_RandomAccessIter1 __first,$/;"	f	signature:(_RandomAccessIter1 __first, _RandomAccessIter1 __last, _RandomAccessIter2 __result, _Distance __step_size)
__merge_sort_loop	/Users/lij/.vim/stl/stl_algo.h	/^void __merge_sort_loop(_RandomAccessIter1 __first,$/;"	f	signature:(_RandomAccessIter1 __first, _RandomAccessIter1 __last, _RandomAccessIter2 __result, _Distance __step_size, _Compare __comp)
__merge_sort_with_buffer	/Users/lij/.vim/stl/stl_algo.h	/^void __merge_sort_with_buffer(_RandomAccessIter __first, $/;"	f	signature:(_RandomAccessIter __first, _RandomAccessIter __last, _Pointer __buffer, _Distance*)
__merge_sort_with_buffer	/Users/lij/.vim/stl/stl_algo.h	/^void __merge_sort_with_buffer(_RandomAccessIter __first, $/;"	f	signature:(_RandomAccessIter __first, _RandomAccessIter __last, _Pointer __buffer, _Distance*, _Compare __comp)
__merge_without_buffer	/Users/lij/.vim/stl/stl_algo.h	/^void __merge_without_buffer(_BidirectionalIter __first,$/;"	f	signature:(_BidirectionalIter __first, _BidirectionalIter __middle, _BidirectionalIter __last, _Distance __len1, _Distance __len2)
__merge_without_buffer	/Users/lij/.vim/stl/stl_algo.h	/^void __merge_without_buffer(_BidirectionalIter __first,$/;"	f	signature:(_BidirectionalIter __first, _BidirectionalIter __middle, _BidirectionalIter __last, _Distance __len1, _Distance __len2, _Compare __comp)
__mutable_reference_at	/Users/lij/.vim/stl/stl_rope.h	/^inline crope::reference __mutable_reference_at(crope& __c, size_t __i)$/;"	f	signature:(crope& __c, size_t __i)
__mutable_reference_at	/Users/lij/.vim/stl/stl_rope.h	/^inline wrope::reference __mutable_reference_at(wrope& __c, size_t __i)$/;"	f	signature:(wrope& __c, size_t __i)
__next	/Users/lij/.vim/stl/pthread_alloc	/^  _Pthread_alloc_per_thread_state<_Max_size> * __next; $/;"	m	struct:_Pthread_alloc_per_thread_state	file:	access:public
__nth_element	/Users/lij/.vim/stl/stl_algo.h	/^void __nth_element(_RandomAccessIter __first, _RandomAccessIter __nth,$/;"	f	signature:(_RandomAccessIter __first, _RandomAccessIter __nth, _RandomAccessIter __last, _Tp*)
__nth_element	/Users/lij/.vim/stl/stl_algo.h	/^void __nth_element(_RandomAccessIter __first, _RandomAccessIter __nth,$/;"	f	signature:(_RandomAccessIter __first, _RandomAccessIter __nth, _RandomAccessIter __last, _Tp*, _Compare __comp)
__obj	/Users/lij/.vim/stl/pthread_alloc	/^  typedef _Pthread_alloc_obj __obj;$/;"	t	class:_Pthread_alloc_template	file:	access:public
__obj	/Users/lij/.vim/stl/pthread_alloc	/^  typedef _Pthread_alloc_obj __obj;$/;"	t	struct:_Pthread_alloc_per_thread_state	file:	access:public
__partial_sort	/Users/lij/.vim/stl/stl_algo.h	/^void __partial_sort(_RandomAccessIter __first, _RandomAccessIter __middle,$/;"	f	signature:(_RandomAccessIter __first, _RandomAccessIter __middle, _RandomAccessIter __last, _Tp*)
__partial_sort	/Users/lij/.vim/stl/stl_algo.h	/^void __partial_sort(_RandomAccessIter __first, _RandomAccessIter __middle,$/;"	f	signature:(_RandomAccessIter __first, _RandomAccessIter __middle, _RandomAccessIter __last, _Tp*, _Compare __comp)
__partial_sort_copy	/Users/lij/.vim/stl/stl_algo.h	/^_RandomAccessIter __partial_sort_copy(_InputIter __first,$/;"	f	signature:(_InputIter __first, _InputIter __last, _RandomAccessIter __result_first, _RandomAccessIter __result_last, _Compare __comp, _Distance*, _Tp*)
__partial_sort_copy	/Users/lij/.vim/stl/stl_algo.h	/^_RandomAccessIter __partial_sort_copy(_InputIter __first,$/;"	f	signature:(_InputIter __first, _InputIter __last, _RandomAccessIter __result_first, _RandomAccessIter __result_last, _Distance*, _Tp*)
__partial_sum	/Users/lij/.vim/stl/stl_numeric.h	/^__partial_sum(_InputIterator __first, _InputIterator __last, $/;"	f	signature:(_InputIterator __first, _InputIterator __last, _OutputIterator __result, _Tp*, _BinaryOperation __binary_op)
__partial_sum	/Users/lij/.vim/stl/stl_numeric.h	/^__partial_sum(_InputIterator __first, _InputIterator __last,$/;"	f	signature:(_InputIterator __first, _InputIterator __last, _OutputIterator __result, _Tp*)
__partition	/Users/lij/.vim/stl/stl_algo.h	/^_BidirectionalIter __partition(_BidirectionalIter __first,$/;"	f	signature:(_BidirectionalIter __first, _BidirectionalIter __last, _Predicate __pred, bidirectional_iterator_tag)
__partition	/Users/lij/.vim/stl/stl_algo.h	/^_ForwardIter __partition(_ForwardIter __first,$/;"	f	signature:(_ForwardIter __first, _ForwardIter __last, _Predicate __pred, forward_iterator_tag)
__pointer_type_definition_requirement_violation	/Users/lij/.vim/stl/concept_checks.h	/^struct __pointer_type_definition_requirement_violation {$/;"	s
__pointer_type_definition_requirement_violation::pointer	/Users/lij/.vim/stl/concept_checks.h	/^  typedef typename __STD::iterator_traits<_Iter>::pointer pointer;$/;"	t	struct:__pointer_type_definition_requirement_violation	access:public
__pop_back_function_requirement_violation	/Users/lij/.vim/stl/sequence_concepts.h	/^  __pop_back_function_requirement_violation(_XX& __s) {$/;"	f	struct:_ERROR_IN_STL_SEQ	access:public	signature:(_XX& __s)
__pop_front_function_requirement_violation	/Users/lij/.vim/stl/sequence_concepts.h	/^  __pop_front_function_requirement_violation(_XX& __s) {$/;"	f	struct:_ERROR_IN_STL_SEQ	access:public	signature:(_XX& __s)
__pop_heap	/Users/lij/.vim/stl/stl_heap.h	/^__pop_heap(_RandomAccessIterator __first, _RandomAccessIterator __last,$/;"	f	signature:(_RandomAccessIterator __first, _RandomAccessIterator __last, _RandomAccessIterator __result, _Tp __value, _Compare __comp, _Distance*)
__pop_heap	/Users/lij/.vim/stl/stl_heap.h	/^__pop_heap(_RandomAccessIterator __first, _RandomAccessIterator __last,$/;"	f	signature:(_RandomAccessIterator __first, _RandomAccessIterator __last, _RandomAccessIterator __result, _Tp __value, _Distance*)
__pop_heap_aux	/Users/lij/.vim/stl/stl_heap.h	/^__pop_heap_aux(_RandomAccessIterator __first, _RandomAccessIterator __last,$/;"	f	signature:(_RandomAccessIterator __first, _RandomAccessIterator __last, _Tp*)
__pop_heap_aux	/Users/lij/.vim/stl/stl_heap.h	/^__pop_heap_aux(_RandomAccessIterator __first,$/;"	f	signature:(_RandomAccessIterator __first, _RandomAccessIterator __last, _Tp*, _Compare __comp)
__postdecrement_operator_requirement_violation	/Users/lij/.vim/stl/concept_checks.h	/^  __postdecrement_operator_requirement_violation(_Iterator __i) {$/;"	f	struct:_STL_ERROR	access:public	signature:(_Iterator __i)
__postincrement_operator_and_assignment_requirement_violation	/Users/lij/.vim/stl/concept_checks.h	/^  __postincrement_operator_and_assignment_requirement_violation(_Iterator __i,$/;"	f	struct:_STL_ERROR	access:public	signature:(_Iterator __i, _Type __t)
__postincrement_operator_requirement_violation	/Users/lij/.vim/stl/concept_checks.h	/^  __postincrement_operator_requirement_violation(_Iterator __i) {$/;"	f	struct:_STL_ERROR	access:public	signature:(_Iterator __i)
__power	/Users/lij/.vim/stl/stl_numeric.h	/^_Tp __power(_Tp __x, _Integer __n, _MonoidOperation __opr)$/;"	f	signature:(_Tp __x, _Integer __n, _MonoidOperation __opr)
__power	/Users/lij/.vim/stl/stl_numeric.h	/^inline _Tp __power(_Tp __x, _Integer __n)$/;"	f	signature:(_Tp __x, _Integer __n)
__predecrement_operator_requirement_violation	/Users/lij/.vim/stl/concept_checks.h	/^  __predecrement_operator_requirement_violation(_Iterator __i) {$/;"	f	struct:_STL_ERROR	access:public	signature:(_Iterator __i)
__preincrement_operator_requirement_violation	/Users/lij/.vim/stl/concept_checks.h	/^  __preincrement_operator_requirement_violation(_Iterator __i) {$/;"	f	struct:_STL_ERROR	access:public	signature:(_Iterator __i)
__push_back_function_requirement_violation	/Users/lij/.vim/stl/sequence_concepts.h	/^  __push_back_function_requirement_violation(_XX& __s) {$/;"	f	struct:_ERROR_IN_STL_SEQ	access:public	signature:(_XX& __s)
__push_front_function_requirement_violation	/Users/lij/.vim/stl/sequence_concepts.h	/^  __push_front_function_requirement_violation(_XX& __s) {$/;"	f	struct:_ERROR_IN_STL_SEQ	access:public	signature:(_XX& __s)
__push_heap	/Users/lij/.vim/stl/stl_heap.h	/^__push_heap(_RandomAccessIterator __first, _Distance __holeIndex,$/;"	f	signature:(_RandomAccessIterator __first, _Distance __holeIndex, _Distance __topIndex, _Tp __value, _Compare __comp)
__push_heap	/Users/lij/.vim/stl/stl_heap.h	/^__push_heap(_RandomAccessIterator __first,$/;"	f	signature:(_RandomAccessIterator __first, _Distance __holeIndex, _Distance __topIndex, _Tp __value)
__push_heap_aux	/Users/lij/.vim/stl/stl_heap.h	/^__push_heap_aux(_RandomAccessIterator __first,$/;"	f	signature:(_RandomAccessIterator __first, _RandomAccessIterator __last, _Compare __comp, _Distance*, _Tp*)
__push_heap_aux	/Users/lij/.vim/stl/stl_heap.h	/^__push_heap_aux(_RandomAccessIterator __first,$/;"	f	signature:(_RandomAccessIterator __first, _RandomAccessIterator __last, _Distance*, _Tp*)
__random_number	/Users/lij/.vim/stl/stl_algo.h	/^inline _Distance __random_number(_Distance __n) {$/;"	f	signature:(_Distance __n)
__random_sample	/Users/lij/.vim/stl/stl_algo.h	/^_RandomAccessIter __random_sample(_InputIter __first, _InputIter __last,$/;"	f	signature:(_InputIter __first, _InputIter __last, _RandomAccessIter __out, _RandomNumberGenerator& __rand, const _Distance __n)
__random_sample	/Users/lij/.vim/stl/stl_algo.h	/^_RandomAccessIter __random_sample(_InputIter __first, _InputIter __last,$/;"	f	signature:(_InputIter __first, _InputIter __last, _RandomAccessIter __out, const _Distance __n)
__range_constructor_requirement_violation	/Users/lij/.vim/stl/sequence_concepts.h	/^  __range_constructor_requirement_violation(_XX& __s) {$/;"	f	struct:_ERROR_IN_STL_SEQ	access:public	signature:(_XX& __s)
__range_erase_function_requirement_violation	/Users/lij/.vim/stl/sequence_concepts.h	/^  __range_erase_function_requirement_violation(_XX& __s) {$/;"	f	struct:_ERROR_IN_STL_SEQ	access:public	signature:(_XX& __s)
__range_insert_function_requirement_violation	/Users/lij/.vim/stl/sequence_concepts.h	/^  __range_insert_function_requirement_violation(_XX& __s) {$/;"	f	struct:_ERROR_IN_STL_SEQ	access:public	signature:(_XX& __s)
__rb_verify	/Users/lij/.vim/stl/stl_tree.h	/^  bool __rb_verify() const;$/;"	p	class:_Rb_tree	access:public	signature:() const
__rb_verify	/Users/lij/.vim/stl/stl_tree.h	/^bool _Rb_tree<_Key,_Value,_KeyOfValue,_Compare,_Alloc>::__rb_verify() const$/;"	f	class:_Rb_tree	signature:() const
__rbegin_iterator_accessor_requirement_violation	/Users/lij/.vim/stl/container_concepts.h	/^  __rbegin_iterator_accessor_requirement_violation(_Container __c) {$/;"	f	struct:_ERROR_IN_STL_CONTAINER	access:public	signature:(_Container __c)
__reference_type_definition_requirement_violation	/Users/lij/.vim/stl/concept_checks.h	/^struct __reference_type_definition_requirement_violation {$/;"	s
__reference_type_definition_requirement_violation::reference	/Users/lij/.vim/stl/concept_checks.h	/^  typedef typename __STD::iterator_traits<_Iter>::reference reference;$/;"	t	struct:__reference_type_definition_requirement_violation	access:public
__rend_iterator_accessor_requirement_violation	/Users/lij/.vim/stl/container_concepts.h	/^  __rend_iterator_accessor_requirement_violation(_Container __c) {$/;"	f	struct:_ERROR_IN_STL_CONTAINER	access:public	signature:(_Container __c)
__reverse	/Users/lij/.vim/stl/stl_algo.h	/^void __reverse(_BidirectionalIter __first, _BidirectionalIter __last, $/;"	f	signature:(_BidirectionalIter __first, _BidirectionalIter __last, bidirectional_iterator_tag)
__reverse	/Users/lij/.vim/stl/stl_algo.h	/^void __reverse(_RandomAccessIter __first, _RandomAccessIter __last,$/;"	f	signature:(_RandomAccessIter __first, _RandomAccessIter __last, random_access_iterator_tag)
__rotate	/Users/lij/.vim/stl/stl_algo.h	/^_BidirectionalIter __rotate(_BidirectionalIter __first,$/;"	f	signature:(_BidirectionalIter __first, _BidirectionalIter __middle, _BidirectionalIter __last, _Distance*, bidirectional_iterator_tag)
__rotate	/Users/lij/.vim/stl/stl_algo.h	/^_ForwardIter __rotate(_ForwardIter __first,$/;"	f	signature:(_ForwardIter __first, _ForwardIter __middle, _ForwardIter __last, _Distance*, forward_iterator_tag)
__rotate	/Users/lij/.vim/stl/stl_algo.h	/^_RandomAccessIter __rotate(_RandomAccessIter __first,$/;"	f	signature:(_RandomAccessIter __first, _RandomAccessIter __middle, _RandomAccessIter __last, _Distance *, _Tp *)
__rotate_adaptive	/Users/lij/.vim/stl/stl_algo.h	/^_BidirectionalIter1 __rotate_adaptive(_BidirectionalIter1 __first,$/;"	f	signature:(_BidirectionalIter1 __first, _BidirectionalIter1 __middle, _BidirectionalIter1 __last, _Distance __len1, _Distance __len2, _BidirectionalIter2 __buffer, _Distance __buffer_size)
__set_malloc_handler	/Users/lij/.vim/stl/stl_alloc.h	/^  static void (* __set_malloc_handler(void (*__f)()))()$/;"	f	class:__malloc_alloc_template	access:public	signature:(void (*__f)())
__sgi_string_fill	/Users/lij/.vim/stl/string	/^__sgi_string_fill(basic_ostream<_CharT, _Traits>& __os,$/;"	f	signature:(basic_ostream<_CharT, _Traits>& __os, basic_streambuf<_CharT, _Traits>* __buf, size_t __n)
__sink_unused_warning	/Users/lij/.vim/stl/concept_checks.h	/^void __sink_unused_warning(_Type) { }$/;"	f	signature:(_Type)
__size_function_must_be_const	/Users/lij/.vim/stl/container_concepts.h	/^  __size_function_must_be_const(const _Container& __c) {$/;"	f	struct:_ERROR_IN_STL_CONTAINER	access:public	signature:(const _Container& __c)
__size_function_requirement_violation	/Users/lij/.vim/stl/container_concepts.h	/^  __size_function_requirement_violation(_Container& __c) {$/;"	f	struct:_ERROR_IN_STL_CONTAINER	access:public	signature:(_Container& __c)
__slist_make_link	/Users/lij/.vim/stl/stl_slist.h	/^__slist_make_link(_Slist_node_base* __prev_node,$/;"	f	signature:(_Slist_node_base* __prev_node, _Slist_node_base* __new_node)
__slist_previous	/Users/lij/.vim/stl/stl_slist.h	/^__slist_previous(_Slist_node_base* __head,$/;"	f	signature:(_Slist_node_base* __head, const _Slist_node_base* __node)
__slist_previous	/Users/lij/.vim/stl/stl_slist.h	/^__slist_previous(const _Slist_node_base* __head,$/;"	f	signature:(const _Slist_node_base* __head, const _Slist_node_base* __node)
__slist_reverse	/Users/lij/.vim/stl/stl_slist.h	/^inline _Slist_node_base* __slist_reverse(_Slist_node_base* __node)$/;"	f	signature:(_Slist_node_base* __node)
__slist_size	/Users/lij/.vim/stl/stl_slist.h	/^inline size_t __slist_size(_Slist_node_base* __node)$/;"	f	signature:(_Slist_node_base* __node)
__slist_splice_after	/Users/lij/.vim/stl/stl_slist.h	/^__slist_splice_after(_Slist_node_base* __pos, _Slist_node_base* __head)$/;"	f	signature:(_Slist_node_base* __pos, _Slist_node_base* __head)
__slist_splice_after	/Users/lij/.vim/stl/stl_slist.h	/^inline void __slist_splice_after(_Slist_node_base* __pos,$/;"	f	signature:(_Slist_node_base* __pos, _Slist_node_base* __before_first, _Slist_node_base* __before_last)
__stable_partition_adaptive	/Users/lij/.vim/stl/stl_algo.h	/^_ForwardIter __stable_partition_adaptive(_ForwardIter __first,$/;"	f	signature:(_ForwardIter __first, _ForwardIter __last, _Predicate __pred, _Distance __len, _Pointer __buffer, _Distance __buffer_size)
__stable_partition_aux	/Users/lij/.vim/stl/stl_algo.h	/^__stable_partition_aux(_ForwardIter __first, _ForwardIter __last, $/;"	f	signature:(_ForwardIter __first, _ForwardIter __last, _Predicate __pred, _Tp*, _Distance*)
__stable_sort_adaptive	/Users/lij/.vim/stl/stl_algo.h	/^void __stable_sort_adaptive(_RandomAccessIter __first, $/;"	f	signature:(_RandomAccessIter __first, _RandomAccessIter __last, _Pointer __buffer, _Distance __buffer_size)
__stable_sort_adaptive	/Users/lij/.vim/stl/stl_algo.h	/^void __stable_sort_adaptive(_RandomAccessIter __first, $/;"	f	signature:(_RandomAccessIter __first, _RandomAccessIter __last, _Pointer __buffer, _Distance __buffer_size, _Compare __comp)
__stable_sort_aux	/Users/lij/.vim/stl/stl_algo.h	/^inline void __stable_sort_aux(_RandomAccessIter __first,$/;"	f	signature:(_RandomAccessIter __first, _RandomAccessIter __last, _Tp*, _Distance*)
__stable_sort_aux	/Users/lij/.vim/stl/stl_algo.h	/^inline void __stable_sort_aux(_RandomAccessIter __first,$/;"	f	signature:(_RandomAccessIter __first, _RandomAccessIter __last, _Tp*, _Distance*, _Compare __comp)
__stl_assert	/Users/lij/.vim/stl/stl_config.h	/^# define __stl_assert(/;"	d
__stl_chunk_size	/Users/lij/.vim/stl/stl_algo.h	/^const int __stl_chunk_size = 7;$/;"	v
__stl_hash_string	/Users/lij/.vim/stl/stl_hash_fun.h	/^inline size_t __stl_hash_string(const char* __s)$/;"	f	signature:(const char* __s)
__stl_next_prime	/Users/lij/.vim/stl/stl_hashtable.h	/^inline unsigned long __stl_next_prime(unsigned long __n)$/;"	f	signature:(unsigned long __n)
__stl_num_primes	/Users/lij/.vim/stl/stl_hashtable.h	/^enum { __stl_num_primes = 28 };$/;"	e	enum:__anon20
__stl_prime_list	/Users/lij/.vim/stl/stl_hashtable.h	/^static const unsigned long __stl_prime_list[__stl_num_primes] =$/;"	v
__stl_string_hash	/Users/lij/.vim/stl/string	/^size_t __stl_string_hash(const basic_string<_CharT,_Traits,_Alloc>& __s) {$/;"	f	signature:(const basic_string<_CharT,_Traits,_Alloc>& __s)
__stl_threshold	/Users/lij/.vim/stl/stl_algo.h	/^const int __stl_threshold = 16;$/;"	v
__stl_throw_length_error	/Users/lij/.vim/stl/stl_range_errors.h	/^void __stl_throw_length_error(const char* __msg);$/;"	p	signature:(const char* __msg)
__stl_throw_range_error	/Users/lij/.vim/stl/stl_range_errors.h	/^void __stl_throw_range_error(const char* __msg);$/;"	p	signature:(const char* __msg)
__swap_function_requirement_violation	/Users/lij/.vim/stl/container_concepts.h	/^  __swap_function_requirement_violation(_Container& __c) {$/;"	f	struct:_ERROR_IN_STL_CONTAINER	access:public	signature:(_Container& __c)
__test_and_set	/Users/lij/.vim/stl/stl_threads.h	/^#  define __test_and_set(/;"	d
__true_type	/Users/lij/.vim/stl/type_traits.h	/^struct __true_type {$/;"	s
__type_X_is_not_convertible_to_type_Y	/Users/lij/.vim/stl/concept_checks.h	/^  __type_X_is_not_convertible_to_type_Y(_TypeX __x, _TypeY) {$/;"	f	struct:_STL_CONVERT_ERROR	access:public	signature:(_TypeX __x, _TypeY)
__type_X_not_same_as_type_Y	/Users/lij/.vim/stl/concept_checks.h	/^  __type_X_not_same_as_type_Y(_TypeX , _TypeY ) { $/;"	f	struct:_STL_SAME_TYPE_ERROR	access:public	signature:(_TypeX , _TypeY )
__type_traits	/Users/lij/.vim/stl/type_traits.h	/^__STL_TEMPLATE_NULL struct __type_traits<bool> {$/;"	s
__type_traits	/Users/lij/.vim/stl/type_traits.h	/^__STL_TEMPLATE_NULL struct __type_traits<char*> {$/;"	s
__type_traits	/Users/lij/.vim/stl/type_traits.h	/^__STL_TEMPLATE_NULL struct __type_traits<char> {$/;"	s
__type_traits	/Users/lij/.vim/stl/type_traits.h	/^__STL_TEMPLATE_NULL struct __type_traits<const char*> {$/;"	s
__type_traits	/Users/lij/.vim/stl/type_traits.h	/^__STL_TEMPLATE_NULL struct __type_traits<const signed char*> {$/;"	s
__type_traits	/Users/lij/.vim/stl/type_traits.h	/^__STL_TEMPLATE_NULL struct __type_traits<const unsigned char*> {$/;"	s
__type_traits	/Users/lij/.vim/stl/type_traits.h	/^__STL_TEMPLATE_NULL struct __type_traits<double> {$/;"	s
__type_traits	/Users/lij/.vim/stl/type_traits.h	/^__STL_TEMPLATE_NULL struct __type_traits<float> {$/;"	s
__type_traits	/Users/lij/.vim/stl/type_traits.h	/^__STL_TEMPLATE_NULL struct __type_traits<int> {$/;"	s
__type_traits	/Users/lij/.vim/stl/type_traits.h	/^__STL_TEMPLATE_NULL struct __type_traits<long double> {$/;"	s
__type_traits	/Users/lij/.vim/stl/type_traits.h	/^__STL_TEMPLATE_NULL struct __type_traits<long long> {$/;"	s
__type_traits	/Users/lij/.vim/stl/type_traits.h	/^__STL_TEMPLATE_NULL struct __type_traits<long> {$/;"	s
__type_traits	/Users/lij/.vim/stl/type_traits.h	/^__STL_TEMPLATE_NULL struct __type_traits<short> {$/;"	s
__type_traits	/Users/lij/.vim/stl/type_traits.h	/^__STL_TEMPLATE_NULL struct __type_traits<signed char*> {$/;"	s
__type_traits	/Users/lij/.vim/stl/type_traits.h	/^__STL_TEMPLATE_NULL struct __type_traits<signed char> {$/;"	s
__type_traits	/Users/lij/.vim/stl/type_traits.h	/^__STL_TEMPLATE_NULL struct __type_traits<unsigned char*> {$/;"	s
__type_traits	/Users/lij/.vim/stl/type_traits.h	/^__STL_TEMPLATE_NULL struct __type_traits<unsigned char> {$/;"	s
__type_traits	/Users/lij/.vim/stl/type_traits.h	/^__STL_TEMPLATE_NULL struct __type_traits<unsigned int> {$/;"	s
__type_traits	/Users/lij/.vim/stl/type_traits.h	/^__STL_TEMPLATE_NULL struct __type_traits<unsigned long long> {$/;"	s
__type_traits	/Users/lij/.vim/stl/type_traits.h	/^__STL_TEMPLATE_NULL struct __type_traits<unsigned long> {$/;"	s
__type_traits	/Users/lij/.vim/stl/type_traits.h	/^__STL_TEMPLATE_NULL struct __type_traits<unsigned short> {$/;"	s
__type_traits	/Users/lij/.vim/stl/type_traits.h	/^__STL_TEMPLATE_NULL struct __type_traits<wchar_t> {$/;"	s
__type_traits	/Users/lij/.vim/stl/type_traits.h	/^struct __type_traits { $/;"	s
__type_traits	/Users/lij/.vim/stl/type_traits.h	/^struct __type_traits<_Tp*> {$/;"	s
__type_traits::has_trivial_assignment_operator	/Users/lij/.vim/stl/type_traits.h	/^   typedef __false_type    has_trivial_assignment_operator;$/;"	t	struct:__type_traits	access:public
__type_traits::has_trivial_assignment_operator	/Users/lij/.vim/stl/type_traits.h	/^   typedef __true_type    has_trivial_assignment_operator;$/;"	t	struct:__type_traits	access:public
__type_traits::has_trivial_copy_constructor	/Users/lij/.vim/stl/type_traits.h	/^   typedef __false_type    has_trivial_copy_constructor;$/;"	t	struct:__type_traits	access:public
__type_traits::has_trivial_copy_constructor	/Users/lij/.vim/stl/type_traits.h	/^   typedef __true_type    has_trivial_copy_constructor;$/;"	t	struct:__type_traits	access:public
__type_traits::has_trivial_default_constructor	/Users/lij/.vim/stl/type_traits.h	/^   typedef __false_type    has_trivial_default_constructor;$/;"	t	struct:__type_traits	access:public
__type_traits::has_trivial_default_constructor	/Users/lij/.vim/stl/type_traits.h	/^   typedef __true_type    has_trivial_default_constructor;$/;"	t	struct:__type_traits	access:public
__type_traits::has_trivial_destructor	/Users/lij/.vim/stl/type_traits.h	/^   typedef __false_type    has_trivial_destructor;$/;"	t	struct:__type_traits	access:public
__type_traits::has_trivial_destructor	/Users/lij/.vim/stl/type_traits.h	/^   typedef __true_type    has_trivial_destructor;$/;"	t	struct:__type_traits	access:public
__type_traits::is_POD_type	/Users/lij/.vim/stl/type_traits.h	/^   typedef __false_type    is_POD_type;$/;"	t	struct:__type_traits	access:public
__type_traits::is_POD_type	/Users/lij/.vim/stl/type_traits.h	/^   typedef __true_type    is_POD_type;$/;"	t	struct:__type_traits	access:public
__type_traits::this_dummy_member_must_be_first	/Users/lij/.vim/stl/type_traits.h	/^   typedef __true_type     this_dummy_member_must_be_first;$/;"	t	struct:__type_traits	access:public
__unary_function_requirement_violation	/Users/lij/.vim/stl/concept_checks.h	/^  __unary_function_requirement_violation(_Func& __f,$/;"	f	struct:_STL_UNARY_FUNCTION_ERROR	access:public	signature:(_Func& __f, const _Arg& __arg)
__unconditional_insert_element_function_requirement_violation	/Users/lij/.vim/stl/sequence_concepts.h	/^  __unconditional_insert_element_function_requirement_violation(_XX& __s) {$/;"	f	struct:_ERROR_IN_STL_SEQ	access:public	signature:(_XX& __s)
__underlying_alloc	/Users/lij/.vim/stl/stl_alloc.h	/^  _Alloc __underlying_alloc;$/;"	m	struct:__allocator	access:public
__unguarded_insertion_sort	/Users/lij/.vim/stl/stl_algo.h	/^inline void __unguarded_insertion_sort(_RandomAccessIter __first, $/;"	f	signature:(_RandomAccessIter __first, _RandomAccessIter __last)
__unguarded_insertion_sort	/Users/lij/.vim/stl/stl_algo.h	/^inline void __unguarded_insertion_sort(_RandomAccessIter __first, $/;"	f	signature:(_RandomAccessIter __first, _RandomAccessIter __last, _Compare __comp)
__unguarded_insertion_sort_aux	/Users/lij/.vim/stl/stl_algo.h	/^void __unguarded_insertion_sort_aux(_RandomAccessIter __first, $/;"	f	signature:(_RandomAccessIter __first, _RandomAccessIter __last, _Tp*)
__unguarded_insertion_sort_aux	/Users/lij/.vim/stl/stl_algo.h	/^void __unguarded_insertion_sort_aux(_RandomAccessIter __first, $/;"	f	signature:(_RandomAccessIter __first, _RandomAccessIter __last, _Tp*, _Compare __comp)
__unguarded_linear_insert	/Users/lij/.vim/stl/stl_algo.h	/^void __unguarded_linear_insert(_RandomAccessIter __last, _Tp __val) {$/;"	f	signature:(_RandomAccessIter __last, _Tp __val)
__unguarded_linear_insert	/Users/lij/.vim/stl/stl_algo.h	/^void __unguarded_linear_insert(_RandomAccessIter __last, _Tp __val, $/;"	f	signature:(_RandomAccessIter __last, _Tp __val, _Compare __comp)
__unguarded_partition	/Users/lij/.vim/stl/stl_algo.h	/^_RandomAccessIter __unguarded_partition(_RandomAccessIter __first, $/;"	f	signature:(_RandomAccessIter __first, _RandomAccessIter __last, _Tp __pivot)
__unguarded_partition	/Users/lij/.vim/stl/stl_algo.h	/^_RandomAccessIter __unguarded_partition(_RandomAccessIter __first, $/;"	f	signature:(_RandomAccessIter __first, _RandomAccessIter __last, _Tp __pivot, _Compare __comp)
__uninitialized_copy	/Users/lij/.vim/stl/stl_uninitialized.h	/^__uninitialized_copy(_InputIter __first, _InputIter __last,$/;"	f	signature:(_InputIter __first, _InputIter __last, _ForwardIter __result, _Tp*)
__uninitialized_copy_aux	/Users/lij/.vim/stl/stl_uninitialized.h	/^__uninitialized_copy_aux(_InputIter __first, _InputIter __last,$/;"	f	signature:(_InputIter __first, _InputIter __last, _ForwardIter __result, __false_type)
__uninitialized_copy_aux	/Users/lij/.vim/stl/stl_uninitialized.h	/^__uninitialized_copy_aux(_InputIter __first, _InputIter __last,$/;"	f	signature:(_InputIter __first, _InputIter __last, _ForwardIter __result, __true_type)
__uninitialized_copy_copy	/Users/lij/.vim/stl/stl_uninitialized.h	/^__uninitialized_copy_copy(_InputIter1 __first1, _InputIter1 __last1,$/;"	f	signature:(_InputIter1 __first1, _InputIter1 __last1, _InputIter2 __first2, _InputIter2 __last2, _ForwardIter __result)
__uninitialized_copy_fill	/Users/lij/.vim/stl/stl_uninitialized.h	/^__uninitialized_copy_fill(_InputIter __first1, _InputIter __last1,$/;"	f	signature:(_InputIter __first1, _InputIter __last1, _ForwardIter __first2, _ForwardIter __last2, const _Tp& __x)
__uninitialized_copy_n	/Users/lij/.vim/stl/stl_uninitialized.h	/^__uninitialized_copy_n(_InputIter __first, _Size __count,$/;"	f	signature:(_InputIter __first, _Size __count, _ForwardIter __result)
__uninitialized_copy_n	/Users/lij/.vim/stl/stl_uninitialized.h	/^__uninitialized_copy_n(_InputIter __first, _Size __count,$/;"	f	signature:(_InputIter __first, _Size __count, _ForwardIter __result, input_iterator_tag)
__uninitialized_copy_n	/Users/lij/.vim/stl/stl_uninitialized.h	/^__uninitialized_copy_n(_RandomAccessIter __first, _Size __count,$/;"	f	signature:(_RandomAccessIter __first, _Size __count, _ForwardIter __result, random_access_iterator_tag)
__uninitialized_fill	/Users/lij/.vim/stl/stl_uninitialized.h	/^inline void __uninitialized_fill(_ForwardIter __first, $/;"	f	signature:(_ForwardIter __first, _ForwardIter __last, const _Tp& __x, _Tp1*)
__uninitialized_fill_aux	/Users/lij/.vim/stl/stl_uninitialized.h	/^__uninitialized_fill_aux(_ForwardIter __first, _ForwardIter __last, $/;"	f	signature:(_ForwardIter __first, _ForwardIter __last, const _Tp& __x, __false_type)
__uninitialized_fill_aux	/Users/lij/.vim/stl/stl_uninitialized.h	/^__uninitialized_fill_aux(_ForwardIter __first, _ForwardIter __last, $/;"	f	signature:(_ForwardIter __first, _ForwardIter __last, const _Tp& __x, __true_type)
__uninitialized_fill_copy	/Users/lij/.vim/stl/stl_uninitialized.h	/^__uninitialized_fill_copy(_ForwardIter __result, _ForwardIter __mid,$/;"	f	signature:(_ForwardIter __result, _ForwardIter __mid, const _Tp& __x, _InputIter __first, _InputIter __last)
__uninitialized_fill_n	/Users/lij/.vim/stl/stl_uninitialized.h	/^__uninitialized_fill_n(_ForwardIter __first, _Size __n, const _Tp& __x, _Tp1*)$/;"	f	signature:(_ForwardIter __first, _Size __n, const _Tp& __x, _Tp1*)
__uninitialized_fill_n_aux	/Users/lij/.vim/stl/stl_uninitialized.h	/^__uninitialized_fill_n_aux(_ForwardIter __first, _Size __n,$/;"	f	signature:(_ForwardIter __first, _Size __n, const _Tp& __x, __false_type)
__uninitialized_fill_n_aux	/Users/lij/.vim/stl/stl_uninitialized.h	/^__uninitialized_fill_n_aux(_ForwardIter __first, _Size __n,$/;"	f	signature:(_ForwardIter __first, _Size __n, const _Tp& __x, __true_type)
__unique_copy	/Users/lij/.vim/stl/stl_algo.h	/^_ForwardIter __unique_copy(_InputIter __first, _InputIter __last,$/;"	f	signature:(_InputIter __first, _InputIter __last, _ForwardIter __result, _BinaryPredicate __binary_pred, forward_iterator_tag)
__unique_copy	/Users/lij/.vim/stl/stl_algo.h	/^_ForwardIter __unique_copy(_InputIter __first, _InputIter __last,$/;"	f	signature:(_InputIter __first, _InputIter __last, _ForwardIter __result, forward_iterator_tag)
__unique_copy	/Users/lij/.vim/stl/stl_algo.h	/^_OutputIter __unique_copy(_InputIter __first, _InputIter __last,$/;"	f	signature:(_InputIter __first, _InputIter __last, _OutputIter __result, _BinaryPredicate __binary_pred, _Tp*)
__unique_copy	/Users/lij/.vim/stl/stl_algo.h	/^_OutputIter __unique_copy(_InputIter __first, _InputIter __last,$/;"	f	signature:(_InputIter __first, _InputIter __last, _OutputIter __result, _Tp*)
__unique_copy	/Users/lij/.vim/stl/stl_algo.h	/^inline _OutputIter __unique_copy(_InputIter __first, _InputIter __last,$/;"	f	signature:(_InputIter __first, _InputIter __last, _OutputIter __result, _BinaryPredicate __binary_pred, output_iterator_tag)
__unique_copy	/Users/lij/.vim/stl/stl_algo.h	/^inline _OutputIter __unique_copy(_InputIter __first, _InputIter __last,$/;"	f	signature:(_InputIter __first, _InputIter __last, _OutputIter __result, output_iterator_tag)
__upper_bound	/Users/lij/.vim/stl/stl_algo.h	/^_ForwardIter __upper_bound(_ForwardIter __first, _ForwardIter __last,$/;"	f	signature:(_ForwardIter __first, _ForwardIter __last, const _Tp& __val, _Compare __comp, _Distance*)
__upper_bound	/Users/lij/.vim/stl/stl_algo.h	/^_ForwardIter __upper_bound(_ForwardIter __first, _ForwardIter __last,$/;"	f	signature:(_ForwardIter __first, _ForwardIter __last, const _Tp& __val, _Distance*)
__value_type	/Users/lij/.vim/stl/stl_iterator_base.h	/^__value_type(const _Iter&)$/;"	f	signature:(const _Iter&)
__value_type_type_definition_requirement_violation	/Users/lij/.vim/stl/concept_checks.h	/^struct __value_type_type_definition_requirement_violation {$/;"	s
__value_type_type_definition_requirement_violation::value_type	/Users/lij/.vim/stl/concept_checks.h	/^  typedef typename __STD::iterator_traits<_Iter>::value_type value_type;$/;"	t	struct:__value_type_type_definition_requirement_violation	access:public
_allocator_type	/Users/lij/.vim/stl/stl_rope.h	/^    typedef _Alloc _allocator_type; \/\/ used in _Rope_rotate, VC++ workaround$/;"	t	class:_Rope_iterator_base	access:public
_const_ReversibleContainer_concept_specification	/Users/lij/.vim/stl/container_concepts.h	/^struct _const_ReversibleContainer_concept_specification {$/;"	s
_const_ReversibleContainer_concept_specification::_const_ReversibleContainer_requirement_violation	/Users/lij/.vim/stl/container_concepts.h	/^_const_ReversibleContainer_requirement_violation(_ReversibleContainer __c) {$/;"	f	struct:_const_ReversibleContainer_concept_specification	access:public	signature:(_ReversibleContainer __c)
_const_ReversibleContainer_requirement_violation	/Users/lij/.vim/stl/container_concepts.h	/^_const_ReversibleContainer_requirement_violation(_ReversibleContainer __c) {$/;"	f	struct:_const_ReversibleContainer_concept_specification	access:public	signature:(_ReversibleContainer __c)
abs	/Users/lij/.vim/stl/valarray	/^inline valarray<_Tp> abs(const valarray<_Tp>& __x) {$/;"	f	signature:(const valarray<_Tp>& __x)
accumulate	/Users/lij/.vim/stl/stl_numeric.h	/^_Tp accumulate(_InputIterator __first, _InputIterator __last, _Tp __init)$/;"	f	signature:(_InputIterator __first, _InputIterator __last, _Tp __init)
accumulate	/Users/lij/.vim/stl/stl_numeric.h	/^_Tp accumulate(_InputIterator __first, _InputIterator __last, _Tp __init,$/;"	f	signature:(_InputIterator __first, _InputIterator __last, _Tp __init, _BinaryOperation __binary_op)
acos	/Users/lij/.vim/stl/valarray	/^inline valarray<_Tp> acos(const valarray<_Tp>& __x) {$/;"	f	signature:(const valarray<_Tp>& __x)
address	/Users/lij/.vim/stl/defalloc.h	/^    pointer address(reference x) { return (pointer)&x; }$/;"	f	class:allocator	access:public	signature:(reference x)
address	/Users/lij/.vim/stl/pthread_alloc	/^  const_pointer address(const_reference __x) const { return &__x; }$/;"	f	class:pthread_allocator	access:public	signature:(const_reference __x) const
address	/Users/lij/.vim/stl/pthread_alloc	/^  pointer address(reference __x) const { return &__x; }$/;"	f	class:pthread_allocator	access:public	signature:(reference __x) const
address	/Users/lij/.vim/stl/stl_alloc.h	/^  const_pointer address(const_reference __x) const { return &__x; }$/;"	f	class:allocator	access:public	signature:(const_reference __x) const
address	/Users/lij/.vim/stl/stl_alloc.h	/^  const_pointer address(const_reference __x) const { return &__x; }$/;"	f	signature:(const_reference __x) const
address	/Users/lij/.vim/stl/stl_alloc.h	/^  pointer address(reference __x) const { return &__x; }$/;"	f	class:allocator	access:public	signature:(reference __x) const
adjacent_difference	/Users/lij/.vim/stl/stl_numeric.h	/^adjacent_difference(_InputIterator __first, _InputIterator __last,$/;"	f	signature:(_InputIterator __first, _InputIterator __last, _OutputIterator __result, _BinaryOperation __binary_op)
adjacent_difference	/Users/lij/.vim/stl/stl_numeric.h	/^adjacent_difference(_InputIterator __first,$/;"	f	signature:(_InputIterator __first, _InputIterator __last, _OutputIterator __result)
adjacent_find	/Users/lij/.vim/stl/stl_algo.h	/^_ForwardIter adjacent_find(_ForwardIter __first, _ForwardIter __last) {$/;"	f	signature:(_ForwardIter __first, _ForwardIter __last)
adjacent_find	/Users/lij/.vim/stl/stl_algo.h	/^_ForwardIter adjacent_find(_ForwardIter __first, _ForwardIter __last,$/;"	f	signature:(_ForwardIter __first, _ForwardIter __last, _BinaryPredicate __binary_pred)
advance	/Users/lij/.vim/stl/stl_iterator_base.h	/^inline void advance(_InputIterator& __i, _Distance __n) {$/;"	f	signature:(_InputIterator& __i, _Distance __n)
alloc	/Users/lij/.vim/stl/stl_alloc.h	/^typedef __default_alloc_template<__NODE_ALLOCATOR_THREADS, 0> alloc;$/;"	t
alloc	/Users/lij/.vim/stl/stl_alloc.h	/^typedef malloc_alloc alloc;$/;"	t
allocate	/Users/lij/.vim/stl/defalloc.h	/^    pointer allocate(size_type n) { $/;"	f	class:allocator	access:public	signature:(size_type n)
allocate	/Users/lij/.vim/stl/defalloc.h	/^inline T* allocate(ptrdiff_t size, T*) {$/;"	f	signature:(ptrdiff_t size, T*)
allocate	/Users/lij/.vim/stl/pthread_alloc	/^  _Tp* allocate(size_type __n, const void* = 0) {$/;"	f	class:pthread_allocator	access:public	signature:(size_type __n, const void* = 0)
allocate	/Users/lij/.vim/stl/pthread_alloc	/^  static void * allocate(size_t __n)$/;"	f	class:_Pthread_alloc_template	access:public	signature:(size_t __n)
allocate	/Users/lij/.vim/stl/stl_alloc.h	/^    static _Tp* allocate(size_t __n)$/;"	f	class:simple_alloc	access:public	signature:(size_t __n)
allocate	/Users/lij/.vim/stl/stl_alloc.h	/^    static _Tp* allocate(void)$/;"	f	class:simple_alloc	access:public	signature:(void)
allocate	/Users/lij/.vim/stl/stl_alloc.h	/^  _Tp* allocate(size_type __n, const void* = 0) {$/;"	f	class:allocator	access:public	signature:(size_type __n, const void* = 0)
allocate	/Users/lij/.vim/stl/stl_alloc.h	/^  _Tp* allocate(size_type __n, const void* = 0) {$/;"	f	signature:(size_type __n, const void* = 0)
allocate	/Users/lij/.vim/stl/stl_alloc.h	/^  static void* allocate(size_t __n)$/;"	f	class:__default_alloc_template	access:public	signature:(size_t __n)
allocate	/Users/lij/.vim/stl/stl_alloc.h	/^  static void* allocate(size_t __n)$/;"	f	class:__malloc_alloc_template	access:public	signature:(size_t __n)
allocate	/Users/lij/.vim/stl/stl_alloc.h	/^  static void* allocate(size_t __n)$/;"	f	class:debug_alloc	access:public	signature:(size_t __n)
allocator	/Users/lij/.vim/stl/defalloc.h	/^class allocator {$/;"	c
allocator	/Users/lij/.vim/stl/defalloc.h	/^class allocator<void> {$/;"	c
allocator	/Users/lij/.vim/stl/stl_alloc.h	/^class allocator {$/;"	c
allocator	/Users/lij/.vim/stl/stl_alloc.h	/^class allocator<void> {$/;"	c
allocator::_Alloc	/Users/lij/.vim/stl/stl_alloc.h	/^  typedef alloc _Alloc;          \/\/ The underlying allocator.$/;"	t	class:allocator	access:private
allocator::address	/Users/lij/.vim/stl/defalloc.h	/^    pointer address(reference x) { return (pointer)&x; }$/;"	f	class:allocator	access:public	signature:(reference x)
allocator::address	/Users/lij/.vim/stl/stl_alloc.h	/^  const_pointer address(const_reference __x) const { return &__x; }$/;"	f	class:allocator	access:public	signature:(const_reference __x) const
allocator::address	/Users/lij/.vim/stl/stl_alloc.h	/^  pointer address(reference __x) const { return &__x; }$/;"	f	class:allocator	access:public	signature:(reference __x) const
allocator::allocate	/Users/lij/.vim/stl/defalloc.h	/^    pointer allocate(size_type n) { $/;"	f	class:allocator	access:public	signature:(size_type n)
allocator::allocate	/Users/lij/.vim/stl/stl_alloc.h	/^  _Tp* allocate(size_type __n, const void* = 0) {$/;"	f	class:allocator	access:public	signature:(size_type __n, const void* = 0)
allocator::const_address	/Users/lij/.vim/stl/defalloc.h	/^    const_pointer const_address(const_reference x) { $/;"	f	class:allocator	access:public	signature:(const_reference x)
allocator::const_pointer	/Users/lij/.vim/stl/defalloc.h	/^    typedef const T* const_pointer;$/;"	t	class:allocator	access:public
allocator::const_pointer	/Users/lij/.vim/stl/stl_alloc.h	/^  typedef const _Tp* const_pointer;$/;"	t	class:allocator	access:public
allocator::const_pointer	/Users/lij/.vim/stl/stl_alloc.h	/^  typedef const void* const_pointer;$/;"	t	class:allocator	access:public
allocator::const_reference	/Users/lij/.vim/stl/defalloc.h	/^    typedef const T& const_reference;$/;"	t	class:allocator	access:public
allocator::const_reference	/Users/lij/.vim/stl/stl_alloc.h	/^  typedef const _Tp& const_reference;$/;"	t	class:allocator	access:public
allocator::construct	/Users/lij/.vim/stl/stl_alloc.h	/^  void construct(pointer __p, const _Tp& __val) { new(__p) _Tp(__val); }$/;"	f	class:allocator	access:public	signature:(pointer __p, const _Tp& __val)
allocator::deallocate	/Users/lij/.vim/stl/defalloc.h	/^    void deallocate(pointer p) { ::deallocate(p); }$/;"	f	class:allocator	access:public	signature:(pointer p)
allocator::deallocate	/Users/lij/.vim/stl/stl_alloc.h	/^  void deallocate(pointer __p, size_type __n)$/;"	f	class:allocator	access:public	signature:(pointer __p, size_type __n)
allocator::destroy	/Users/lij/.vim/stl/stl_alloc.h	/^  void destroy(pointer __p) { __p->~_Tp(); }$/;"	f	class:allocator	access:public	signature:(pointer __p)
allocator::difference_type	/Users/lij/.vim/stl/defalloc.h	/^    typedef ptrdiff_t difference_type;$/;"	t	class:allocator	access:public
allocator::difference_type	/Users/lij/.vim/stl/stl_alloc.h	/^  typedef ptrdiff_t   difference_type;$/;"	t	class:allocator	access:public
allocator::difference_type	/Users/lij/.vim/stl/stl_alloc.h	/^  typedef ptrdiff_t  difference_type;$/;"	t	class:allocator	access:public
allocator::init_page_size	/Users/lij/.vim/stl/defalloc.h	/^    size_type init_page_size() { $/;"	f	class:allocator	access:public	signature:()
allocator::max_size	/Users/lij/.vim/stl/defalloc.h	/^    size_type max_size() const { $/;"	f	class:allocator	access:public	signature:() const
allocator::pointer	/Users/lij/.vim/stl/defalloc.h	/^    typedef T* pointer;$/;"	t	class:allocator	access:public
allocator::pointer	/Users/lij/.vim/stl/defalloc.h	/^    typedef void* pointer;$/;"	t	class:allocator	access:public
allocator::pointer	/Users/lij/.vim/stl/stl_alloc.h	/^  typedef _Tp*       pointer;$/;"	t	class:allocator	access:public
allocator::pointer	/Users/lij/.vim/stl/stl_alloc.h	/^  typedef void*       pointer;$/;"	t	class:allocator	access:public
allocator::rebind	/Users/lij/.vim/stl/stl_alloc.h	/^  template <class _Tp1> struct rebind {$/;"	s	class:allocator	access:public
allocator::rebind::other	/Users/lij/.vim/stl/stl_alloc.h	/^    typedef allocator<_Tp1> other;$/;"	t	struct:allocator::rebind	access:public
allocator::reference	/Users/lij/.vim/stl/defalloc.h	/^    typedef T& reference;$/;"	t	class:allocator	access:public
allocator::reference	/Users/lij/.vim/stl/stl_alloc.h	/^  typedef _Tp&       reference;$/;"	t	class:allocator	access:public
allocator::size_type	/Users/lij/.vim/stl/defalloc.h	/^    typedef size_t size_type;$/;"	t	class:allocator	access:public
allocator::size_type	/Users/lij/.vim/stl/stl_alloc.h	/^  typedef size_t      size_type;$/;"	t	class:allocator	access:public
allocator::size_type	/Users/lij/.vim/stl/stl_alloc.h	/^  typedef size_t     size_type;$/;"	t	class:allocator	access:public
allocator::value_type	/Users/lij/.vim/stl/defalloc.h	/^    typedef T value_type;$/;"	t	class:allocator	access:public
allocator::value_type	/Users/lij/.vim/stl/stl_alloc.h	/^  typedef _Tp        value_type;$/;"	t	class:allocator	access:public
allocator::value_type	/Users/lij/.vim/stl/stl_alloc.h	/^  typedef void        value_type;$/;"	t	class:allocator	access:public
allocator_type	/Users/lij/.vim/stl/pthread_alloc	/^          allocator_type;$/;"	t	struct:_Alloc_traits	file:	access:public
allocator_type	/Users/lij/.vim/stl/pthread_alloc	/^  typedef __allocator<_Tp, _Pthread_alloc_template<_Max> > allocator_type;$/;"	t	struct:_Alloc_traits	file:	access:public
allocator_type	/Users/lij/.vim/stl/pthread_alloc	/^  typedef pthread_allocator<_Tp> allocator_type;$/;"	t	struct:_Alloc_traits	file:	access:public
allocator_type	/Users/lij/.vim/stl/stl_bvector.h	/^          allocator_type;$/;"	t	class:_Bvector_alloc_base	access:public
allocator_type	/Users/lij/.vim/stl/stl_bvector.h	/^  typedef _Alloc allocator_type;$/;"	t	class:_Bvector_base	access:public
allocator_type	/Users/lij/.vim/stl/stl_bvector.h	/^  typedef typename _Base::allocator_type allocator_type;$/;"	t	class:_Bvector_base	access:public
allocator_type	/Users/lij/.vim/stl/stl_bvector.h	/^  typedef typename __BVECTOR_BASE::allocator_type allocator_type;$/;"	t	class:__BVECTOR	access:public
allocator_type	/Users/lij/.vim/stl/stl_deque.h	/^  typedef _Alloc allocator_type;$/;"	t	class:_Deque_base	access:public
allocator_type	/Users/lij/.vim/stl/stl_deque.h	/^  typedef typename _Alloc_traits<_Tp,_Alloc>::allocator_type allocator_type;$/;"	t	class:_Deque_alloc_base	access:public
allocator_type	/Users/lij/.vim/stl/stl_deque.h	/^  typedef typename _Base::allocator_type allocator_type;$/;"	t	class:_Deque_base	access:public
allocator_type	/Users/lij/.vim/stl/stl_deque.h	/^  typedef typename _Base::allocator_type allocator_type;$/;"	t	class:deque	access:public
allocator_type	/Users/lij/.vim/stl/stl_hash_map.h	/^  typedef typename _Ht::allocator_type allocator_type;$/;"	t	class:hash_map	access:public
allocator_type	/Users/lij/.vim/stl/stl_hash_map.h	/^  typedef typename _Ht::allocator_type allocator_type;$/;"	t	class:hash_multimap	access:public
allocator_type	/Users/lij/.vim/stl/stl_hash_set.h	/^  typedef typename _Ht::allocator_type allocator_type;$/;"	t	class:hash_multiset	access:public
allocator_type	/Users/lij/.vim/stl/stl_hash_set.h	/^  typedef typename _Ht::allocator_type allocator_type;$/;"	t	class:hash_set	access:public
allocator_type	/Users/lij/.vim/stl/stl_hashtable.h	/^  typedef _Alloc allocator_type;$/;"	t	class:hashtable	access:public
allocator_type	/Users/lij/.vim/stl/stl_hashtable.h	/^  typedef typename _Alloc_traits<_Val,_Alloc>::allocator_type allocator_type;$/;"	t	class:hashtable	access:public
allocator_type	/Users/lij/.vim/stl/stl_list.h	/^          allocator_type;$/;"	t	class:_List_alloc_base	access:public
allocator_type	/Users/lij/.vim/stl/stl_list.h	/^  typedef _Alloc allocator_type;$/;"	t	class:_List_base	access:public
allocator_type	/Users/lij/.vim/stl/stl_list.h	/^  typedef typename _Base::allocator_type allocator_type;$/;"	t	class:_List_base	access:public
allocator_type	/Users/lij/.vim/stl/stl_list.h	/^  typedef typename _Base::allocator_type allocator_type;$/;"	t	class:list	access:public
allocator_type	/Users/lij/.vim/stl/stl_map.h	/^  typedef typename _Rep_type::allocator_type allocator_type;$/;"	t	class:map	access:public
allocator_type	/Users/lij/.vim/stl/stl_multimap.h	/^  typedef typename _Rep_type::allocator_type allocator_type;$/;"	t	class:multimap	access:public
allocator_type	/Users/lij/.vim/stl/stl_multiset.h	/^  typedef typename _Rep_type::allocator_type allocator_type;$/;"	t	class:multiset	access:public
allocator_type	/Users/lij/.vim/stl/stl_rope.h	/^                                        allocator_type;$/;"	t	struct:_Rope_RopeFunction	access:public
allocator_type	/Users/lij/.vim/stl/stl_rope.h	/^                        allocator_type;$/;"	t	struct:_Rope_RopeConcatenation	access:public
allocator_type	/Users/lij/.vim/stl/stl_rope.h	/^                        allocator_type;$/;"	t	struct:_Rope_RopeLeaf	access:public
allocator_type	/Users/lij/.vim/stl/stl_rope.h	/^                        allocator_type;$/;"	t	struct:_Rope_RopeRep	access:public
allocator_type	/Users/lij/.vim/stl/stl_rope.h	/^          allocator_type;$/;"	t	class:_Rope_alloc_base	access:public
allocator_type	/Users/lij/.vim/stl/stl_rope.h	/^          allocator_type;$/;"	t	class:_Rope_rep_alloc_base	access:public
allocator_type	/Users/lij/.vim/stl/stl_rope.h	/^        allocator_type;$/;"	t	struct:_Rope_RopeSubstring	access:public
allocator_type	/Users/lij/.vim/stl/stl_rope.h	/^        typedef typename _Base::allocator_type allocator_type;$/;"	t	class:rope	access:protected
allocator_type	/Users/lij/.vim/stl/stl_rope.h	/^  typedef _Alloc allocator_type;$/;"	t	class:_Rope_base	access:public
allocator_type	/Users/lij/.vim/stl/stl_rope.h	/^  typedef _Alloc allocator_type;$/;"	t	class:_Rope_rep_base	access:public
allocator_type	/Users/lij/.vim/stl/stl_rope.h	/^  typedef typename _Base::allocator_type allocator_type;$/;"	t	struct:_Rope_base	access:public
allocator_type	/Users/lij/.vim/stl/stl_rope.h	/^  typedef typename _Base::allocator_type allocator_type;$/;"	t	struct:_Rope_rep_base	access:public
allocator_type	/Users/lij/.vim/stl/stl_set.h	/^  typedef typename _Rep_type::allocator_type allocator_type;$/;"	t	class:set	access:public
allocator_type	/Users/lij/.vim/stl/stl_slist.h	/^          allocator_type;$/;"	t	class:_Slist_alloc_base	access:public
allocator_type	/Users/lij/.vim/stl/stl_slist.h	/^  typedef _Alloc allocator_type;$/;"	t	struct:_Slist_base	access:public
allocator_type	/Users/lij/.vim/stl/stl_slist.h	/^  typedef typename _Base::allocator_type allocator_type;$/;"	t	class:slist	access:public
allocator_type	/Users/lij/.vim/stl/stl_slist.h	/^  typedef typename _Base::allocator_type allocator_type;$/;"	t	struct:_Slist_base	access:public
allocator_type	/Users/lij/.vim/stl/stl_tree.h	/^  typedef _Alloc allocator_type;$/;"	t	struct:_Rb_tree_base	access:public
allocator_type	/Users/lij/.vim/stl/stl_tree.h	/^  typedef typename _Alloc_traits<_Tp, _Alloc>::allocator_type allocator_type;$/;"	t	class:_Rb_tree_alloc_base	access:public
allocator_type	/Users/lij/.vim/stl/stl_tree.h	/^  typedef typename _Base::allocator_type allocator_type;$/;"	t	class:_Rb_tree	access:public
allocator_type	/Users/lij/.vim/stl/stl_tree.h	/^  typedef typename _Base::allocator_type allocator_type;$/;"	t	struct:_Rb_tree_base	access:public
allocator_type	/Users/lij/.vim/stl/stl_tree.h	/^  typedef typename _Base::allocator_type allocator_type;$/;"	t	struct:rb_tree	access:public
allocator_type	/Users/lij/.vim/stl/stl_vector.h	/^          allocator_type;$/;"	t	class:_Vector_alloc_base	access:public
allocator_type	/Users/lij/.vim/stl/stl_vector.h	/^  typedef typename _Base::allocator_type allocator_type;$/;"	t	class:vector	access:public
allocator_type	/Users/lij/.vim/stl/stl_vector.h	/^  typedef typename _Base::allocator_type allocator_type;$/;"	t	struct:_Vector_base	access:public
allocator_type	/Users/lij/.vim/stl/string	/^  typedef _Alloc allocator_type;$/;"	t	class:_String_base	file:	access:public
allocator_type	/Users/lij/.vim/stl/string	/^  typedef typename _Alloc_traits<_Tp, _Alloc>::allocator_type allocator_type;$/;"	t	class:_String_alloc_base	file:	access:public
allocator_type	/Users/lij/.vim/stl/string	/^  typedef typename _Base::allocator_type allocator_type;$/;"	t	class:_String_base	file:	access:protected
allocator_type	/Users/lij/.vim/stl/string	/^  typedef typename _Base::allocator_type allocator_type;$/;"	t	class:basic_string	file:	access:public
any	/Users/lij/.vim/stl/bitset	/^  bool any() const { return this->_M_is_any(); }$/;"	f	class:bitset	access:public	signature:() const
append	/Users/lij/.vim/stl/stl_rope.h	/^        rope& append() { return append(_CharT()); }  \/\/ XXX why?$/;"	f	class:rope	access:public	signature:()
append	/Users/lij/.vim/stl/stl_rope.h	/^        rope& append(_CharT __c) {$/;"	f	class:rope	access:public	signature:(_CharT __c)
append	/Users/lij/.vim/stl/stl_rope.h	/^        rope& append(const _CharT* __c_string) {$/;"	f	class:rope	access:public	signature:(const _CharT* __c_string)
append	/Users/lij/.vim/stl/stl_rope.h	/^        rope& append(const _CharT* __iter, size_t __n) {$/;"	f	class:rope	access:public	signature:(const _CharT* __iter, size_t __n)
append	/Users/lij/.vim/stl/stl_rope.h	/^        rope& append(const _CharT* __s, const _CharT* __e) {$/;"	f	class:rope	access:public	signature:(const _CharT* __s, const _CharT* __e)
append	/Users/lij/.vim/stl/stl_rope.h	/^        rope& append(const rope& __y) {$/;"	f	class:rope	access:public	signature:(const rope& __y)
append	/Users/lij/.vim/stl/stl_rope.h	/^        rope& append(const_iterator __s, const_iterator __e) {$/;"	f	class:rope	access:public	signature:(const_iterator __s, const_iterator __e)
append	/Users/lij/.vim/stl/stl_rope.h	/^        rope& append(size_t __n, _CharT __c) {$/;"	f	class:rope	access:public	signature:(size_t __n, _CharT __c)
append	/Users/lij/.vim/stl/stl_rope.h	/^        void append(value_type* __s, size_t __len)$/;"	f	class:sequence_buffer	access:public	signature:(value_type* __s, size_t __len)
append	/Users/lij/.vim/stl/string	/^  basic_string& append(_ForwardIter __f, _ForwardIter __l, $/;"	p	class:basic_string	file:	access:private	signature:(_ForwardIter __f, _ForwardIter __l, forward_iterator_tag)
append	/Users/lij/.vim/stl/string	/^  basic_string& append(_InputIter __f, _InputIter __l, input_iterator_tag);$/;"	p	class:basic_string	file:	access:private	signature:(_InputIter __f, _InputIter __l, input_iterator_tag)
append	/Users/lij/.vim/stl/string	/^  basic_string& append(_InputIter __first, _InputIter __last) {$/;"	f	class:basic_string	access:public	signature:(_InputIter __first, _InputIter __last)
append	/Users/lij/.vim/stl/string	/^  basic_string& append(const _CharT* __first, const _CharT* __last);$/;"	p	class:basic_string	file:	access:public	signature:(const _CharT* __first, const _CharT* __last)
append	/Users/lij/.vim/stl/string	/^  basic_string& append(const _CharT* __s) $/;"	f	class:basic_string	access:public	signature:(const _CharT* __s)
append	/Users/lij/.vim/stl/string	/^  basic_string& append(const _CharT* __s, size_type __n) $/;"	f	class:basic_string	access:public	signature:(const _CharT* __s, size_type __n)
append	/Users/lij/.vim/stl/string	/^  basic_string& append(const basic_string& __s) $/;"	f	class:basic_string	access:public	signature:(const basic_string& __s)
append	/Users/lij/.vim/stl/string	/^  basic_string& append(const basic_string& __s,$/;"	f	class:basic_string	access:public	signature:(const basic_string& __s, size_type __pos, size_type __n)
append	/Users/lij/.vim/stl/string	/^  basic_string& append(size_type __n, _CharT __c);$/;"	p	class:basic_string	file:	access:public	signature:(size_type __n, _CharT __c)
append	/Users/lij/.vim/stl/string	/^basic_string<_CharT,_Traits,_Alloc>::append(size_type __n, _CharT __c) {$/;"	f	class:basic_string	signature:(size_type __n, _CharT __c)
append	/Users/lij/.vim/stl/string	/^basic_string<_Tp, _Traits, _Alloc>::append(_ForwardIter __first, $/;"	f	class:basic_string	signature:(_ForwardIter __first, _ForwardIter __last, forward_iterator_tag)
append	/Users/lij/.vim/stl/string	/^basic_string<_Tp, _Traits, _Alloc>::append(_InputIterator __first, $/;"	f	class:basic_string	signature:(_InputIterator __first, _InputIterator __last, input_iterator_tag)
append	/Users/lij/.vim/stl/string	/^basic_string<_Tp, _Traits, _Alloc>::append(const _Tp* __first,$/;"	f	class:basic_string	signature:(const _Tp* __first, const _Tp* __last)
apply_to_pieces	/Users/lij/.vim/stl/stl_rope.h	/^        void apply_to_pieces( size_t __begin, size_t __end,$/;"	f	class:rope	access:public	signature:( size_t __begin, size_t __end, _Rope_char_consumer<_CharT>& __c) const
argument_type	/Users/lij/.vim/stl/stl_function.h	/^  typedef _Arg argument_type;$/;"	t	struct:unary_function	access:public
argument_type	/Users/lij/.vim/stl/stl_function.h	/^  typedef _Argument argument_type;$/;"	t	struct:_Constant_unary_fun	access:public
asin	/Users/lij/.vim/stl/valarray	/^inline valarray<_Tp> asin(const valarray<_Tp>& __x) {$/;"	f	signature:(const valarray<_Tp>& __x)
assign	/Users/lij/.vim/stl/char_traits.h	/^  static _CharT* assign(_CharT* __s, size_t __n, _CharT __c) {$/;"	f	class:__char_traits_base	access:public	signature:(_CharT* __s, size_t __n, _CharT __c)
assign	/Users/lij/.vim/stl/char_traits.h	/^  static char* assign(char* __s, size_t __n, char __c)$/;"	f	class:char_traits	access:public	signature:(char* __s, size_t __n, char __c)
assign	/Users/lij/.vim/stl/char_traits.h	/^  static void assign(char& __c1, const char& __c2) { __c1 = __c2; }$/;"	f	class:char_traits	access:public	signature:(char& __c1, const char& __c2)
assign	/Users/lij/.vim/stl/char_traits.h	/^  static void assign(char_type& __c1, const char_type& __c2) { __c1 = __c2; }$/;"	f	class:__char_traits_base	access:public	signature:(char_type& __c1, const char_type& __c2)
assign	/Users/lij/.vim/stl/stl_bvector.h	/^  void assign(_InputIterator __first, _InputIterator __last) {$/;"	f	class:__BVECTOR	access:public	signature:(_InputIterator __first, _InputIterator __last)
assign	/Users/lij/.vim/stl/stl_bvector.h	/^  void assign(size_t __n, bool __x) { _M_fill_assign(__n, __x); }$/;"	f	class:__BVECTOR	access:public	signature:(size_t __n, bool __x)
assign	/Users/lij/.vim/stl/stl_deque.h	/^  void assign(_InputIterator __first, _InputIterator __last) {$/;"	f	class:deque	access:public	signature:(_InputIterator __first, _InputIterator __last)
assign	/Users/lij/.vim/stl/stl_deque.h	/^  void assign(size_type __n, const _Tp& __val) {$/;"	f	class:deque	access:public	signature:(size_type __n, const _Tp& __val)
assign	/Users/lij/.vim/stl/stl_list.h	/^  void assign(_InputIterator __first, _InputIterator __last) {$/;"	f	class:list	access:public	signature:(_InputIterator __first, _InputIterator __last)
assign	/Users/lij/.vim/stl/stl_list.h	/^  void assign(size_type __n, const _Tp& __val) { _M_fill_assign(__n, __val); }$/;"	f	class:list	access:public	signature:(size_type __n, const _Tp& __val)
assign	/Users/lij/.vim/stl/stl_slist.h	/^  void assign(_InputIterator __first, _InputIterator __last) {$/;"	f	class:slist	access:public	signature:(_InputIterator __first, _InputIterator __last)
assign	/Users/lij/.vim/stl/stl_slist.h	/^  void assign(size_type __n, const _Tp& __val)$/;"	f	class:slist	access:public	signature:(size_type __n, const _Tp& __val)
assign	/Users/lij/.vim/stl/stl_vector.h	/^  void assign(_InputIterator __first, _InputIterator __last) {$/;"	f	class:vector	access:public	signature:(_InputIterator __first, _InputIterator __last)
assign	/Users/lij/.vim/stl/stl_vector.h	/^  void assign(size_type __n, const _Tp& __val) { _M_fill_assign(__n, __val); }$/;"	f	class:vector	access:public	signature:(size_type __n, const _Tp& __val)
assign	/Users/lij/.vim/stl/string	/^  basic_string& assign(_InputIter __first, _InputIter __last) {$/;"	f	class:basic_string	access:public	signature:(_InputIter __first, _InputIter __last)
assign	/Users/lij/.vim/stl/string	/^  basic_string& assign(const _CharT* __f, const _CharT* __l);$/;"	p	class:basic_string	file:	access:public	signature:(const _CharT* __f, const _CharT* __l)
assign	/Users/lij/.vim/stl/string	/^  basic_string& assign(const _CharT* __s)$/;"	f	class:basic_string	access:public	signature:(const _CharT* __s)
assign	/Users/lij/.vim/stl/string	/^  basic_string& assign(const _CharT* __s, size_type __n)$/;"	f	class:basic_string	access:public	signature:(const _CharT* __s, size_type __n)
assign	/Users/lij/.vim/stl/string	/^  basic_string& assign(const basic_string& __s) $/;"	f	class:basic_string	access:public	signature:(const basic_string& __s)
assign	/Users/lij/.vim/stl/string	/^  basic_string& assign(const basic_string& __s, $/;"	f	class:basic_string	access:public	signature:(const basic_string& __s, size_type __pos, size_type __n)
assign	/Users/lij/.vim/stl/string	/^  basic_string& assign(size_type __n, _CharT __c);$/;"	p	class:basic_string	file:	access:public	signature:(size_type __n, _CharT __c)
assign	/Users/lij/.vim/stl/string	/^basic_string<_CharT,_Traits,_Alloc>::assign(const _CharT* __f, $/;"	f	class:basic_string	signature:(const _CharT* __f, const _CharT* __l)
assign	/Users/lij/.vim/stl/string	/^basic_string<_CharT,_Traits,_Alloc>::assign(size_type __n, _CharT __c) {$/;"	f	class:basic_string	signature:(size_type __n, _CharT __c)
at	/Users/lij/.vim/stl/stl_bvector.h	/^  const_reference at(size_type __n) const$/;"	f	class:__BVECTOR	access:public	signature:(size_type __n) const
at	/Users/lij/.vim/stl/stl_bvector.h	/^  reference at(size_type __n)$/;"	f	class:__BVECTOR	access:public	signature:(size_type __n)
at	/Users/lij/.vim/stl/stl_deque.h	/^  const_reference at(size_type __n) const$/;"	f	class:deque	access:public	signature:(size_type __n) const
at	/Users/lij/.vim/stl/stl_deque.h	/^  reference at(size_type __n)$/;"	f	class:deque	access:public	signature:(size_type __n)
at	/Users/lij/.vim/stl/stl_rope.h	/^            reference at(size_type __pos) {$/;"	f	class:rope	access:public	signature:(size_type __pos)
at	/Users/lij/.vim/stl/stl_rope.h	/^        _CharT at(size_type __pos) const {$/;"	f	class:rope	access:public	signature:(size_type __pos) const
at	/Users/lij/.vim/stl/stl_vector.h	/^  const_reference at(size_type __n) const$/;"	f	class:vector	access:public	signature:(size_type __n) const
at	/Users/lij/.vim/stl/stl_vector.h	/^  reference at(size_type __n)$/;"	f	class:vector	access:public	signature:(size_type __n)
at	/Users/lij/.vim/stl/string	/^  const_reference at(size_type __n) const {$/;"	f	class:basic_string	access:public	signature:(size_type __n) const
at	/Users/lij/.vim/stl/string	/^  reference at(size_type __n) {$/;"	f	class:basic_string	access:public	signature:(size_type __n)
atan	/Users/lij/.vim/stl/valarray	/^inline valarray<_Tp> atan(const valarray<_Tp>& __x) {$/;"	f	signature:(const valarray<_Tp>& __x)
atan2	/Users/lij/.vim/stl/valarray	/^inline valarray<_Tp> atan2(const _Tp& __c, const valarray<_Tp>& __x) {$/;"	f	signature:(const _Tp& __c, const valarray<_Tp>& __x)
atan2	/Users/lij/.vim/stl/valarray	/^inline valarray<_Tp> atan2(const valarray<_Tp>& __x, const _Tp& __c) {$/;"	f	signature:(const valarray<_Tp>& __x, const _Tp& __c)
atan2	/Users/lij/.vim/stl/valarray	/^inline valarray<_Tp> atan2(const valarray<_Tp>& __x,$/;"	f	signature:(const valarray<_Tp>& __x, const valarray<_Tp>& __y)
auto_ptr	/Users/lij/.vim/stl/memory	/^template <class _Tp> class auto_ptr {$/;"	c	file:
auto_ptr::_M_ptr	/Users/lij/.vim/stl/memory	/^    : _M_ptr(__a.release()) {}$/;"	f	class:auto_ptr	access:public	signature:(__a.release())
auto_ptr::_M_ptr	/Users/lij/.vim/stl/memory	/^    : _M_ptr(__ref._M_ptr) {}$/;"	f	class:auto_ptr	access:public	signature:(__ref._M_ptr)
auto_ptr::_M_ptr	/Users/lij/.vim/stl/memory	/^  _Tp* _M_ptr;$/;"	m	class:auto_ptr	file:	access:private
auto_ptr::_M_ptr	/Users/lij/.vim/stl/memory	/^  auto_ptr(auto_ptr& __a) __STL_NOTHROW : _M_ptr(__a.release()) {}$/;"	f	class:auto_ptr	access:public	signature:(__a.release())
auto_ptr::_M_ptr	/Users/lij/.vim/stl/memory	/^  explicit auto_ptr(_Tp* __p = 0) __STL_NOTHROW : _M_ptr(__p) {}$/;"	f	class:auto_ptr	access:public	signature:(__p)
auto_ptr::element_type	/Users/lij/.vim/stl/memory	/^  typedef _Tp element_type;$/;"	t	class:auto_ptr	file:	access:public
auto_ptr::~auto_ptr	/Users/lij/.vim/stl/memory	/^  ~auto_ptr() { delete _M_ptr; }$/;"	f	class:auto_ptr	access:public	signature:()
auto_ptr_ref	/Users/lij/.vim/stl/memory	/^  auto_ptr_ref(_Tp1* __p) : _M_ptr(__p) {}$/;"	f	struct:auto_ptr_ref	access:public	signature:(_Tp1* __p)
auto_ptr_ref	/Users/lij/.vim/stl/memory	/^template<class _Tp1> struct auto_ptr_ref {$/;"	s	file:
auto_ptr_ref::_M_ptr	/Users/lij/.vim/stl/memory	/^  _Tp1* _M_ptr;$/;"	m	struct:auto_ptr_ref	file:	access:public
auto_ptr_ref::auto_ptr_ref	/Users/lij/.vim/stl/memory	/^  auto_ptr_ref(_Tp1* __p) : _M_ptr(__p) {}$/;"	f	struct:auto_ptr_ref	access:public	signature:(_Tp1* __p)
back	/Users/lij/.vim/stl/stl_bvector.h	/^  const_reference back() const { return *(end() - 1); }$/;"	f	class:__BVECTOR	access:public	signature:() const
back	/Users/lij/.vim/stl/stl_bvector.h	/^  reference back() { return *(end() - 1); }$/;"	f	class:__BVECTOR	access:public	signature:()
back	/Users/lij/.vim/stl/stl_deque.h	/^  const_reference back() const {$/;"	f	class:deque	access:public	signature:() const
back	/Users/lij/.vim/stl/stl_deque.h	/^  reference back() {$/;"	f	class:deque	access:public	signature:()
back	/Users/lij/.vim/stl/stl_list.h	/^  const_reference back() const { return *(--end()); }$/;"	f	class:list	access:public	signature:() const
back	/Users/lij/.vim/stl/stl_list.h	/^  reference back() { return *(--end()); }$/;"	f	class:list	access:public	signature:()
back	/Users/lij/.vim/stl/stl_queue.h	/^  const_reference back() const { return c.back(); }$/;"	f	class:queue	access:public	signature:() const
back	/Users/lij/.vim/stl/stl_queue.h	/^  reference back() { return c.back(); }$/;"	f	class:queue	access:public	signature:()
back	/Users/lij/.vim/stl/stl_rope.h	/^        _CharT back() const$/;"	f	class:rope	access:public	signature:() const
back	/Users/lij/.vim/stl/stl_vector.h	/^  const_reference back() const { return *(end() - 1); }$/;"	f	class:vector	access:public	signature:() const
back	/Users/lij/.vim/stl/stl_vector.h	/^  reference back() { return *(end() - 1); }$/;"	f	class:vector	access:public	signature:()
back_insert_iterator	/Users/lij/.vim/stl/stl_iterator.h	/^  explicit back_insert_iterator(_Container& __x) : container(&__x) {}$/;"	f	class:back_insert_iterator	access:public	signature:(_Container& __x)
back_insert_iterator	/Users/lij/.vim/stl/stl_iterator.h	/^class back_insert_iterator {$/;"	c
back_insert_iterator::back_insert_iterator	/Users/lij/.vim/stl/stl_iterator.h	/^  explicit back_insert_iterator(_Container& __x) : container(&__x) {}$/;"	f	class:back_insert_iterator	access:public	signature:(_Container& __x)
back_insert_iterator::container	/Users/lij/.vim/stl/stl_iterator.h	/^  _Container* container;$/;"	m	class:back_insert_iterator	access:protected
back_insert_iterator::container_type	/Users/lij/.vim/stl/stl_iterator.h	/^  typedef _Container          container_type;$/;"	t	class:back_insert_iterator	access:public
back_insert_iterator::difference_type	/Users/lij/.vim/stl/stl_iterator.h	/^  typedef void                difference_type;$/;"	t	class:back_insert_iterator	access:public
back_insert_iterator::iterator_category	/Users/lij/.vim/stl/stl_iterator.h	/^  typedef output_iterator_tag iterator_category;$/;"	t	class:back_insert_iterator	access:public
back_insert_iterator::operator *	/Users/lij/.vim/stl/stl_iterator.h	/^  back_insert_iterator<_Container>& operator*() { return *this; }$/;"	f	class:back_insert_iterator	access:public	signature:()
back_insert_iterator::operator ++	/Users/lij/.vim/stl/stl_iterator.h	/^  back_insert_iterator<_Container>& operator++() { return *this; }$/;"	f	class:back_insert_iterator	access:public	signature:()
back_insert_iterator::operator ++	/Users/lij/.vim/stl/stl_iterator.h	/^  back_insert_iterator<_Container>& operator++(int) { return *this; }$/;"	f	class:back_insert_iterator	access:public	signature:(int)
back_insert_iterator::operator =	/Users/lij/.vim/stl/stl_iterator.h	/^  operator=(const typename _Container::value_type& __value) { $/;"	f	class:back_insert_iterator	access:public	signature:(const typename _Container::value_type& __value)
back_insert_iterator::pointer	/Users/lij/.vim/stl/stl_iterator.h	/^  typedef void                pointer;$/;"	t	class:back_insert_iterator	access:public
back_insert_iterator::reference	/Users/lij/.vim/stl/stl_iterator.h	/^  typedef void                reference;$/;"	t	class:back_insert_iterator	access:public
back_insert_iterator::value_type	/Users/lij/.vim/stl/stl_iterator.h	/^  typedef void                value_type;$/;"	t	class:back_insert_iterator	access:public
back_inserter	/Users/lij/.vim/stl/stl_iterator.h	/^inline back_insert_iterator<_Container> back_inserter(_Container& __x) {$/;"	f	signature:(_Container& __x)
balance	/Users/lij/.vim/stl/stl_rope.h	/^        void balance()$/;"	f	class:rope	access:public	signature:()
base	/Users/lij/.vim/stl/stl_iterator.h	/^  _BidirectionalIterator base() const { return current; }$/;"	f	class:reverse_bidirectional_iterator	access:public	signature:() const
base	/Users/lij/.vim/stl/stl_iterator.h	/^  _RandomAccessIterator base() const { return current; }$/;"	f	class:reverse_iterator	access:public	signature:() const
base	/Users/lij/.vim/stl/stl_iterator.h	/^  iterator_type base() const { return current; }$/;"	f	class:reverse_iterator	access:public	signature:() const
basic_string	/Users/lij/.vim/stl/string	/^  basic_string(_InputIterator __f, _InputIterator __l,$/;"	f	class:basic_string	access:public	signature:(_InputIterator __f, _InputIterator __l, const allocator_type& __a = allocator_type())
basic_string	/Users/lij/.vim/stl/string	/^  basic_string(_Reserve_t, size_t __n,$/;"	f	class:basic_string	access:public	signature:(_Reserve_t, size_t __n, const allocator_type& __a = allocator_type())
basic_string	/Users/lij/.vim/stl/string	/^  basic_string(const _CharT* __f, const _CharT* __l,$/;"	f	class:basic_string	access:public	signature:(const _CharT* __f, const _CharT* __l, const allocator_type& __a = allocator_type())
basic_string	/Users/lij/.vim/stl/string	/^  basic_string(const _CharT* __s, size_type __n,$/;"	f	class:basic_string	access:public	signature:(const _CharT* __s, size_type __n, const allocator_type& __a = allocator_type())
basic_string	/Users/lij/.vim/stl/string	/^  basic_string(const _CharT* __s,$/;"	f	class:basic_string	access:public	signature:(const _CharT* __s, const allocator_type& __a = allocator_type())
basic_string	/Users/lij/.vim/stl/string	/^  basic_string(const basic_string& __s) : _Base(__s.get_allocator()) $/;"	f	class:basic_string	access:public	signature:(const basic_string& __s)
basic_string	/Users/lij/.vim/stl/string	/^  basic_string(const basic_string& __s, size_type __pos, size_type __n = npos,$/;"	f	class:basic_string	access:public	signature:(const basic_string& __s, size_type __pos, size_type __n = npos, const allocator_type& __a = allocator_type())
basic_string	/Users/lij/.vim/stl/string	/^  basic_string(size_type __n, _CharT __c,$/;"	f	class:basic_string	access:public	signature:(size_type __n, _CharT __c, const allocator_type& __a = allocator_type())
basic_string	/Users/lij/.vim/stl/string	/^  explicit basic_string(const allocator_type& __a = allocator_type())$/;"	f	class:basic_string	access:public	signature:(const allocator_type& __a = allocator_type())
basic_string	/Users/lij/.vim/stl/string	/^class basic_string : private _String_base<_CharT,_Alloc> {$/;"	c	file:	inherits:_String_base
basic_string::_Base	/Users/lij/.vim/stl/string	/^  typedef _String_base<_CharT,_Alloc> _Base;$/;"	t	class:basic_string	file:	access:public
basic_string::_M_append_dispatch	/Users/lij/.vim/stl/string	/^  basic_string& _M_append_dispatch(_InputIter __f, _InputIter __l,$/;"	f	class:basic_string	file:	access:private	signature:(_InputIter __f, _InputIter __l, __false_type)
basic_string::_M_append_dispatch	/Users/lij/.vim/stl/string	/^  basic_string& _M_append_dispatch(_Integer __n, _Integer __x, __true_type) {$/;"	f	class:basic_string	file:	access:private	signature:(_Integer __n, _Integer __x, __true_type)
basic_string::_M_assign_dispatch	/Users/lij/.vim/stl/string	/^  ::_M_assign_dispatch(_InputIter __f, _InputIter __l, __false_type)$/;"	f	class:basic_string	signature:(_InputIter __f, _InputIter __l, __false_type)
basic_string::_M_assign_dispatch	/Users/lij/.vim/stl/string	/^  basic_string& _M_assign_dispatch(_InputIter __f, _InputIter __l,$/;"	p	class:basic_string	file:	access:private	signature:(_InputIter __f, _InputIter __l, __false_type)
basic_string::_M_assign_dispatch	/Users/lij/.vim/stl/string	/^  basic_string& _M_assign_dispatch(_Integer __n, _Integer __x, __true_type) {$/;"	f	class:basic_string	file:	access:private	signature:(_Integer __n, _Integer __x, __true_type)
basic_string::_M_compare	/Users/lij/.vim/stl/string	/^  static int _M_compare(const _CharT* __f1, const _CharT* __l1,$/;"	f	class:basic_string	access:public	signature:(const _CharT* __f1, const _CharT* __l1, const _CharT* __f2, const _CharT* __l2)
basic_string::_M_construct_null	/Users/lij/.vim/stl/string	/^  void _M_construct_null(_CharT* __p) {$/;"	f	class:basic_string	file:	access:private	signature:(_CharT* __p)
basic_string::_M_copy	/Users/lij/.vim/stl/string	/^  _M_copy(_InputIterator __first, _InputIterator __last, iterator __result) {$/;"	f	class:basic_string	file:	access:private	signature:(_InputIterator __first, _InputIterator __last, iterator __result)
basic_string::_M_copy	/Users/lij/.vim/stl/string	/^  _M_copy(const _CharT* __first, const _CharT* __last, _CharT* __result) {$/;"	f	class:basic_string	file:	access:private	signature:(const _CharT* __first, const _CharT* __last, _CharT* __result)
basic_string::_M_initialize_dispatch	/Users/lij/.vim/stl/string	/^  void _M_initialize_dispatch(_InputIter __f, _InputIter __l, __false_type) {$/;"	f	class:basic_string	file:	access:private	signature:(_InputIter __f, _InputIter __l, __false_type)
basic_string::_M_initialize_dispatch	/Users/lij/.vim/stl/string	/^  void _M_initialize_dispatch(_Integer __n, _Integer __x, __true_type) {$/;"	f	class:basic_string	file:	access:private	signature:(_Integer __n, _Integer __x, __true_type)
basic_string::_M_insert_aux	/Users/lij/.vim/stl/string	/^  ::_M_insert_aux(basic_string<_CharT,_Traits,_Alloc>::iterator __p,$/;"	f	class:basic_string	signature:(basic_string<_CharT,_Traits,_Alloc>::iterator __p, _CharT __c)
basic_string::_M_insert_aux	/Users/lij/.vim/stl/string	/^  iterator _M_insert_aux(iterator, _CharT);$/;"	p	class:basic_string	file:	access:private	signature:(iterator, _CharT)
basic_string::_M_insert_dispatch	/Users/lij/.vim/stl/string	/^  void _M_insert_dispatch(iterator __p, _InputIter __first, _InputIter __last,$/;"	f	class:basic_string	file:	access:private	signature:(iterator __p, _InputIter __first, _InputIter __last, __false_type)
basic_string::_M_insert_dispatch	/Users/lij/.vim/stl/string	/^  void _M_insert_dispatch(iterator __p, _Integer __n, _Integer __x,$/;"	f	class:basic_string	file:	access:private	signature:(iterator __p, _Integer __n, _Integer __x, __true_type)
basic_string::_M_null	/Users/lij/.vim/stl/string	/^  static _CharT _M_null() {$/;"	f	class:basic_string	file:	access:private	signature:()
basic_string::_M_range_initialize	/Users/lij/.vim/stl/string	/^  void _M_range_initialize(_ForwardIter __f, _ForwardIter __l, $/;"	f	class:basic_string	file:	access:private	signature:(_ForwardIter __f, _ForwardIter __l, forward_iterator_tag)
basic_string::_M_range_initialize	/Users/lij/.vim/stl/string	/^  void _M_range_initialize(_InputIter __f, _InputIter __l) {$/;"	f	class:basic_string	file:	access:private	signature:(_InputIter __f, _InputIter __l)
basic_string::_M_range_initialize	/Users/lij/.vim/stl/string	/^  void _M_range_initialize(_InputIter __f, _InputIter __l,$/;"	f	class:basic_string	file:	access:private	signature:(_InputIter __f, _InputIter __l, input_iterator_tag)
basic_string::_M_range_initialize	/Users/lij/.vim/stl/string	/^  void _M_range_initialize(const _CharT* __f, const _CharT* __l) {$/;"	f	class:basic_string	file:	access:private	signature:(const _CharT* __f, const _CharT* __l)
basic_string::_M_replace_dispatch	/Users/lij/.vim/stl/string	/^  basic_string& _M_replace_dispatch(iterator __first, iterator __last,$/;"	f	class:basic_string	file:	access:private	signature:(iterator __first, iterator __last, _InputIter __f, _InputIter __l, __false_type)
basic_string::_M_replace_dispatch	/Users/lij/.vim/stl/string	/^  basic_string& _M_replace_dispatch(iterator __first, iterator __last,$/;"	f	class:basic_string	file:	access:private	signature:(iterator __first, iterator __last, _Integer __n, _Integer __x, __true_type)
basic_string::_M_terminate_string	/Users/lij/.vim/stl/string	/^  void _M_terminate_string() {$/;"	f	class:basic_string	file:	access:private	signature:()
basic_string::_Reserve_t	/Users/lij/.vim/stl/string	/^  struct _Reserve_t {};$/;"	s	class:basic_string	file:	access:public
basic_string::allocator_type	/Users/lij/.vim/stl/string	/^  typedef typename _Base::allocator_type allocator_type;$/;"	t	class:basic_string	file:	access:public
basic_string::append	/Users/lij/.vim/stl/string	/^  basic_string& append(_ForwardIter __f, _ForwardIter __l, $/;"	p	class:basic_string	file:	access:private	signature:(_ForwardIter __f, _ForwardIter __l, forward_iterator_tag)
basic_string::append	/Users/lij/.vim/stl/string	/^  basic_string& append(_InputIter __f, _InputIter __l, input_iterator_tag);$/;"	p	class:basic_string	file:	access:private	signature:(_InputIter __f, _InputIter __l, input_iterator_tag)
basic_string::append	/Users/lij/.vim/stl/string	/^  basic_string& append(_InputIter __first, _InputIter __last) {$/;"	f	class:basic_string	access:public	signature:(_InputIter __first, _InputIter __last)
basic_string::append	/Users/lij/.vim/stl/string	/^  basic_string& append(const _CharT* __first, const _CharT* __last);$/;"	p	class:basic_string	file:	access:public	signature:(const _CharT* __first, const _CharT* __last)
basic_string::append	/Users/lij/.vim/stl/string	/^  basic_string& append(const _CharT* __s) $/;"	f	class:basic_string	access:public	signature:(const _CharT* __s)
basic_string::append	/Users/lij/.vim/stl/string	/^  basic_string& append(const _CharT* __s, size_type __n) $/;"	f	class:basic_string	access:public	signature:(const _CharT* __s, size_type __n)
basic_string::append	/Users/lij/.vim/stl/string	/^  basic_string& append(const basic_string& __s) $/;"	f	class:basic_string	access:public	signature:(const basic_string& __s)
basic_string::append	/Users/lij/.vim/stl/string	/^  basic_string& append(const basic_string& __s,$/;"	f	class:basic_string	access:public	signature:(const basic_string& __s, size_type __pos, size_type __n)
basic_string::append	/Users/lij/.vim/stl/string	/^  basic_string& append(size_type __n, _CharT __c);$/;"	p	class:basic_string	file:	access:public	signature:(size_type __n, _CharT __c)
basic_string::append	/Users/lij/.vim/stl/string	/^basic_string<_CharT,_Traits,_Alloc>::append(size_type __n, _CharT __c) {$/;"	f	class:basic_string	signature:(size_type __n, _CharT __c)
basic_string::append	/Users/lij/.vim/stl/string	/^basic_string<_Tp, _Traits, _Alloc>::append(_ForwardIter __first, $/;"	f	class:basic_string	signature:(_ForwardIter __first, _ForwardIter __last, forward_iterator_tag)
basic_string::append	/Users/lij/.vim/stl/string	/^basic_string<_Tp, _Traits, _Alloc>::append(_InputIterator __first, $/;"	f	class:basic_string	signature:(_InputIterator __first, _InputIterator __last, input_iterator_tag)
basic_string::append	/Users/lij/.vim/stl/string	/^basic_string<_Tp, _Traits, _Alloc>::append(const _Tp* __first,$/;"	f	class:basic_string	signature:(const _Tp* __first, const _Tp* __last)
basic_string::assign	/Users/lij/.vim/stl/string	/^  basic_string& assign(_InputIter __first, _InputIter __last) {$/;"	f	class:basic_string	access:public	signature:(_InputIter __first, _InputIter __last)
basic_string::assign	/Users/lij/.vim/stl/string	/^  basic_string& assign(const _CharT* __f, const _CharT* __l);$/;"	p	class:basic_string	file:	access:public	signature:(const _CharT* __f, const _CharT* __l)
basic_string::assign	/Users/lij/.vim/stl/string	/^  basic_string& assign(const _CharT* __s)$/;"	f	class:basic_string	access:public	signature:(const _CharT* __s)
basic_string::assign	/Users/lij/.vim/stl/string	/^  basic_string& assign(const _CharT* __s, size_type __n)$/;"	f	class:basic_string	access:public	signature:(const _CharT* __s, size_type __n)
basic_string::assign	/Users/lij/.vim/stl/string	/^  basic_string& assign(const basic_string& __s) $/;"	f	class:basic_string	access:public	signature:(const basic_string& __s)
basic_string::assign	/Users/lij/.vim/stl/string	/^  basic_string& assign(const basic_string& __s, $/;"	f	class:basic_string	access:public	signature:(const basic_string& __s, size_type __pos, size_type __n)
basic_string::assign	/Users/lij/.vim/stl/string	/^  basic_string& assign(size_type __n, _CharT __c);$/;"	p	class:basic_string	file:	access:public	signature:(size_type __n, _CharT __c)
basic_string::assign	/Users/lij/.vim/stl/string	/^basic_string<_CharT,_Traits,_Alloc>::assign(const _CharT* __f, $/;"	f	class:basic_string	signature:(const _CharT* __f, const _CharT* __l)
basic_string::assign	/Users/lij/.vim/stl/string	/^basic_string<_CharT,_Traits,_Alloc>::assign(size_type __n, _CharT __c) {$/;"	f	class:basic_string	signature:(size_type __n, _CharT __c)
basic_string::at	/Users/lij/.vim/stl/string	/^  const_reference at(size_type __n) const {$/;"	f	class:basic_string	access:public	signature:(size_type __n) const
basic_string::at	/Users/lij/.vim/stl/string	/^  reference at(size_type __n) {$/;"	f	class:basic_string	access:public	signature:(size_type __n)
basic_string::basic_string	/Users/lij/.vim/stl/string	/^  basic_string(_InputIterator __f, _InputIterator __l,$/;"	f	class:basic_string	access:public	signature:(_InputIterator __f, _InputIterator __l, const allocator_type& __a = allocator_type())
basic_string::basic_string	/Users/lij/.vim/stl/string	/^  basic_string(_Reserve_t, size_t __n,$/;"	f	class:basic_string	access:public	signature:(_Reserve_t, size_t __n, const allocator_type& __a = allocator_type())
basic_string::basic_string	/Users/lij/.vim/stl/string	/^  basic_string(const _CharT* __f, const _CharT* __l,$/;"	f	class:basic_string	access:public	signature:(const _CharT* __f, const _CharT* __l, const allocator_type& __a = allocator_type())
basic_string::basic_string	/Users/lij/.vim/stl/string	/^  basic_string(const _CharT* __s, size_type __n,$/;"	f	class:basic_string	access:public	signature:(const _CharT* __s, size_type __n, const allocator_type& __a = allocator_type())
basic_string::basic_string	/Users/lij/.vim/stl/string	/^  basic_string(const _CharT* __s,$/;"	f	class:basic_string	access:public	signature:(const _CharT* __s, const allocator_type& __a = allocator_type())
basic_string::basic_string	/Users/lij/.vim/stl/string	/^  basic_string(const basic_string& __s) : _Base(__s.get_allocator()) $/;"	f	class:basic_string	access:public	signature:(const basic_string& __s)
basic_string::basic_string	/Users/lij/.vim/stl/string	/^  basic_string(const basic_string& __s, size_type __pos, size_type __n = npos,$/;"	f	class:basic_string	access:public	signature:(const basic_string& __s, size_type __pos, size_type __n = npos, const allocator_type& __a = allocator_type())
basic_string::basic_string	/Users/lij/.vim/stl/string	/^  basic_string(size_type __n, _CharT __c,$/;"	f	class:basic_string	access:public	signature:(size_type __n, _CharT __c, const allocator_type& __a = allocator_type())
basic_string::basic_string	/Users/lij/.vim/stl/string	/^  explicit basic_string(const allocator_type& __a = allocator_type())$/;"	f	class:basic_string	access:public	signature:(const allocator_type& __a = allocator_type())
basic_string::begin	/Users/lij/.vim/stl/string	/^  const_iterator begin() const { return _M_start; }$/;"	f	class:basic_string	access:public	signature:() const
basic_string::begin	/Users/lij/.vim/stl/string	/^  iterator begin()             { return _M_start; }$/;"	f	class:basic_string	access:public	signature:()
basic_string::c_str	/Users/lij/.vim/stl/string	/^  const _CharT* c_str() const { return _M_start; }$/;"	f	class:basic_string	access:public	signature:() const
basic_string::capacity	/Users/lij/.vim/stl/string	/^  size_type capacity() const { return (_M_end_of_storage - _M_start) - 1; }$/;"	f	class:basic_string	access:public	signature:() const
basic_string::clear	/Users/lij/.vim/stl/string	/^  void clear() {$/;"	f	class:basic_string	access:public	signature:()
basic_string::compare	/Users/lij/.vim/stl/string	/^  int compare(const _CharT* __s) const {$/;"	f	class:basic_string	access:public	signature:(const _CharT* __s) const
basic_string::compare	/Users/lij/.vim/stl/string	/^  int compare(const basic_string& __s) const $/;"	f	class:basic_string	access:public	signature:(const basic_string& __s) const
basic_string::compare	/Users/lij/.vim/stl/string	/^  int compare(size_type __pos1, size_type __n1, const _CharT* __s) const {$/;"	f	class:basic_string	access:public	signature:(size_type __pos1, size_type __n1, const _CharT* __s) const
basic_string::compare	/Users/lij/.vim/stl/string	/^  int compare(size_type __pos1, size_type __n1, const _CharT* __s,$/;"	f	class:basic_string	access:public	signature:(size_type __pos1, size_type __n1, const _CharT* __s, size_type __n2) const
basic_string::compare	/Users/lij/.vim/stl/string	/^  int compare(size_type __pos1, size_type __n1,$/;"	f	class:basic_string	access:public	signature:(size_type __pos1, size_type __n1, const basic_string& __s) const
basic_string::compare	/Users/lij/.vim/stl/string	/^  int compare(size_type __pos1, size_type __n1,$/;"	f	class:basic_string	access:public	signature:(size_type __pos1, size_type __n1, const basic_string& __s, size_type __pos2, size_type __n2) const
basic_string::const_iterator	/Users/lij/.vim/stl/string	/^  typedef const value_type*                const_iterator;$/;"	t	class:basic_string	file:	access:public
basic_string::const_pointer	/Users/lij/.vim/stl/string	/^  typedef const value_type* const_pointer;$/;"	t	class:basic_string	file:	access:public
basic_string::const_reference	/Users/lij/.vim/stl/string	/^  typedef const value_type& const_reference;$/;"	t	class:basic_string	file:	access:public
basic_string::const_reverse_iterator	/Users/lij/.vim/stl/string	/^          const_reverse_iterator;$/;"	t	class:basic_string	file:	access:public
basic_string::const_reverse_iterator	/Users/lij/.vim/stl/string	/^  typedef reverse_iterator<const_iterator> const_reverse_iterator;$/;"	t	class:basic_string	file:	access:public
basic_string::copy	/Users/lij/.vim/stl/string	/^  size_type copy(_CharT* __s, size_type __n, size_type __pos = 0) const {$/;"	f	class:basic_string	access:public	signature:(_CharT* __s, size_type __n, size_type __pos = 0) const
basic_string::data	/Users/lij/.vim/stl/string	/^  const _CharT* data()  const { return _M_start; }$/;"	f	class:basic_string	access:public	signature:() const
basic_string::difference_type	/Users/lij/.vim/stl/string	/^  typedef ptrdiff_t difference_type;$/;"	t	class:basic_string	file:	access:public
basic_string::empty	/Users/lij/.vim/stl/string	/^  bool empty() const { return _M_start == _M_finish; }    $/;"	f	class:basic_string	access:public	signature:() const
basic_string::end	/Users/lij/.vim/stl/string	/^  const_iterator end()   const { return _M_finish; }  $/;"	f	class:basic_string	access:public	signature:() const
basic_string::end	/Users/lij/.vim/stl/string	/^  iterator end()               { return _M_finish; }$/;"	f	class:basic_string	access:public	signature:()
basic_string::erase	/Users/lij/.vim/stl/string	/^  basic_string& erase(size_type __pos = 0, size_type __n = npos) {$/;"	f	class:basic_string	access:public	signature:(size_type __pos = 0, size_type __n = npos)
basic_string::erase	/Users/lij/.vim/stl/string	/^  iterator erase(iterator __first, iterator __last) {$/;"	f	class:basic_string	access:public	signature:(iterator __first, iterator __last)
basic_string::erase	/Users/lij/.vim/stl/string	/^  iterator erase(iterator __position) {$/;"	f	class:basic_string	access:public	signature:(iterator __position)
basic_string::find	/Users/lij/.vim/stl/string	/^  ::find(_CharT __c, size_type __pos) const $/;"	f	class:basic_string	signature:(_CharT __c, size_type __pos) const
basic_string::find	/Users/lij/.vim/stl/string	/^  ::find(const _CharT* __s, size_type __pos, size_type __n) const $/;"	f	class:basic_string	signature:(const _CharT* __s, size_type __pos, size_type __n) const
basic_string::find	/Users/lij/.vim/stl/string	/^  size_type find(_CharT __c, size_type __pos = 0) const;$/;"	p	class:basic_string	file:	access:public	signature:(_CharT __c, size_type __pos = 0) const
basic_string::find	/Users/lij/.vim/stl/string	/^  size_type find(const _CharT* __s, size_type __pos = 0) const $/;"	f	class:basic_string	access:public	signature:(const _CharT* __s, size_type __pos = 0) const
basic_string::find	/Users/lij/.vim/stl/string	/^  size_type find(const _CharT* __s, size_type __pos, size_type __n) const;$/;"	p	class:basic_string	file:	access:public	signature:(const _CharT* __s, size_type __pos, size_type __n) const
basic_string::find	/Users/lij/.vim/stl/string	/^  size_type find(const basic_string& __s, size_type __pos = 0) const $/;"	f	class:basic_string	access:public	signature:(const basic_string& __s, size_type __pos = 0) const
basic_string::find_first_not_of	/Users/lij/.vim/stl/string	/^  ::find_first_not_of(_CharT __c, size_type __pos) const$/;"	f	class:basic_string	signature:(_CharT __c, size_type __pos) const
basic_string::find_first_not_of	/Users/lij/.vim/stl/string	/^  ::find_first_not_of(const _CharT* __s, size_type __pos, size_type __n) const$/;"	f	class:basic_string	signature:(const _CharT* __s, size_type __pos, size_type __n) const
basic_string::find_first_not_of	/Users/lij/.vim/stl/string	/^  size_type find_first_not_of(_CharT __c, size_type __pos = 0) const;$/;"	p	class:basic_string	file:	access:public	signature:(_CharT __c, size_type __pos = 0) const
basic_string::find_first_not_of	/Users/lij/.vim/stl/string	/^  size_type find_first_not_of(const _CharT* __s, size_type __pos = 0) const $/;"	f	class:basic_string	access:public	signature:(const _CharT* __s, size_type __pos = 0) const
basic_string::find_first_not_of	/Users/lij/.vim/stl/string	/^  size_type find_first_not_of(const _CharT* __s, size_type __pos,$/;"	p	class:basic_string	file:	access:public	signature:(const _CharT* __s, size_type __pos, size_type __n) const
basic_string::find_first_not_of	/Users/lij/.vim/stl/string	/^  size_type find_first_not_of(const basic_string& __s, $/;"	f	class:basic_string	access:public	signature:(const basic_string& __s, size_type __pos = 0) const
basic_string::find_first_of	/Users/lij/.vim/stl/string	/^  ::find_first_of(const _CharT* __s, size_type __pos, size_type __n) const$/;"	f	class:basic_string	signature:(const _CharT* __s, size_type __pos, size_type __n) const
basic_string::find_first_of	/Users/lij/.vim/stl/string	/^  size_type find_first_of(_CharT __c, size_type __pos = 0) const $/;"	f	class:basic_string	access:public	signature:(_CharT __c, size_type __pos = 0) const
basic_string::find_first_of	/Users/lij/.vim/stl/string	/^  size_type find_first_of(const _CharT* __s, size_type __pos = 0) const $/;"	f	class:basic_string	access:public	signature:(const _CharT* __s, size_type __pos = 0) const
basic_string::find_first_of	/Users/lij/.vim/stl/string	/^  size_type find_first_of(const _CharT* __s, size_type __pos, $/;"	p	class:basic_string	file:	access:public	signature:(const _CharT* __s, size_type __pos, size_type __n) const
basic_string::find_first_of	/Users/lij/.vim/stl/string	/^  size_type find_first_of(const basic_string& __s, size_type __pos = 0) const $/;"	f	class:basic_string	access:public	signature:(const basic_string& __s, size_type __pos = 0) const
basic_string::find_last_not_of	/Users/lij/.vim/stl/string	/^  ::find_last_not_of(_Tp __c, size_type __pos) const $/;"	f	class:basic_string	signature:(_Tp __c, size_type __pos) const
basic_string::find_last_not_of	/Users/lij/.vim/stl/string	/^  ::find_last_not_of(const _CharT* __s, size_type __pos, size_type __n) const $/;"	f	class:basic_string	signature:(const _CharT* __s, size_type __pos, size_type __n) const
basic_string::find_last_not_of	/Users/lij/.vim/stl/string	/^  size_type find_last_not_of(_CharT __c, size_type __pos = npos) const;$/;"	p	class:basic_string	file:	access:public	signature:(_CharT __c, size_type __pos = npos) const
basic_string::find_last_not_of	/Users/lij/.vim/stl/string	/^  size_type find_last_not_of(const _CharT* __s, size_type __pos = npos) const$/;"	f	class:basic_string	access:public	signature:(const _CharT* __s, size_type __pos = npos) const
basic_string::find_last_not_of	/Users/lij/.vim/stl/string	/^  size_type find_last_not_of(const _CharT* __s, size_type __pos,$/;"	p	class:basic_string	file:	access:public	signature:(const _CharT* __s, size_type __pos, size_type __n) const
basic_string::find_last_not_of	/Users/lij/.vim/stl/string	/^  size_type find_last_not_of(const basic_string& __s, $/;"	f	class:basic_string	access:public	signature:(const basic_string& __s, size_type __pos = npos) const
basic_string::find_last_of	/Users/lij/.vim/stl/string	/^  ::find_last_of(const _CharT* __s, size_type __pos, size_type __n) const$/;"	f	class:basic_string	signature:(const _CharT* __s, size_type __pos, size_type __n) const
basic_string::find_last_of	/Users/lij/.vim/stl/string	/^  size_type find_last_of(_CharT __c, size_type __pos = npos) const {$/;"	f	class:basic_string	access:public	signature:(_CharT __c, size_type __pos = npos) const
basic_string::find_last_of	/Users/lij/.vim/stl/string	/^  size_type find_last_of(const _CharT* __s, size_type __pos = npos) const $/;"	f	class:basic_string	access:public	signature:(const _CharT* __s, size_type __pos = npos) const
basic_string::find_last_of	/Users/lij/.vim/stl/string	/^  size_type find_last_of(const _CharT* __s, size_type __pos, $/;"	p	class:basic_string	file:	access:public	signature:(const _CharT* __s, size_type __pos, size_type __n) const
basic_string::find_last_of	/Users/lij/.vim/stl/string	/^  size_type find_last_of(const basic_string& __s,$/;"	f	class:basic_string	access:public	signature:(const basic_string& __s, size_type __pos = npos) const
basic_string::get_allocator	/Users/lij/.vim/stl/string	/^  allocator_type get_allocator() const { return _Base::get_allocator(); }$/;"	f	class:basic_string	access:public	signature:() const
basic_string::insert	/Users/lij/.vim/stl/string	/^  ::insert(basic_string<_CharT,_Traits,_Alloc>::iterator __position,$/;"	f	class:basic_string	signature:(basic_string<_CharT,_Traits,_Alloc>::iterator __position, size_t __n, _CharT __c)
basic_string::insert	/Users/lij/.vim/stl/string	/^  basic_string& insert(size_type __pos, const _CharT* __s) {$/;"	f	class:basic_string	access:public	signature:(size_type __pos, const _CharT* __s)
basic_string::insert	/Users/lij/.vim/stl/string	/^  basic_string& insert(size_type __pos, const _CharT* __s, size_type __n) {$/;"	f	class:basic_string	access:public	signature:(size_type __pos, const _CharT* __s, size_type __n)
basic_string::insert	/Users/lij/.vim/stl/string	/^  basic_string& insert(size_type __pos, const basic_string& __s) {$/;"	f	class:basic_string	access:public	signature:(size_type __pos, const basic_string& __s)
basic_string::insert	/Users/lij/.vim/stl/string	/^  basic_string& insert(size_type __pos, const basic_string& __s,$/;"	f	class:basic_string	access:public	signature:(size_type __pos, const basic_string& __s, size_type __beg, size_type __n)
basic_string::insert	/Users/lij/.vim/stl/string	/^  basic_string& insert(size_type __pos, size_type __n, _CharT __c) {$/;"	f	class:basic_string	access:public	signature:(size_type __pos, size_type __n, _CharT __c)
basic_string::insert	/Users/lij/.vim/stl/string	/^  iterator insert(iterator __p, _CharT __c) {$/;"	f	class:basic_string	access:public	signature:(iterator __p, _CharT __c)
basic_string::insert	/Users/lij/.vim/stl/string	/^  void insert(iterator __p, _ForwardIter, _ForwardIter, forward_iterator_tag);$/;"	p	class:basic_string	file:	access:private	signature:(iterator __p, _ForwardIter, _ForwardIter, forward_iterator_tag)
basic_string::insert	/Users/lij/.vim/stl/string	/^  void insert(iterator __p, _InputIter __first, _InputIter __last) {$/;"	f	class:basic_string	access:public	signature:(iterator __p, _InputIter __first, _InputIter __last)
basic_string::insert	/Users/lij/.vim/stl/string	/^  void insert(iterator __p, _InputIter, _InputIter, input_iterator_tag);$/;"	p	class:basic_string	file:	access:private	signature:(iterator __p, _InputIter, _InputIter, input_iterator_tag)
basic_string::insert	/Users/lij/.vim/stl/string	/^  void insert(iterator __p, const _CharT* __first, const _CharT* __last);$/;"	p	class:basic_string	file:	access:public	signature:(iterator __p, const _CharT* __first, const _CharT* __last)
basic_string::insert	/Users/lij/.vim/stl/string	/^  void insert(iterator __p, size_t __n, _CharT __c);$/;"	p	class:basic_string	file:	access:public	signature:(iterator __p, size_t __n, _CharT __c)
basic_string::insert	/Users/lij/.vim/stl/string	/^basic_string<_CharT,_Traits,_Alloc>::insert(iterator __position,$/;"	f	class:basic_string	signature:(iterator __position, _ForwardIter __first, _ForwardIter __last, forward_iterator_tag)
basic_string::insert	/Users/lij/.vim/stl/string	/^basic_string<_CharT,_Traits,_Alloc>::insert(iterator __position,$/;"	f	class:basic_string	signature:(iterator __position, const _CharT* __first, const _CharT* __last)
basic_string::insert	/Users/lij/.vim/stl/string	/^void basic_string<_Tp, _Traits, _Alloc>::insert(iterator __p,$/;"	f	class:basic_string	signature:(iterator __p, _InputIter __first, _InputIter __last, input_iterator_tag)
basic_string::iterator	/Users/lij/.vim/stl/string	/^  typedef value_type*                      iterator;$/;"	t	class:basic_string	file:	access:public
basic_string::length	/Users/lij/.vim/stl/string	/^  size_type length() const { return size(); }$/;"	f	class:basic_string	access:public	signature:() const
basic_string::max_size	/Users/lij/.vim/stl/string	/^  size_t max_size() const { return _Base::max_size(); }$/;"	f	class:basic_string	access:public	signature:() const
basic_string::npos	/Users/lij/.vim/stl/string	/^  static const size_type npos;$/;"	m	class:basic_string	file:	access:public
basic_string::npos	/Users/lij/.vim/stl/string	/^basic_string<_CharT,_Traits,_Alloc>::npos $/;"	m	class:basic_string	file:
basic_string::operator +=	/Users/lij/.vim/stl/string	/^  basic_string& operator+=(_CharT __c) { push_back(__c); return *this; }$/;"	f	class:basic_string	access:public	signature:(_CharT __c)
basic_string::operator +=	/Users/lij/.vim/stl/string	/^  basic_string& operator+=(const _CharT* __s) { return append(__s); }$/;"	f	class:basic_string	access:public	signature:(const _CharT* __s)
basic_string::operator +=	/Users/lij/.vim/stl/string	/^  basic_string& operator+=(const basic_string& __s) { return append(__s); }$/;"	f	class:basic_string	access:public	signature:(const basic_string& __s)
basic_string::operator =	/Users/lij/.vim/stl/string	/^  basic_string& operator=(_CharT __c)$/;"	f	class:basic_string	access:public	signature:(_CharT __c)
basic_string::operator =	/Users/lij/.vim/stl/string	/^  basic_string& operator=(const _CharT* __s) $/;"	f	class:basic_string	access:public	signature:(const _CharT* __s)
basic_string::operator =	/Users/lij/.vim/stl/string	/^  basic_string& operator=(const basic_string& __s) {$/;"	f	class:basic_string	access:public	signature:(const basic_string& __s)
basic_string::operator []	/Users/lij/.vim/stl/string	/^  const_reference operator[](size_type __n) const$/;"	f	class:basic_string	access:public	signature:(size_type __n) const
basic_string::operator []	/Users/lij/.vim/stl/string	/^  reference operator[](size_type __n)$/;"	f	class:basic_string	access:public	signature:(size_type __n)
basic_string::pointer	/Users/lij/.vim/stl/string	/^  typedef value_type* pointer;$/;"	t	class:basic_string	file:	access:public
basic_string::pop_back	/Users/lij/.vim/stl/string	/^  void pop_back() {$/;"	f	class:basic_string	access:public	signature:()
basic_string::push_back	/Users/lij/.vim/stl/string	/^  void push_back(_CharT __c) {$/;"	f	class:basic_string	access:public	signature:(_CharT __c)
basic_string::rbegin	/Users/lij/.vim/stl/string	/^  const_reverse_iterator rbegin() const $/;"	f	class:basic_string	access:public	signature:() const
basic_string::rbegin	/Users/lij/.vim/stl/string	/^  reverse_iterator rbegin()             $/;"	f	class:basic_string	access:public	signature:()
basic_string::reference	/Users/lij/.vim/stl/string	/^  typedef value_type& reference;$/;"	t	class:basic_string	file:	access:public
basic_string::rend	/Users/lij/.vim/stl/string	/^  const_reverse_iterator rend()   const $/;"	f	class:basic_string	access:public	signature:() const
basic_string::rend	/Users/lij/.vim/stl/string	/^  reverse_iterator rend()               $/;"	f	class:basic_string	access:public	signature:()
basic_string::replace	/Users/lij/.vim/stl/string	/^  ::replace(iterator __first, iterator __last, _InputIter __f, _InputIter __l,$/;"	f	class:basic_string	signature:(iterator __first, iterator __last, _InputIter __f, _InputIter __l, input_iterator_tag)
basic_string::replace	/Users/lij/.vim/stl/string	/^  ::replace(iterator __first, iterator __last, size_type __n, _CharT __c)$/;"	f	class:basic_string	signature:(iterator __first, iterator __last, size_type __n, _CharT __c)
basic_string::replace	/Users/lij/.vim/stl/string	/^  ::replace(iterator __first, iterator __last,$/;"	f	class:basic_string	signature:(iterator __first, iterator __last, _ForwardIter __f, _ForwardIter __l, forward_iterator_tag)
basic_string::replace	/Users/lij/.vim/stl/string	/^  ::replace(iterator __first, iterator __last,$/;"	f	class:basic_string	signature:(iterator __first, iterator __last, const _CharT* __f, const _CharT* __l)
basic_string::replace	/Users/lij/.vim/stl/string	/^  basic_string& replace(iterator __first, iterator __last, $/;"	f	class:basic_string	access:public	signature:(iterator __first, iterator __last, const basic_string& __s)
basic_string::replace	/Users/lij/.vim/stl/string	/^  basic_string& replace(iterator __first, iterator __last, $/;"	p	class:basic_string	file:	access:public	signature:(iterator __first, iterator __last, size_type __n, _CharT __c)
basic_string::replace	/Users/lij/.vim/stl/string	/^  basic_string& replace(iterator __first, iterator __last,$/;"	f	class:basic_string	access:public	signature:(iterator __first, iterator __last, _InputIter __f, _InputIter __l)
basic_string::replace	/Users/lij/.vim/stl/string	/^  basic_string& replace(iterator __first, iterator __last,$/;"	f	class:basic_string	access:public	signature:(iterator __first, iterator __last, const _CharT* __s)
basic_string::replace	/Users/lij/.vim/stl/string	/^  basic_string& replace(iterator __first, iterator __last,$/;"	f	class:basic_string	access:public	signature:(iterator __first, iterator __last, const _CharT* __s, size_type __n)
basic_string::replace	/Users/lij/.vim/stl/string	/^  basic_string& replace(iterator __first, iterator __last,$/;"	p	class:basic_string	file:	access:private	signature:(iterator __first, iterator __last, _ForwardIter __f, _ForwardIter __l, forward_iterator_tag)
basic_string::replace	/Users/lij/.vim/stl/string	/^  basic_string& replace(iterator __first, iterator __last,$/;"	p	class:basic_string	file:	access:private	signature:(iterator __first, iterator __last, _InputIter __f, _InputIter __l, input_iterator_tag)
basic_string::replace	/Users/lij/.vim/stl/string	/^  basic_string& replace(iterator __first, iterator __last,$/;"	p	class:basic_string	file:	access:public	signature:(iterator __first, iterator __last, const _CharT* __f, const _CharT* __l)
basic_string::replace	/Users/lij/.vim/stl/string	/^  basic_string& replace(size_type __pos, size_type __n, $/;"	f	class:basic_string	access:public	signature:(size_type __pos, size_type __n, const basic_string& __s)
basic_string::replace	/Users/lij/.vim/stl/string	/^  basic_string& replace(size_type __pos, size_type __n1,$/;"	f	class:basic_string	access:public	signature:(size_type __pos, size_type __n1, const _CharT* __s)
basic_string::replace	/Users/lij/.vim/stl/string	/^  basic_string& replace(size_type __pos, size_type __n1,$/;"	f	class:basic_string	access:public	signature:(size_type __pos, size_type __n1, const _CharT* __s, size_type __n2)
basic_string::replace	/Users/lij/.vim/stl/string	/^  basic_string& replace(size_type __pos, size_type __n1,$/;"	f	class:basic_string	access:public	signature:(size_type __pos, size_type __n1, size_type __n2, _CharT __c)
basic_string::replace	/Users/lij/.vim/stl/string	/^  basic_string& replace(size_type __pos1, size_type __n1,$/;"	f	class:basic_string	access:public	signature:(size_type __pos1, size_type __n1, const basic_string& __s, size_type __pos2, size_type __n2)
basic_string::reserve	/Users/lij/.vim/stl/string	/^  void reserve(size_type = 0);$/;"	p	class:basic_string	file:	access:public	signature:(size_type = 0)
basic_string::reserve	/Users/lij/.vim/stl/string	/^void basic_string<_CharT,_Traits,_Alloc>::reserve(size_type __res_arg) {$/;"	f	class:basic_string	signature:(size_type __res_arg)
basic_string::resize	/Users/lij/.vim/stl/string	/^  void resize(size_type __n) { resize(__n, _M_null()); }$/;"	f	class:basic_string	access:public	signature:(size_type __n)
basic_string::resize	/Users/lij/.vim/stl/string	/^  void resize(size_type __n, _CharT __c) {$/;"	f	class:basic_string	access:public	signature:(size_type __n, _CharT __c)
basic_string::reverse_iterator	/Users/lij/.vim/stl/string	/^          reverse_iterator; $/;"	t	class:basic_string	file:	access:public
basic_string::reverse_iterator	/Users/lij/.vim/stl/string	/^  typedef reverse_iterator<iterator>       reverse_iterator;$/;"	t	class:basic_string	file:	access:public
basic_string::rfind	/Users/lij/.vim/stl/string	/^  ::rfind(_CharT __c, size_type __pos) const $/;"	f	class:basic_string	signature:(_CharT __c, size_type __pos) const
basic_string::rfind	/Users/lij/.vim/stl/string	/^  ::rfind(const _CharT* __s, size_type __pos, size_type __n) const $/;"	f	class:basic_string	signature:(const _CharT* __s, size_type __pos, size_type __n) const
basic_string::rfind	/Users/lij/.vim/stl/string	/^  size_type rfind(_CharT __c, size_type __pos = npos) const;$/;"	p	class:basic_string	file:	access:public	signature:(_CharT __c, size_type __pos = npos) const
basic_string::rfind	/Users/lij/.vim/stl/string	/^  size_type rfind(const _CharT* __s, size_type __pos = npos) const $/;"	f	class:basic_string	access:public	signature:(const _CharT* __s, size_type __pos = npos) const
basic_string::rfind	/Users/lij/.vim/stl/string	/^  size_type rfind(const _CharT* __s, size_type __pos, size_type __n) const;$/;"	p	class:basic_string	file:	access:public	signature:(const _CharT* __s, size_type __pos, size_type __n) const
basic_string::rfind	/Users/lij/.vim/stl/string	/^  size_type rfind(const basic_string& __s, size_type __pos = npos) const $/;"	f	class:basic_string	access:public	signature:(const basic_string& __s, size_type __pos = npos) const
basic_string::size	/Users/lij/.vim/stl/string	/^  size_type size() const { return _M_finish - _M_start; }$/;"	f	class:basic_string	access:public	signature:() const
basic_string::size_type	/Users/lij/.vim/stl/string	/^  typedef size_t size_type;$/;"	t	class:basic_string	file:	access:public
basic_string::substr	/Users/lij/.vim/stl/string	/^  basic_string substr(size_type __pos = 0, size_type __n = npos) const {$/;"	f	class:basic_string	access:public	signature:(size_type __pos = 0, size_type __n = npos) const
basic_string::swap	/Users/lij/.vim/stl/string	/^  void swap(basic_string& __s) {$/;"	f	class:basic_string	access:public	signature:(basic_string& __s)
basic_string::traits_type	/Users/lij/.vim/stl/string	/^  typedef _Traits traits_type;$/;"	t	class:basic_string	file:	access:public
basic_string::value_type	/Users/lij/.vim/stl/string	/^  typedef _CharT value_type;$/;"	t	class:basic_string	file:	access:public
basic_string::~basic_string	/Users/lij/.vim/stl/string	/^  ~basic_string() { destroy(_M_start, _M_finish + 1); }$/;"	f	class:basic_string	access:public	signature:()
before_begin	/Users/lij/.vim/stl/stl_slist.h	/^  const_iterator before_begin() const$/;"	f	class:slist	access:public	signature:() const
before_begin	/Users/lij/.vim/stl/stl_slist.h	/^  iterator before_begin() { return iterator((_Node*) &this->_M_head); }$/;"	f	class:slist	access:public	signature:()
begin	/Users/lij/.vim/stl/stl_bvector.h	/^  const_iterator begin() const { return _M_start; }$/;"	f	class:__BVECTOR	access:public	signature:() const
begin	/Users/lij/.vim/stl/stl_bvector.h	/^  iterator begin() { return _M_start; }$/;"	f	class:__BVECTOR	access:public	signature:()
begin	/Users/lij/.vim/stl/stl_deque.h	/^  const_iterator begin() const { return _M_start; }$/;"	f	class:deque	access:public	signature:() const
begin	/Users/lij/.vim/stl/stl_deque.h	/^  iterator begin() { return _M_start; }$/;"	f	class:deque	access:public	signature:()
begin	/Users/lij/.vim/stl/stl_hash_map.h	/^  const_iterator begin() const { return _M_ht.begin(); }$/;"	f	class:hash_map	access:public	signature:() const
begin	/Users/lij/.vim/stl/stl_hash_map.h	/^  const_iterator begin() const { return _M_ht.begin(); }$/;"	f	class:hash_multimap	access:public	signature:() const
begin	/Users/lij/.vim/stl/stl_hash_map.h	/^  iterator begin() { return _M_ht.begin(); }$/;"	f	class:hash_map	access:public	signature:()
begin	/Users/lij/.vim/stl/stl_hash_map.h	/^  iterator begin() { return _M_ht.begin(); }$/;"	f	class:hash_multimap	access:public	signature:()
begin	/Users/lij/.vim/stl/stl_hash_set.h	/^  iterator begin() const { return _M_ht.begin(); }$/;"	f	class:hash_multiset	access:public	signature:() const
begin	/Users/lij/.vim/stl/stl_hash_set.h	/^  iterator begin() const { return _M_ht.begin(); }$/;"	f	class:hash_set	access:public	signature:() const
begin	/Users/lij/.vim/stl/stl_hashtable.h	/^  const_iterator begin() const$/;"	f	class:hashtable	access:public	signature:() const
begin	/Users/lij/.vim/stl/stl_hashtable.h	/^  iterator begin()$/;"	f	class:hashtable	access:public	signature:()
begin	/Users/lij/.vim/stl/stl_list.h	/^  const_iterator begin() const { return (_Node*)(_M_node->_M_next); }$/;"	f	class:list	access:public	signature:() const
begin	/Users/lij/.vim/stl/stl_list.h	/^  iterator begin()             { return (_Node*)(_M_node->_M_next); }$/;"	f	class:list	access:public	signature:()
begin	/Users/lij/.vim/stl/stl_map.h	/^  const_iterator begin() const { return _M_t.begin(); }$/;"	f	class:map	access:public	signature:() const
begin	/Users/lij/.vim/stl/stl_map.h	/^  iterator begin() { return _M_t.begin(); }$/;"	f	class:map	access:public	signature:()
begin	/Users/lij/.vim/stl/stl_multimap.h	/^  const_iterator begin() const { return _M_t.begin(); }$/;"	f	class:multimap	access:public	signature:() const
begin	/Users/lij/.vim/stl/stl_multimap.h	/^  iterator begin() { return _M_t.begin(); }$/;"	f	class:multimap	access:public	signature:()
begin	/Users/lij/.vim/stl/stl_multiset.h	/^  iterator begin() const { return _M_t.begin(); }$/;"	f	class:multiset	access:public	signature:() const
begin	/Users/lij/.vim/stl/stl_rope.h	/^            const_iterator begin() { return const_begin(); }$/;"	f	class:rope	access:public	signature:()
begin	/Users/lij/.vim/stl/stl_rope.h	/^            iterator begin() { return mutable_begin(); }$/;"	f	class:rope	access:public	signature:()
begin	/Users/lij/.vim/stl/stl_rope.h	/^        const_iterator begin() const {$/;"	f	class:rope	access:public	signature:() const
begin	/Users/lij/.vim/stl/stl_set.h	/^  iterator begin() const { return _M_t.begin(); }$/;"	f	class:set	access:public	signature:() const
begin	/Users/lij/.vim/stl/stl_slist.h	/^  const_iterator begin() const $/;"	f	class:slist	access:public	signature:() const
begin	/Users/lij/.vim/stl/stl_slist.h	/^  iterator begin() { return iterator((_Node*)this->_M_head._M_next); }$/;"	f	class:slist	access:public	signature:()
begin	/Users/lij/.vim/stl/stl_tempbuf.h	/^  _Tp* begin() { return _M_buffer; }$/;"	f	class:_Temporary_buffer	access:public	signature:()
begin	/Users/lij/.vim/stl/stl_tree.h	/^  const_iterator begin() const { return _M_leftmost(); }$/;"	f	class:_Rb_tree	access:public	signature:() const
begin	/Users/lij/.vim/stl/stl_tree.h	/^  iterator begin() { return _M_leftmost(); }$/;"	f	class:_Rb_tree	access:public	signature:()
begin	/Users/lij/.vim/stl/stl_vector.h	/^  const_iterator begin() const { return _M_start; }$/;"	f	class:vector	access:public	signature:() const
begin	/Users/lij/.vim/stl/stl_vector.h	/^  iterator begin() { return _M_start; }$/;"	f	class:vector	access:public	signature:()
begin	/Users/lij/.vim/stl/string	/^  const_iterator begin() const { return _M_start; }$/;"	f	class:basic_string	access:public	signature:() const
begin	/Users/lij/.vim/stl/string	/^  iterator begin()             { return _M_start; }$/;"	f	class:basic_string	access:public	signature:()
bidirectional_iterator	/Users/lij/.vim/stl/stl_iterator_base.h	/^template <class _Tp, class _Distance> struct bidirectional_iterator {$/;"	s
bidirectional_iterator::difference_type	/Users/lij/.vim/stl/stl_iterator_base.h	/^  typedef _Distance                  difference_type;$/;"	t	struct:bidirectional_iterator	access:public
bidirectional_iterator::iterator_category	/Users/lij/.vim/stl/stl_iterator_base.h	/^  typedef bidirectional_iterator_tag iterator_category;$/;"	t	struct:bidirectional_iterator	access:public
bidirectional_iterator::pointer	/Users/lij/.vim/stl/stl_iterator_base.h	/^  typedef _Tp*                       pointer;$/;"	t	struct:bidirectional_iterator	access:public
bidirectional_iterator::reference	/Users/lij/.vim/stl/stl_iterator_base.h	/^  typedef _Tp&                       reference;$/;"	t	struct:bidirectional_iterator	access:public
bidirectional_iterator::value_type	/Users/lij/.vim/stl/stl_iterator_base.h	/^  typedef _Tp                        value_type;$/;"	t	struct:bidirectional_iterator	access:public
bidirectional_iterator_tag	/Users/lij/.vim/stl/stl_iterator_base.h	/^struct bidirectional_iterator_tag : public forward_iterator_tag {};$/;"	s	inherits:forward_iterator_tag
binary_compose	/Users/lij/.vim/stl/stl_function.h	/^  binary_compose(const _Operation1& __x, const _Operation2& __y, $/;"	f	class:binary_compose	access:public	signature:(const _Operation1& __x, const _Operation2& __y, const _Operation3& __z)
binary_compose	/Users/lij/.vim/stl/stl_function.h	/^class binary_compose$/;"	c	inherits:unary_function
binary_compose::_M_fn1	/Users/lij/.vim/stl/stl_function.h	/^  _Operation1 _M_fn1;$/;"	m	class:binary_compose	access:protected
binary_compose::_M_fn2	/Users/lij/.vim/stl/stl_function.h	/^  _Operation2 _M_fn2;$/;"	m	class:binary_compose	access:protected
binary_compose::_M_fn3	/Users/lij/.vim/stl/stl_function.h	/^  _Operation3 _M_fn3;$/;"	m	class:binary_compose	access:protected
binary_compose::binary_compose	/Users/lij/.vim/stl/stl_function.h	/^  binary_compose(const _Operation1& __x, const _Operation2& __y, $/;"	f	class:binary_compose	access:public	signature:(const _Operation1& __x, const _Operation2& __y, const _Operation3& __z)
binary_compose::operator ()	/Users/lij/.vim/stl/stl_function.h	/^  operator()(const typename _Operation2::argument_type& __x) const {$/;"	f	class:binary_compose	access:public	signature:(const typename _Operation2::argument_type& __x) const
binary_function	/Users/lij/.vim/stl/stl_function.h	/^struct binary_function {$/;"	s
binary_function::first_argument_type	/Users/lij/.vim/stl/stl_function.h	/^  typedef _Arg1 first_argument_type;$/;"	t	struct:binary_function	access:public
binary_function::result_type	/Users/lij/.vim/stl/stl_function.h	/^  typedef _Result result_type;$/;"	t	struct:binary_function	access:public
binary_function::second_argument_type	/Users/lij/.vim/stl/stl_function.h	/^  typedef _Arg2 second_argument_type;$/;"	t	struct:binary_function	access:public
binary_negate	/Users/lij/.vim/stl/stl_function.h	/^  explicit binary_negate(const _Predicate& __x) : _M_pred(__x) {}$/;"	f	class:binary_negate	access:public	signature:(const _Predicate& __x)
binary_negate	/Users/lij/.vim/stl/stl_function.h	/^class binary_negate $/;"	c	inherits:binary_function
binary_negate::_M_pred	/Users/lij/.vim/stl/stl_function.h	/^  _Predicate _M_pred;$/;"	m	class:binary_negate	access:protected
binary_negate::binary_negate	/Users/lij/.vim/stl/stl_function.h	/^  explicit binary_negate(const _Predicate& __x) : _M_pred(__x) {}$/;"	f	class:binary_negate	access:public	signature:(const _Predicate& __x)
binary_negate::operator ()	/Users/lij/.vim/stl/stl_function.h	/^  bool operator()(const typename _Predicate::first_argument_type& __x, $/;"	f	class:binary_negate	access:public	signature:(const typename _Predicate::first_argument_type& __x, const typename _Predicate::second_argument_type& __y) const
binary_search	/Users/lij/.vim/stl/stl_algo.h	/^bool binary_search(_ForwardIter __first, _ForwardIter __last,$/;"	f	signature:(_ForwardIter __first, _ForwardIter __last, const _Tp& __val)
binary_search	/Users/lij/.vim/stl/stl_algo.h	/^bool binary_search(_ForwardIter __first, _ForwardIter __last,$/;"	f	signature:(_ForwardIter __first, _ForwardIter __last, const _Tp& __val, _Compare __comp)
bind1st	/Users/lij/.vim/stl/stl_function.h	/^bind1st(const _Operation& __fn, const _Tp& __x) $/;"	f	signature:(const _Operation& __fn, const _Tp& __x)
bind2nd	/Users/lij/.vim/stl/stl_function.h	/^bind2nd(const _Operation& __fn, const _Tp& __x) $/;"	f	signature:(const _Operation& __fn, const _Tp& __x)
binder1st	/Users/lij/.vim/stl/stl_function.h	/^  binder1st(const _Operation& __x,$/;"	f	class:binder1st	access:public	signature:(const _Operation& __x, const typename _Operation::first_argument_type& __y)
binder1st	/Users/lij/.vim/stl/stl_function.h	/^class binder1st$/;"	c	inherits:unary_function
binder1st::binder1st	/Users/lij/.vim/stl/stl_function.h	/^  binder1st(const _Operation& __x,$/;"	f	class:binder1st	access:public	signature:(const _Operation& __x, const typename _Operation::first_argument_type& __y)
binder1st::op	/Users/lij/.vim/stl/stl_function.h	/^  _Operation op;$/;"	m	class:binder1st	access:protected
binder1st::operator ()	/Users/lij/.vim/stl/stl_function.h	/^  operator()(const typename _Operation::second_argument_type& __x) const {$/;"	f	class:binder1st	access:public	signature:(const typename _Operation::second_argument_type& __x) const
binder1st::value	/Users/lij/.vim/stl/stl_function.h	/^  typename _Operation::first_argument_type value;$/;"	m	class:binder1st	access:protected
binder2nd	/Users/lij/.vim/stl/stl_function.h	/^  binder2nd(const _Operation& __x,$/;"	f	class:binder2nd	access:public	signature:(const _Operation& __x, const typename _Operation::second_argument_type& __y)
binder2nd	/Users/lij/.vim/stl/stl_function.h	/^class binder2nd$/;"	c	inherits:unary_function
binder2nd::binder2nd	/Users/lij/.vim/stl/stl_function.h	/^  binder2nd(const _Operation& __x,$/;"	f	class:binder2nd	access:public	signature:(const _Operation& __x, const typename _Operation::second_argument_type& __y)
binder2nd::op	/Users/lij/.vim/stl/stl_function.h	/^  _Operation op;$/;"	m	class:binder2nd	access:protected
binder2nd::operator ()	/Users/lij/.vim/stl/stl_function.h	/^  operator()(const typename _Operation::first_argument_type& __x) const {$/;"	f	class:binder2nd	access:public	signature:(const typename _Operation::first_argument_type& __x) const
binder2nd::value	/Users/lij/.vim/stl/stl_function.h	/^  typename _Operation::second_argument_type value;$/;"	m	class:binder2nd	access:protected
bit_vector	/Users/lij/.vim/stl/stl_bvector.h	/^typedef vector<bool, alloc> bit_vector;$/;"	t
bitset	/Users/lij/.vim/stl/bitset	/^  bitset() {}$/;"	f	class:bitset	access:public	signature:()
bitset	/Users/lij/.vim/stl/bitset	/^  bitset(const basic_string<_CharT, _Traits, _Alloc>& __s,$/;"	f	class:bitset	access:public	signature:(const basic_string<_CharT, _Traits, _Alloc>& __s, size_t __pos, size_t __n)
bitset	/Users/lij/.vim/stl/bitset	/^  bitset(unsigned long __val) : _Base_bitset<__BITSET_WORDS(_Nb)>(__val) $/;"	f	class:bitset	access:public	signature:(unsigned long __val)
bitset	/Users/lij/.vim/stl/bitset	/^  explicit bitset(const basic_string<_CharT, _Traits, _Alloc>& __s,$/;"	f	class:bitset	access:public	signature:(const basic_string<_CharT, _Traits, _Alloc>& __s, size_t __pos = 0)
bitset	/Users/lij/.vim/stl/bitset	/^  explicit bitset(const basic_string<char>& __s,$/;"	f	class:bitset	access:public	signature:(const basic_string<char>& __s, size_t __pos = 0, size_t __n = basic_string<char>::npos)
bitset	/Users/lij/.vim/stl/bitset	/^class bitset : private _Base_bitset<__BITSET_WORDS(_Nb)>$/;"	c	file:	inherits:_Base_bitset
bitset::_Base	/Users/lij/.vim/stl/bitset	/^  typedef _Base_bitset<__BITSET_WORDS(_Nb)> _Base;$/;"	t	class:bitset	file:	access:private
bitset::_Find_first	/Users/lij/.vim/stl/bitset	/^  size_t _Find_first() const $/;"	f	class:bitset	access:public	signature:() const
bitset::_Find_next	/Users/lij/.vim/stl/bitset	/^  size_t _Find_next( size_t __prev ) const $/;"	f	class:bitset	access:public	signature:( size_t __prev ) const
bitset::_M_copy_from_string	/Users/lij/.vim/stl/bitset	/^  ::_M_copy_from_string(const basic_string<_CharT,_Traits,_Alloc>& __s,$/;"	f	class:bitset	signature:(const basic_string<_CharT,_Traits,_Alloc>& __s, size_t __pos, size_t __n)
bitset::_M_copy_from_string	/Users/lij/.vim/stl/bitset	/^  void _M_copy_from_string(const basic_string<_CharT,_Traits,_Alloc>& __s,$/;"	p	class:bitset	file:	access:public	signature:(const basic_string<_CharT,_Traits,_Alloc>& __s, size_t, size_t)
bitset::_M_copy_from_string	/Users/lij/.vim/stl/bitset	/^  void _M_copy_from_string(const basic_string<char>&, size_t, size_t);$/;"	p	class:bitset	file:	access:public	signature:(const basic_string<char>&, size_t, size_t)
bitset::_M_copy_from_string	/Users/lij/.vim/stl/bitset	/^void bitset<_Nb>::_M_copy_from_string(const basic_string<char>& __s,$/;"	f	class:bitset	signature:(const basic_string<char>& __s, size_t __pos, size_t __n)
bitset::_M_copy_to_string	/Users/lij/.vim/stl/bitset	/^  ::_M_copy_to_string(basic_string<_CharT, _Traits, _Alloc>& __s) const$/;"	f	class:bitset	signature:(basic_string<_CharT, _Traits, _Alloc>& __s) const
bitset::_M_copy_to_string	/Users/lij/.vim/stl/bitset	/^  void _M_copy_to_string(basic_string<_CharT,_Traits,_Alloc>&) const;$/;"	p	class:bitset	file:	access:public	signature:(basic_string<_CharT,_Traits,_Alloc>&) const
bitset::_M_copy_to_string	/Users/lij/.vim/stl/bitset	/^  void _M_copy_to_string(basic_string<char>&) const;$/;"	p	class:bitset	file:	access:public	signature:(basic_string<char>&) const
bitset::_M_copy_to_string	/Users/lij/.vim/stl/bitset	/^void bitset<_Nb>::_M_copy_to_string(basic_string<char>& __s) const$/;"	f	class:bitset	signature:(basic_string<char>& __s) const
bitset::_M_do_sanitize	/Users/lij/.vim/stl/bitset	/^  void _M_do_sanitize() {$/;"	f	class:bitset	file:	access:private	signature:()
bitset::_Unchecked_flip	/Users/lij/.vim/stl/bitset	/^  bitset<_Nb>& _Unchecked_flip(size_t __pos) {$/;"	f	class:bitset	access:public	signature:(size_t __pos)
bitset::_Unchecked_reset	/Users/lij/.vim/stl/bitset	/^  bitset<_Nb>& _Unchecked_reset(size_t __pos) {$/;"	f	class:bitset	access:public	signature:(size_t __pos)
bitset::_Unchecked_set	/Users/lij/.vim/stl/bitset	/^  bitset<_Nb>& _Unchecked_set(size_t __pos) {$/;"	f	class:bitset	access:public	signature:(size_t __pos)
bitset::_Unchecked_set	/Users/lij/.vim/stl/bitset	/^  bitset<_Nb>& _Unchecked_set(size_t __pos, int __val) {$/;"	f	class:bitset	access:public	signature:(size_t __pos, int __val)
bitset::_Unchecked_test	/Users/lij/.vim/stl/bitset	/^  bool _Unchecked_test(size_t __pos) const {$/;"	f	class:bitset	access:public	signature:(size_t __pos) const
bitset::_WordT	/Users/lij/.vim/stl/bitset	/^  typedef unsigned long _WordT;$/;"	t	class:bitset	file:	access:private
bitset::any	/Users/lij/.vim/stl/bitset	/^  bool any() const { return this->_M_is_any(); }$/;"	f	class:bitset	access:public	signature:() const
bitset::bitset	/Users/lij/.vim/stl/bitset	/^  bitset() {}$/;"	f	class:bitset	access:public	signature:()
bitset::bitset	/Users/lij/.vim/stl/bitset	/^  bitset(const basic_string<_CharT, _Traits, _Alloc>& __s,$/;"	f	class:bitset	access:public	signature:(const basic_string<_CharT, _Traits, _Alloc>& __s, size_t __pos, size_t __n)
bitset::bitset	/Users/lij/.vim/stl/bitset	/^  bitset(unsigned long __val) : _Base_bitset<__BITSET_WORDS(_Nb)>(__val) $/;"	f	class:bitset	access:public	signature:(unsigned long __val)
bitset::bitset	/Users/lij/.vim/stl/bitset	/^  explicit bitset(const basic_string<_CharT, _Traits, _Alloc>& __s,$/;"	f	class:bitset	access:public	signature:(const basic_string<_CharT, _Traits, _Alloc>& __s, size_t __pos = 0)
bitset::bitset	/Users/lij/.vim/stl/bitset	/^  explicit bitset(const basic_string<char>& __s,$/;"	f	class:bitset	access:public	signature:(const basic_string<char>& __s, size_t __pos = 0, size_t __n = basic_string<char>::npos)
bitset::count	/Users/lij/.vim/stl/bitset	/^  size_t count() const { return this->_M_do_count(); }$/;"	f	class:bitset	access:public	signature:() const
bitset::flip	/Users/lij/.vim/stl/bitset	/^  bitset<_Nb>& flip() {$/;"	f	class:bitset	access:public	signature:()
bitset::flip	/Users/lij/.vim/stl/bitset	/^  bitset<_Nb>& flip(size_t __pos) {$/;"	f	class:bitset	access:public	signature:(size_t __pos)
bitset::none	/Users/lij/.vim/stl/bitset	/^  bool none() const { return !this->_M_is_any(); }$/;"	f	class:bitset	access:public	signature:() const
bitset::operator !=	/Users/lij/.vim/stl/bitset	/^  bool operator!=(const bitset<_Nb>& __rhs) const {$/;"	f	class:bitset	access:public	signature:(const bitset<_Nb>& __rhs) const
bitset::operator &=	/Users/lij/.vim/stl/bitset	/^  bitset<_Nb>& operator&=(const bitset<_Nb>& __rhs) {$/;"	f	class:bitset	access:public	signature:(const bitset<_Nb>& __rhs)
bitset::operator <<	/Users/lij/.vim/stl/bitset	/^  bitset<_Nb> operator<<(size_t __pos) const$/;"	f	class:bitset	access:public	signature:(size_t __pos) const
bitset::operator <<=	/Users/lij/.vim/stl/bitset	/^  bitset<_Nb>& operator<<=(size_t __pos) {$/;"	f	class:bitset	access:public	signature:(size_t __pos)
bitset::operator ==	/Users/lij/.vim/stl/bitset	/^  bool operator==(const bitset<_Nb>& __rhs) const {$/;"	f	class:bitset	access:public	signature:(const bitset<_Nb>& __rhs) const
bitset::operator >>	/Users/lij/.vim/stl/bitset	/^  bitset<_Nb> operator>>(size_t __pos) const$/;"	f	class:bitset	access:public	signature:(size_t __pos) const
bitset::operator >>=	/Users/lij/.vim/stl/bitset	/^  bitset<_Nb>& operator>>=(size_t __pos) {$/;"	f	class:bitset	access:public	signature:(size_t __pos)
bitset::operator []	/Users/lij/.vim/stl/bitset	/^  bool operator[](size_t __pos) const { return _Unchecked_test(__pos); }$/;"	f	class:bitset	access:public	signature:(size_t __pos) const
bitset::operator []	/Users/lij/.vim/stl/bitset	/^  reference operator[](size_t __pos) { return reference(*this,__pos); }$/;"	f	class:bitset	access:public	signature:(size_t __pos)
bitset::operator ^=	/Users/lij/.vim/stl/bitset	/^  bitset<_Nb>& operator^=(const bitset<_Nb>& __rhs) {$/;"	f	class:bitset	access:public	signature:(const bitset<_Nb>& __rhs)
bitset::operator |=	/Users/lij/.vim/stl/bitset	/^  bitset<_Nb>& operator|=(const bitset<_Nb>& __rhs) {$/;"	f	class:bitset	access:public	signature:(const bitset<_Nb>& __rhs)
bitset::operator ~	/Users/lij/.vim/stl/bitset	/^  bitset<_Nb> operator~() const { $/;"	f	class:bitset	access:public	signature:() const
bitset::reference	/Users/lij/.vim/stl/bitset	/^  class reference {$/;"	c	class:bitset	file:	access:public
bitset::reference::_M_bpos	/Users/lij/.vim/stl/bitset	/^    size_t _M_bpos;$/;"	m	class:bitset::reference	file:	access:private
bitset::reference::_M_wp	/Users/lij/.vim/stl/bitset	/^    _WordT *_M_wp;$/;"	m	class:bitset::reference	file:	access:private
bitset::reference::flip	/Users/lij/.vim/stl/bitset	/^    reference& flip() {$/;"	f	class:bitset::reference	access:public	signature:()
bitset::reference::operator =	/Users/lij/.vim/stl/bitset	/^    reference& operator=(bool __x) {$/;"	f	class:bitset::reference	access:public	signature:(bool __x)
bitset::reference::operator =	/Users/lij/.vim/stl/bitset	/^    reference& operator=(const reference& __j) {$/;"	f	class:bitset::reference	access:public	signature:(const reference& __j)
bitset::reference::operator bool	/Users/lij/.vim/stl/bitset	/^    operator bool() const$/;"	f	class:bitset::reference	access:public	signature:() const
bitset::reference::operator ~	/Users/lij/.vim/stl/bitset	/^    bool operator~() const$/;"	f	class:bitset::reference	access:public	signature:() const
bitset::reference::reference	/Users/lij/.vim/stl/bitset	/^    reference( bitset& __b, size_t __pos ) {$/;"	f	class:bitset::reference	access:public	signature:( bitset& __b, size_t __pos )
bitset::reference::reference	/Users/lij/.vim/stl/bitset	/^    reference();$/;"	p	class:bitset::reference	file:	access:private	signature:()
bitset::reference::~reference	/Users/lij/.vim/stl/bitset	/^    ~reference() {}$/;"	f	class:bitset::reference	access:public	signature:()
bitset::reset	/Users/lij/.vim/stl/bitset	/^  bitset<_Nb>& reset() {$/;"	f	class:bitset	access:public	signature:()
bitset::reset	/Users/lij/.vim/stl/bitset	/^  bitset<_Nb>& reset(size_t __pos) {$/;"	f	class:bitset	access:public	signature:(size_t __pos)
bitset::set	/Users/lij/.vim/stl/bitset	/^  bitset<_Nb>& set() {$/;"	f	class:bitset	access:public	signature:()
bitset::set	/Users/lij/.vim/stl/bitset	/^  bitset<_Nb>& set(size_t __pos) {$/;"	f	class:bitset	access:public	signature:(size_t __pos)
bitset::set	/Users/lij/.vim/stl/bitset	/^  bitset<_Nb>& set(size_t __pos, int __val) {$/;"	f	class:bitset	access:public	signature:(size_t __pos, int __val)
bitset::size	/Users/lij/.vim/stl/bitset	/^  size_t size() const { return _Nb; }$/;"	f	class:bitset	access:public	signature:() const
bitset::test	/Users/lij/.vim/stl/bitset	/^  bool test(size_t __pos) const {$/;"	f	class:bitset	access:public	signature:(size_t __pos) const
bitset::to_string	/Users/lij/.vim/stl/bitset	/^  basic_string<_CharT, _Traits, _Alloc> to_string() const {$/;"	f	class:bitset	access:public	signature:() const
bitset::to_ulong	/Users/lij/.vim/stl/bitset	/^  unsigned long to_ulong() const { return this->_M_do_to_ulong(); }$/;"	f	class:bitset	access:public	signature:() const
bool	/Users/lij/.vim/stl/stl_config.h	/^    typedef int bool;$/;"	t
bucket_count	/Users/lij/.vim/stl/stl_hash_map.h	/^  size_type bucket_count() const { return _M_ht.bucket_count(); }$/;"	f	class:hash_map	access:public	signature:() const
bucket_count	/Users/lij/.vim/stl/stl_hash_map.h	/^  size_type bucket_count() const { return _M_ht.bucket_count(); }$/;"	f	class:hash_multimap	access:public	signature:() const
bucket_count	/Users/lij/.vim/stl/stl_hash_set.h	/^  size_type bucket_count() const { return _M_ht.bucket_count(); }$/;"	f	class:hash_multiset	access:public	signature:() const
bucket_count	/Users/lij/.vim/stl/stl_hash_set.h	/^  size_type bucket_count() const { return _M_ht.bucket_count(); }$/;"	f	class:hash_set	access:public	signature:() const
bucket_count	/Users/lij/.vim/stl/stl_hashtable.h	/^  size_type bucket_count() const { return _M_buckets.size(); }$/;"	f	class:hashtable	access:public	signature:() const
c	/Users/lij/.vim/stl/stl_queue.h	/^  _Sequence c;$/;"	m	class:priority_queue	access:protected
c	/Users/lij/.vim/stl/stl_queue.h	/^  _Sequence c;$/;"	m	class:queue	access:protected
c	/Users/lij/.vim/stl/stl_stack.h	/^  _Sequence c;$/;"	m	class:stack	access:protected
c_str	/Users/lij/.vim/stl/ropeimpl.h	/^const _CharT* rope<_CharT,_Alloc>::c_str() const {$/;"	f	class:rope	signature:() const
c_str	/Users/lij/.vim/stl/stl_rope.h	/^        const _CharT* c_str() const;$/;"	p	class:rope	access:public	signature:() const
c_str	/Users/lij/.vim/stl/string	/^  const _CharT* c_str() const { return _M_start; }$/;"	f	class:basic_string	access:public	signature:() const
capacity	/Users/lij/.vim/stl/stl_bvector.h	/^  size_type capacity() const {$/;"	f	class:__BVECTOR	access:public	signature:() const
capacity	/Users/lij/.vim/stl/stl_rope.h	/^            size_type capacity() const {$/;"	f	class:rope	access:public	signature:() const
capacity	/Users/lij/.vim/stl/stl_vector.h	/^  size_type capacity() const$/;"	f	class:vector	access:public	signature:() const
capacity	/Users/lij/.vim/stl/string	/^  size_type capacity() const { return (_M_end_of_storage - _M_start) - 1; }$/;"	f	class:basic_string	access:public	signature:() const
char_producer	/Users/lij/.vim/stl/stl_rope.h	/^class char_producer {$/;"	c
char_producer::operator ()	/Users/lij/.vim/stl/stl_rope.h	/^        virtual void operator()(size_t __start_pos, size_t __len, $/;"	p	class:char_producer	access:public	signature:(size_t __start_pos, size_t __len, _CharT* __buffer)
char_producer::~char_producer	/Users/lij/.vim/stl/stl_rope.h	/^        virtual ~char_producer() {};$/;"	f	class:char_producer	access:public	signature:()
char_traits	/Users/lij/.vim/stl/char_traits.h	/^__STL_TEMPLATE_NULL class char_traits<char> $/;"	c	inherits:__char_traits_base
char_traits	/Users/lij/.vim/stl/char_traits.h	/^__STL_TEMPLATE_NULL class char_traits<wchar_t>$/;"	c	inherits:__char_traits_base
char_traits	/Users/lij/.vim/stl/char_traits.h	/^template <class _CharT> class char_traits$/;"	c	inherits:__char_traits_base
char_traits::assign	/Users/lij/.vim/stl/char_traits.h	/^  static char* assign(char* __s, size_t __n, char __c)$/;"	f	class:char_traits	access:public	signature:(char* __s, size_t __n, char __c)
char_traits::assign	/Users/lij/.vim/stl/char_traits.h	/^  static void assign(char& __c1, const char& __c2) { __c1 = __c2; }$/;"	f	class:char_traits	access:public	signature:(char& __c1, const char& __c2)
char_traits::compare	/Users/lij/.vim/stl/char_traits.h	/^  static int compare(const char* __s1, const char* __s2, size_t __n) $/;"	f	class:char_traits	access:public	signature:(const char* __s1, const char* __s2, size_t __n)
char_traits::length	/Users/lij/.vim/stl/char_traits.h	/^  static size_t length(const char* __s) { return strlen(__s); }$/;"	f	class:char_traits	access:public	signature:(const char* __s)
char_traits::to_char_type	/Users/lij/.vim/stl/char_traits.h	/^  static char_type to_char_type(const int_type& __c) {$/;"	f	class:char_traits	access:public	signature:(const int_type& __c)
char_traits::to_int_type	/Users/lij/.vim/stl/char_traits.h	/^  static int_type to_int_type(const char_type& __c) {$/;"	f	class:char_traits	access:public	signature:(const char_type& __c)
char_type	/Users/lij/.vim/stl/char_traits.h	/^  typedef _CharT char_type;$/;"	t	class:__char_traits_base	access:public
char_type	/Users/lij/.vim/stl/stl_iterator.h	/^  typedef _CharT                           char_type;$/;"	t	class:istreambuf_iterator	access:public
char_type	/Users/lij/.vim/stl/stl_iterator.h	/^  typedef _CharT                           char_type;$/;"	t	class:ostreambuf_iterator	access:public
char_type	/Users/lij/.vim/stl/stl_iterator.h	/^  typedef _CharT                         char_type;$/;"	t	class:istream_iterator	access:public
char_type	/Users/lij/.vim/stl/stl_iterator.h	/^  typedef _CharT                         char_type;$/;"	t	class:ostream_iterator	access:public
clear	/Users/lij/.vim/stl/stl_bvector.h	/^  void clear() { erase(begin(), end()); }$/;"	f	class:__BVECTOR	access:public	signature:()
clear	/Users/lij/.vim/stl/stl_deque.h	/^  void clear(); $/;"	p	class:deque	access:public	signature:()
clear	/Users/lij/.vim/stl/stl_deque.h	/^void deque<_Tp,_Alloc>::clear()$/;"	f	class:deque	signature:()
clear	/Users/lij/.vim/stl/stl_hash_map.h	/^  void clear() { _M_ht.clear(); }$/;"	f	class:hash_map	access:public	signature:()
clear	/Users/lij/.vim/stl/stl_hash_map.h	/^  void clear() { _M_ht.clear(); }$/;"	f	class:hash_multimap	access:public	signature:()
clear	/Users/lij/.vim/stl/stl_hash_set.h	/^  void clear() { _M_ht.clear(); }$/;"	f	class:hash_multiset	access:public	signature:()
clear	/Users/lij/.vim/stl/stl_hash_set.h	/^  void clear() { _M_ht.clear(); }$/;"	f	class:hash_set	access:public	signature:()
clear	/Users/lij/.vim/stl/stl_hashtable.h	/^  void clear();$/;"	p	class:hashtable	access:public	signature:()
clear	/Users/lij/.vim/stl/stl_hashtable.h	/^void hashtable<_Val,_Key,_HF,_Ex,_Eq,_All>::clear()$/;"	f	class:hashtable	signature:()
clear	/Users/lij/.vim/stl/stl_list.h	/^  void clear() { _Base::clear(); }$/;"	f	class:list	access:public	signature:()
clear	/Users/lij/.vim/stl/stl_list.h	/^  void clear();$/;"	p	class:_List_base	access:public	signature:()
clear	/Users/lij/.vim/stl/stl_list.h	/^_List_base<_Tp,_Alloc>::clear() $/;"	f	class:_List_base	signature:()
clear	/Users/lij/.vim/stl/stl_map.h	/^  void clear() { _M_t.clear(); }$/;"	f	class:map	access:public	signature:()
clear	/Users/lij/.vim/stl/stl_multimap.h	/^  void clear() { _M_t.clear(); }$/;"	f	class:multimap	access:public	signature:()
clear	/Users/lij/.vim/stl/stl_multiset.h	/^  void clear() { _M_t.clear(); }$/;"	f	class:multiset	access:public	signature:()
clear	/Users/lij/.vim/stl/stl_rope.h	/^        void clear()$/;"	f	class:rope	access:public	signature:()
clear	/Users/lij/.vim/stl/stl_set.h	/^  void clear() { _M_t.clear(); }$/;"	f	class:set	access:public	signature:()
clear	/Users/lij/.vim/stl/stl_slist.h	/^  void clear() { this->_M_erase_after(&this->_M_head, 0); }$/;"	f	class:slist	access:public	signature:()
clear	/Users/lij/.vim/stl/stl_tree.h	/^  void clear() {$/;"	f	class:_Rb_tree	access:public	signature:()
clear	/Users/lij/.vim/stl/stl_vector.h	/^  void clear() { erase(begin(), end()); }$/;"	f	class:vector	access:public	signature:()
clear	/Users/lij/.vim/stl/string	/^  void clear() {$/;"	f	class:basic_string	access:public	signature:()
comp	/Users/lij/.vim/stl/stl_map.h	/^    _Compare comp;$/;"	m	class:map::value_compare	access:protected
comp	/Users/lij/.vim/stl/stl_multimap.h	/^    _Compare comp;$/;"	m	class:multimap::value_compare	access:protected
comp	/Users/lij/.vim/stl/stl_queue.h	/^  _Compare comp;$/;"	m	class:priority_queue	access:protected
compare	/Users/lij/.vim/stl/char_traits.h	/^  static int compare(const _CharT* __s1, const _CharT* __s2, size_t __n) {$/;"	f	class:__char_traits_base	access:public	signature:(const _CharT* __s1, const _CharT* __s2, size_t __n)
compare	/Users/lij/.vim/stl/char_traits.h	/^  static int compare(const char* __s1, const char* __s2, size_t __n) $/;"	f	class:char_traits	access:public	signature:(const char* __s1, const char* __s2, size_t __n)
compare	/Users/lij/.vim/stl/stl_rope.h	/^        int compare(const rope& __y) const {$/;"	f	class:rope	access:public	signature:(const rope& __y) const
compare	/Users/lij/.vim/stl/string	/^  int compare(const _CharT* __s) const {$/;"	f	class:basic_string	access:public	signature:(const _CharT* __s) const
compare	/Users/lij/.vim/stl/string	/^  int compare(const basic_string& __s) const $/;"	f	class:basic_string	access:public	signature:(const basic_string& __s) const
compare	/Users/lij/.vim/stl/string	/^  int compare(size_type __pos1, size_type __n1, const _CharT* __s) const {$/;"	f	class:basic_string	access:public	signature:(size_type __pos1, size_type __n1, const _CharT* __s) const
compare	/Users/lij/.vim/stl/string	/^  int compare(size_type __pos1, size_type __n1, const _CharT* __s,$/;"	f	class:basic_string	access:public	signature:(size_type __pos1, size_type __n1, const _CharT* __s, size_type __n2) const
compare	/Users/lij/.vim/stl/string	/^  int compare(size_type __pos1, size_type __n1,$/;"	f	class:basic_string	access:public	signature:(size_type __pos1, size_type __n1, const basic_string& __s) const
compare	/Users/lij/.vim/stl/string	/^  int compare(size_type __pos1, size_type __n1,$/;"	f	class:basic_string	access:public	signature:(size_type __pos1, size_type __n1, const basic_string& __s, size_type __pos2, size_type __n2) const
compose1	/Users/lij/.vim/stl/stl_function.h	/^compose1(const _Operation1& __fn1, const _Operation2& __fn2)$/;"	f	signature:(const _Operation1& __fn1, const _Operation2& __fn2)
compose2	/Users/lij/.vim/stl/stl_function.h	/^compose2(const _Operation1& __fn1, const _Operation2& __fn2, $/;"	f	signature:(const _Operation1& __fn1, const _Operation2& __fn2, const _Operation3& __fn3)
const_address	/Users/lij/.vim/stl/defalloc.h	/^    const_pointer const_address(const_reference x) { $/;"	f	class:allocator	access:public	signature:(const_reference x)
const_begin	/Users/lij/.vim/stl/stl_rope.h	/^        const_iterator const_begin() const {$/;"	f	class:rope	access:public	signature:() const
const_end	/Users/lij/.vim/stl/stl_rope.h	/^        const_iterator const_end() const {$/;"	f	class:rope	access:public	signature:() const
const_iterator	/Users/lij/.vim/stl/container_concepts.h	/^__STL_TYPEDEF_REQUIREMENT(const_iterator);$/;"	v
const_iterator	/Users/lij/.vim/stl/stl_bvector.h	/^  typedef _Bit_const_iterator          const_iterator;$/;"	t	class:__BVECTOR	access:public
const_iterator	/Users/lij/.vim/stl/stl_bvector.h	/^  typedef _Bit_const_iterator  const_iterator;$/;"	t	struct:_Bit_const_iterator	access:public
const_iterator	/Users/lij/.vim/stl/stl_deque.h	/^  typedef _Deque_iterator<_Tp, const _Tp&, const _Tp*> const_iterator;$/;"	t	struct:_Deque_iterator	access:public
const_iterator	/Users/lij/.vim/stl/stl_deque.h	/^  typedef _Deque_iterator<_Tp,const _Tp&,const _Tp*> const_iterator;$/;"	t	class:_Deque_base	access:public
const_iterator	/Users/lij/.vim/stl/stl_deque.h	/^  typedef typename _Base::const_iterator const_iterator;$/;"	t	class:deque	access:public
const_iterator	/Users/lij/.vim/stl/stl_hash_map.h	/^  typedef typename _Ht::const_iterator const_iterator;$/;"	t	class:hash_map	access:public
const_iterator	/Users/lij/.vim/stl/stl_hash_map.h	/^  typedef typename _Ht::const_iterator const_iterator;$/;"	t	class:hash_multimap	access:public
const_iterator	/Users/lij/.vim/stl/stl_hash_set.h	/^  typedef typename _Ht::const_iterator const_iterator;$/;"	t	class:hash_multiset	access:public
const_iterator	/Users/lij/.vim/stl/stl_hash_set.h	/^  typedef typename _Ht::const_iterator const_iterator;$/;"	t	class:hash_set	access:public
const_iterator	/Users/lij/.vim/stl/stl_hashtable.h	/^          const_iterator;$/;"	t	class:hashtable	access:public
const_iterator	/Users/lij/.vim/stl/stl_hashtable.h	/^          const_iterator;$/;"	t	struct:_Hashtable_const_iterator	access:public
const_iterator	/Users/lij/.vim/stl/stl_hashtable.h	/^          const_iterator;$/;"	t	struct:_Hashtable_iterator	access:public
const_iterator	/Users/lij/.vim/stl/stl_list.h	/^  typedef _List_iterator<_Tp,const _Tp&,const _Tp*> const_iterator;$/;"	t	class:list	access:public
const_iterator	/Users/lij/.vim/stl/stl_list.h	/^  typedef _List_iterator<_Tp,const _Tp&,const _Tp*> const_iterator;$/;"	t	struct:_List_iterator	access:public
const_iterator	/Users/lij/.vim/stl/stl_map.h	/^  typedef typename _Rep_type::const_iterator const_iterator;$/;"	t	class:map	access:public
const_iterator	/Users/lij/.vim/stl/stl_multimap.h	/^  typedef typename _Rep_type::const_iterator const_iterator; $/;"	t	class:multimap	access:public
const_iterator	/Users/lij/.vim/stl/stl_multiset.h	/^  typedef typename _Rep_type::const_iterator const_iterator;$/;"	t	class:multiset	access:public
const_iterator	/Users/lij/.vim/stl/stl_rope.h	/^        typedef _Rope_const_iterator<_CharT,_Alloc> const_iterator;$/;"	t	class:rope	access:public
const_iterator	/Users/lij/.vim/stl/stl_set.h	/^  typedef typename _Rep_type::const_iterator const_iterator;$/;"	t	class:set	access:public
const_iterator	/Users/lij/.vim/stl/stl_slist.h	/^  typedef _Slist_iterator<_Tp, const _Tp&, const _Tp*> const_iterator;$/;"	t	class:slist	access:public
const_iterator	/Users/lij/.vim/stl/stl_slist.h	/^  typedef _Slist_iterator<_Tp, const _Tp&, const _Tp*> const_iterator;$/;"	t	struct:_Slist_iterator	access:public
const_iterator	/Users/lij/.vim/stl/stl_tree.h	/^          const_iterator;$/;"	t	class:_Rb_tree	access:public
const_iterator	/Users/lij/.vim/stl/stl_tree.h	/^    const_iterator;$/;"	t	struct:_Rb_tree_iterator	access:public
const_iterator	/Users/lij/.vim/stl/stl_vector.h	/^  typedef const value_type* const_iterator;$/;"	t	class:vector	access:public
const_iterator	/Users/lij/.vim/stl/string	/^  typedef const value_type*                const_iterator;$/;"	t	class:basic_string	file:	access:public
const_mem_fun1_ref_t	/Users/lij/.vim/stl/stl_function.h	/^  explicit const_mem_fun1_ref_t(void (_Tp::*__pf)(_Arg) const) : _M_f(__pf) {}$/;"	f	class:const_mem_fun1_ref_t	access:public	signature:(void (_Tp::*__pf)(_Arg) const)
const_mem_fun1_ref_t	/Users/lij/.vim/stl/stl_function.h	/^class const_mem_fun1_ref_t : public binary_function<_Tp,_Arg,_Ret> {$/;"	c	inherits:binary_function
const_mem_fun1_ref_t	/Users/lij/.vim/stl/stl_function.h	/^class const_mem_fun1_ref_t<void, _Tp, _Arg>$/;"	c	inherits:binary_function
const_mem_fun1_ref_t::_M_f	/Users/lij/.vim/stl/stl_function.h	/^  _Ret (_Tp::*_M_f)(_Arg) const;$/;"	m	class:const_mem_fun1_ref_t	access:private
const_mem_fun1_ref_t::_M_f	/Users/lij/.vim/stl/stl_function.h	/^  void (_Tp::*_M_f)(_Arg) const;$/;"	m	class:const_mem_fun1_ref_t	access:private
const_mem_fun1_ref_t::_Ret	/Users/lij/.vim/stl/stl_function.h	/^  explicit const_mem_fun1_ref_t(_Ret (_Tp::*__pf)(_Arg) const) : _M_f(__pf) {}$/;"	f	class:const_mem_fun1_ref_t	access:public	signature:(_Tp::*__pf) const
const_mem_fun1_ref_t::const_mem_fun1_ref_t	/Users/lij/.vim/stl/stl_function.h	/^  explicit const_mem_fun1_ref_t(void (_Tp::*__pf)(_Arg) const) : _M_f(__pf) {}$/;"	f	class:const_mem_fun1_ref_t	access:public	signature:(void (_Tp::*__pf)(_Arg) const)
const_mem_fun1_ref_t::operator ()	/Users/lij/.vim/stl/stl_function.h	/^  _Ret operator()(const _Tp& __r, _Arg __x) const { return (__r.*_M_f)(__x); }$/;"	f	class:const_mem_fun1_ref_t	access:public	signature:(const _Tp& __r, _Arg __x) const
const_mem_fun1_ref_t::operator ()	/Users/lij/.vim/stl/stl_function.h	/^  void operator()(const _Tp& __r, _Arg __x) const { (__r.*_M_f)(__x); }$/;"	f	class:const_mem_fun1_ref_t	access:public	signature:(const _Tp& __r, _Arg __x) const
const_mem_fun1_t	/Users/lij/.vim/stl/stl_function.h	/^  explicit const_mem_fun1_t(void (_Tp::*__pf)(_Arg) const) : _M_f(__pf) {}$/;"	f	class:const_mem_fun1_t	access:public	signature:(void (_Tp::*__pf)(_Arg) const)
const_mem_fun1_t	/Users/lij/.vim/stl/stl_function.h	/^class const_mem_fun1_t : public binary_function<const _Tp*,_Arg,_Ret> {$/;"	c	inherits:binary_function
const_mem_fun1_t	/Users/lij/.vim/stl/stl_function.h	/^class const_mem_fun1_t<void, _Tp, _Arg> $/;"	c	inherits:binary_function
const_mem_fun1_t::_M_f	/Users/lij/.vim/stl/stl_function.h	/^  _Ret (_Tp::*_M_f)(_Arg) const;$/;"	m	class:const_mem_fun1_t	access:private
const_mem_fun1_t::_M_f	/Users/lij/.vim/stl/stl_function.h	/^  void (_Tp::*_M_f)(_Arg) const;$/;"	m	class:const_mem_fun1_t	access:private
const_mem_fun1_t::_Ret	/Users/lij/.vim/stl/stl_function.h	/^  explicit const_mem_fun1_t(_Ret (_Tp::*__pf)(_Arg) const) : _M_f(__pf) {}$/;"	f	class:const_mem_fun1_t	access:public	signature:(_Tp::*__pf) const
const_mem_fun1_t::const_mem_fun1_t	/Users/lij/.vim/stl/stl_function.h	/^  explicit const_mem_fun1_t(void (_Tp::*__pf)(_Arg) const) : _M_f(__pf) {}$/;"	f	class:const_mem_fun1_t	access:public	signature:(void (_Tp::*__pf)(_Arg) const)
const_mem_fun1_t::operator ()	/Users/lij/.vim/stl/stl_function.h	/^  _Ret operator()(const _Tp* __p, _Arg __x) const$/;"	f	class:const_mem_fun1_t	access:public	signature:(const _Tp* __p, _Arg __x) const
const_mem_fun1_t::operator ()	/Users/lij/.vim/stl/stl_function.h	/^  void operator()(const _Tp* __p, _Arg __x) const { (__p->*_M_f)(__x); }$/;"	f	class:const_mem_fun1_t	access:public	signature:(const _Tp* __p, _Arg __x) const
const_mem_fun_ref_t	/Users/lij/.vim/stl/stl_function.h	/^  explicit const_mem_fun_ref_t(void (_Tp::*__pf)() const) : _M_f(__pf) {}$/;"	f	class:const_mem_fun_ref_t	access:public	signature:(void (_Tp::*__pf)() const)
const_mem_fun_ref_t	/Users/lij/.vim/stl/stl_function.h	/^class const_mem_fun_ref_t : public unary_function<_Tp,_Ret> {$/;"	c	inherits:unary_function
const_mem_fun_ref_t	/Users/lij/.vim/stl/stl_function.h	/^class const_mem_fun_ref_t<void, _Tp> : public unary_function<_Tp,void> {$/;"	c	inherits:unary_function
const_mem_fun_ref_t::_M_f	/Users/lij/.vim/stl/stl_function.h	/^  _Ret (_Tp::*_M_f)() const;$/;"	m	class:const_mem_fun_ref_t	access:private
const_mem_fun_ref_t::_M_f	/Users/lij/.vim/stl/stl_function.h	/^  void (_Tp::*_M_f)() const;$/;"	m	class:const_mem_fun_ref_t	access:private
const_mem_fun_ref_t::_Ret	/Users/lij/.vim/stl/stl_function.h	/^  explicit const_mem_fun_ref_t(_Ret (_Tp::*__pf)() const) : _M_f(__pf) {}$/;"	f	class:const_mem_fun_ref_t	access:public	signature:(_Tp::*__pf) const
const_mem_fun_ref_t::const_mem_fun_ref_t	/Users/lij/.vim/stl/stl_function.h	/^  explicit const_mem_fun_ref_t(void (_Tp::*__pf)() const) : _M_f(__pf) {}$/;"	f	class:const_mem_fun_ref_t	access:public	signature:(void (_Tp::*__pf)() const)
const_mem_fun_ref_t::operator ()	/Users/lij/.vim/stl/stl_function.h	/^  _Ret operator()(const _Tp& __r) const { return (__r.*_M_f)(); }$/;"	f	class:const_mem_fun_ref_t	access:public	signature:(const _Tp& __r) const
const_mem_fun_ref_t::operator ()	/Users/lij/.vim/stl/stl_function.h	/^  void operator()(const _Tp& __r) const { (__r.*_M_f)(); }$/;"	f	class:const_mem_fun_ref_t	access:public	signature:(const _Tp& __r) const
const_mem_fun_t	/Users/lij/.vim/stl/stl_function.h	/^  explicit const_mem_fun_t(void (_Tp::*__pf)() const) : _M_f(__pf) {}$/;"	f	class:const_mem_fun_t	access:public	signature:(void (_Tp::*__pf)() const)
const_mem_fun_t	/Users/lij/.vim/stl/stl_function.h	/^class const_mem_fun_t : public unary_function<const _Tp*,_Ret> {$/;"	c	inherits:unary_function
const_mem_fun_t	/Users/lij/.vim/stl/stl_function.h	/^class const_mem_fun_t<void, _Tp> : public unary_function<const _Tp*,void> {$/;"	c	inherits:unary_function
const_mem_fun_t::_M_f	/Users/lij/.vim/stl/stl_function.h	/^  _Ret (_Tp::*_M_f)() const;$/;"	m	class:const_mem_fun_t	access:private
const_mem_fun_t::_M_f	/Users/lij/.vim/stl/stl_function.h	/^  void (_Tp::*_M_f)() const;$/;"	m	class:const_mem_fun_t	access:private
const_mem_fun_t::_Ret	/Users/lij/.vim/stl/stl_function.h	/^  explicit const_mem_fun_t(_Ret (_Tp::*__pf)() const) : _M_f(__pf) {}$/;"	f	class:const_mem_fun_t	access:public	signature:(_Tp::*__pf) const
const_mem_fun_t::const_mem_fun_t	/Users/lij/.vim/stl/stl_function.h	/^  explicit const_mem_fun_t(void (_Tp::*__pf)() const) : _M_f(__pf) {}$/;"	f	class:const_mem_fun_t	access:public	signature:(void (_Tp::*__pf)() const)
const_mem_fun_t::operator ()	/Users/lij/.vim/stl/stl_function.h	/^  _Ret operator()(const _Tp* __p) const { return (__p->*_M_f)(); }$/;"	f	class:const_mem_fun_t	access:public	signature:(const _Tp* __p) const
const_mem_fun_t::operator ()	/Users/lij/.vim/stl/stl_function.h	/^  void operator()(const _Tp* __p) const { (__p->*_M_f)(); }$/;"	f	class:const_mem_fun_t	access:public	signature:(const _Tp* __p) const
const_pointer	/Users/lij/.vim/stl/concept_checks.h	/^__STL_TYPEDEF_REQUIREMENT(const_pointer);$/;"	v
const_pointer	/Users/lij/.vim/stl/defalloc.h	/^    typedef const T* const_pointer;$/;"	t	class:allocator	access:public
const_pointer	/Users/lij/.vim/stl/pthread_alloc	/^  typedef const _Tp* const_pointer;$/;"	t	class:pthread_allocator	file:	access:public
const_pointer	/Users/lij/.vim/stl/pthread_alloc	/^  typedef const void* const_pointer;$/;"	t	class:pthread_allocator	file:	access:public
const_pointer	/Users/lij/.vim/stl/stl_alloc.h	/^  typedef const _Tp* const_pointer;$/;"	t	class:allocator	access:public
const_pointer	/Users/lij/.vim/stl/stl_alloc.h	/^  typedef const _Tp* const_pointer;$/;"	t	struct:__allocator	access:public
const_pointer	/Users/lij/.vim/stl/stl_alloc.h	/^  typedef const void* const_pointer;$/;"	t	class:allocator	access:public
const_pointer	/Users/lij/.vim/stl/stl_bvector.h	/^  typedef const bool* const_pointer;$/;"	t	class:__BVECTOR	access:public
const_pointer	/Users/lij/.vim/stl/stl_deque.h	/^  typedef const value_type* const_pointer;$/;"	t	class:deque	access:public
const_pointer	/Users/lij/.vim/stl/stl_hash_map.h	/^  typedef typename _Ht::const_pointer const_pointer;$/;"	t	class:hash_map	access:public
const_pointer	/Users/lij/.vim/stl/stl_hash_map.h	/^  typedef typename _Ht::const_pointer const_pointer;$/;"	t	class:hash_multimap	access:public
const_pointer	/Users/lij/.vim/stl/stl_hash_set.h	/^  typedef typename _Ht::const_pointer const_pointer;$/;"	t	class:hash_multiset	access:public
const_pointer	/Users/lij/.vim/stl/stl_hash_set.h	/^  typedef typename _Ht::const_pointer const_pointer;$/;"	t	class:hash_set	access:public
const_pointer	/Users/lij/.vim/stl/stl_hashtable.h	/^  typedef const value_type* const_pointer;$/;"	t	class:hashtable	access:public
const_pointer	/Users/lij/.vim/stl/stl_list.h	/^  typedef const value_type* const_pointer;$/;"	t	class:list	access:public
const_pointer	/Users/lij/.vim/stl/stl_map.h	/^  typedef typename _Rep_type::const_pointer const_pointer;$/;"	t	class:map	access:public
const_pointer	/Users/lij/.vim/stl/stl_multimap.h	/^  typedef typename _Rep_type::const_pointer const_pointer;$/;"	t	class:multimap	access:public
const_pointer	/Users/lij/.vim/stl/stl_multiset.h	/^  typedef typename _Rep_type::const_pointer const_pointer;$/;"	t	class:multiset	access:public
const_pointer	/Users/lij/.vim/stl/stl_rope.h	/^        typedef const _CharT* const_pointer;$/;"	t	class:rope	access:public
const_pointer	/Users/lij/.vim/stl/stl_set.h	/^  typedef typename _Rep_type::const_pointer const_pointer;$/;"	t	class:set	access:public
const_pointer	/Users/lij/.vim/stl/stl_slist.h	/^  typedef const value_type* const_pointer;$/;"	t	class:slist	access:public
const_pointer	/Users/lij/.vim/stl/stl_tree.h	/^  typedef const value_type* const_pointer;$/;"	t	class:_Rb_tree	access:public
const_pointer	/Users/lij/.vim/stl/stl_vector.h	/^  typedef const value_type* const_pointer;$/;"	t	class:vector	access:public
const_pointer	/Users/lij/.vim/stl/string	/^  typedef const value_type* const_pointer;$/;"	t	class:basic_string	file:	access:public
const_rbegin	/Users/lij/.vim/stl/stl_rope.h	/^        const_reverse_iterator const_rbegin() const {$/;"	f	class:rope	access:public	signature:() const
const_reference	/Users/lij/.vim/stl/concept_checks.h	/^__STL_TYPEDEF_REQUIREMENT(const_reference);$/;"	v
const_reference	/Users/lij/.vim/stl/defalloc.h	/^    typedef const T& const_reference;$/;"	t	class:allocator	access:public
const_reference	/Users/lij/.vim/stl/pthread_alloc	/^  typedef const _Tp& const_reference;$/;"	t	class:pthread_allocator	file:	access:public
const_reference	/Users/lij/.vim/stl/stl_alloc.h	/^  typedef const _Tp& const_reference;$/;"	t	class:allocator	access:public
const_reference	/Users/lij/.vim/stl/stl_alloc.h	/^  typedef const _Tp& const_reference;$/;"	t	struct:__allocator	access:public
const_reference	/Users/lij/.vim/stl/stl_bvector.h	/^  typedef bool                 const_reference;$/;"	t	struct:_Bit_const_iterator	access:public
const_reference	/Users/lij/.vim/stl/stl_bvector.h	/^  typedef bool const_reference;$/;"	t	class:__BVECTOR	access:public
const_reference	/Users/lij/.vim/stl/stl_deque.h	/^  typedef const value_type& const_reference;$/;"	t	class:deque	access:public
const_reference	/Users/lij/.vim/stl/stl_hash_map.h	/^  typedef typename _Ht::const_reference const_reference;$/;"	t	class:hash_map	access:public
const_reference	/Users/lij/.vim/stl/stl_hash_map.h	/^  typedef typename _Ht::const_reference const_reference;$/;"	t	class:hash_multimap	access:public
const_reference	/Users/lij/.vim/stl/stl_hash_set.h	/^  typedef typename _Ht::const_reference const_reference;$/;"	t	class:hash_multiset	access:public
const_reference	/Users/lij/.vim/stl/stl_hash_set.h	/^  typedef typename _Ht::const_reference const_reference;$/;"	t	class:hash_set	access:public
const_reference	/Users/lij/.vim/stl/stl_hashtable.h	/^  typedef const value_type& const_reference;$/;"	t	class:hashtable	access:public
const_reference	/Users/lij/.vim/stl/stl_list.h	/^  typedef const value_type& const_reference;$/;"	t	class:list	access:public
const_reference	/Users/lij/.vim/stl/stl_map.h	/^  typedef typename _Rep_type::const_reference const_reference;$/;"	t	class:map	access:public
const_reference	/Users/lij/.vim/stl/stl_multimap.h	/^  typedef typename _Rep_type::const_reference const_reference;$/;"	t	class:multimap	access:public
const_reference	/Users/lij/.vim/stl/stl_multiset.h	/^  typedef typename _Rep_type::const_reference const_reference;$/;"	t	class:multiset	access:public
const_reference	/Users/lij/.vim/stl/stl_queue.h	/^  typedef typename _Sequence::const_reference const_reference;$/;"	t	class:priority_queue	access:public
const_reference	/Users/lij/.vim/stl/stl_queue.h	/^  typedef typename _Sequence::const_reference const_reference;$/;"	t	class:queue	access:public
const_reference	/Users/lij/.vim/stl/stl_rope.h	/^        typedef _CharT const_reference;$/;"	t	class:rope	access:public
const_reference	/Users/lij/.vim/stl/stl_set.h	/^  typedef typename _Rep_type::const_reference const_reference;$/;"	t	class:set	access:public
const_reference	/Users/lij/.vim/stl/stl_slist.h	/^  typedef const value_type& const_reference;$/;"	t	class:slist	access:public
const_reference	/Users/lij/.vim/stl/stl_stack.h	/^  typedef typename _Sequence::const_reference const_reference;$/;"	t	class:stack	access:public
const_reference	/Users/lij/.vim/stl/stl_tree.h	/^  typedef const value_type& const_reference;$/;"	t	class:_Rb_tree	access:public
const_reference	/Users/lij/.vim/stl/stl_vector.h	/^  typedef const value_type& const_reference;$/;"	t	class:vector	access:public
const_reference	/Users/lij/.vim/stl/string	/^  typedef const value_type& const_reference;$/;"	t	class:basic_string	file:	access:public
const_rend	/Users/lij/.vim/stl/stl_rope.h	/^        const_reverse_iterator const_rend() const {$/;"	f	class:rope	access:public	signature:() const
const_reverse_iterator	/Users/lij/.vim/stl/container_concepts.h	/^__STL_TYPEDEF_REQUIREMENT(const_reverse_iterator);$/;"	v
const_reverse_iterator	/Users/lij/.vim/stl/stl_bvector.h	/^                           difference_type> const_reverse_iterator;$/;"	t	class:__BVECTOR	access:public
const_reverse_iterator	/Users/lij/.vim/stl/stl_bvector.h	/^  typedef reverse_iterator<const_iterator> const_reverse_iterator;$/;"	t	class:__BVECTOR	access:public
const_reverse_iterator	/Users/lij/.vim/stl/stl_deque.h	/^          const_reverse_iterator;$/;"	t	class:deque	access:public
const_reverse_iterator	/Users/lij/.vim/stl/stl_deque.h	/^  typedef reverse_iterator<const_iterator> const_reverse_iterator;$/;"	t	class:deque	access:public
const_reverse_iterator	/Users/lij/.vim/stl/stl_list.h	/^          const_reverse_iterator;$/;"	t	class:list	access:public
const_reverse_iterator	/Users/lij/.vim/stl/stl_list.h	/^  typedef reverse_iterator<const_iterator> const_reverse_iterator;$/;"	t	class:list	access:public
const_reverse_iterator	/Users/lij/.vim/stl/stl_map.h	/^  typedef typename _Rep_type::const_reverse_iterator const_reverse_iterator;$/;"	t	class:map	access:public
const_reverse_iterator	/Users/lij/.vim/stl/stl_multimap.h	/^  typedef typename _Rep_type::const_reverse_iterator const_reverse_iterator;$/;"	t	class:multimap	access:public
const_reverse_iterator	/Users/lij/.vim/stl/stl_multiset.h	/^  typedef typename _Rep_type::const_reverse_iterator const_reverse_iterator;$/;"	t	class:multiset	access:public
const_reverse_iterator	/Users/lij/.vim/stl/stl_rope.h	/^                                 difference_type>  const_reverse_iterator;$/;"	t	class:rope	access:public
const_reverse_iterator	/Users/lij/.vim/stl/stl_rope.h	/^        typedef reverse_iterator<const_iterator> const_reverse_iterator;$/;"	t	class:rope	access:public
const_reverse_iterator	/Users/lij/.vim/stl/stl_set.h	/^  typedef typename _Rep_type::const_reverse_iterator const_reverse_iterator;$/;"	t	class:set	access:public
const_reverse_iterator	/Users/lij/.vim/stl/stl_tree.h	/^          const_reverse_iterator;$/;"	t	class:_Rb_tree	access:public
const_reverse_iterator	/Users/lij/.vim/stl/stl_tree.h	/^  typedef reverse_iterator<const_iterator> const_reverse_iterator;$/;"	t	class:_Rb_tree	access:public
const_reverse_iterator	/Users/lij/.vim/stl/stl_vector.h	/^                           difference_type>  const_reverse_iterator;$/;"	t	class:vector	access:public
const_reverse_iterator	/Users/lij/.vim/stl/stl_vector.h	/^  typedef reverse_iterator<const_iterator> const_reverse_iterator;$/;"	t	class:vector	access:public
const_reverse_iterator	/Users/lij/.vim/stl/string	/^          const_reverse_iterator;$/;"	t	class:basic_string	file:	access:public
const_reverse_iterator	/Users/lij/.vim/stl/string	/^  typedef reverse_iterator<const_iterator> const_reverse_iterator;$/;"	t	class:basic_string	file:	access:public
constant0	/Users/lij/.vim/stl/stl_function.h	/^inline constant_void_fun<_Result> constant0(const _Result& __val)$/;"	f	signature:(const _Result& __val)
constant1	/Users/lij/.vim/stl/stl_function.h	/^inline constant_unary_fun<_Result,_Result> constant1(const _Result& __val)$/;"	f	signature:(const _Result& __val)
constant2	/Users/lij/.vim/stl/stl_function.h	/^constant2(const _Result& __val)$/;"	f	signature:(const _Result& __val)
constant_binary_fun	/Users/lij/.vim/stl/stl_function.h	/^  constant_binary_fun(const _Result& __v)$/;"	f	struct:constant_binary_fun	access:public	signature:(const _Result& __v)
constant_binary_fun	/Users/lij/.vim/stl/stl_function.h	/^struct constant_binary_fun$/;"	s	inherits:_Constant_binary_fun
constant_binary_fun::constant_binary_fun	/Users/lij/.vim/stl/stl_function.h	/^  constant_binary_fun(const _Result& __v)$/;"	f	struct:constant_binary_fun	access:public	signature:(const _Result& __v)
constant_unary_fun	/Users/lij/.vim/stl/stl_function.h	/^  constant_unary_fun(const _Result& __v)$/;"	f	struct:constant_unary_fun	access:public	signature:(const _Result& __v)
constant_unary_fun	/Users/lij/.vim/stl/stl_function.h	/^struct constant_unary_fun : public _Constant_unary_fun<_Result, _Argument>$/;"	s	inherits:_Constant_unary_fun
constant_unary_fun::constant_unary_fun	/Users/lij/.vim/stl/stl_function.h	/^  constant_unary_fun(const _Result& __v)$/;"	f	struct:constant_unary_fun	access:public	signature:(const _Result& __v)
constant_void_fun	/Users/lij/.vim/stl/stl_function.h	/^  constant_void_fun(const _Result& __v) : _Constant_void_fun<_Result>(__v) {}$/;"	f	struct:constant_void_fun	access:public	signature:(const _Result& __v)
constant_void_fun	/Users/lij/.vim/stl/stl_function.h	/^struct constant_void_fun : public _Constant_void_fun<_Result> {$/;"	s	inherits:_Constant_void_fun
constant_void_fun::constant_void_fun	/Users/lij/.vim/stl/stl_function.h	/^  constant_void_fun(const _Result& __v) : _Constant_void_fun<_Result>(__v) {}$/;"	f	struct:constant_void_fun	access:public	signature:(const _Result& __v)
construct	/Users/lij/.vim/stl/pthread_alloc	/^  void construct(pointer __p, const _Tp& __val) { new(__p) _Tp(__val); }$/;"	f	class:pthread_allocator	access:public	signature:(pointer __p, const _Tp& __val)
construct	/Users/lij/.vim/stl/stl_alloc.h	/^  void construct(pointer __p, const _Tp& __val) { new(__p) _Tp(__val); }$/;"	f	class:allocator	access:public	signature:(pointer __p, const _Tp& __val)
construct	/Users/lij/.vim/stl/stl_alloc.h	/^  void construct(pointer __p, const _Tp& __val) { new(__p) _Tp(__val); }$/;"	f	signature:(pointer __p, const _Tp& __val)
construct	/Users/lij/.vim/stl/stl_construct.h	/^inline void construct(_T1* __p) {$/;"	f	signature:(_T1* __p)
construct	/Users/lij/.vim/stl/stl_construct.h	/^inline void construct(_T1* __p, const _T2& __value) {$/;"	f	signature:(_T1* __p, const _T2& __value)
container	/Users/lij/.vim/stl/stl_hash_map.h	/^  _Container* container;$/;"	m	class:insert_iterator	access:protected
container	/Users/lij/.vim/stl/stl_hash_set.h	/^  _Container* container;$/;"	m	class:insert_iterator	access:protected
container	/Users/lij/.vim/stl/stl_iterator.h	/^  _Container* container;$/;"	m	class:back_insert_iterator	access:protected
container	/Users/lij/.vim/stl/stl_iterator.h	/^  _Container* container;$/;"	m	class:front_insert_iterator	access:protected
container	/Users/lij/.vim/stl/stl_iterator.h	/^  _Container* container;$/;"	m	class:insert_iterator	access:protected
container	/Users/lij/.vim/stl/stl_rope.h	/^    rope<_CharT,_Alloc>& container() { return *_M_root_rope; }$/;"	f	class:_Rope_iterator	access:public	signature:()
container	/Users/lij/.vim/stl/stl_slist.h	/^  _Container* container;$/;"	m	class:insert_iterator	access:protected
container_type	/Users/lij/.vim/stl/stl_hash_map.h	/^  typedef _Container          container_type;$/;"	t	class:insert_iterator	access:public
container_type	/Users/lij/.vim/stl/stl_hash_set.h	/^  typedef _Container          container_type;$/;"	t	class:insert_iterator	access:public
container_type	/Users/lij/.vim/stl/stl_iterator.h	/^  typedef _Container          container_type;$/;"	t	class:back_insert_iterator	access:public
container_type	/Users/lij/.vim/stl/stl_iterator.h	/^  typedef _Container          container_type;$/;"	t	class:front_insert_iterator	access:public
container_type	/Users/lij/.vim/stl/stl_iterator.h	/^  typedef _Container          container_type;$/;"	t	class:insert_iterator	access:public
container_type	/Users/lij/.vim/stl/stl_queue.h	/^  typedef          _Sequence                  container_type;$/;"	t	class:priority_queue	access:public
container_type	/Users/lij/.vim/stl/stl_queue.h	/^  typedef          _Sequence                  container_type;$/;"	t	class:queue	access:public
container_type	/Users/lij/.vim/stl/stl_slist.h	/^  typedef _Container          container_type;$/;"	t	class:insert_iterator	access:public
container_type	/Users/lij/.vim/stl/stl_stack.h	/^  typedef          _Sequence                  container_type;$/;"	t	class:stack	access:public
copy	/Users/lij/.vim/stl/char_traits.h	/^  static _CharT* copy(_CharT* __s1, const _CharT* __s2, size_t __n) {$/;"	f	class:__char_traits_base	access:public	signature:(_CharT* __s1, const _CharT* __s2, size_t __n)
copy	/Users/lij/.vim/stl/stl_algobase.h	/^  static _BidirectionalIter2 copy(_BidirectionalIter1 __first, $/;"	f	struct:__copy_backward_dispatch	access:public	signature:(_BidirectionalIter1 __first, _BidirectionalIter1 __last, _BidirectionalIter2 __result)
copy	/Users/lij/.vim/stl/stl_algobase.h	/^  static _OutputIter copy(_InputIter __first, _InputIter __last,$/;"	f	struct:__copy_dispatch	access:public	signature:(_InputIter __first, _InputIter __last, _OutputIter __result)
copy	/Users/lij/.vim/stl/stl_algobase.h	/^  static _Tp* copy(const _Tp* __first, const _Tp* __last, _Tp* __result) {$/;"	f	struct:__copy_backward_dispatch	access:public	signature:(const _Tp* __first, const _Tp* __last, _Tp* __result)
copy	/Users/lij/.vim/stl/stl_algobase.h	/^  static _Tp* copy(const _Tp* __first, const _Tp* __last, _Tp* __result) {$/;"	f	struct:__copy_dispatch	access:public	signature:(const _Tp* __first, const _Tp* __last, _Tp* __result)
copy	/Users/lij/.vim/stl/stl_algobase.h	/^inline _OutputIter copy(_InputIter __first, _InputIter __last,$/;"	f	signature:(_InputIter __first, _InputIter __last, _OutputIter __result)
copy	/Users/lij/.vim/stl/stl_rope.h	/^              size_type copy(_CharT* __buffer, size_type __n, $/;"	f	class:rope	access:public	signature:(_CharT* __buffer, size_type __n, size_type __pos = 0) const
copy	/Users/lij/.vim/stl/stl_rope.h	/^        size_type copy(size_type __pos, size_type __n, _CharT* __buffer) const $/;"	f	class:rope	access:public	signature:(size_type __pos, size_type __n, _CharT* __buffer) const
copy	/Users/lij/.vim/stl/stl_rope.h	/^        void copy(_CharT* __buffer) const {$/;"	f	class:rope	access:public	signature:(_CharT* __buffer) const
copy	/Users/lij/.vim/stl/string	/^  size_type copy(_CharT* __s, size_type __n, size_type __pos = 0) const {$/;"	f	class:basic_string	access:public	signature:(_CharT* __s, size_type __n, size_type __pos = 0) const
copy_backward	/Users/lij/.vim/stl/stl_algobase.h	/^inline _BI2 copy_backward(_BI1 __first, _BI1 __last, _BI2 __result) {$/;"	f	signature:(_BI1 __first, _BI1 __last, _BI2 __result)
copy_n	/Users/lij/.vim/stl/stl_algobase.h	/^copy_n(_InputIter __first, _Size __count, _OutputIter __result) {$/;"	f	signature:(_InputIter __first, _Size __count, _OutputIter __result)
cos	/Users/lij/.vim/stl/valarray	/^inline valarray<_Tp> cos(const valarray<_Tp>& __x) {$/;"	f	signature:(const valarray<_Tp>& __x)
cosh	/Users/lij/.vim/stl/valarray	/^inline valarray<_Tp> cosh(const valarray<_Tp>& __x) {$/;"	f	signature:(const valarray<_Tp>& __x)
count	/Users/lij/.vim/stl/bitset	/^  size_t count() const { return this->_M_do_count(); }$/;"	f	class:bitset	access:public	signature:() const
count	/Users/lij/.vim/stl/stl_algo.h	/^count(_InputIter __first, _InputIter __last, const _Tp& __value) {$/;"	f	signature:(_InputIter __first, _InputIter __last, const _Tp& __value)
count	/Users/lij/.vim/stl/stl_algo.h	/^void count(_InputIter __first, _InputIter __last, const _Tp& __value,$/;"	f	signature:(_InputIter __first, _InputIter __last, const _Tp& __value, _Size& __n)
count	/Users/lij/.vim/stl/stl_hash_map.h	/^  size_type count(const key_type& __key) const { return _M_ht.count(__key); }$/;"	f	class:hash_map	access:public	signature:(const key_type& __key) const
count	/Users/lij/.vim/stl/stl_hash_map.h	/^  size_type count(const key_type& __key) const { return _M_ht.count(__key); }$/;"	f	class:hash_multimap	access:public	signature:(const key_type& __key) const
count	/Users/lij/.vim/stl/stl_hash_set.h	/^  size_type count(const key_type& __key) const { return _M_ht.count(__key); }$/;"	f	class:hash_multiset	access:public	signature:(const key_type& __key) const
count	/Users/lij/.vim/stl/stl_hash_set.h	/^  size_type count(const key_type& __key) const { return _M_ht.count(__key); }$/;"	f	class:hash_set	access:public	signature:(const key_type& __key) const
count	/Users/lij/.vim/stl/stl_hashtable.h	/^  size_type count(const key_type& __key) const$/;"	f	class:hashtable	access:public	signature:(const key_type& __key) const
count	/Users/lij/.vim/stl/stl_map.h	/^  size_type count(const key_type& __x) const {$/;"	f	class:map	access:public	signature:(const key_type& __x) const
count	/Users/lij/.vim/stl/stl_multimap.h	/^  size_type count(const key_type& __x) const { return _M_t.count(__x); }$/;"	f	class:multimap	access:public	signature:(const key_type& __x) const
count	/Users/lij/.vim/stl/stl_multiset.h	/^  size_type count(const key_type& __x) const { return _M_t.count(__x); }$/;"	f	class:multiset	access:public	signature:(const key_type& __x) const
count	/Users/lij/.vim/stl/stl_set.h	/^  size_type count(const key_type& __x) const {$/;"	f	class:set	access:public	signature:(const key_type& __x) const
count	/Users/lij/.vim/stl/stl_tree.h	/^  ::count(const _Key& __k) const$/;"	f	class:_Rb_tree	signature:(const _Key& __k) const
count	/Users/lij/.vim/stl/stl_tree.h	/^  size_type count(const key_type& __x) const;$/;"	p	class:_Rb_tree	access:public	signature:(const key_type& __x) const
count_if	/Users/lij/.vim/stl/stl_algo.h	/^count_if(_InputIter __first, _InputIter __last, _Predicate __pred) {$/;"	f	signature:(_InputIter __first, _InputIter __last, _Predicate __pred)
count_if	/Users/lij/.vim/stl/stl_algo.h	/^void count_if(_InputIter __first, _InputIter __last, _Predicate __pred,$/;"	f	signature:(_InputIter __first, _InputIter __last, _Predicate __pred, _Size& __n)
crope	/Users/lij/.vim/stl/stl_rope.h	/^typedef rope<char> crope;$/;"	t
cshift	/Users/lij/.vim/stl/valarray	/^  valarray cshift(int __n) const;$/;"	p	class:valarray	file:	access:public	signature:(int __n) const
cshift	/Users/lij/.vim/stl/valarray	/^valarray<_Tp> valarray<_Tp>::cshift(int __m) const$/;"	f	class:valarray	signature:(int __m) const
current	/Users/lij/.vim/stl/stl_iterator.h	/^  _BidirectionalIterator current;$/;"	m	class:reverse_bidirectional_iterator	access:protected
current	/Users/lij/.vim/stl/stl_iterator.h	/^  _Iterator current;$/;"	m	class:reverse_iterator	access:protected
current	/Users/lij/.vim/stl/stl_iterator.h	/^  _RandomAccessIterator current;$/;"	m	class:reverse_iterator	access:protected
data	/Users/lij/.vim/stl/string	/^  const _CharT* data()  const { return _M_start; }$/;"	f	class:basic_string	access:public	signature:() const
data_type	/Users/lij/.vim/stl/stl_hash_map.h	/^  typedef _Tp data_type;$/;"	t	class:hash_map	access:public
data_type	/Users/lij/.vim/stl/stl_hash_map.h	/^  typedef _Tp data_type;$/;"	t	class:hash_multimap	access:public
data_type	/Users/lij/.vim/stl/stl_map.h	/^  typedef _Tp                   data_type;$/;"	t	class:map	access:public
data_type	/Users/lij/.vim/stl/stl_multimap.h	/^  typedef _Tp                   data_type;$/;"	t	class:multimap	access:public
deallocate	/Users/lij/.vim/stl/defalloc.h	/^    void deallocate(pointer p) { ::deallocate(p); }$/;"	f	class:allocator	access:public	signature:(pointer p)
deallocate	/Users/lij/.vim/stl/defalloc.h	/^inline void deallocate(T* buffer) {$/;"	f	signature:(T* buffer)
deallocate	/Users/lij/.vim/stl/pthread_alloc	/^  static void deallocate(void *__p, size_t __n)$/;"	f	class:_Pthread_alloc_template	access:public	signature:(void *__p, size_t __n)
deallocate	/Users/lij/.vim/stl/pthread_alloc	/^  void deallocate(pointer __p, size_type __n)$/;"	f	class:pthread_allocator	access:public	signature:(pointer __p, size_type __n)
deallocate	/Users/lij/.vim/stl/stl_alloc.h	/^    static void deallocate(_Tp* __p)$/;"	f	class:simple_alloc	access:public	signature:(_Tp* __p)
deallocate	/Users/lij/.vim/stl/stl_alloc.h	/^    static void deallocate(_Tp* __p, size_t __n)$/;"	f	class:simple_alloc	access:public	signature:(_Tp* __p, size_t __n)
deallocate	/Users/lij/.vim/stl/stl_alloc.h	/^  static void deallocate(void* __p, size_t \/* __n *\/)$/;"	f	class:__malloc_alloc_template	access:public	signature:(void* __p, size_t )
deallocate	/Users/lij/.vim/stl/stl_alloc.h	/^  static void deallocate(void* __p, size_t __n)$/;"	f	class:__default_alloc_template	access:public	signature:(void* __p, size_t __n)
deallocate	/Users/lij/.vim/stl/stl_alloc.h	/^  static void deallocate(void* __p, size_t __n)$/;"	f	class:debug_alloc	access:public	signature:(void* __p, size_t __n)
deallocate	/Users/lij/.vim/stl/stl_alloc.h	/^  void deallocate(pointer __p, size_type __n)$/;"	f	class:allocator	access:public	signature:(pointer __p, size_type __n)
deallocate	/Users/lij/.vim/stl/stl_alloc.h	/^  void deallocate(pointer __p, size_type __n)$/;"	f	signature:(pointer __p, size_type __n)
debug_alloc	/Users/lij/.vim/stl/stl_alloc.h	/^class debug_alloc {$/;"	c
debug_alloc::_S_extra	/Users/lij/.vim/stl/stl_alloc.h	/^  enum {_S_extra = 8};  \/\/ Size of space used to store size.  Note$/;"	e	enum:debug_alloc::__anon11
debug_alloc::allocate	/Users/lij/.vim/stl/stl_alloc.h	/^  static void* allocate(size_t __n)$/;"	f	class:debug_alloc	access:public	signature:(size_t __n)
debug_alloc::deallocate	/Users/lij/.vim/stl/stl_alloc.h	/^  static void deallocate(void* __p, size_t __n)$/;"	f	class:debug_alloc	access:public	signature:(void* __p, size_t __n)
debug_alloc::reallocate	/Users/lij/.vim/stl/stl_alloc.h	/^  static void* reallocate(void* __p, size_t __old_sz, size_t __new_sz)$/;"	f	class:debug_alloc	access:public	signature:(void* __p, size_t __old_sz, size_t __new_sz)
delete_c_str	/Users/lij/.vim/stl/stl_rope.h	/^        void delete_c_str () {$/;"	f	class:rope	access:public	signature:()
denorm_absent	/Users/lij/.vim/stl/limits	/^  denorm_absent        =  0,$/;"	e	enum:float_denorm_style	file:
denorm_indeterminate	/Users/lij/.vim/stl/limits	/^  denorm_indeterminate = -1,$/;"	e	enum:float_denorm_style	file:
denorm_present	/Users/lij/.vim/stl/limits	/^  denorm_present       =  1$/;"	e	enum:float_denorm_style	file:
deque	/Users/lij/.vim/stl/stl_deque.h	/^  deque(_InputIterator __first, _InputIterator __last,$/;"	f	class:deque	access:public	signature:(_InputIterator __first, _InputIterator __last, const allocator_type& __a = allocator_type())
deque	/Users/lij/.vim/stl/stl_deque.h	/^  deque(const deque& __x) : _Base(__x.get_allocator(), __x.size()) $/;"	f	class:deque	access:public	signature:(const deque& __x)
deque	/Users/lij/.vim/stl/stl_deque.h	/^  deque(const value_type* __first, const value_type* __last,$/;"	f	class:deque	access:public	signature:(const value_type* __first, const value_type* __last, const allocator_type& __a = allocator_type())
deque	/Users/lij/.vim/stl/stl_deque.h	/^  deque(const_iterator __first, const_iterator __last,$/;"	f	class:deque	access:public	signature:(const_iterator __first, const_iterator __last, const allocator_type& __a = allocator_type())
deque	/Users/lij/.vim/stl/stl_deque.h	/^  deque(size_type __n, const value_type& __value,$/;"	f	class:deque	access:public	signature:(size_type __n, const value_type& __value, const allocator_type& __a = allocator_type())
deque	/Users/lij/.vim/stl/stl_deque.h	/^  explicit deque(const allocator_type& __a = allocator_type()) $/;"	f	class:deque	access:public	signature:(const allocator_type& __a = allocator_type())
deque	/Users/lij/.vim/stl/stl_deque.h	/^  explicit deque(size_type __n) : _Base(allocator_type(), __n)$/;"	f	class:deque	access:public	signature:(size_type __n)
deque	/Users/lij/.vim/stl/stl_deque.h	/^class deque : protected _Deque_base<_Tp, _Alloc> {$/;"	c	inherits:_Deque_base
deque::_Base	/Users/lij/.vim/stl/stl_deque.h	/^  typedef _Deque_base<_Tp, _Alloc> _Base;$/;"	t	class:deque	access:private
deque::_M_assign_aux	/Users/lij/.vim/stl/stl_deque.h	/^  ::_M_assign_aux(_InputIter __first, _InputIter __last, input_iterator_tag)$/;"	f	class:deque	signature:(_InputIter __first, _InputIter __last, input_iterator_tag)
deque::_M_assign_aux	/Users/lij/.vim/stl/stl_deque.h	/^  void _M_assign_aux(_ForwardIterator __first, _ForwardIterator __last,$/;"	f	class:deque	access:private	signature:(_ForwardIterator __first, _ForwardIterator __last, forward_iterator_tag)
deque::_M_assign_aux	/Users/lij/.vim/stl/stl_deque.h	/^  void _M_assign_aux(_InputIterator __first, _InputIterator __last,$/;"	p	class:deque	access:private	signature:(_InputIterator __first, _InputIterator __last, input_iterator_tag)
deque::_M_assign_dispatch	/Users/lij/.vim/stl/stl_deque.h	/^  void _M_assign_dispatch(_InputIterator __first, _InputIterator __last,$/;"	f	class:deque	access:private	signature:(_InputIterator __first, _InputIterator __last, __false_type)
deque::_M_assign_dispatch	/Users/lij/.vim/stl/stl_deque.h	/^  void _M_assign_dispatch(_Integer __n, _Integer __val, __true_type)$/;"	f	class:deque	access:private	signature:(_Integer __n, _Integer __val, __true_type)
deque::_M_fill_assign	/Users/lij/.vim/stl/stl_deque.h	/^  void _M_fill_assign(size_type __n, const _Tp& __val) {$/;"	f	class:deque	access:public	signature:(size_type __n, const _Tp& __val)
deque::_M_fill_initialize	/Users/lij/.vim/stl/stl_deque.h	/^  void _M_fill_initialize(const value_type& __value);$/;"	p	class:deque	access:protected	signature:(const value_type& __value)
deque::_M_fill_initialize	/Users/lij/.vim/stl/stl_deque.h	/^void deque<_Tp,_Alloc>::_M_fill_initialize(const value_type& __value) {$/;"	f	class:deque	signature:(const value_type& __value)
deque::_M_fill_insert	/Users/lij/.vim/stl/stl_deque.h	/^  void _M_fill_insert(iterator __pos, size_type __n, const value_type& __x); $/;"	p	class:deque	access:public	signature:(iterator __pos, size_type __n, const value_type& __x)
deque::_M_fill_insert	/Users/lij/.vim/stl/stl_deque.h	/^void deque<_Tp, _Alloc>::_M_fill_insert(iterator __pos,$/;"	f	class:deque	signature:(iterator __pos, size_type __n, const value_type& __x)
deque::_M_initialize_dispatch	/Users/lij/.vim/stl/stl_deque.h	/^  void _M_initialize_dispatch(_InputIter __first, _InputIter __last,$/;"	f	class:deque	access:public	signature:(_InputIter __first, _InputIter __last, __false_type)
deque::_M_initialize_dispatch	/Users/lij/.vim/stl/stl_deque.h	/^  void _M_initialize_dispatch(_Integer __n, _Integer __x, __true_type) {$/;"	f	class:deque	access:public	signature:(_Integer __n, _Integer __x, __true_type)
deque::_M_insert_aux	/Users/lij/.vim/stl/stl_deque.h	/^  iterator _M_insert_aux(iterator __pos);$/;"	p	class:deque	access:protected	signature:(iterator __pos)
deque::_M_insert_aux	/Users/lij/.vim/stl/stl_deque.h	/^  iterator _M_insert_aux(iterator __pos, const value_type& __x);$/;"	p	class:deque	access:protected	signature:(iterator __pos, const value_type& __x)
deque::_M_insert_aux	/Users/lij/.vim/stl/stl_deque.h	/^  void _M_insert_aux(iterator __pos, $/;"	p	class:deque	access:protected	signature:(iterator __pos, _ForwardIterator __first, _ForwardIterator __last, size_type __n)
deque::_M_insert_aux	/Users/lij/.vim/stl/stl_deque.h	/^  void _M_insert_aux(iterator __pos, $/;"	p	class:deque	access:protected	signature:(iterator __pos, const_iterator __first, const_iterator __last, size_type __n)
deque::_M_insert_aux	/Users/lij/.vim/stl/stl_deque.h	/^  void _M_insert_aux(iterator __pos, size_type __n, const value_type& __x);$/;"	p	class:deque	access:protected	signature:(iterator __pos, size_type __n, const value_type& __x)
deque::_M_insert_aux	/Users/lij/.vim/stl/stl_deque.h	/^  void _M_insert_aux(iterator __pos,$/;"	p	class:deque	access:protected	signature:(iterator __pos, const value_type* __first, const value_type* __last, size_type __n)
deque::_M_insert_aux	/Users/lij/.vim/stl/stl_deque.h	/^deque<_Tp,_Alloc>::_M_insert_aux(iterator __pos)$/;"	f	class:deque	signature:(iterator __pos)
deque::_M_insert_aux	/Users/lij/.vim/stl/stl_deque.h	/^deque<_Tp,_Alloc>::_M_insert_aux(iterator __pos, const value_type& __x)$/;"	f	class:deque	signature:(iterator __pos, const value_type& __x)
deque::_M_insert_aux	/Users/lij/.vim/stl/stl_deque.h	/^void deque<_Tp,_Alloc>::_M_insert_aux(iterator __pos,$/;"	f	class:deque	signature:(iterator __pos, _ForwardIterator __first, _ForwardIterator __last, size_type __n)
deque::_M_insert_aux	/Users/lij/.vim/stl/stl_deque.h	/^void deque<_Tp,_Alloc>::_M_insert_aux(iterator __pos,$/;"	f	class:deque	signature:(iterator __pos, const value_type* __first, const value_type* __last, size_type __n)
deque::_M_insert_aux	/Users/lij/.vim/stl/stl_deque.h	/^void deque<_Tp,_Alloc>::_M_insert_aux(iterator __pos,$/;"	f	class:deque	signature:(iterator __pos, const_iterator __first, const_iterator __last, size_type __n)
deque::_M_insert_aux	/Users/lij/.vim/stl/stl_deque.h	/^void deque<_Tp,_Alloc>::_M_insert_aux(iterator __pos,$/;"	f	class:deque	signature:(iterator __pos, size_type __n, const value_type& __x)
deque::_M_insert_dispatch	/Users/lij/.vim/stl/stl_deque.h	/^  void _M_insert_dispatch(iterator __pos, _Integer __n, _Integer __x,$/;"	f	class:deque	access:public	signature:(iterator __pos, _Integer __n, _Integer __x, __true_type)
deque::_M_insert_dispatch	/Users/lij/.vim/stl/stl_deque.h	/^  void _M_insert_dispatch(iterator __pos,$/;"	f	class:deque	access:public	signature:(iterator __pos, _InputIterator __first, _InputIterator __last, __false_type)
deque::_M_new_elements_at_back	/Users/lij/.vim/stl/stl_deque.h	/^  void _M_new_elements_at_back(size_type __new_elements);$/;"	p	class:deque	access:protected	signature:(size_type __new_elements)
deque::_M_new_elements_at_back	/Users/lij/.vim/stl/stl_deque.h	/^void deque<_Tp,_Alloc>::_M_new_elements_at_back(size_type __new_elems)$/;"	f	class:deque	signature:(size_type __new_elems)
deque::_M_new_elements_at_front	/Users/lij/.vim/stl/stl_deque.h	/^  void _M_new_elements_at_front(size_type __new_elements);$/;"	p	class:deque	access:protected	signature:(size_type __new_elements)
deque::_M_new_elements_at_front	/Users/lij/.vim/stl/stl_deque.h	/^void deque<_Tp,_Alloc>::_M_new_elements_at_front(size_type __new_elems)$/;"	f	class:deque	signature:(size_type __new_elems)
deque::_M_pop_back_aux	/Users/lij/.vim/stl/stl_deque.h	/^  void _M_pop_back_aux();$/;"	p	class:deque	access:protected	signature:()
deque::_M_pop_back_aux	/Users/lij/.vim/stl/stl_deque.h	/^void deque<_Tp,_Alloc>::_M_pop_back_aux()$/;"	f	class:deque	signature:()
deque::_M_pop_front_aux	/Users/lij/.vim/stl/stl_deque.h	/^  void _M_pop_front_aux();$/;"	p	class:deque	access:protected	signature:()
deque::_M_pop_front_aux	/Users/lij/.vim/stl/stl_deque.h	/^void deque<_Tp,_Alloc>::_M_pop_front_aux()$/;"	f	class:deque	signature:()
deque::_M_push_back_aux	/Users/lij/.vim/stl/stl_deque.h	/^  void _M_push_back_aux();$/;"	p	class:deque	access:protected	signature:()
deque::_M_push_back_aux	/Users/lij/.vim/stl/stl_deque.h	/^  void _M_push_back_aux(const value_type&);$/;"	p	class:deque	access:protected	signature:(const value_type&)
deque::_M_push_back_aux	/Users/lij/.vim/stl/stl_deque.h	/^void deque<_Tp,_Alloc>::_M_push_back_aux()$/;"	f	class:deque	signature:()
deque::_M_push_back_aux	/Users/lij/.vim/stl/stl_deque.h	/^void deque<_Tp,_Alloc>::_M_push_back_aux(const value_type& __t)$/;"	f	class:deque	signature:(const value_type& __t)
deque::_M_push_front_aux	/Users/lij/.vim/stl/stl_deque.h	/^  void _M_push_front_aux();$/;"	p	class:deque	access:protected	signature:()
deque::_M_push_front_aux	/Users/lij/.vim/stl/stl_deque.h	/^  void _M_push_front_aux(const value_type&);$/;"	p	class:deque	access:protected	signature:(const value_type&)
deque::_M_push_front_aux	/Users/lij/.vim/stl/stl_deque.h	/^void  deque<_Tp,_Alloc>::_M_push_front_aux(const value_type& __t)$/;"	f	class:deque	signature:(const value_type& __t)
deque::_M_push_front_aux	/Users/lij/.vim/stl/stl_deque.h	/^void deque<_Tp,_Alloc>::_M_push_front_aux()$/;"	f	class:deque	signature:()
deque::_M_range_check	/Users/lij/.vim/stl/stl_deque.h	/^  void _M_range_check(size_type __n) const {$/;"	f	class:deque	access:public	signature:(size_type __n) const
deque::_M_range_initialize	/Users/lij/.vim/stl/stl_deque.h	/^  void _M_range_initialize(_ForwardIterator __first, _ForwardIterator __last,$/;"	p	class:deque	access:protected	signature:(_ForwardIterator __first, _ForwardIterator __last, forward_iterator_tag)
deque::_M_range_initialize	/Users/lij/.vim/stl/stl_deque.h	/^  void _M_range_initialize(_InputIterator __first, _InputIterator __last,$/;"	p	class:deque	access:protected	signature:(_InputIterator __first, _InputIterator __last, input_iterator_tag)
deque::_M_range_initialize	/Users/lij/.vim/stl/stl_deque.h	/^void deque<_Tp,_Alloc>::_M_range_initialize(_ForwardIterator __first,$/;"	f	class:deque	signature:(_ForwardIterator __first, _ForwardIterator __last, forward_iterator_tag)
deque::_M_range_initialize	/Users/lij/.vim/stl/stl_deque.h	/^void deque<_Tp,_Alloc>::_M_range_initialize(_InputIterator __first,$/;"	f	class:deque	signature:(_InputIterator __first, _InputIterator __last, input_iterator_tag)
deque::_M_reallocate_map	/Users/lij/.vim/stl/stl_deque.h	/^  void _M_reallocate_map(size_type __nodes_to_add, bool __add_at_front);$/;"	p	class:deque	access:protected	signature:(size_type __nodes_to_add, bool __add_at_front)
deque::_M_reallocate_map	/Users/lij/.vim/stl/stl_deque.h	/^void deque<_Tp,_Alloc>::_M_reallocate_map(size_type __nodes_to_add,$/;"	f	class:deque	signature:(size_type __nodes_to_add, bool __add_at_front)
deque::_M_reserve_elements_at_back	/Users/lij/.vim/stl/stl_deque.h	/^  iterator _M_reserve_elements_at_back(size_type __n) {$/;"	f	class:deque	access:protected	signature:(size_type __n)
deque::_M_reserve_elements_at_front	/Users/lij/.vim/stl/stl_deque.h	/^  iterator _M_reserve_elements_at_front(size_type __n) {$/;"	f	class:deque	access:protected	signature:(size_type __n)
deque::_M_reserve_map_at_back	/Users/lij/.vim/stl/stl_deque.h	/^  void _M_reserve_map_at_back (size_type __nodes_to_add = 1) {$/;"	f	class:deque	access:protected	signature:(size_type __nodes_to_add = 1)
deque::_M_reserve_map_at_front	/Users/lij/.vim/stl/stl_deque.h	/^  void _M_reserve_map_at_front (size_type __nodes_to_add = 1) {$/;"	f	class:deque	access:protected	signature:(size_type __nodes_to_add = 1)
deque::_Map_pointer	/Users/lij/.vim/stl/stl_deque.h	/^  typedef pointer* _Map_pointer;$/;"	t	class:deque	access:protected
deque::_S_buffer_size	/Users/lij/.vim/stl/stl_deque.h	/^  static size_t _S_buffer_size() { return __deque_buf_size(sizeof(_Tp)); }$/;"	f	class:deque	access:protected	signature:()
deque::__STL_CLASS_REQUIRES	/Users/lij/.vim/stl/stl_deque.h	/^  __STL_CLASS_REQUIRES(_Tp, _Assignable);$/;"	p	class:deque	access:private	signature:(_Tp, _Assignable)
deque::allocator_type	/Users/lij/.vim/stl/stl_deque.h	/^  typedef typename _Base::allocator_type allocator_type;$/;"	t	class:deque	access:public
deque::assign	/Users/lij/.vim/stl/stl_deque.h	/^  void assign(_InputIterator __first, _InputIterator __last) {$/;"	f	class:deque	access:public	signature:(_InputIterator __first, _InputIterator __last)
deque::assign	/Users/lij/.vim/stl/stl_deque.h	/^  void assign(size_type __n, const _Tp& __val) {$/;"	f	class:deque	access:public	signature:(size_type __n, const _Tp& __val)
deque::at	/Users/lij/.vim/stl/stl_deque.h	/^  const_reference at(size_type __n) const$/;"	f	class:deque	access:public	signature:(size_type __n) const
deque::at	/Users/lij/.vim/stl/stl_deque.h	/^  reference at(size_type __n)$/;"	f	class:deque	access:public	signature:(size_type __n)
deque::back	/Users/lij/.vim/stl/stl_deque.h	/^  const_reference back() const {$/;"	f	class:deque	access:public	signature:() const
deque::back	/Users/lij/.vim/stl/stl_deque.h	/^  reference back() {$/;"	f	class:deque	access:public	signature:()
deque::begin	/Users/lij/.vim/stl/stl_deque.h	/^  const_iterator begin() const { return _M_start; }$/;"	f	class:deque	access:public	signature:() const
deque::begin	/Users/lij/.vim/stl/stl_deque.h	/^  iterator begin() { return _M_start; }$/;"	f	class:deque	access:public	signature:()
deque::clear	/Users/lij/.vim/stl/stl_deque.h	/^  void clear(); $/;"	p	class:deque	access:public	signature:()
deque::clear	/Users/lij/.vim/stl/stl_deque.h	/^void deque<_Tp,_Alloc>::clear()$/;"	f	class:deque	signature:()
deque::const_iterator	/Users/lij/.vim/stl/stl_deque.h	/^  typedef typename _Base::const_iterator const_iterator;$/;"	t	class:deque	access:public
deque::const_pointer	/Users/lij/.vim/stl/stl_deque.h	/^  typedef const value_type* const_pointer;$/;"	t	class:deque	access:public
deque::const_reference	/Users/lij/.vim/stl/stl_deque.h	/^  typedef const value_type& const_reference;$/;"	t	class:deque	access:public
deque::const_reverse_iterator	/Users/lij/.vim/stl/stl_deque.h	/^          const_reverse_iterator;$/;"	t	class:deque	access:public
deque::const_reverse_iterator	/Users/lij/.vim/stl/stl_deque.h	/^  typedef reverse_iterator<const_iterator> const_reverse_iterator;$/;"	t	class:deque	access:public
deque::deque	/Users/lij/.vim/stl/stl_deque.h	/^  deque(_InputIterator __first, _InputIterator __last,$/;"	f	class:deque	access:public	signature:(_InputIterator __first, _InputIterator __last, const allocator_type& __a = allocator_type())
deque::deque	/Users/lij/.vim/stl/stl_deque.h	/^  deque(const deque& __x) : _Base(__x.get_allocator(), __x.size()) $/;"	f	class:deque	access:public	signature:(const deque& __x)
deque::deque	/Users/lij/.vim/stl/stl_deque.h	/^  deque(const value_type* __first, const value_type* __last,$/;"	f	class:deque	access:public	signature:(const value_type* __first, const value_type* __last, const allocator_type& __a = allocator_type())
deque::deque	/Users/lij/.vim/stl/stl_deque.h	/^  deque(const_iterator __first, const_iterator __last,$/;"	f	class:deque	access:public	signature:(const_iterator __first, const_iterator __last, const allocator_type& __a = allocator_type())
deque::deque	/Users/lij/.vim/stl/stl_deque.h	/^  deque(size_type __n, const value_type& __value,$/;"	f	class:deque	access:public	signature:(size_type __n, const value_type& __value, const allocator_type& __a = allocator_type())
deque::deque	/Users/lij/.vim/stl/stl_deque.h	/^  explicit deque(const allocator_type& __a = allocator_type()) $/;"	f	class:deque	access:public	signature:(const allocator_type& __a = allocator_type())
deque::deque	/Users/lij/.vim/stl/stl_deque.h	/^  explicit deque(size_type __n) : _Base(allocator_type(), __n)$/;"	f	class:deque	access:public	signature:(size_type __n)
deque::difference_type	/Users/lij/.vim/stl/stl_deque.h	/^  typedef ptrdiff_t difference_type;$/;"	t	class:deque	access:public
deque::empty	/Users/lij/.vim/stl/stl_deque.h	/^  bool empty() const { return _M_finish == _M_start; }$/;"	f	class:deque	access:public	signature:() const
deque::end	/Users/lij/.vim/stl/stl_deque.h	/^  const_iterator end() const { return _M_finish; }$/;"	f	class:deque	access:public	signature:() const
deque::end	/Users/lij/.vim/stl/stl_deque.h	/^  iterator end() { return _M_finish; }$/;"	f	class:deque	access:public	signature:()
deque::erase	/Users/lij/.vim/stl/stl_deque.h	/^  iterator erase(iterator __first, iterator __last);$/;"	p	class:deque	access:public	signature:(iterator __first, iterator __last)
deque::erase	/Users/lij/.vim/stl/stl_deque.h	/^  iterator erase(iterator __pos) {$/;"	f	class:deque	access:public	signature:(iterator __pos)
deque::erase	/Users/lij/.vim/stl/stl_deque.h	/^deque<_Tp,_Alloc>::erase(iterator __first, iterator __last)$/;"	f	class:deque	signature:(iterator __first, iterator __last)
deque::front	/Users/lij/.vim/stl/stl_deque.h	/^  const_reference front() const { return *_M_start; }$/;"	f	class:deque	access:public	signature:() const
deque::front	/Users/lij/.vim/stl/stl_deque.h	/^  reference front() { return *_M_start; }$/;"	f	class:deque	access:public	signature:()
deque::get_allocator	/Users/lij/.vim/stl/stl_deque.h	/^  allocator_type get_allocator() const { return _Base::get_allocator(); }$/;"	f	class:deque	access:public	signature:() const
deque::insert	/Users/lij/.vim/stl/stl_deque.h	/^  iterator insert(iterator __position)$/;"	f	class:deque	access:public	signature:(iterator __position)
deque::insert	/Users/lij/.vim/stl/stl_deque.h	/^  iterator insert(iterator position, const value_type& __x) {$/;"	f	class:deque	access:public	signature:(iterator position, const value_type& __x)
deque::insert	/Users/lij/.vim/stl/stl_deque.h	/^  void insert(iterator __pos, _InputIterator __first, _InputIterator __last) {$/;"	f	class:deque	access:public	signature:(iterator __pos, _InputIterator __first, _InputIterator __last)
deque::insert	/Users/lij/.vim/stl/stl_deque.h	/^  void insert(iterator __pos, _InputIterator __first, _InputIterator __last,$/;"	p	class:deque	access:protected	signature:(iterator __pos, _InputIterator __first, _InputIterator __last, input_iterator_tag)
deque::insert	/Users/lij/.vim/stl/stl_deque.h	/^  void insert(iterator __pos, size_type __n, const value_type& __x)$/;"	f	class:deque	access:public	signature:(iterator __pos, size_type __n, const value_type& __x)
deque::insert	/Users/lij/.vim/stl/stl_deque.h	/^  void insert(iterator __pos,$/;"	p	class:deque	access:protected	signature:(iterator __pos, _ForwardIterator __first, _ForwardIterator __last, forward_iterator_tag)
deque::insert	/Users/lij/.vim/stl/stl_deque.h	/^  void insert(iterator __pos,$/;"	p	class:deque	access:public	signature:(iterator __pos, const value_type* __first, const value_type* __last)
deque::insert	/Users/lij/.vim/stl/stl_deque.h	/^  void insert(iterator __pos,$/;"	p	class:deque	access:public	signature:(iterator __pos, const_iterator __first, const_iterator __last)
deque::insert	/Users/lij/.vim/stl/stl_deque.h	/^deque<_Tp,_Alloc>::insert(iterator __pos,$/;"	f	class:deque	signature:(iterator __pos, _ForwardIterator __first, _ForwardIterator __last, forward_iterator_tag)
deque::insert	/Users/lij/.vim/stl/stl_deque.h	/^void deque<_Tp, _Alloc>::insert(iterator __pos,$/;"	f	class:deque	signature:(iterator __pos, const value_type* __first, const value_type* __last)
deque::insert	/Users/lij/.vim/stl/stl_deque.h	/^void deque<_Tp,_Alloc>::insert(iterator __pos,$/;"	f	class:deque	signature:(iterator __pos, _InputIterator __first, _InputIterator __last, input_iterator_tag)
deque::insert	/Users/lij/.vim/stl/stl_deque.h	/^void deque<_Tp,_Alloc>::insert(iterator __pos,$/;"	f	class:deque	signature:(iterator __pos, const_iterator __first, const_iterator __last)
deque::iterator	/Users/lij/.vim/stl/stl_deque.h	/^  typedef typename _Base::iterator       iterator;$/;"	t	class:deque	access:public
deque::max_size	/Users/lij/.vim/stl/stl_deque.h	/^  size_type max_size() const { return size_type(-1); }$/;"	f	class:deque	access:public	signature:() const
deque::operator =	/Users/lij/.vim/stl/stl_deque.h	/^  deque& operator= (const deque& __x) {$/;"	f	class:deque	access:public	signature:(const deque& __x)
deque::operator []	/Users/lij/.vim/stl/stl_deque.h	/^  const_reference operator[](size_type __n) const $/;"	f	class:deque	access:public	signature:(size_type __n) const
deque::operator []	/Users/lij/.vim/stl/stl_deque.h	/^  reference operator[](size_type __n)$/;"	f	class:deque	access:public	signature:(size_type __n)
deque::pointer	/Users/lij/.vim/stl/stl_deque.h	/^  typedef value_type* pointer;$/;"	t	class:deque	access:public
deque::pop_back	/Users/lij/.vim/stl/stl_deque.h	/^  void pop_back() {$/;"	f	class:deque	access:public	signature:()
deque::pop_front	/Users/lij/.vim/stl/stl_deque.h	/^  void pop_front() {$/;"	f	class:deque	access:public	signature:()
deque::push_back	/Users/lij/.vim/stl/stl_deque.h	/^  void push_back() {$/;"	f	class:deque	access:public	signature:()
deque::push_back	/Users/lij/.vim/stl/stl_deque.h	/^  void push_back(const value_type& __t) {$/;"	f	class:deque	access:public	signature:(const value_type& __t)
deque::push_front	/Users/lij/.vim/stl/stl_deque.h	/^  void push_front() {$/;"	f	class:deque	access:public	signature:()
deque::push_front	/Users/lij/.vim/stl/stl_deque.h	/^  void push_front(const value_type& __t) {$/;"	f	class:deque	access:public	signature:(const value_type& __t)
deque::rbegin	/Users/lij/.vim/stl/stl_deque.h	/^  const_reverse_iterator rbegin() const $/;"	f	class:deque	access:public	signature:() const
deque::rbegin	/Users/lij/.vim/stl/stl_deque.h	/^  reverse_iterator rbegin() { return reverse_iterator(_M_finish); }$/;"	f	class:deque	access:public	signature:()
deque::reference	/Users/lij/.vim/stl/stl_deque.h	/^  typedef value_type& reference;$/;"	t	class:deque	access:public
deque::rend	/Users/lij/.vim/stl/stl_deque.h	/^  const_reverse_iterator rend() const $/;"	f	class:deque	access:public	signature:() const
deque::rend	/Users/lij/.vim/stl/stl_deque.h	/^  reverse_iterator rend() { return reverse_iterator(_M_start); }$/;"	f	class:deque	access:public	signature:()
deque::resize	/Users/lij/.vim/stl/stl_deque.h	/^  void resize(size_type __new_size, const value_type& __x) {$/;"	f	class:deque	access:public	signature:(size_type __new_size, const value_type& __x)
deque::resize	/Users/lij/.vim/stl/stl_deque.h	/^  void resize(size_type new_size) { resize(new_size, value_type()); }$/;"	f	class:deque	access:public	signature:(size_type new_size)
deque::reverse_iterator	/Users/lij/.vim/stl/stl_deque.h	/^          reverse_iterator; $/;"	t	class:deque	access:public
deque::reverse_iterator	/Users/lij/.vim/stl/stl_deque.h	/^  typedef reverse_iterator<iterator> reverse_iterator;$/;"	t	class:deque	access:public
deque::size	/Users/lij/.vim/stl/stl_deque.h	/^  size_type size() const { return _M_finish - _M_start; }$/;"	f	class:deque	access:public	signature:() const
deque::size_type	/Users/lij/.vim/stl/stl_deque.h	/^  typedef size_t size_type;$/;"	t	class:deque	access:public
deque::swap	/Users/lij/.vim/stl/stl_deque.h	/^  void swap(deque& __x) {$/;"	f	class:deque	access:public	signature:(deque& __x)
deque::value_type	/Users/lij/.vim/stl/stl_deque.h	/^  typedef _Tp value_type;$/;"	t	class:deque	access:public
deque::~deque	/Users/lij/.vim/stl/stl_deque.h	/^  ~deque() { destroy(_M_start, _M_finish); }$/;"	f	class:deque	access:public	signature:()
destroy	/Users/lij/.vim/stl/pthread_alloc	/^  void destroy(pointer _p) { _p->~_Tp(); }$/;"	f	class:pthread_allocator	access:public	signature:(pointer _p)
destroy	/Users/lij/.vim/stl/stl_alloc.h	/^  void destroy(pointer __p) { __p->~_Tp(); }$/;"	f	class:allocator	access:public	signature:(pointer __p)
destroy	/Users/lij/.vim/stl/stl_alloc.h	/^  void destroy(pointer __p) { __p->~_Tp(); }$/;"	f	signature:(pointer __p)
destroy	/Users/lij/.vim/stl/stl_construct.h	/^inline void destroy(_ForwardIterator __first, _ForwardIterator __last) {$/;"	f	signature:(_ForwardIterator __first, _ForwardIterator __last)
destroy	/Users/lij/.vim/stl/stl_construct.h	/^inline void destroy(_Tp* __pointer) {$/;"	f	signature:(_Tp* __pointer)
destroy_node	/Users/lij/.vim/stl/stl_tree.h	/^  void destroy_node(_Link_type __p)$/;"	f	class:_Rb_tree	access:protected	signature:(_Link_type __p)
difference_type	/Users/lij/.vim/stl/concept_checks.h	/^          difference_type;$/;"	t	struct:__difference_type_type_definition_requirement_violation	access:public
difference_type	/Users/lij/.vim/stl/concept_checks.h	/^__STL_TYPEDEF_REQUIREMENT(difference_type);$/;"	v
difference_type	/Users/lij/.vim/stl/defalloc.h	/^    typedef ptrdiff_t difference_type;$/;"	t	class:allocator	access:public
difference_type	/Users/lij/.vim/stl/pthread_alloc	/^  typedef ptrdiff_t   difference_type;$/;"	t	class:pthread_allocator	file:	access:public
difference_type	/Users/lij/.vim/stl/pthread_alloc	/^  typedef ptrdiff_t  difference_type;$/;"	t	class:pthread_allocator	file:	access:public
difference_type	/Users/lij/.vim/stl/stl_alloc.h	/^  typedef ptrdiff_t   difference_type;$/;"	t	class:allocator	access:public
difference_type	/Users/lij/.vim/stl/stl_alloc.h	/^  typedef ptrdiff_t  difference_type;$/;"	t	class:allocator	access:public
difference_type	/Users/lij/.vim/stl/stl_alloc.h	/^  typedef ptrdiff_t difference_type;$/;"	t	struct:__allocator	access:public
difference_type	/Users/lij/.vim/stl/stl_bvector.h	/^  typedef ptrdiff_t difference_type; $/;"	t	class:__BVECTOR	access:public
difference_type	/Users/lij/.vim/stl/stl_deque.h	/^  typedef ptrdiff_t difference_type;$/;"	t	class:deque	access:public
difference_type	/Users/lij/.vim/stl/stl_deque.h	/^  typedef ptrdiff_t difference_type;$/;"	t	struct:_Deque_iterator	access:public
difference_type	/Users/lij/.vim/stl/stl_hash_map.h	/^  typedef typename _Ht::difference_type difference_type;$/;"	t	class:hash_map	access:public
difference_type	/Users/lij/.vim/stl/stl_hash_map.h	/^  typedef typename _Ht::difference_type difference_type;$/;"	t	class:hash_multimap	access:public
difference_type	/Users/lij/.vim/stl/stl_hash_map.h	/^  typedef void                difference_type;$/;"	t	class:insert_iterator	access:public
difference_type	/Users/lij/.vim/stl/stl_hash_set.h	/^  typedef typename _Ht::difference_type difference_type;$/;"	t	class:hash_multiset	access:public
difference_type	/Users/lij/.vim/stl/stl_hash_set.h	/^  typedef typename _Ht::difference_type difference_type;$/;"	t	class:hash_set	access:public
difference_type	/Users/lij/.vim/stl/stl_hash_set.h	/^  typedef void                difference_type;$/;"	t	class:insert_iterator	access:public
difference_type	/Users/lij/.vim/stl/stl_hashtable.h	/^  typedef ptrdiff_t         difference_type;$/;"	t	class:hashtable	access:public
difference_type	/Users/lij/.vim/stl/stl_hashtable.h	/^  typedef ptrdiff_t difference_type;$/;"	t	struct:_Hashtable_const_iterator	access:public
difference_type	/Users/lij/.vim/stl/stl_hashtable.h	/^  typedef ptrdiff_t difference_type;$/;"	t	struct:_Hashtable_iterator	access:public
difference_type	/Users/lij/.vim/stl/stl_iterator.h	/^          difference_type;$/;"	t	class:reverse_iterator	access:public
difference_type	/Users/lij/.vim/stl/stl_iterator.h	/^  typedef _Dist                          difference_type;$/;"	t	class:istream_iterator	access:public
difference_type	/Users/lij/.vim/stl/stl_iterator.h	/^  typedef _Dist               difference_type;$/;"	t	class:istream_iterator	access:public
difference_type	/Users/lij/.vim/stl/stl_iterator.h	/^  typedef _Distance                  difference_type;$/;"	t	class:reverse_bidirectional_iterator	access:public
difference_type	/Users/lij/.vim/stl/stl_iterator.h	/^  typedef _Distance                  difference_type;$/;"	t	class:reverse_iterator	access:public
difference_type	/Users/lij/.vim/stl/stl_iterator.h	/^  typedef void                           difference_type;$/;"	t	class:ostream_iterator	access:public
difference_type	/Users/lij/.vim/stl/stl_iterator.h	/^  typedef void                difference_type;$/;"	t	class:back_insert_iterator	access:public
difference_type	/Users/lij/.vim/stl/stl_iterator.h	/^  typedef void                difference_type;$/;"	t	class:front_insert_iterator	access:public
difference_type	/Users/lij/.vim/stl/stl_iterator.h	/^  typedef void                difference_type;$/;"	t	class:insert_iterator	access:public
difference_type	/Users/lij/.vim/stl/stl_iterator.h	/^  typedef void                difference_type;$/;"	t	class:ostream_iterator	access:public
difference_type	/Users/lij/.vim/stl/stl_iterator_base.h	/^  typedef _Distance                  difference_type;$/;"	t	struct:bidirectional_iterator	access:public
difference_type	/Users/lij/.vim/stl/stl_iterator_base.h	/^  typedef _Distance                  difference_type;$/;"	t	struct:random_access_iterator	access:public
difference_type	/Users/lij/.vim/stl/stl_iterator_base.h	/^  typedef _Distance            difference_type;$/;"	t	struct:forward_iterator	access:public
difference_type	/Users/lij/.vim/stl/stl_iterator_base.h	/^  typedef _Distance          difference_type;$/;"	t	struct:input_iterator	access:public
difference_type	/Users/lij/.vim/stl/stl_iterator_base.h	/^  typedef _Distance  difference_type;$/;"	t	struct:iterator	access:public
difference_type	/Users/lij/.vim/stl/stl_iterator_base.h	/^  typedef ptrdiff_t                   difference_type;$/;"	t	struct:iterator_traits	access:public
difference_type	/Users/lij/.vim/stl/stl_iterator_base.h	/^  typedef typename _Iterator::difference_type   difference_type;$/;"	t	struct:iterator_traits	access:public
difference_type	/Users/lij/.vim/stl/stl_iterator_base.h	/^  typedef void                difference_type;$/;"	t	struct:output_iterator	access:public
difference_type	/Users/lij/.vim/stl/stl_list.h	/^  typedef ptrdiff_t                  difference_type;$/;"	t	struct:_List_iterator_base	access:public
difference_type	/Users/lij/.vim/stl/stl_list.h	/^  typedef ptrdiff_t difference_type;$/;"	t	class:list	access:public
difference_type	/Users/lij/.vim/stl/stl_map.h	/^  typedef typename _Rep_type::difference_type difference_type;$/;"	t	class:map	access:public
difference_type	/Users/lij/.vim/stl/stl_multimap.h	/^  typedef typename _Rep_type::difference_type difference_type;$/;"	t	class:multimap	access:public
difference_type	/Users/lij/.vim/stl/stl_multiset.h	/^  typedef typename _Rep_type::difference_type difference_type;$/;"	t	class:multiset	access:public
difference_type	/Users/lij/.vim/stl/stl_raw_storage_iter.h	/^  typedef void                difference_type;$/;"	t	class:raw_storage_iterator	access:public
difference_type	/Users/lij/.vim/stl/stl_rope.h	/^        typedef ptrdiff_t difference_type;$/;"	t	class:rope	access:public
difference_type	/Users/lij/.vim/stl/stl_set.h	/^  typedef typename _Rep_type::difference_type difference_type;$/;"	t	class:set	access:public
difference_type	/Users/lij/.vim/stl/stl_slist.h	/^  typedef ptrdiff_t            difference_type;$/;"	t	struct:_Slist_iterator_base	access:public
difference_type	/Users/lij/.vim/stl/stl_slist.h	/^  typedef ptrdiff_t         difference_type;$/;"	t	class:slist	access:public
difference_type	/Users/lij/.vim/stl/stl_slist.h	/^  typedef void                difference_type;$/;"	t	class:insert_iterator	access:public
difference_type	/Users/lij/.vim/stl/stl_tree.h	/^  typedef ptrdiff_t difference_type;$/;"	t	class:_Rb_tree	access:public
difference_type	/Users/lij/.vim/stl/stl_tree.h	/^  typedef ptrdiff_t difference_type;$/;"	t	struct:_Rb_tree_base_iterator	access:public
difference_type	/Users/lij/.vim/stl/stl_vector.h	/^  typedef ptrdiff_t difference_type;$/;"	t	class:vector	access:public
difference_type	/Users/lij/.vim/stl/string	/^  typedef ptrdiff_t difference_type;$/;"	t	class:basic_string	file:	access:public
distance	/Users/lij/.vim/stl/stl_iterator_base.h	/^distance(_InputIterator __first, _InputIterator __last) {$/;"	f	signature:(_InputIterator __first, _InputIterator __last)
distance	/Users/lij/.vim/stl/stl_iterator_base.h	/^inline void distance(_InputIterator __first, $/;"	f	signature:(_InputIterator __first, _InputIterator __last, _Distance& __n)
distance_type	/Users/lij/.vim/stl/stl_deque.h	/^inline ptrdiff_t* distance_type(const _Deque_iterator<_Tp,_Ref,_Ptr>&) {$/;"	f	signature:(const _Deque_iterator<_Tp,_Ref,_Ptr>&)
distance_type	/Users/lij/.vim/stl/stl_hashtable.h	/^distance_type(const _Hashtable_const_iterator<_Val,_Key,_HF,_ExK,_EqK,_All>&)$/;"	f	signature:(const _Hashtable_const_iterator<_Val,_Key,_HF,_ExK,_EqK,_All>&)
distance_type	/Users/lij/.vim/stl/stl_hashtable.h	/^distance_type(const _Hashtable_iterator<_Val,_Key,_HF,_ExK,_EqK,_All>&)$/;"	f	signature:(const _Hashtable_iterator<_Val,_Key,_HF,_ExK,_EqK,_All>&)
distance_type	/Users/lij/.vim/stl/stl_iterator.h	/^distance_type(const istream_iterator<_Tp, _Dist>&) { return (_Dist*)0; }$/;"	f	signature:(const istream_iterator<_Tp, _Dist>&)
distance_type	/Users/lij/.vim/stl/stl_iterator.h	/^distance_type(const reverse_bidirectional_iterator<_BidirectionalIterator, $/;"	f	signature:(const reverse_bidirectional_iterator<_BidirectionalIterator, _Tp, _Reference, _Distance>&)
distance_type	/Users/lij/.vim/stl/stl_iterator.h	/^distance_type(const reverse_iterator<_RandomAccessIterator, $/;"	f	signature:(const reverse_iterator<_RandomAccessIterator, _Tp, _Reference, _Distance>&)
distance_type	/Users/lij/.vim/stl/stl_iterator_base.h	/^distance_type(const _Iter& __i) { return __distance_type(__i); }$/;"	f	signature:(const _Iter& __i)
distance_type	/Users/lij/.vim/stl/stl_iterator_base.h	/^distance_type(const bidirectional_iterator<_Tp, _Distance>&)$/;"	f	signature:(const bidirectional_iterator<_Tp, _Distance>&)
distance_type	/Users/lij/.vim/stl/stl_iterator_base.h	/^distance_type(const random_access_iterator<_Tp, _Distance>&)$/;"	f	signature:(const random_access_iterator<_Tp, _Distance>&)
distance_type	/Users/lij/.vim/stl/stl_iterator_base.h	/^inline _Distance* distance_type(const forward_iterator<_Tp, _Distance>&)$/;"	f	signature:(const forward_iterator<_Tp, _Distance>&)
distance_type	/Users/lij/.vim/stl/stl_iterator_base.h	/^inline _Distance* distance_type(const input_iterator<_Tp, _Distance>&)$/;"	f	signature:(const input_iterator<_Tp, _Distance>&)
distance_type	/Users/lij/.vim/stl/stl_iterator_base.h	/^inline ptrdiff_t* distance_type(const _Tp*) { return (ptrdiff_t*)(0); }$/;"	f	signature:(const _Tp*)
distance_type	/Users/lij/.vim/stl/stl_list.h	/^distance_type(const _List_iterator_base&)$/;"	f	signature:(const _List_iterator_base&)
distance_type	/Users/lij/.vim/stl/stl_slist.h	/^inline ptrdiff_t* distance_type(const _Slist_iterator_base&) {$/;"	f	signature:(const _Slist_iterator_base&)
distance_type	/Users/lij/.vim/stl/stl_tree.h	/^distance_type(const _Rb_tree_base_iterator&) {$/;"	f	signature:(const _Rb_tree_base_iterator&)
divides	/Users/lij/.vim/stl/stl_function.h	/^struct divides : public binary_function<_Tp,_Tp,_Tp> {$/;"	s	inherits:binary_function
divides::operator ()	/Users/lij/.vim/stl/stl_function.h	/^  _Tp operator()(const _Tp& __x, const _Tp& __y) const { return __x \/ __y; }$/;"	f	struct:divides	access:public	signature:(const _Tp& __x, const _Tp& __y) const
domain_error	/Users/lij/.vim/stl/stdexcept	/^  domain_error(const string& __arg) : logic_error(__arg) {}$/;"	f	class:domain_error	access:public	signature:(const string& __arg)
domain_error	/Users/lij/.vim/stl/stdexcept	/^class domain_error : public logic_error {$/;"	c	file:	inherits:logic_error
domain_error::domain_error	/Users/lij/.vim/stl/stdexcept	/^  domain_error(const string& __arg) : logic_error(__arg) {}$/;"	f	class:domain_error	access:public	signature:(const string& __arg)
dump	/Users/lij/.vim/stl/stl_rope.h	/^        void dump() {$/;"	f	class:rope	access:public	signature:()
element_type	/Users/lij/.vim/stl/memory	/^  typedef _Tp element_type;$/;"	t	class:auto_ptr	file:	access:public
elems_in_bucket	/Users/lij/.vim/stl/stl_hash_map.h	/^  size_type elems_in_bucket(size_type __n) const$/;"	f	class:hash_map	access:public	signature:(size_type __n) const
elems_in_bucket	/Users/lij/.vim/stl/stl_hash_map.h	/^  size_type elems_in_bucket(size_type __n) const$/;"	f	class:hash_multimap	access:public	signature:(size_type __n) const
elems_in_bucket	/Users/lij/.vim/stl/stl_hash_set.h	/^  size_type elems_in_bucket(size_type __n) const$/;"	f	class:hash_multiset	access:public	signature:(size_type __n) const
elems_in_bucket	/Users/lij/.vim/stl/stl_hash_set.h	/^  size_type elems_in_bucket(size_type __n) const$/;"	f	class:hash_set	access:public	signature:(size_type __n) const
elems_in_bucket	/Users/lij/.vim/stl/stl_hashtable.h	/^  size_type elems_in_bucket(size_type __bucket) const$/;"	f	class:hashtable	access:public	signature:(size_type __bucket) const
empty	/Users/lij/.vim/stl/stl_bvector.h	/^  bool empty() const { return begin() == end(); }$/;"	f	class:__BVECTOR	access:public	signature:() const
empty	/Users/lij/.vim/stl/stl_deque.h	/^  bool empty() const { return _M_finish == _M_start; }$/;"	f	class:deque	access:public	signature:() const
empty	/Users/lij/.vim/stl/stl_hash_map.h	/^  bool empty() const { return _M_ht.empty(); }$/;"	f	class:hash_map	access:public	signature:() const
empty	/Users/lij/.vim/stl/stl_hash_map.h	/^  bool empty() const { return _M_ht.empty(); }$/;"	f	class:hash_multimap	access:public	signature:() const
empty	/Users/lij/.vim/stl/stl_hash_set.h	/^  bool empty() const { return _M_ht.empty(); }$/;"	f	class:hash_multiset	access:public	signature:() const
empty	/Users/lij/.vim/stl/stl_hash_set.h	/^  bool empty() const { return _M_ht.empty(); }$/;"	f	class:hash_set	access:public	signature:() const
empty	/Users/lij/.vim/stl/stl_hashtable.h	/^  bool empty() const { return size() == 0; }$/;"	f	class:hashtable	access:public	signature:() const
empty	/Users/lij/.vim/stl/stl_list.h	/^  bool empty() const { return _M_node->_M_next == _M_node; }$/;"	f	class:list	access:public	signature:() const
empty	/Users/lij/.vim/stl/stl_map.h	/^  bool empty() const { return _M_t.empty(); }$/;"	f	class:map	access:public	signature:() const
empty	/Users/lij/.vim/stl/stl_multimap.h	/^  bool empty() const { return _M_t.empty(); }$/;"	f	class:multimap	access:public	signature:() const
empty	/Users/lij/.vim/stl/stl_multiset.h	/^  bool empty() const { return _M_t.empty(); }$/;"	f	class:multiset	access:public	signature:() const
empty	/Users/lij/.vim/stl/stl_queue.h	/^  bool empty() const { return c.empty(); }$/;"	f	class:priority_queue	access:public	signature:() const
empty	/Users/lij/.vim/stl/stl_queue.h	/^  bool empty() const { return c.empty(); }$/;"	f	class:queue	access:public	signature:() const
empty	/Users/lij/.vim/stl/stl_rope.h	/^        bool empty() const { return 0 == _M_tree_ptr; }$/;"	f	class:rope	access:public	signature:() const
empty	/Users/lij/.vim/stl/stl_set.h	/^  bool empty() const { return _M_t.empty(); }$/;"	f	class:set	access:public	signature:() const
empty	/Users/lij/.vim/stl/stl_slist.h	/^  bool empty() const { return this->_M_head._M_next == 0; }$/;"	f	class:slist	access:public	signature:() const
empty	/Users/lij/.vim/stl/stl_stack.h	/^  bool empty() const { return c.empty(); }$/;"	f	class:stack	access:public	signature:() const
empty	/Users/lij/.vim/stl/stl_tree.h	/^  bool empty() const { return _M_node_count == 0; }$/;"	f	class:_Rb_tree	access:public	signature:() const
empty	/Users/lij/.vim/stl/stl_vector.h	/^  bool empty() const$/;"	f	class:vector	access:public	signature:() const
empty	/Users/lij/.vim/stl/string	/^  bool empty() const { return _M_start == _M_finish; }    $/;"	f	class:basic_string	access:public	signature:() const
end	/Users/lij/.vim/stl/stl_bvector.h	/^  const_iterator end() const { return _M_finish; }$/;"	f	class:__BVECTOR	access:public	signature:() const
end	/Users/lij/.vim/stl/stl_bvector.h	/^  iterator end() { return _M_finish; }$/;"	f	class:__BVECTOR	access:public	signature:()
end	/Users/lij/.vim/stl/stl_deque.h	/^  const_iterator end() const { return _M_finish; }$/;"	f	class:deque	access:public	signature:() const
end	/Users/lij/.vim/stl/stl_deque.h	/^  iterator end() { return _M_finish; }$/;"	f	class:deque	access:public	signature:()
end	/Users/lij/.vim/stl/stl_hash_map.h	/^  const_iterator end() const { return _M_ht.end(); }$/;"	f	class:hash_map	access:public	signature:() const
end	/Users/lij/.vim/stl/stl_hash_map.h	/^  const_iterator end() const { return _M_ht.end(); }$/;"	f	class:hash_multimap	access:public	signature:() const
end	/Users/lij/.vim/stl/stl_hash_map.h	/^  iterator end() { return _M_ht.end(); }$/;"	f	class:hash_map	access:public	signature:()
end	/Users/lij/.vim/stl/stl_hash_map.h	/^  iterator end() { return _M_ht.end(); }$/;"	f	class:hash_multimap	access:public	signature:()
end	/Users/lij/.vim/stl/stl_hash_set.h	/^  iterator end() const { return _M_ht.end(); }$/;"	f	class:hash_multiset	access:public	signature:() const
end	/Users/lij/.vim/stl/stl_hash_set.h	/^  iterator end() const { return _M_ht.end(); }$/;"	f	class:hash_set	access:public	signature:() const
end	/Users/lij/.vim/stl/stl_hashtable.h	/^  const_iterator end() const { return const_iterator(0, this); }$/;"	f	class:hashtable	access:public	signature:() const
end	/Users/lij/.vim/stl/stl_hashtable.h	/^  iterator end() { return iterator(0, this); }$/;"	f	class:hashtable	access:public	signature:()
end	/Users/lij/.vim/stl/stl_list.h	/^  const_iterator end() const { return _M_node; }$/;"	f	class:list	access:public	signature:() const
end	/Users/lij/.vim/stl/stl_list.h	/^  iterator end()             { return _M_node; }$/;"	f	class:list	access:public	signature:()
end	/Users/lij/.vim/stl/stl_map.h	/^  const_iterator end() const { return _M_t.end(); }$/;"	f	class:map	access:public	signature:() const
end	/Users/lij/.vim/stl/stl_map.h	/^  iterator end() { return _M_t.end(); }$/;"	f	class:map	access:public	signature:()
end	/Users/lij/.vim/stl/stl_multimap.h	/^  const_iterator end() const { return _M_t.end(); }$/;"	f	class:multimap	access:public	signature:() const
end	/Users/lij/.vim/stl/stl_multimap.h	/^  iterator end() { return _M_t.end(); }$/;"	f	class:multimap	access:public	signature:()
end	/Users/lij/.vim/stl/stl_multiset.h	/^  iterator end() const { return _M_t.end(); }$/;"	f	class:multiset	access:public	signature:() const
end	/Users/lij/.vim/stl/stl_rope.h	/^            const_iterator end() { return const_end(); }$/;"	f	class:rope	access:public	signature:()
end	/Users/lij/.vim/stl/stl_rope.h	/^            iterator end() { return mutable_end(); }$/;"	f	class:rope	access:public	signature:()
end	/Users/lij/.vim/stl/stl_rope.h	/^        const_iterator end() const {$/;"	f	class:rope	access:public	signature:() const
end	/Users/lij/.vim/stl/stl_set.h	/^  iterator end() const { return _M_t.end(); }$/;"	f	class:set	access:public	signature:() const
end	/Users/lij/.vim/stl/stl_slist.h	/^  const_iterator end() const { return const_iterator(0); }$/;"	f	class:slist	access:public	signature:() const
end	/Users/lij/.vim/stl/stl_slist.h	/^  iterator end() { return iterator(0); }$/;"	f	class:slist	access:public	signature:()
end	/Users/lij/.vim/stl/stl_tempbuf.h	/^  _Tp* end() { return _M_buffer + _M_len; }$/;"	f	class:_Temporary_buffer	access:public	signature:()
end	/Users/lij/.vim/stl/stl_tree.h	/^  const_iterator end() const { return _M_header; }$/;"	f	class:_Rb_tree	access:public	signature:() const
end	/Users/lij/.vim/stl/stl_tree.h	/^  iterator end() { return _M_header; }$/;"	f	class:_Rb_tree	access:public	signature:()
end	/Users/lij/.vim/stl/stl_vector.h	/^  const_iterator end() const { return _M_finish; }$/;"	f	class:vector	access:public	signature:() const
end	/Users/lij/.vim/stl/stl_vector.h	/^  iterator end() { return _M_finish; }$/;"	f	class:vector	access:public	signature:()
end	/Users/lij/.vim/stl/string	/^  const_iterator end()   const { return _M_finish; }  $/;"	f	class:basic_string	access:public	signature:() const
end	/Users/lij/.vim/stl/string	/^  iterator end()               { return _M_finish; }$/;"	f	class:basic_string	access:public	signature:()
eof	/Users/lij/.vim/stl/char_traits.h	/^  static int_type eof() {$/;"	f	class:__char_traits_base	access:public	signature:()
eq	/Users/lij/.vim/stl/char_traits.h	/^  static bool eq(const _CharT& __c1, const _CharT& __c2) $/;"	f	class:__char_traits_base	access:public	signature:(const _CharT& __c1, const _CharT& __c2)
eq_int_type	/Users/lij/.vim/stl/char_traits.h	/^  static bool eq_int_type(const int_type& __c1, const int_type& __c2) {$/;"	f	class:__char_traits_base	access:public	signature:(const int_type& __c1, const int_type& __c2)
equal	/Users/lij/.vim/stl/stl_algobase.h	/^inline bool equal(_InputIter1 __first1, _InputIter1 __last1,$/;"	f	signature:(_InputIter1 __first1, _InputIter1 __last1, _InputIter2 __first2)
equal	/Users/lij/.vim/stl/stl_algobase.h	/^inline bool equal(_InputIter1 __first1, _InputIter1 __last1,$/;"	f	signature:(_InputIter1 __first1, _InputIter1 __last1, _InputIter2 __first2, _BinaryPredicate __binary_pred)
equal	/Users/lij/.vim/stl/stl_iterator.h	/^  bool equal(const istreambuf_iterator& __i) const {$/;"	f	class:istreambuf_iterator	access:public	signature:(const istreambuf_iterator& __i) const
equal_range	/Users/lij/.vim/stl/stl_algo.h	/^equal_range(_ForwardIter __first, _ForwardIter __last, const _Tp& __val) {$/;"	f	signature:(_ForwardIter __first, _ForwardIter __last, const _Tp& __val)
equal_range	/Users/lij/.vim/stl/stl_algo.h	/^equal_range(_ForwardIter __first, _ForwardIter __last, const _Tp& __val,$/;"	f	signature:(_ForwardIter __first, _ForwardIter __last, const _Tp& __val, _Compare __comp)
equal_range	/Users/lij/.vim/stl/stl_hash_map.h	/^  equal_range(const key_type& __key) const$/;"	f	class:hash_map	access:public	signature:(const key_type& __key) const
equal_range	/Users/lij/.vim/stl/stl_hash_map.h	/^  equal_range(const key_type& __key) const$/;"	f	class:hash_multimap	access:public	signature:(const key_type& __key) const
equal_range	/Users/lij/.vim/stl/stl_hash_map.h	/^  pair<iterator, iterator> equal_range(const key_type& __key)$/;"	f	class:hash_map	access:public	signature:(const key_type& __key)
equal_range	/Users/lij/.vim/stl/stl_hash_map.h	/^  pair<iterator, iterator> equal_range(const key_type& __key)$/;"	f	class:hash_multimap	access:public	signature:(const key_type& __key)
equal_range	/Users/lij/.vim/stl/stl_hash_set.h	/^  pair<iterator, iterator> equal_range(const key_type& __key) const$/;"	f	class:hash_multiset	access:public	signature:(const key_type& __key) const
equal_range	/Users/lij/.vim/stl/stl_hash_set.h	/^  pair<iterator, iterator> equal_range(const key_type& __key) const$/;"	f	class:hash_set	access:public	signature:(const key_type& __key) const
equal_range	/Users/lij/.vim/stl/stl_hashtable.h	/^  ::equal_range(const key_type& __key) const$/;"	f	class:hashtable	signature:(const key_type& __key) const
equal_range	/Users/lij/.vim/stl/stl_hashtable.h	/^  equal_range(const key_type& __key) const;$/;"	p	class:hashtable	access:public	signature:(const key_type& __key) const
equal_range	/Users/lij/.vim/stl/stl_hashtable.h	/^  equal_range(const key_type& __key);$/;"	p	class:hashtable	access:public	signature:(const key_type& __key)
equal_range	/Users/lij/.vim/stl/stl_hashtable.h	/^hashtable<_Val,_Key,_HF,_Ex,_Eq,_All>::equal_range(const key_type& __key)$/;"	f	class:hashtable	signature:(const key_type& __key)
equal_range	/Users/lij/.vim/stl/stl_map.h	/^  pair<const_iterator,const_iterator> equal_range(const key_type& __x) const {$/;"	f	class:map	access:public	signature:(const key_type& __x) const
equal_range	/Users/lij/.vim/stl/stl_map.h	/^  pair<iterator,iterator> equal_range(const key_type& __x) {$/;"	f	class:map	access:public	signature:(const key_type& __x)
equal_range	/Users/lij/.vim/stl/stl_multimap.h	/^   pair<iterator,iterator> equal_range(const key_type& __x) {$/;"	f	class:multimap	access:public	signature:(const key_type& __x)
equal_range	/Users/lij/.vim/stl/stl_multimap.h	/^  pair<const_iterator,const_iterator> equal_range(const key_type& __x) const {$/;"	f	class:multimap	access:public	signature:(const key_type& __x) const
equal_range	/Users/lij/.vim/stl/stl_multiset.h	/^  pair<iterator,iterator> equal_range(const key_type& __x) const {$/;"	f	class:multiset	access:public	signature:(const key_type& __x) const
equal_range	/Users/lij/.vim/stl/stl_set.h	/^  pair<iterator,iterator> equal_range(const key_type& __x) const {$/;"	f	class:set	access:public	signature:(const key_type& __x) const
equal_range	/Users/lij/.vim/stl/stl_tree.h	/^  ::equal_range(const _Key& __k) const$/;"	f	class:_Rb_tree	signature:(const _Key& __k) const
equal_range	/Users/lij/.vim/stl/stl_tree.h	/^  ::equal_range(const _Key& __k)$/;"	f	class:_Rb_tree	signature:(const _Key& __k)
equal_range	/Users/lij/.vim/stl/stl_tree.h	/^  pair<const_iterator, const_iterator> equal_range(const key_type& __x) const;$/;"	p	class:_Rb_tree	access:public	signature:(const key_type& __x) const
equal_range	/Users/lij/.vim/stl/stl_tree.h	/^  pair<iterator,iterator> equal_range(const key_type& __x);$/;"	p	class:_Rb_tree	access:public	signature:(const key_type& __x)
equal_to	/Users/lij/.vim/stl/stl_function.h	/^struct equal_to : public binary_function<_Tp,_Tp,bool> $/;"	s	inherits:binary_function
equal_to::operator ()	/Users/lij/.vim/stl/stl_function.h	/^  bool operator()(const _Tp& __x, const _Tp& __y) const { return __x == __y; }$/;"	f	struct:equal_to	access:public	signature:(const _Tp& __x, const _Tp& __y) const
erase	/Users/lij/.vim/stl/stl_bvector.h	/^  iterator erase(iterator __first, iterator __last) {$/;"	f	class:__BVECTOR	access:public	signature:(iterator __first, iterator __last)
erase	/Users/lij/.vim/stl/stl_bvector.h	/^  iterator erase(iterator __position) {$/;"	f	class:__BVECTOR	access:public	signature:(iterator __position)
erase	/Users/lij/.vim/stl/stl_deque.h	/^  iterator erase(iterator __first, iterator __last);$/;"	p	class:deque	access:public	signature:(iterator __first, iterator __last)
erase	/Users/lij/.vim/stl/stl_deque.h	/^  iterator erase(iterator __pos) {$/;"	f	class:deque	access:public	signature:(iterator __pos)
erase	/Users/lij/.vim/stl/stl_deque.h	/^deque<_Tp,_Alloc>::erase(iterator __first, iterator __last)$/;"	f	class:deque	signature:(iterator __first, iterator __last)
erase	/Users/lij/.vim/stl/stl_hash_map.h	/^  size_type erase(const key_type& __key) {return _M_ht.erase(__key); }$/;"	f	class:hash_map	access:public	signature:(const key_type& __key)
erase	/Users/lij/.vim/stl/stl_hash_map.h	/^  size_type erase(const key_type& __key) {return _M_ht.erase(__key); }$/;"	f	class:hash_multimap	access:public	signature:(const key_type& __key)
erase	/Users/lij/.vim/stl/stl_hash_map.h	/^  void erase(iterator __f, iterator __l) { _M_ht.erase(__f, __l); }$/;"	f	class:hash_map	access:public	signature:(iterator __f, iterator __l)
erase	/Users/lij/.vim/stl/stl_hash_map.h	/^  void erase(iterator __f, iterator __l) { _M_ht.erase(__f, __l); }$/;"	f	class:hash_multimap	access:public	signature:(iterator __f, iterator __l)
erase	/Users/lij/.vim/stl/stl_hash_map.h	/^  void erase(iterator __it) { _M_ht.erase(__it); }$/;"	f	class:hash_map	access:public	signature:(iterator __it)
erase	/Users/lij/.vim/stl/stl_hash_map.h	/^  void erase(iterator __it) { _M_ht.erase(__it); }$/;"	f	class:hash_multimap	access:public	signature:(iterator __it)
erase	/Users/lij/.vim/stl/stl_hash_set.h	/^  size_type erase(const key_type& __key) {return _M_ht.erase(__key); }$/;"	f	class:hash_multiset	access:public	signature:(const key_type& __key)
erase	/Users/lij/.vim/stl/stl_hash_set.h	/^  size_type erase(const key_type& __key) {return _M_ht.erase(__key); }$/;"	f	class:hash_set	access:public	signature:(const key_type& __key)
erase	/Users/lij/.vim/stl/stl_hash_set.h	/^  void erase(iterator __f, iterator __l) { _M_ht.erase(__f, __l); }$/;"	f	class:hash_multiset	access:public	signature:(iterator __f, iterator __l)
erase	/Users/lij/.vim/stl/stl_hash_set.h	/^  void erase(iterator __f, iterator __l) { _M_ht.erase(__f, __l); }$/;"	f	class:hash_set	access:public	signature:(iterator __f, iterator __l)
erase	/Users/lij/.vim/stl/stl_hash_set.h	/^  void erase(iterator __it) { _M_ht.erase(__it); }$/;"	f	class:hash_multiset	access:public	signature:(iterator __it)
erase	/Users/lij/.vim/stl/stl_hash_set.h	/^  void erase(iterator __it) { _M_ht.erase(__it); }$/;"	f	class:hash_set	access:public	signature:(iterator __it)
erase	/Users/lij/.vim/stl/stl_hashtable.h	/^  ::erase(iterator __first, iterator __last)$/;"	f	class:hashtable	signature:(iterator __first, iterator __last)
erase	/Users/lij/.vim/stl/stl_hashtable.h	/^  size_type erase(const key_type& __key);$/;"	p	class:hashtable	access:public	signature:(const key_type& __key)
erase	/Users/lij/.vim/stl/stl_hashtable.h	/^  void erase(const const_iterator& __it);$/;"	p	class:hashtable	access:public	signature:(const const_iterator& __it)
erase	/Users/lij/.vim/stl/stl_hashtable.h	/^  void erase(const iterator& __it);$/;"	p	class:hashtable	access:public	signature:(const iterator& __it)
erase	/Users/lij/.vim/stl/stl_hashtable.h	/^  void erase(const_iterator __first, const_iterator __last);$/;"	p	class:hashtable	access:public	signature:(const_iterator __first, const_iterator __last)
erase	/Users/lij/.vim/stl/stl_hashtable.h	/^  void erase(iterator __first, iterator __last);$/;"	p	class:hashtable	access:public	signature:(iterator __first, iterator __last)
erase	/Users/lij/.vim/stl/stl_hashtable.h	/^hashtable<_Val,_Key,_HF,_Ex,_Eq,_All>::erase(const const_iterator& __it)$/;"	f	class:hashtable	signature:(const const_iterator& __it)
erase	/Users/lij/.vim/stl/stl_hashtable.h	/^hashtable<_Val,_Key,_HF,_Ex,_Eq,_All>::erase(const key_type& __key)$/;"	f	class:hashtable	signature:(const key_type& __key)
erase	/Users/lij/.vim/stl/stl_hashtable.h	/^hashtable<_Val,_Key,_HF,_Ex,_Eq,_All>::erase(const_iterator __first,$/;"	f	class:hashtable	signature:(const_iterator __first, const_iterator __last)
erase	/Users/lij/.vim/stl/stl_hashtable.h	/^void hashtable<_Val,_Key,_HF,_Ex,_Eq,_All>::erase(const iterator& __it)$/;"	f	class:hashtable	signature:(const iterator& __it)
erase	/Users/lij/.vim/stl/stl_list.h	/^  iterator erase(iterator __first, iterator __last);$/;"	p	class:list	access:public	signature:(iterator __first, iterator __last)
erase	/Users/lij/.vim/stl/stl_list.h	/^  iterator erase(iterator __position) {$/;"	f	class:list	access:public	signature:(iterator __position)
erase	/Users/lij/.vim/stl/stl_list.h	/^typename list<_Tp,_Alloc>::iterator list<_Tp, _Alloc>::erase(iterator __first, $/;"	f	class:list	signature:(iterator __first, iterator __last)
erase	/Users/lij/.vim/stl/stl_map.h	/^  size_type erase(const key_type& __x) { return _M_t.erase(__x); }$/;"	f	class:map	access:public	signature:(const key_type& __x)
erase	/Users/lij/.vim/stl/stl_map.h	/^  void erase(iterator __first, iterator __last)$/;"	f	class:map	access:public	signature:(iterator __first, iterator __last)
erase	/Users/lij/.vim/stl/stl_map.h	/^  void erase(iterator __position) { _M_t.erase(__position); }$/;"	f	class:map	access:public	signature:(iterator __position)
erase	/Users/lij/.vim/stl/stl_multimap.h	/^  size_type erase(const key_type& __x) { return _M_t.erase(__x); }$/;"	f	class:multimap	access:public	signature:(const key_type& __x)
erase	/Users/lij/.vim/stl/stl_multimap.h	/^  void erase(iterator __first, iterator __last)$/;"	f	class:multimap	access:public	signature:(iterator __first, iterator __last)
erase	/Users/lij/.vim/stl/stl_multimap.h	/^  void erase(iterator __position) { _M_t.erase(__position); }$/;"	f	class:multimap	access:public	signature:(iterator __position)
erase	/Users/lij/.vim/stl/stl_multiset.h	/^  size_type erase(const key_type& __x) { $/;"	f	class:multiset	access:public	signature:(const key_type& __x)
erase	/Users/lij/.vim/stl/stl_multiset.h	/^  void erase(iterator __first, iterator __last) { $/;"	f	class:multiset	access:public	signature:(iterator __first, iterator __last)
erase	/Users/lij/.vim/stl/stl_multiset.h	/^  void erase(iterator __position) { $/;"	f	class:multiset	access:public	signature:(iterator __position)
erase	/Users/lij/.vim/stl/stl_rope.h	/^        iterator erase(const iterator& __p) {$/;"	f	class:rope	access:public	signature:(const iterator& __p)
erase	/Users/lij/.vim/stl/stl_rope.h	/^        iterator erase(const iterator& __p, const iterator& __q) {$/;"	f	class:rope	access:public	signature:(const iterator& __p, const iterator& __q)
erase	/Users/lij/.vim/stl/stl_rope.h	/^        void erase(size_t __p) {$/;"	f	class:rope	access:public	signature:(size_t __p)
erase	/Users/lij/.vim/stl/stl_rope.h	/^        void erase(size_t __p, size_t __n) {$/;"	f	class:rope	access:public	signature:(size_t __p, size_t __n)
erase	/Users/lij/.vim/stl/stl_set.h	/^  size_type erase(const key_type& __x) { $/;"	f	class:set	access:public	signature:(const key_type& __x)
erase	/Users/lij/.vim/stl/stl_set.h	/^  void erase(iterator __first, iterator __last) { $/;"	f	class:set	access:public	signature:(iterator __first, iterator __last)
erase	/Users/lij/.vim/stl/stl_set.h	/^  void erase(iterator __position) { $/;"	f	class:set	access:public	signature:(iterator __position)
erase	/Users/lij/.vim/stl/stl_slist.h	/^  iterator erase(iterator __first, iterator __last) {$/;"	f	class:slist	access:public	signature:(iterator __first, iterator __last)
erase	/Users/lij/.vim/stl/stl_slist.h	/^  iterator erase(iterator __pos) {$/;"	f	class:slist	access:public	signature:(iterator __pos)
erase	/Users/lij/.vim/stl/stl_tree.h	/^  ::erase(const _Key* __first, const _Key* __last) $/;"	f	class:_Rb_tree	signature:(const _Key* __first, const _Key* __last)
erase	/Users/lij/.vim/stl/stl_tree.h	/^  ::erase(iterator __first, iterator __last)$/;"	f	class:_Rb_tree	signature:(iterator __first, iterator __last)
erase	/Users/lij/.vim/stl/stl_tree.h	/^  ::erase(iterator __position)$/;"	f	class:_Rb_tree	signature:(iterator __position)
erase	/Users/lij/.vim/stl/stl_tree.h	/^  size_type erase(const key_type& __x);$/;"	p	class:_Rb_tree	access:public	signature:(const key_type& __x)
erase	/Users/lij/.vim/stl/stl_tree.h	/^  void erase(const key_type* __first, const key_type* __last);$/;"	p	class:_Rb_tree	access:public	signature:(const key_type* __first, const key_type* __last)
erase	/Users/lij/.vim/stl/stl_tree.h	/^  void erase(iterator __first, iterator __last);$/;"	p	class:_Rb_tree	access:public	signature:(iterator __first, iterator __last)
erase	/Users/lij/.vim/stl/stl_tree.h	/^  void erase(iterator __position);$/;"	p	class:_Rb_tree	access:public	signature:(iterator __position)
erase	/Users/lij/.vim/stl/stl_tree.h	/^_Rb_tree<_Key,_Value,_KeyOfValue,_Compare,_Alloc>::erase(const _Key& __x)$/;"	f	class:_Rb_tree	signature:(const _Key& __x)
erase	/Users/lij/.vim/stl/stl_vector.h	/^  iterator erase(iterator __first, iterator __last) {$/;"	f	class:vector	access:public	signature:(iterator __first, iterator __last)
erase	/Users/lij/.vim/stl/stl_vector.h	/^  iterator erase(iterator __position) {$/;"	f	class:vector	access:public	signature:(iterator __position)
erase	/Users/lij/.vim/stl/string	/^  basic_string& erase(size_type __pos = 0, size_type __n = npos) {$/;"	f	class:basic_string	access:public	signature:(size_type __pos = 0, size_type __n = npos)
erase	/Users/lij/.vim/stl/string	/^  iterator erase(iterator __first, iterator __last) {$/;"	f	class:basic_string	access:public	signature:(iterator __first, iterator __last)
erase	/Users/lij/.vim/stl/string	/^  iterator erase(iterator __position) {$/;"	f	class:basic_string	access:public	signature:(iterator __position)
erase_after	/Users/lij/.vim/stl/stl_slist.h	/^  iterator erase_after(iterator __before_first, iterator __last) {$/;"	f	class:slist	access:public	signature:(iterator __before_first, iterator __last)
erase_after	/Users/lij/.vim/stl/stl_slist.h	/^  iterator erase_after(iterator __pos) {$/;"	f	class:slist	access:public	signature:(iterator __pos)
exp	/Users/lij/.vim/stl/valarray	/^inline valarray<_Tp> exp(const valarray<_Tp>& __x) {$/;"	f	signature:(const valarray<_Tp>& __x)
explicit	/Users/lij/.vim/stl/stl_config.h	/^#   define explicit$/;"	d
failed	/Users/lij/.vim/stl/stl_iterator.h	/^  bool failed() const { return !_M_ok; }$/;"	f	class:ostreambuf_iterator	access:public	signature:() const
false	/Users/lij/.vim/stl/stl_config.h	/^#   define false /;"	d
fill	/Users/lij/.vim/stl/stl_algobase.h	/^inline void fill(char* __first, char* __last, const char& __c) {$/;"	f	signature:(char* __first, char* __last, const char& __c)
fill	/Users/lij/.vim/stl/stl_algobase.h	/^inline void fill(signed char* __first, signed char* __last,$/;"	f	signature:(signed char* __first, signed char* __last, const signed char& __c)
fill	/Users/lij/.vim/stl/stl_algobase.h	/^inline void fill(unsigned char* __first, unsigned char* __last,$/;"	f	signature:(unsigned char* __first, unsigned char* __last, const unsigned char& __c)
fill	/Users/lij/.vim/stl/stl_algobase.h	/^void fill(_ForwardIter __first, _ForwardIter __last, const _Tp& __value) {$/;"	f	signature:(_ForwardIter __first, _ForwardIter __last, const _Tp& __value)
fill_n	/Users/lij/.vim/stl/stl_algobase.h	/^_OutputIter fill_n(_OutputIter __first, _Size __n, const _Tp& __value) {$/;"	f	signature:(_OutputIter __first, _Size __n, const _Tp& __value)
fill_n	/Users/lij/.vim/stl/stl_algobase.h	/^inline char* fill_n(char* __first, _Size __n, const char& __c) {$/;"	f	signature:(char* __first, _Size __n, const char& __c)
fill_n	/Users/lij/.vim/stl/stl_algobase.h	/^inline signed char* fill_n(char* __first, _Size __n,$/;"	f	signature:(char* __first, _Size __n, const signed char& __c)
fill_n	/Users/lij/.vim/stl/stl_algobase.h	/^inline unsigned char* fill_n(unsigned char* __first, _Size __n,$/;"	f	signature:(unsigned char* __first, _Size __n, const unsigned char& __c)
find	/Users/lij/.vim/stl/char_traits.h	/^  static const _CharT* find(const _CharT* __s, size_t __n, const _CharT& __c)$/;"	f	class:__char_traits_base	access:public	signature:(const _CharT* __s, size_t __n, const _CharT& __c)
find	/Users/lij/.vim/stl/ropeimpl.h	/^rope<_CharT,_Alloc>::find(_CharT __pattern, size_t __start) const$/;"	f	class:rope	signature:(_CharT __pattern, size_t __start) const
find	/Users/lij/.vim/stl/stl_algo.h	/^_RandomAccessIter find(_RandomAccessIter __first, _RandomAccessIter __last,$/;"	f	signature:(_RandomAccessIter __first, _RandomAccessIter __last, const _Tp& __val, random_access_iterator_tag)
find	/Users/lij/.vim/stl/stl_algo.h	/^inline _InputIter find(_InputIter __first, _InputIter __last,$/;"	f	signature:(_InputIter __first, _InputIter __last, const _Tp& __val)
find	/Users/lij/.vim/stl/stl_algo.h	/^inline _InputIter find(_InputIter __first, _InputIter __last,$/;"	f	signature:(_InputIter __first, _InputIter __last, const _Tp& __val, input_iterator_tag)
find	/Users/lij/.vim/stl/stl_hash_map.h	/^  const_iterator find(const key_type& __key) const $/;"	f	class:hash_map	access:public	signature:(const key_type& __key) const
find	/Users/lij/.vim/stl/stl_hash_map.h	/^  const_iterator find(const key_type& __key) const $/;"	f	class:hash_multimap	access:public	signature:(const key_type& __key) const
find	/Users/lij/.vim/stl/stl_hash_map.h	/^  iterator find(const key_type& __key) { return _M_ht.find(__key); }$/;"	f	class:hash_map	access:public	signature:(const key_type& __key)
find	/Users/lij/.vim/stl/stl_hash_map.h	/^  iterator find(const key_type& __key) { return _M_ht.find(__key); }$/;"	f	class:hash_multimap	access:public	signature:(const key_type& __key)
find	/Users/lij/.vim/stl/stl_hash_set.h	/^  iterator find(const key_type& __key) const { return _M_ht.find(__key); }$/;"	f	class:hash_multiset	access:public	signature:(const key_type& __key) const
find	/Users/lij/.vim/stl/stl_hash_set.h	/^  iterator find(const key_type& __key) const { return _M_ht.find(__key); }$/;"	f	class:hash_set	access:public	signature:(const key_type& __key) const
find	/Users/lij/.vim/stl/stl_hashtable.h	/^  const_iterator find(const key_type& __key) const$/;"	f	class:hashtable	access:public	signature:(const key_type& __key) const
find	/Users/lij/.vim/stl/stl_hashtable.h	/^  iterator find(const key_type& __key) $/;"	f	class:hashtable	access:public	signature:(const key_type& __key)
find	/Users/lij/.vim/stl/stl_map.h	/^  const_iterator find(const key_type& __x) const { return _M_t.find(__x); }$/;"	f	class:map	access:public	signature:(const key_type& __x) const
find	/Users/lij/.vim/stl/stl_map.h	/^  iterator find(const key_type& __x) { return _M_t.find(__x); }$/;"	f	class:map	access:public	signature:(const key_type& __x)
find	/Users/lij/.vim/stl/stl_multimap.h	/^  const_iterator find(const key_type& __x) const { return _M_t.find(__x); }$/;"	f	class:multimap	access:public	signature:(const key_type& __x) const
find	/Users/lij/.vim/stl/stl_multimap.h	/^  iterator find(const key_type& __x) { return _M_t.find(__x); }$/;"	f	class:multimap	access:public	signature:(const key_type& __x)
find	/Users/lij/.vim/stl/stl_multiset.h	/^  iterator find(const key_type& __x) const { return _M_t.find(__x); }$/;"	f	class:multiset	access:public	signature:(const key_type& __x) const
find	/Users/lij/.vim/stl/stl_rope.h	/^        size_type find(_CharT __c, size_type __pos = 0) const;$/;"	p	class:rope	access:public	signature:(_CharT __c, size_type __pos = 0) const
find	/Users/lij/.vim/stl/stl_rope.h	/^        size_type find(const _CharT* __s, size_type __pos = 0) const {$/;"	f	class:rope	access:public	signature:(const _CharT* __s, size_type __pos = 0) const
find	/Users/lij/.vim/stl/stl_set.h	/^  iterator find(const key_type& __x) const { return _M_t.find(__x); }$/;"	f	class:set	access:public	signature:(const key_type& __x) const
find	/Users/lij/.vim/stl/stl_tree.h	/^  const_iterator find(const key_type& __x) const;$/;"	p	class:_Rb_tree	access:public	signature:(const key_type& __x) const
find	/Users/lij/.vim/stl/stl_tree.h	/^  iterator find(const key_type& __x);$/;"	p	class:_Rb_tree	access:public	signature:(const key_type& __x)
find	/Users/lij/.vim/stl/stl_tree.h	/^_Rb_tree<_Key,_Value,_KeyOfValue,_Compare,_Alloc>::find(const _Key& __k) const$/;"	f	class:_Rb_tree	signature:(const _Key& __k) const
find	/Users/lij/.vim/stl/stl_tree.h	/^_Rb_tree<_Key,_Value,_KeyOfValue,_Compare,_Alloc>::find(const _Key& __k)$/;"	f	class:_Rb_tree	signature:(const _Key& __k)
find	/Users/lij/.vim/stl/string	/^  ::find(_CharT __c, size_type __pos) const $/;"	f	class:basic_string	signature:(_CharT __c, size_type __pos) const
find	/Users/lij/.vim/stl/string	/^  ::find(const _CharT* __s, size_type __pos, size_type __n) const $/;"	f	class:basic_string	signature:(const _CharT* __s, size_type __pos, size_type __n) const
find	/Users/lij/.vim/stl/string	/^  size_type find(_CharT __c, size_type __pos = 0) const;$/;"	p	class:basic_string	file:	access:public	signature:(_CharT __c, size_type __pos = 0) const
find	/Users/lij/.vim/stl/string	/^  size_type find(const _CharT* __s, size_type __pos = 0) const $/;"	f	class:basic_string	access:public	signature:(const _CharT* __s, size_type __pos = 0) const
find	/Users/lij/.vim/stl/string	/^  size_type find(const _CharT* __s, size_type __pos, size_type __n) const;$/;"	p	class:basic_string	file:	access:public	signature:(const _CharT* __s, size_type __pos, size_type __n) const
find	/Users/lij/.vim/stl/string	/^  size_type find(const basic_string& __s, size_type __pos = 0) const $/;"	f	class:basic_string	access:public	signature:(const basic_string& __s, size_type __pos = 0) const
find_end	/Users/lij/.vim/stl/stl_algo.h	/^find_end(_ForwardIter1 __first1, _ForwardIter1 __last1, $/;"	f	signature:(_ForwardIter1 __first1, _ForwardIter1 __last1, _ForwardIter2 __first2, _ForwardIter2 __last2)
find_end	/Users/lij/.vim/stl/stl_algo.h	/^find_end(_ForwardIter1 __first1, _ForwardIter1 __last1, $/;"	f	signature:(_ForwardIter1 __first1, _ForwardIter1 __last1, _ForwardIter2 __first2, _ForwardIter2 __last2, _BinaryPredicate __comp)
find_first_not_of	/Users/lij/.vim/stl/string	/^  ::find_first_not_of(_CharT __c, size_type __pos) const$/;"	f	class:basic_string	signature:(_CharT __c, size_type __pos) const
find_first_not_of	/Users/lij/.vim/stl/string	/^  ::find_first_not_of(const _CharT* __s, size_type __pos, size_type __n) const$/;"	f	class:basic_string	signature:(const _CharT* __s, size_type __pos, size_type __n) const
find_first_not_of	/Users/lij/.vim/stl/string	/^  size_type find_first_not_of(_CharT __c, size_type __pos = 0) const;$/;"	p	class:basic_string	file:	access:public	signature:(_CharT __c, size_type __pos = 0) const
find_first_not_of	/Users/lij/.vim/stl/string	/^  size_type find_first_not_of(const _CharT* __s, size_type __pos = 0) const $/;"	f	class:basic_string	access:public	signature:(const _CharT* __s, size_type __pos = 0) const
find_first_not_of	/Users/lij/.vim/stl/string	/^  size_type find_first_not_of(const _CharT* __s, size_type __pos,$/;"	p	class:basic_string	file:	access:public	signature:(const _CharT* __s, size_type __pos, size_type __n) const
find_first_not_of	/Users/lij/.vim/stl/string	/^  size_type find_first_not_of(const basic_string& __s, $/;"	f	class:basic_string	access:public	signature:(const basic_string& __s, size_type __pos = 0) const
find_first_of	/Users/lij/.vim/stl/stl_algo.h	/^_InputIter find_first_of(_InputIter __first1, _InputIter __last1,$/;"	f	signature:(_InputIter __first1, _InputIter __last1, _ForwardIter __first2, _ForwardIter __last2)
find_first_of	/Users/lij/.vim/stl/stl_algo.h	/^_InputIter find_first_of(_InputIter __first1, _InputIter __last1,$/;"	f	signature:(_InputIter __first1, _InputIter __last1, _ForwardIter __first2, _ForwardIter __last2, _BinaryPredicate __comp)
find_first_of	/Users/lij/.vim/stl/string	/^  ::find_first_of(const _CharT* __s, size_type __pos, size_type __n) const$/;"	f	class:basic_string	signature:(const _CharT* __s, size_type __pos, size_type __n) const
find_first_of	/Users/lij/.vim/stl/string	/^  size_type find_first_of(_CharT __c, size_type __pos = 0) const $/;"	f	class:basic_string	access:public	signature:(_CharT __c, size_type __pos = 0) const
find_first_of	/Users/lij/.vim/stl/string	/^  size_type find_first_of(const _CharT* __s, size_type __pos = 0) const $/;"	f	class:basic_string	access:public	signature:(const _CharT* __s, size_type __pos = 0) const
find_first_of	/Users/lij/.vim/stl/string	/^  size_type find_first_of(const _CharT* __s, size_type __pos, $/;"	p	class:basic_string	file:	access:public	signature:(const _CharT* __s, size_type __pos, size_type __n) const
find_first_of	/Users/lij/.vim/stl/string	/^  size_type find_first_of(const basic_string& __s, size_type __pos = 0) const $/;"	f	class:basic_string	access:public	signature:(const basic_string& __s, size_type __pos = 0) const
find_if	/Users/lij/.vim/stl/stl_algo.h	/^_RandomAccessIter find_if(_RandomAccessIter __first, _RandomAccessIter __last,$/;"	f	signature:(_RandomAccessIter __first, _RandomAccessIter __last, _Predicate __pred, random_access_iterator_tag)
find_if	/Users/lij/.vim/stl/stl_algo.h	/^inline _InputIter find_if(_InputIter __first, _InputIter __last,$/;"	f	signature:(_InputIter __first, _InputIter __last, _Predicate __pred)
find_if	/Users/lij/.vim/stl/stl_algo.h	/^inline _InputIter find_if(_InputIter __first, _InputIter __last,$/;"	f	signature:(_InputIter __first, _InputIter __last, _Predicate __pred, input_iterator_tag)
find_last_not_of	/Users/lij/.vim/stl/string	/^  ::find_last_not_of(_Tp __c, size_type __pos) const $/;"	f	class:basic_string	signature:(_Tp __c, size_type __pos) const
find_last_not_of	/Users/lij/.vim/stl/string	/^  ::find_last_not_of(const _CharT* __s, size_type __pos, size_type __n) const $/;"	f	class:basic_string	signature:(const _CharT* __s, size_type __pos, size_type __n) const
find_last_not_of	/Users/lij/.vim/stl/string	/^  size_type find_last_not_of(_CharT __c, size_type __pos = npos) const;$/;"	p	class:basic_string	file:	access:public	signature:(_CharT __c, size_type __pos = npos) const
find_last_not_of	/Users/lij/.vim/stl/string	/^  size_type find_last_not_of(const _CharT* __s, size_type __pos = npos) const$/;"	f	class:basic_string	access:public	signature:(const _CharT* __s, size_type __pos = npos) const
find_last_not_of	/Users/lij/.vim/stl/string	/^  size_type find_last_not_of(const _CharT* __s, size_type __pos,$/;"	p	class:basic_string	file:	access:public	signature:(const _CharT* __s, size_type __pos, size_type __n) const
find_last_not_of	/Users/lij/.vim/stl/string	/^  size_type find_last_not_of(const basic_string& __s, $/;"	f	class:basic_string	access:public	signature:(const basic_string& __s, size_type __pos = npos) const
find_last_of	/Users/lij/.vim/stl/string	/^  ::find_last_of(const _CharT* __s, size_type __pos, size_type __n) const$/;"	f	class:basic_string	signature:(const _CharT* __s, size_type __pos, size_type __n) const
find_last_of	/Users/lij/.vim/stl/string	/^  size_type find_last_of(_CharT __c, size_type __pos = npos) const {$/;"	f	class:basic_string	access:public	signature:(_CharT __c, size_type __pos = npos) const
find_last_of	/Users/lij/.vim/stl/string	/^  size_type find_last_of(const _CharT* __s, size_type __pos = npos) const $/;"	f	class:basic_string	access:public	signature:(const _CharT* __s, size_type __pos = npos) const
find_last_of	/Users/lij/.vim/stl/string	/^  size_type find_last_of(const _CharT* __s, size_type __pos, $/;"	p	class:basic_string	file:	access:public	signature:(const _CharT* __s, size_type __pos, size_type __n) const
find_last_of	/Users/lij/.vim/stl/string	/^  size_type find_last_of(const basic_string& __s,$/;"	f	class:basic_string	access:public	signature:(const basic_string& __s, size_type __pos = npos) const
find_or_insert	/Users/lij/.vim/stl/stl_hashtable.h	/^  reference find_or_insert(const value_type& __obj);$/;"	p	class:hashtable	access:public	signature:(const value_type& __obj)
find_or_insert	/Users/lij/.vim/stl/stl_hashtable.h	/^hashtable<_Val,_Key,_HF,_Ex,_Eq,_All>::find_or_insert(const value_type& __obj)$/;"	f	class:hashtable	signature:(const value_type& __obj)
first	/Users/lij/.vim/stl/stl_pair.h	/^  _T1 first;$/;"	m	struct:pair	access:public
first_argument_type	/Users/lij/.vim/stl/stl_function.h	/^  typedef  _Arg1   first_argument_type;$/;"	t	struct:_Constant_binary_fun	access:public
first_argument_type	/Users/lij/.vim/stl/stl_function.h	/^  typedef _Arg1 first_argument_type;$/;"	t	struct:binary_function	access:public
first_type	/Users/lij/.vim/stl/stl_pair.h	/^  typedef _T1 first_type;$/;"	t	struct:pair	access:public
flip	/Users/lij/.vim/stl/bitset	/^    reference& flip() {$/;"	f	class:bitset::reference	access:public	signature:()
flip	/Users/lij/.vim/stl/bitset	/^  bitset<_Nb>& flip() {$/;"	f	class:bitset	access:public	signature:()
flip	/Users/lij/.vim/stl/bitset	/^  bitset<_Nb>& flip(size_t __pos) {$/;"	f	class:bitset	access:public	signature:(size_t __pos)
flip	/Users/lij/.vim/stl/stl_bvector.h	/^  void flip() { *_M_p ^= _M_mask; }$/;"	f	struct:_Bit_reference	access:public	signature:()
flip	/Users/lij/.vim/stl/stl_bvector.h	/^  void flip() {$/;"	f	class:__BVECTOR	access:public	signature:()
float_denorm_style	/Users/lij/.vim/stl/limits	/^enum float_denorm_style {$/;"	g	file:
float_round_style	/Users/lij/.vim/stl/limits	/^enum float_round_style {$/;"	g	file:
flush	/Users/lij/.vim/stl/stl_rope.h	/^        void flush() {$/;"	f	class:sequence_buffer	access:public	signature:()
for_each	/Users/lij/.vim/stl/stl_algo.h	/^_Function for_each(_InputIter __first, _InputIter __last, _Function __f) {$/;"	f	signature:(_InputIter __first, _InputIter __last, _Function __f)
forward_iterator	/Users/lij/.vim/stl/stl_iterator_base.h	/^template <class _Tp, class _Distance> struct forward_iterator {$/;"	s
forward_iterator::difference_type	/Users/lij/.vim/stl/stl_iterator_base.h	/^  typedef _Distance            difference_type;$/;"	t	struct:forward_iterator	access:public
forward_iterator::iterator_category	/Users/lij/.vim/stl/stl_iterator_base.h	/^  typedef forward_iterator_tag iterator_category;$/;"	t	struct:forward_iterator	access:public
forward_iterator::pointer	/Users/lij/.vim/stl/stl_iterator_base.h	/^  typedef _Tp*                 pointer;$/;"	t	struct:forward_iterator	access:public
forward_iterator::reference	/Users/lij/.vim/stl/stl_iterator_base.h	/^  typedef _Tp&                 reference;$/;"	t	struct:forward_iterator	access:public
forward_iterator::value_type	/Users/lij/.vim/stl/stl_iterator_base.h	/^  typedef _Tp                  value_type;$/;"	t	struct:forward_iterator	access:public
forward_iterator_tag	/Users/lij/.vim/stl/stl_iterator_base.h	/^struct forward_iterator_tag : public input_iterator_tag {};$/;"	s	inherits:input_iterator_tag
front	/Users/lij/.vim/stl/stl_bvector.h	/^  const_reference front() const { return *begin(); }$/;"	f	class:__BVECTOR	access:public	signature:() const
front	/Users/lij/.vim/stl/stl_bvector.h	/^  reference front() { return *begin(); }$/;"	f	class:__BVECTOR	access:public	signature:()
front	/Users/lij/.vim/stl/stl_deque.h	/^  const_reference front() const { return *_M_start; }$/;"	f	class:deque	access:public	signature:() const
front	/Users/lij/.vim/stl/stl_deque.h	/^  reference front() { return *_M_start; }$/;"	f	class:deque	access:public	signature:()
front	/Users/lij/.vim/stl/stl_list.h	/^  const_reference front() const { return *begin(); }$/;"	f	class:list	access:public	signature:() const
front	/Users/lij/.vim/stl/stl_list.h	/^  reference front() { return *begin(); }$/;"	f	class:list	access:public	signature:()
front	/Users/lij/.vim/stl/stl_queue.h	/^  const_reference front() const { return c.front(); }$/;"	f	class:queue	access:public	signature:() const
front	/Users/lij/.vim/stl/stl_queue.h	/^  reference front() { return c.front(); }$/;"	f	class:queue	access:public	signature:()
front	/Users/lij/.vim/stl/stl_rope.h	/^        _CharT front() const$/;"	f	class:rope	access:public	signature:() const
front	/Users/lij/.vim/stl/stl_slist.h	/^  const_reference front() const $/;"	f	class:slist	access:public	signature:() const
front	/Users/lij/.vim/stl/stl_slist.h	/^  reference front() { return ((_Node*) this->_M_head._M_next)->_M_data; }$/;"	f	class:slist	access:public	signature:()
front	/Users/lij/.vim/stl/stl_vector.h	/^  const_reference front() const { return *begin(); }$/;"	f	class:vector	access:public	signature:() const
front	/Users/lij/.vim/stl/stl_vector.h	/^  reference front() { return *begin(); }$/;"	f	class:vector	access:public	signature:()
front_insert_iterator	/Users/lij/.vim/stl/stl_iterator.h	/^  explicit front_insert_iterator(_Container& __x) : container(&__x) {}$/;"	f	class:front_insert_iterator	access:public	signature:(_Container& __x)
front_insert_iterator	/Users/lij/.vim/stl/stl_iterator.h	/^class front_insert_iterator {$/;"	c
front_insert_iterator::container	/Users/lij/.vim/stl/stl_iterator.h	/^  _Container* container;$/;"	m	class:front_insert_iterator	access:protected
front_insert_iterator::container_type	/Users/lij/.vim/stl/stl_iterator.h	/^  typedef _Container          container_type;$/;"	t	class:front_insert_iterator	access:public
front_insert_iterator::difference_type	/Users/lij/.vim/stl/stl_iterator.h	/^  typedef void                difference_type;$/;"	t	class:front_insert_iterator	access:public
front_insert_iterator::front_insert_iterator	/Users/lij/.vim/stl/stl_iterator.h	/^  explicit front_insert_iterator(_Container& __x) : container(&__x) {}$/;"	f	class:front_insert_iterator	access:public	signature:(_Container& __x)
front_insert_iterator::iterator_category	/Users/lij/.vim/stl/stl_iterator.h	/^  typedef output_iterator_tag iterator_category;$/;"	t	class:front_insert_iterator	access:public
front_insert_iterator::operator *	/Users/lij/.vim/stl/stl_iterator.h	/^  front_insert_iterator<_Container>& operator*() { return *this; }$/;"	f	class:front_insert_iterator	access:public	signature:()
front_insert_iterator::operator ++	/Users/lij/.vim/stl/stl_iterator.h	/^  front_insert_iterator<_Container>& operator++() { return *this; }$/;"	f	class:front_insert_iterator	access:public	signature:()
front_insert_iterator::operator ++	/Users/lij/.vim/stl/stl_iterator.h	/^  front_insert_iterator<_Container>& operator++(int) { return *this; }$/;"	f	class:front_insert_iterator	access:public	signature:(int)
front_insert_iterator::operator =	/Users/lij/.vim/stl/stl_iterator.h	/^  operator=(const typename _Container::value_type& __value) { $/;"	f	class:front_insert_iterator	access:public	signature:(const typename _Container::value_type& __value)
front_insert_iterator::pointer	/Users/lij/.vim/stl/stl_iterator.h	/^  typedef void                pointer;$/;"	t	class:front_insert_iterator	access:public
front_insert_iterator::reference	/Users/lij/.vim/stl/stl_iterator.h	/^  typedef void                reference;$/;"	t	class:front_insert_iterator	access:public
front_insert_iterator::value_type	/Users/lij/.vim/stl/stl_iterator.h	/^  typedef void                value_type;$/;"	t	class:front_insert_iterator	access:public
front_inserter	/Users/lij/.vim/stl/stl_iterator.h	/^inline front_insert_iterator<_Container> front_inserter(_Container& __x) {$/;"	f	signature:(_Container& __x)
generate	/Users/lij/.vim/stl/stl_algo.h	/^void generate(_ForwardIter __first, _ForwardIter __last, _Generator __gen) {$/;"	f	signature:(_ForwardIter __first, _ForwardIter __last, _Generator __gen)
generate_n	/Users/lij/.vim/stl/stl_algo.h	/^_OutputIter generate_n(_OutputIter __first, _Size __n, _Generator __gen) {$/;"	f	signature:(_OutputIter __first, _Size __n, _Generator __gen)
get_allocator	/Users/lij/.vim/stl/stl_bvector.h	/^  allocator_type get_allocator() const { return _M_data_allocator; }$/;"	f	class:_Bvector_alloc_base	access:public	signature:() const
get_allocator	/Users/lij/.vim/stl/stl_bvector.h	/^  allocator_type get_allocator() const { return allocator_type(); }$/;"	f	class:_Bvector_alloc_base	access:public	signature:() const
get_allocator	/Users/lij/.vim/stl/stl_bvector.h	/^  allocator_type get_allocator() const { return allocator_type(); }$/;"	f	class:_Bvector_base	access:public	signature:() const
get_allocator	/Users/lij/.vim/stl/stl_bvector.h	/^  allocator_type get_allocator() const {$/;"	f	class:__BVECTOR	access:public	signature:() const
get_allocator	/Users/lij/.vim/stl/stl_deque.h	/^  allocator_type get_allocator() const { return _Base::get_allocator(); }$/;"	f	class:deque	access:public	signature:() const
get_allocator	/Users/lij/.vim/stl/stl_deque.h	/^  allocator_type get_allocator() const { return _M_node_allocator; }$/;"	f	class:_Deque_alloc_base	access:public	signature:() const
get_allocator	/Users/lij/.vim/stl/stl_deque.h	/^  allocator_type get_allocator() const { return allocator_type(); }$/;"	f	class:_Deque_alloc_base	access:public	signature:() const
get_allocator	/Users/lij/.vim/stl/stl_deque.h	/^  allocator_type get_allocator() const { return allocator_type(); }$/;"	f	class:_Deque_base	access:public	signature:() const
get_allocator	/Users/lij/.vim/stl/stl_hash_map.h	/^  allocator_type get_allocator() const { return _M_ht.get_allocator(); }$/;"	f	class:hash_map	access:public	signature:() const
get_allocator	/Users/lij/.vim/stl/stl_hash_map.h	/^  allocator_type get_allocator() const { return _M_ht.get_allocator(); }$/;"	f	class:hash_multimap	access:public	signature:() const
get_allocator	/Users/lij/.vim/stl/stl_hash_set.h	/^  allocator_type get_allocator() const { return _M_ht.get_allocator(); }$/;"	f	class:hash_multiset	access:public	signature:() const
get_allocator	/Users/lij/.vim/stl/stl_hash_set.h	/^  allocator_type get_allocator() const { return _M_ht.get_allocator(); }$/;"	f	class:hash_set	access:public	signature:() const
get_allocator	/Users/lij/.vim/stl/stl_hashtable.h	/^  allocator_type get_allocator() const { return _M_node_allocator; }$/;"	f	class:hashtable	access:public	signature:() const
get_allocator	/Users/lij/.vim/stl/stl_hashtable.h	/^  allocator_type get_allocator() const { return allocator_type(); }$/;"	f	class:hashtable	access:public	signature:() const
get_allocator	/Users/lij/.vim/stl/stl_list.h	/^  allocator_type get_allocator() const { return _Base::get_allocator(); }$/;"	f	class:list	access:public	signature:() const
get_allocator	/Users/lij/.vim/stl/stl_list.h	/^  allocator_type get_allocator() const { return _Node_allocator; }$/;"	f	class:_List_alloc_base	access:public	signature:() const
get_allocator	/Users/lij/.vim/stl/stl_list.h	/^  allocator_type get_allocator() const { return allocator_type(); }$/;"	f	class:_List_alloc_base	access:public	signature:() const
get_allocator	/Users/lij/.vim/stl/stl_list.h	/^  allocator_type get_allocator() const { return allocator_type(); }$/;"	f	class:_List_base	access:public	signature:() const
get_allocator	/Users/lij/.vim/stl/stl_map.h	/^  allocator_type get_allocator() const { return _M_t.get_allocator(); }$/;"	f	class:map	access:public	signature:() const
get_allocator	/Users/lij/.vim/stl/stl_multimap.h	/^  allocator_type get_allocator() const { return _M_t.get_allocator(); }$/;"	f	class:multimap	access:public	signature:() const
get_allocator	/Users/lij/.vim/stl/stl_multiset.h	/^  allocator_type get_allocator() const { return _M_t.get_allocator(); }$/;"	f	class:multiset	access:public	signature:() const
get_allocator	/Users/lij/.vim/stl/stl_rope.h	/^  allocator_type get_allocator() const { return _M_data_allocator; }$/;"	f	class:_Rope_alloc_base	access:public	signature:() const
get_allocator	/Users/lij/.vim/stl/stl_rope.h	/^  allocator_type get_allocator() const { return _M_data_allocator; }$/;"	f	class:_Rope_rep_alloc_base	access:public	signature:() const
get_allocator	/Users/lij/.vim/stl/stl_rope.h	/^  allocator_type get_allocator() const { return allocator_type(); }$/;"	f	class:_Rope_alloc_base	access:public	signature:() const
get_allocator	/Users/lij/.vim/stl/stl_rope.h	/^  allocator_type get_allocator() const { return allocator_type(); }$/;"	f	class:_Rope_rep_alloc_base	access:public	signature:() const
get_allocator	/Users/lij/.vim/stl/stl_rope.h	/^  static allocator_type get_allocator() { return allocator_type(); }$/;"	f	class:_Rope_base	access:public	signature:()
get_allocator	/Users/lij/.vim/stl/stl_rope.h	/^  static allocator_type get_allocator() { return allocator_type(); }$/;"	f	class:_Rope_rep_base	access:public	signature:()
get_allocator	/Users/lij/.vim/stl/stl_set.h	/^  allocator_type get_allocator() const { return _M_t.get_allocator(); }$/;"	f	class:set	access:public	signature:() const
get_allocator	/Users/lij/.vim/stl/stl_slist.h	/^  allocator_type get_allocator() const { return _Base::get_allocator(); }$/;"	f	class:slist	access:public	signature:() const
get_allocator	/Users/lij/.vim/stl/stl_slist.h	/^  allocator_type get_allocator() const { return _M_node_allocator; }$/;"	f	class:_Slist_alloc_base	access:public	signature:() const
get_allocator	/Users/lij/.vim/stl/stl_slist.h	/^  allocator_type get_allocator() const { return allocator_type(); }$/;"	f	class:_Slist_alloc_base	access:public	signature:() const
get_allocator	/Users/lij/.vim/stl/stl_slist.h	/^  allocator_type get_allocator() const { return allocator_type(); }$/;"	f	struct:_Slist_base	access:public	signature:() const
get_allocator	/Users/lij/.vim/stl/stl_tree.h	/^  allocator_type get_allocator() const { return _Base::get_allocator(); }$/;"	f	class:_Rb_tree	access:public	signature:() const
get_allocator	/Users/lij/.vim/stl/stl_tree.h	/^  allocator_type get_allocator() const { return _M_node_allocator; }$/;"	f	class:_Rb_tree_alloc_base	access:public	signature:() const
get_allocator	/Users/lij/.vim/stl/stl_tree.h	/^  allocator_type get_allocator() const { return allocator_type(); }$/;"	f	class:_Rb_tree_alloc_base	access:public	signature:() const
get_allocator	/Users/lij/.vim/stl/stl_tree.h	/^  allocator_type get_allocator() const { return allocator_type(); }$/;"	f	struct:_Rb_tree_base	access:public	signature:() const
get_allocator	/Users/lij/.vim/stl/stl_vector.h	/^  allocator_type get_allocator() const { return _Base::get_allocator(); }$/;"	f	class:vector	access:public	signature:() const
get_allocator	/Users/lij/.vim/stl/stl_vector.h	/^  allocator_type get_allocator() const { return _M_data_allocator; }$/;"	f	class:_Vector_alloc_base	access:public	signature:() const
get_allocator	/Users/lij/.vim/stl/stl_vector.h	/^  allocator_type get_allocator() const { return allocator_type(); }$/;"	f	class:_Vector_alloc_base	access:public	signature:() const
get_allocator	/Users/lij/.vim/stl/string	/^  allocator_type get_allocator() const { return _Base::get_allocator(); }$/;"	f	class:basic_string	access:public	signature:() const
get_allocator	/Users/lij/.vim/stl/string	/^  allocator_type get_allocator() const { return _M_data_allocator; }$/;"	f	class:_String_alloc_base	access:public	signature:() const
get_allocator	/Users/lij/.vim/stl/string	/^  allocator_type get_allocator() const { return allocator_type(); }$/;"	f	class:_String_alloc_base	access:public	signature:() const
get_allocator	/Users/lij/.vim/stl/string	/^  allocator_type get_allocator() const { return allocator_type(); }$/;"	f	class:_String_base	access:public	signature:() const
get_temporary_buffer	/Users/lij/.vim/stl/stl_tempbuf.h	/^inline pair<_Tp*, ptrdiff_t> get_temporary_buffer(ptrdiff_t __len) {$/;"	f	signature:(ptrdiff_t __len)
get_temporary_buffer	/Users/lij/.vim/stl/stl_tempbuf.h	/^inline pair<_Tp*, ptrdiff_t> get_temporary_buffer(ptrdiff_t __len, _Tp*) {$/;"	f	signature:(ptrdiff_t __len, _Tp*)
getline	/Users/lij/.vim/stl/string	/^getline(basic_istream<_CharT, _Traits>& __is,$/;"	f	signature:(basic_istream<_CharT, _Traits>& __is, basic_string<_CharT,_Traits,_Alloc>& __s)
getline	/Users/lij/.vim/stl/string	/^getline(istream& __is,$/;"	f	signature:(istream& __is, basic_string<_CharT,_Traits,_Alloc>& __s, _CharT __delim)
greater	/Users/lij/.vim/stl/stl_function.h	/^struct greater : public binary_function<_Tp,_Tp,bool> $/;"	s	inherits:binary_function
greater::operator ()	/Users/lij/.vim/stl/stl_function.h	/^  bool operator()(const _Tp& __x, const _Tp& __y) const { return __x > __y; }$/;"	f	struct:greater	access:public	signature:(const _Tp& __x, const _Tp& __y) const
greater_equal	/Users/lij/.vim/stl/stl_function.h	/^struct greater_equal : public binary_function<_Tp,_Tp,bool>$/;"	s	inherits:binary_function
greater_equal::operator ()	/Users/lij/.vim/stl/stl_function.h	/^  bool operator()(const _Tp& __x, const _Tp& __y) const { return __x >= __y; }$/;"	f	struct:greater_equal	access:public	signature:(const _Tp& __x, const _Tp& __y) const
gslice	/Users/lij/.vim/stl/valarray	/^  gslice() : _M_start(0), _M_lengths(0), _M_strides(0) {}$/;"	f	class:gslice	access:public	signature:()
gslice	/Users/lij/.vim/stl/valarray	/^  gslice(size_t __start,$/;"	f	class:gslice	access:public	signature:(size_t __start, const valarray<size_t>& __lengths, const valarray<size_t>& __strides)
gslice	/Users/lij/.vim/stl/valarray	/^class gslice {$/;"	c	file:
gslice::_M_empty	/Users/lij/.vim/stl/valarray	/^  bool _M_empty() const { return _M_lengths.size() == 0; }$/;"	f	class:gslice	access:public	signature:() const
gslice::_M_lengths	/Users/lij/.vim/stl/valarray	/^  valarray<size_t> _M_lengths;$/;"	m	class:gslice	file:	access:private
gslice::_M_size	/Users/lij/.vim/stl/valarray	/^  size_t _M_size() const {$/;"	f	class:gslice	access:public	signature:() const
gslice::_M_start	/Users/lij/.vim/stl/valarray	/^  size_t _M_start;$/;"	m	class:gslice	file:	access:private
gslice::_M_strides	/Users/lij/.vim/stl/valarray	/^  valarray<size_t> _M_strides;$/;"	m	class:gslice	file:	access:private
gslice::gslice	/Users/lij/.vim/stl/valarray	/^  gslice() : _M_start(0), _M_lengths(0), _M_strides(0) {}$/;"	f	class:gslice	access:public	signature:()
gslice::gslice	/Users/lij/.vim/stl/valarray	/^  gslice(size_t __start,$/;"	f	class:gslice	access:public	signature:(size_t __start, const valarray<size_t>& __lengths, const valarray<size_t>& __strides)
gslice::size	/Users/lij/.vim/stl/valarray	/^  valarray<size_t> size()   const { return _M_lengths; }$/;"	f	class:gslice	access:public	signature:() const
gslice::start	/Users/lij/.vim/stl/valarray	/^  size_t start()            const { return _M_start; }$/;"	f	class:gslice	access:public	signature:() const
gslice::stride	/Users/lij/.vim/stl/valarray	/^  valarray<size_t> stride() const { return _M_strides; }$/;"	f	class:gslice	access:public	signature:() const
gslice_array	/Users/lij/.vim/stl/valarray	/^  gslice_array(gslice __gslice, valarray<_Tp>& __array)$/;"	f	class:gslice_array	file:	access:private	signature:(gslice __gslice, valarray<_Tp>& __array)
gslice_array	/Users/lij/.vim/stl/valarray	/^class gslice_array {$/;"	c	file:
gslice_array::_M_array	/Users/lij/.vim/stl/valarray	/^  valarray<value_type>& _M_array;$/;"	m	class:gslice_array	file:	access:private
gslice_array::_M_gslice	/Users/lij/.vim/stl/valarray	/^  gslice                _M_gslice;$/;"	m	class:gslice_array	file:	access:private
gslice_array::gslice_array	/Users/lij/.vim/stl/valarray	/^  gslice_array(gslice __gslice, valarray<_Tp>& __array)$/;"	f	class:gslice_array	file:	access:private	signature:(gslice __gslice, valarray<_Tp>& __array)
gslice_array::operator %=	/Users/lij/.vim/stl/valarray	/^  void operator%= (const valarray<value_type>& __x) const {$/;"	f	class:gslice_array	access:public	signature:(const valarray<value_type>& __x) const
gslice_array::operator &=	/Users/lij/.vim/stl/valarray	/^  void operator&= (const valarray<value_type>& __x) const {$/;"	f	class:gslice_array	access:public	signature:(const valarray<value_type>& __x) const
gslice_array::operator *=	/Users/lij/.vim/stl/valarray	/^  void operator*= (const valarray<value_type>& __x) const {$/;"	f	class:gslice_array	access:public	signature:(const valarray<value_type>& __x) const
gslice_array::operator +=	/Users/lij/.vim/stl/valarray	/^  void operator+= (const valarray<value_type>& __x) const {$/;"	f	class:gslice_array	access:public	signature:(const valarray<value_type>& __x) const
gslice_array::operator -=	/Users/lij/.vim/stl/valarray	/^  void operator-= (const valarray<value_type>& __x) const {$/;"	f	class:gslice_array	access:public	signature:(const valarray<value_type>& __x) const
gslice_array::operator /=	/Users/lij/.vim/stl/valarray	/^  void operator\/= (const valarray<value_type>& __x) const {$/;"	f	class:gslice_array	access:public	signature:(const valarray<value_type>& __x) const
gslice_array::operator <<=	/Users/lij/.vim/stl/valarray	/^  void operator<<= (const valarray<value_type>& __x) const {$/;"	f	class:gslice_array	access:public	signature:(const valarray<value_type>& __x) const
gslice_array::operator =	/Users/lij/.vim/stl/valarray	/^  void operator= (const valarray<value_type>& __x) const {$/;"	f	class:gslice_array	access:public	signature:(const valarray<value_type>& __x) const
gslice_array::operator =	/Users/lij/.vim/stl/valarray	/^  void operator= (const value_type& __c) const {$/;"	f	class:gslice_array	access:public	signature:(const value_type& __c) const
gslice_array::operator =	/Users/lij/.vim/stl/valarray	/^  void operator=(const gslice_array&);$/;"	p	class:gslice_array	file:	access:private	signature:(const gslice_array&)
gslice_array::operator >>=	/Users/lij/.vim/stl/valarray	/^  void operator>>= (const valarray<value_type>& __x) const {$/;"	f	class:gslice_array	access:public	signature:(const valarray<value_type>& __x) const
gslice_array::operator ^=	/Users/lij/.vim/stl/valarray	/^  void operator^= (const valarray<value_type>& __x) const {$/;"	f	class:gslice_array	access:public	signature:(const valarray<value_type>& __x) const
gslice_array::operator |=	/Users/lij/.vim/stl/valarray	/^  void operator|= (const valarray<value_type>& __x) const {$/;"	f	class:gslice_array	access:public	signature:(const valarray<value_type>& __x) const
gslice_array::value_type	/Users/lij/.vim/stl/valarray	/^  typedef _Tp value_type;$/;"	t	class:gslice_array	file:	access:public
gslice_array::~gslice_array	/Users/lij/.vim/stl/valarray	/^  ~gslice_array() {}$/;"	f	class:gslice_array	access:public	signature:()
has_trivial_assignment_operator	/Users/lij/.vim/stl/type_traits.h	/^   typedef __false_type    has_trivial_assignment_operator;$/;"	t	struct:__type_traits	access:public
has_trivial_assignment_operator	/Users/lij/.vim/stl/type_traits.h	/^   typedef __true_type    has_trivial_assignment_operator;$/;"	t	struct:__type_traits	access:public
has_trivial_copy_constructor	/Users/lij/.vim/stl/type_traits.h	/^   typedef __false_type    has_trivial_copy_constructor;$/;"	t	struct:__type_traits	access:public
has_trivial_copy_constructor	/Users/lij/.vim/stl/type_traits.h	/^   typedef __true_type    has_trivial_copy_constructor;$/;"	t	struct:__type_traits	access:public
has_trivial_default_constructor	/Users/lij/.vim/stl/type_traits.h	/^   typedef __false_type    has_trivial_default_constructor;$/;"	t	struct:__type_traits	access:public
has_trivial_default_constructor	/Users/lij/.vim/stl/type_traits.h	/^   typedef __true_type    has_trivial_default_constructor;$/;"	t	struct:__type_traits	access:public
has_trivial_destructor	/Users/lij/.vim/stl/type_traits.h	/^   typedef __false_type    has_trivial_destructor;$/;"	t	struct:__type_traits	access:public
has_trivial_destructor	/Users/lij/.vim/stl/type_traits.h	/^   typedef __true_type    has_trivial_destructor;$/;"	t	struct:__type_traits	access:public
hash	/Users/lij/.vim/stl/stl_hash_fun.h	/^__STL_TEMPLATE_NULL struct hash<char*>$/;"	s
hash	/Users/lij/.vim/stl/stl_hash_fun.h	/^__STL_TEMPLATE_NULL struct hash<char> {$/;"	s
hash	/Users/lij/.vim/stl/stl_hash_fun.h	/^__STL_TEMPLATE_NULL struct hash<const char*>$/;"	s
hash	/Users/lij/.vim/stl/stl_hash_fun.h	/^__STL_TEMPLATE_NULL struct hash<int> {$/;"	s
hash	/Users/lij/.vim/stl/stl_hash_fun.h	/^__STL_TEMPLATE_NULL struct hash<long> {$/;"	s
hash	/Users/lij/.vim/stl/stl_hash_fun.h	/^__STL_TEMPLATE_NULL struct hash<short> {$/;"	s
hash	/Users/lij/.vim/stl/stl_hash_fun.h	/^__STL_TEMPLATE_NULL struct hash<signed char> {$/;"	s
hash	/Users/lij/.vim/stl/stl_hash_fun.h	/^__STL_TEMPLATE_NULL struct hash<unsigned char> {$/;"	s
hash	/Users/lij/.vim/stl/stl_hash_fun.h	/^__STL_TEMPLATE_NULL struct hash<unsigned int> {$/;"	s
hash	/Users/lij/.vim/stl/stl_hash_fun.h	/^__STL_TEMPLATE_NULL struct hash<unsigned long> {$/;"	s
hash	/Users/lij/.vim/stl/stl_hash_fun.h	/^__STL_TEMPLATE_NULL struct hash<unsigned short> {$/;"	s
hash	/Users/lij/.vim/stl/stl_hash_fun.h	/^template <class _Key> struct hash { };$/;"	s
hash	/Users/lij/.vim/stl/stl_rope.h	/^__STL_TEMPLATE_NULL struct hash<crope>$/;"	s
hash	/Users/lij/.vim/stl/stl_rope.h	/^__STL_TEMPLATE_NULL struct hash<wrope>$/;"	s
hash	/Users/lij/.vim/stl/string	/^__STL_TEMPLATE_NULL struct hash<string> {$/;"	s	file:
hash	/Users/lij/.vim/stl/string	/^__STL_TEMPLATE_NULL struct hash<wstring> {$/;"	s	file:
hash	/Users/lij/.vim/stl/string	/^struct hash<basic_string<_CharT,_Traits,_Alloc> > {$/;"	s	file:
hash::operator ()	/Users/lij/.vim/stl/stl_hash_fun.h	/^  size_t operator()(char __x) const { return __x; }$/;"	f	struct:hash	access:public	signature:(char __x) const
hash::operator ()	/Users/lij/.vim/stl/stl_hash_fun.h	/^  size_t operator()(const char* __s) const { return __stl_hash_string(__s); }$/;"	f	struct:hash	access:public	signature:(const char* __s) const
hash::operator ()	/Users/lij/.vim/stl/stl_hash_fun.h	/^  size_t operator()(int __x) const { return __x; }$/;"	f	struct:hash	access:public	signature:(int __x) const
hash::operator ()	/Users/lij/.vim/stl/stl_hash_fun.h	/^  size_t operator()(long __x) const { return __x; }$/;"	f	struct:hash	access:public	signature:(long __x) const
hash::operator ()	/Users/lij/.vim/stl/stl_hash_fun.h	/^  size_t operator()(short __x) const { return __x; }$/;"	f	struct:hash	access:public	signature:(short __x) const
hash::operator ()	/Users/lij/.vim/stl/stl_hash_fun.h	/^  size_t operator()(unsigned char __x) const { return __x; }$/;"	f	struct:hash	access:public	signature:(unsigned char __x) const
hash::operator ()	/Users/lij/.vim/stl/stl_hash_fun.h	/^  size_t operator()(unsigned int __x) const { return __x; }$/;"	f	struct:hash	access:public	signature:(unsigned int __x) const
hash::operator ()	/Users/lij/.vim/stl/stl_hash_fun.h	/^  size_t operator()(unsigned long __x) const { return __x; }$/;"	f	struct:hash	access:public	signature:(unsigned long __x) const
hash::operator ()	/Users/lij/.vim/stl/stl_hash_fun.h	/^  size_t operator()(unsigned short __x) const { return __x; }$/;"	f	struct:hash	access:public	signature:(unsigned short __x) const
hash::operator ()	/Users/lij/.vim/stl/stl_rope.h	/^  size_t operator()(const crope& __str) const$/;"	f	struct:hash	access:public	signature:(const crope& __str) const
hash::operator ()	/Users/lij/.vim/stl/stl_rope.h	/^  size_t operator()(const wrope& __str) const$/;"	f	struct:hash	access:public	signature:(const wrope& __str) const
hash::operator ()	/Users/lij/.vim/stl/string	/^  size_t operator()(const basic_string<_CharT,_Traits,_Alloc>& __s) const$/;"	f	struct:hash	access:public	signature:(const basic_string<_CharT,_Traits,_Alloc>& __s) const
hash::operator ()	/Users/lij/.vim/stl/string	/^  size_t operator()(const string& __s) const$/;"	f	struct:hash	access:public	signature:(const string& __s) const
hash::operator ()	/Users/lij/.vim/stl/string	/^  size_t operator()(const wstring& __s) const$/;"	f	struct:hash	access:public	signature:(const wstring& __s) const
hash_funct	/Users/lij/.vim/stl/stl_hash_map.h	/^  hasher hash_funct() const { return _M_ht.hash_funct(); }$/;"	f	class:hash_map	access:public	signature:() const
hash_funct	/Users/lij/.vim/stl/stl_hash_map.h	/^  hasher hash_funct() const { return _M_ht.hash_funct(); }$/;"	f	class:hash_multimap	access:public	signature:() const
hash_funct	/Users/lij/.vim/stl/stl_hash_set.h	/^  hasher hash_funct() const { return _M_ht.hash_funct(); }$/;"	f	class:hash_multiset	access:public	signature:() const
hash_funct	/Users/lij/.vim/stl/stl_hash_set.h	/^  hasher hash_funct() const { return _M_ht.hash_funct(); }$/;"	f	class:hash_set	access:public	signature:() const
hash_funct	/Users/lij/.vim/stl/stl_hashtable.h	/^  hasher hash_funct() const { return _M_hash; }$/;"	f	class:hashtable	access:public	signature:() const
hash_map	/Users/lij/.vim/stl/stl_hash_map.h	/^  explicit hash_map(size_type __n)$/;"	f	class:hash_map	access:public	signature:(size_type __n)
hash_map	/Users/lij/.vim/stl/stl_hash_map.h	/^  hash_map() : _M_ht(100, hasher(), key_equal(), allocator_type()) {}$/;"	f	class:hash_map	access:public	signature:()
hash_map	/Users/lij/.vim/stl/stl_hash_map.h	/^  hash_map(_InputIterator __f, _InputIterator __l)$/;"	f	class:hash_map	access:public	signature:(_InputIterator __f, _InputIterator __l)
hash_map	/Users/lij/.vim/stl/stl_hash_map.h	/^  hash_map(_InputIterator __f, _InputIterator __l, size_type __n)$/;"	f	class:hash_map	access:public	signature:(_InputIterator __f, _InputIterator __l, size_type __n)
hash_map	/Users/lij/.vim/stl/stl_hash_map.h	/^  hash_map(_InputIterator __f, _InputIterator __l, size_type __n,$/;"	f	class:hash_map	access:public	signature:(_InputIterator __f, _InputIterator __l, size_type __n, const hasher& __hf)
hash_map	/Users/lij/.vim/stl/stl_hash_map.h	/^  hash_map(_InputIterator __f, _InputIterator __l, size_type __n,$/;"	f	class:hash_map	access:public	signature:(_InputIterator __f, _InputIterator __l, size_type __n, const hasher& __hf, const key_equal& __eql, const allocator_type& __a = allocator_type())
hash_map	/Users/lij/.vim/stl/stl_hash_map.h	/^  hash_map(const value_type* __f, const value_type* __l)$/;"	f	class:hash_map	access:public	signature:(const value_type* __f, const value_type* __l)
hash_map	/Users/lij/.vim/stl/stl_hash_map.h	/^  hash_map(const value_type* __f, const value_type* __l, size_type __n)$/;"	f	class:hash_map	access:public	signature:(const value_type* __f, const value_type* __l, size_type __n)
hash_map	/Users/lij/.vim/stl/stl_hash_map.h	/^  hash_map(const value_type* __f, const value_type* __l, size_type __n,$/;"	f	class:hash_map	access:public	signature:(const value_type* __f, const value_type* __l, size_type __n, const hasher& __hf)
hash_map	/Users/lij/.vim/stl/stl_hash_map.h	/^  hash_map(const value_type* __f, const value_type* __l, size_type __n,$/;"	f	class:hash_map	access:public	signature:(const value_type* __f, const value_type* __l, size_type __n, const hasher& __hf, const key_equal& __eql, const allocator_type& __a = allocator_type())
hash_map	/Users/lij/.vim/stl/stl_hash_map.h	/^  hash_map(const_iterator __f, const_iterator __l)$/;"	f	class:hash_map	access:public	signature:(const_iterator __f, const_iterator __l)
hash_map	/Users/lij/.vim/stl/stl_hash_map.h	/^  hash_map(const_iterator __f, const_iterator __l, size_type __n)$/;"	f	class:hash_map	access:public	signature:(const_iterator __f, const_iterator __l, size_type __n)
hash_map	/Users/lij/.vim/stl/stl_hash_map.h	/^  hash_map(const_iterator __f, const_iterator __l, size_type __n,$/;"	f	class:hash_map	access:public	signature:(const_iterator __f, const_iterator __l, size_type __n, const hasher& __hf)
hash_map	/Users/lij/.vim/stl/stl_hash_map.h	/^  hash_map(const_iterator __f, const_iterator __l, size_type __n,$/;"	f	class:hash_map	access:public	signature:(const_iterator __f, const_iterator __l, size_type __n, const hasher& __hf, const key_equal& __eql, const allocator_type& __a = allocator_type())
hash_map	/Users/lij/.vim/stl/stl_hash_map.h	/^  hash_map(size_type __n, const hasher& __hf)$/;"	f	class:hash_map	access:public	signature:(size_type __n, const hasher& __hf)
hash_map	/Users/lij/.vim/stl/stl_hash_map.h	/^  hash_map(size_type __n, const hasher& __hf, const key_equal& __eql,$/;"	f	class:hash_map	access:public	signature:(size_type __n, const hasher& __hf, const key_equal& __eql, const allocator_type& __a = allocator_type())
hash_map	/Users/lij/.vim/stl/stl_hash_map.h	/^class hash_map$/;"	c
hash_map::_Ht	/Users/lij/.vim/stl/stl_hash_map.h	/^                    _Select1st<pair<const _Key,_Tp> >,_EqualKey,_Alloc> _Ht;$/;"	t	class:hash_map	access:private
hash_map::_M_ht	/Users/lij/.vim/stl/stl_hash_map.h	/^  _Ht _M_ht;$/;"	m	class:hash_map	access:private
hash_map::__STL_CLASS_BINARY_FUNCTION_CHECK	/Users/lij/.vim/stl/stl_hash_map.h	/^  __STL_CLASS_BINARY_FUNCTION_CHECK(_EqualKey, bool, _Key, _Key);$/;"	p	class:hash_map	access:private	signature:(_EqualKey, bool, _Key, _Key)
hash_map::__STL_CLASS_REQUIRES	/Users/lij/.vim/stl/stl_hash_map.h	/^  __STL_CLASS_REQUIRES(_Key, _Assignable);$/;"	p	class:hash_map	access:private	signature:(_Key, _Assignable)
hash_map::__STL_CLASS_REQUIRES	/Users/lij/.vim/stl/stl_hash_map.h	/^  __STL_CLASS_REQUIRES(_Tp, _Assignable);$/;"	p	class:hash_map	access:private	signature:(_Tp, _Assignable)
hash_map::__STL_CLASS_UNARY_FUNCTION_CHECK	/Users/lij/.vim/stl/stl_hash_map.h	/^  __STL_CLASS_UNARY_FUNCTION_CHECK(_HashFcn, size_t, _Key);$/;"	p	class:hash_map	access:private	signature:(_HashFcn, size_t, _Key)
hash_map::__STL_NULL_TMPL_ARGS	/Users/lij/.vim/stl/stl_hash_map.h	/^  operator== __STL_NULL_TMPL_ARGS (const hash_map&, const hash_map&);$/;"	p	class:hash_map	access:friend	signature:(const hash_map&, const hash_map&)
hash_map::allocator_type	/Users/lij/.vim/stl/stl_hash_map.h	/^  typedef typename _Ht::allocator_type allocator_type;$/;"	t	class:hash_map	access:public
hash_map::begin	/Users/lij/.vim/stl/stl_hash_map.h	/^  const_iterator begin() const { return _M_ht.begin(); }$/;"	f	class:hash_map	access:public	signature:() const
hash_map::begin	/Users/lij/.vim/stl/stl_hash_map.h	/^  iterator begin() { return _M_ht.begin(); }$/;"	f	class:hash_map	access:public	signature:()
hash_map::bucket_count	/Users/lij/.vim/stl/stl_hash_map.h	/^  size_type bucket_count() const { return _M_ht.bucket_count(); }$/;"	f	class:hash_map	access:public	signature:() const
hash_map::clear	/Users/lij/.vim/stl/stl_hash_map.h	/^  void clear() { _M_ht.clear(); }$/;"	f	class:hash_map	access:public	signature:()
hash_map::const_iterator	/Users/lij/.vim/stl/stl_hash_map.h	/^  typedef typename _Ht::const_iterator const_iterator;$/;"	t	class:hash_map	access:public
hash_map::const_pointer	/Users/lij/.vim/stl/stl_hash_map.h	/^  typedef typename _Ht::const_pointer const_pointer;$/;"	t	class:hash_map	access:public
hash_map::const_reference	/Users/lij/.vim/stl/stl_hash_map.h	/^  typedef typename _Ht::const_reference const_reference;$/;"	t	class:hash_map	access:public
hash_map::count	/Users/lij/.vim/stl/stl_hash_map.h	/^  size_type count(const key_type& __key) const { return _M_ht.count(__key); }$/;"	f	class:hash_map	access:public	signature:(const key_type& __key) const
hash_map::data_type	/Users/lij/.vim/stl/stl_hash_map.h	/^  typedef _Tp data_type;$/;"	t	class:hash_map	access:public
hash_map::difference_type	/Users/lij/.vim/stl/stl_hash_map.h	/^  typedef typename _Ht::difference_type difference_type;$/;"	t	class:hash_map	access:public
hash_map::elems_in_bucket	/Users/lij/.vim/stl/stl_hash_map.h	/^  size_type elems_in_bucket(size_type __n) const$/;"	f	class:hash_map	access:public	signature:(size_type __n) const
hash_map::empty	/Users/lij/.vim/stl/stl_hash_map.h	/^  bool empty() const { return _M_ht.empty(); }$/;"	f	class:hash_map	access:public	signature:() const
hash_map::end	/Users/lij/.vim/stl/stl_hash_map.h	/^  const_iterator end() const { return _M_ht.end(); }$/;"	f	class:hash_map	access:public	signature:() const
hash_map::end	/Users/lij/.vim/stl/stl_hash_map.h	/^  iterator end() { return _M_ht.end(); }$/;"	f	class:hash_map	access:public	signature:()
hash_map::equal_range	/Users/lij/.vim/stl/stl_hash_map.h	/^  equal_range(const key_type& __key) const$/;"	f	class:hash_map	access:public	signature:(const key_type& __key) const
hash_map::equal_range	/Users/lij/.vim/stl/stl_hash_map.h	/^  pair<iterator, iterator> equal_range(const key_type& __key)$/;"	f	class:hash_map	access:public	signature:(const key_type& __key)
hash_map::erase	/Users/lij/.vim/stl/stl_hash_map.h	/^  size_type erase(const key_type& __key) {return _M_ht.erase(__key); }$/;"	f	class:hash_map	access:public	signature:(const key_type& __key)
hash_map::erase	/Users/lij/.vim/stl/stl_hash_map.h	/^  void erase(iterator __f, iterator __l) { _M_ht.erase(__f, __l); }$/;"	f	class:hash_map	access:public	signature:(iterator __f, iterator __l)
hash_map::erase	/Users/lij/.vim/stl/stl_hash_map.h	/^  void erase(iterator __it) { _M_ht.erase(__it); }$/;"	f	class:hash_map	access:public	signature:(iterator __it)
hash_map::find	/Users/lij/.vim/stl/stl_hash_map.h	/^  const_iterator find(const key_type& __key) const $/;"	f	class:hash_map	access:public	signature:(const key_type& __key) const
hash_map::find	/Users/lij/.vim/stl/stl_hash_map.h	/^  iterator find(const key_type& __key) { return _M_ht.find(__key); }$/;"	f	class:hash_map	access:public	signature:(const key_type& __key)
hash_map::get_allocator	/Users/lij/.vim/stl/stl_hash_map.h	/^  allocator_type get_allocator() const { return _M_ht.get_allocator(); }$/;"	f	class:hash_map	access:public	signature:() const
hash_map::hash_funct	/Users/lij/.vim/stl/stl_hash_map.h	/^  hasher hash_funct() const { return _M_ht.hash_funct(); }$/;"	f	class:hash_map	access:public	signature:() const
hash_map::hash_map	/Users/lij/.vim/stl/stl_hash_map.h	/^  explicit hash_map(size_type __n)$/;"	f	class:hash_map	access:public	signature:(size_type __n)
hash_map::hash_map	/Users/lij/.vim/stl/stl_hash_map.h	/^  hash_map() : _M_ht(100, hasher(), key_equal(), allocator_type()) {}$/;"	f	class:hash_map	access:public	signature:()
hash_map::hash_map	/Users/lij/.vim/stl/stl_hash_map.h	/^  hash_map(_InputIterator __f, _InputIterator __l)$/;"	f	class:hash_map	access:public	signature:(_InputIterator __f, _InputIterator __l)
hash_map::hash_map	/Users/lij/.vim/stl/stl_hash_map.h	/^  hash_map(_InputIterator __f, _InputIterator __l, size_type __n)$/;"	f	class:hash_map	access:public	signature:(_InputIterator __f, _InputIterator __l, size_type __n)
hash_map::hash_map	/Users/lij/.vim/stl/stl_hash_map.h	/^  hash_map(_InputIterator __f, _InputIterator __l, size_type __n,$/;"	f	class:hash_map	access:public	signature:(_InputIterator __f, _InputIterator __l, size_type __n, const hasher& __hf)
hash_map::hash_map	/Users/lij/.vim/stl/stl_hash_map.h	/^  hash_map(_InputIterator __f, _InputIterator __l, size_type __n,$/;"	f	class:hash_map	access:public	signature:(_InputIterator __f, _InputIterator __l, size_type __n, const hasher& __hf, const key_equal& __eql, const allocator_type& __a = allocator_type())
hash_map::hash_map	/Users/lij/.vim/stl/stl_hash_map.h	/^  hash_map(const value_type* __f, const value_type* __l)$/;"	f	class:hash_map	access:public	signature:(const value_type* __f, const value_type* __l)
hash_map::hash_map	/Users/lij/.vim/stl/stl_hash_map.h	/^  hash_map(const value_type* __f, const value_type* __l, size_type __n)$/;"	f	class:hash_map	access:public	signature:(const value_type* __f, const value_type* __l, size_type __n)
hash_map::hash_map	/Users/lij/.vim/stl/stl_hash_map.h	/^  hash_map(const value_type* __f, const value_type* __l, size_type __n,$/;"	f	class:hash_map	access:public	signature:(const value_type* __f, const value_type* __l, size_type __n, const hasher& __hf)
hash_map::hash_map	/Users/lij/.vim/stl/stl_hash_map.h	/^  hash_map(const value_type* __f, const value_type* __l, size_type __n,$/;"	f	class:hash_map	access:public	signature:(const value_type* __f, const value_type* __l, size_type __n, const hasher& __hf, const key_equal& __eql, const allocator_type& __a = allocator_type())
hash_map::hash_map	/Users/lij/.vim/stl/stl_hash_map.h	/^  hash_map(const_iterator __f, const_iterator __l)$/;"	f	class:hash_map	access:public	signature:(const_iterator __f, const_iterator __l)
hash_map::hash_map	/Users/lij/.vim/stl/stl_hash_map.h	/^  hash_map(const_iterator __f, const_iterator __l, size_type __n)$/;"	f	class:hash_map	access:public	signature:(const_iterator __f, const_iterator __l, size_type __n)
hash_map::hash_map	/Users/lij/.vim/stl/stl_hash_map.h	/^  hash_map(const_iterator __f, const_iterator __l, size_type __n,$/;"	f	class:hash_map	access:public	signature:(const_iterator __f, const_iterator __l, size_type __n, const hasher& __hf)
hash_map::hash_map	/Users/lij/.vim/stl/stl_hash_map.h	/^  hash_map(const_iterator __f, const_iterator __l, size_type __n,$/;"	f	class:hash_map	access:public	signature:(const_iterator __f, const_iterator __l, size_type __n, const hasher& __hf, const key_equal& __eql, const allocator_type& __a = allocator_type())
hash_map::hash_map	/Users/lij/.vim/stl/stl_hash_map.h	/^  hash_map(size_type __n, const hasher& __hf)$/;"	f	class:hash_map	access:public	signature:(size_type __n, const hasher& __hf)
hash_map::hash_map	/Users/lij/.vim/stl/stl_hash_map.h	/^  hash_map(size_type __n, const hasher& __hf, const key_equal& __eql,$/;"	f	class:hash_map	access:public	signature:(size_type __n, const hasher& __hf, const key_equal& __eql, const allocator_type& __a = allocator_type())
hash_map::hasher	/Users/lij/.vim/stl/stl_hash_map.h	/^  typedef typename _Ht::hasher hasher;$/;"	t	class:hash_map	access:public
hash_map::insert	/Users/lij/.vim/stl/stl_hash_map.h	/^  pair<iterator,bool> insert(const value_type& __obj)$/;"	f	class:hash_map	access:public	signature:(const value_type& __obj)
hash_map::insert	/Users/lij/.vim/stl/stl_hash_map.h	/^  void insert(_InputIterator __f, _InputIterator __l)$/;"	f	class:hash_map	access:public	signature:(_InputIterator __f, _InputIterator __l)
hash_map::insert	/Users/lij/.vim/stl/stl_hash_map.h	/^  void insert(const value_type* __f, const value_type* __l) {$/;"	f	class:hash_map	access:public	signature:(const value_type* __f, const value_type* __l)
hash_map::insert	/Users/lij/.vim/stl/stl_hash_map.h	/^  void insert(const_iterator __f, const_iterator __l)$/;"	f	class:hash_map	access:public	signature:(const_iterator __f, const_iterator __l)
hash_map::insert_noresize	/Users/lij/.vim/stl/stl_hash_map.h	/^  pair<iterator,bool> insert_noresize(const value_type& __obj)$/;"	f	class:hash_map	access:public	signature:(const value_type& __obj)
hash_map::iterator	/Users/lij/.vim/stl/stl_hash_map.h	/^  typedef typename _Ht::iterator iterator;$/;"	t	class:hash_map	access:public
hash_map::key_eq	/Users/lij/.vim/stl/stl_hash_map.h	/^  key_equal key_eq() const { return _M_ht.key_eq(); }$/;"	f	class:hash_map	access:public	signature:() const
hash_map::key_equal	/Users/lij/.vim/stl/stl_hash_map.h	/^  typedef typename _Ht::key_equal key_equal;$/;"	t	class:hash_map	access:public
hash_map::key_type	/Users/lij/.vim/stl/stl_hash_map.h	/^  typedef typename _Ht::key_type key_type;$/;"	t	class:hash_map	access:public
hash_map::mapped_type	/Users/lij/.vim/stl/stl_hash_map.h	/^  typedef _Tp mapped_type;$/;"	t	class:hash_map	access:public
hash_map::max_bucket_count	/Users/lij/.vim/stl/stl_hash_map.h	/^  size_type max_bucket_count() const { return _M_ht.max_bucket_count(); }$/;"	f	class:hash_map	access:public	signature:() const
hash_map::max_size	/Users/lij/.vim/stl/stl_hash_map.h	/^  size_type max_size() const { return _M_ht.max_size(); }$/;"	f	class:hash_map	access:public	signature:() const
hash_map::operator ==	/Users/lij/.vim/stl/stl_hash_map.h	/^  friend bool operator== (const hash_map<_K1, _T1, _HF, _EqK, _Al>&,$/;"	p	class:hash_map	access:friend	signature:(const hash_map<_K1, _T1, _HF, _EqK, _Al>&, const hash_map<_K1, _T1, _HF, _EqK, _Al>&)
hash_map::operator []	/Users/lij/.vim/stl/stl_hash_map.h	/^  _Tp& operator[](const key_type& __key) {$/;"	f	class:hash_map	access:public	signature:(const key_type& __key)
hash_map::pointer	/Users/lij/.vim/stl/stl_hash_map.h	/^  typedef typename _Ht::pointer pointer;$/;"	t	class:hash_map	access:public
hash_map::reference	/Users/lij/.vim/stl/stl_hash_map.h	/^  typedef typename _Ht::reference reference;$/;"	t	class:hash_map	access:public
hash_map::resize	/Users/lij/.vim/stl/stl_hash_map.h	/^  void resize(size_type __hint) { _M_ht.resize(__hint); }$/;"	f	class:hash_map	access:public	signature:(size_type __hint)
hash_map::size	/Users/lij/.vim/stl/stl_hash_map.h	/^  size_type size() const { return _M_ht.size(); }$/;"	f	class:hash_map	access:public	signature:() const
hash_map::size_type	/Users/lij/.vim/stl/stl_hash_map.h	/^  typedef typename _Ht::size_type size_type;$/;"	t	class:hash_map	access:public
hash_map::swap	/Users/lij/.vim/stl/stl_hash_map.h	/^  void swap(hash_map& __hs) { _M_ht.swap(__hs._M_ht); }$/;"	f	class:hash_map	access:public	signature:(hash_map& __hs)
hash_map::value_type	/Users/lij/.vim/stl/stl_hash_map.h	/^  typedef typename _Ht::value_type value_type;$/;"	t	class:hash_map	access:public
hash_multimap	/Users/lij/.vim/stl/stl_hash_map.h	/^  explicit hash_multimap(size_type __n)$/;"	f	class:hash_multimap	access:public	signature:(size_type __n)
hash_multimap	/Users/lij/.vim/stl/stl_hash_map.h	/^  hash_multimap() : _M_ht(100, hasher(), key_equal(), allocator_type()) {}$/;"	f	class:hash_multimap	access:public	signature:()
hash_multimap	/Users/lij/.vim/stl/stl_hash_map.h	/^  hash_multimap(_InputIterator __f, _InputIterator __l)$/;"	f	class:hash_multimap	access:public	signature:(_InputIterator __f, _InputIterator __l)
hash_multimap	/Users/lij/.vim/stl/stl_hash_map.h	/^  hash_multimap(_InputIterator __f, _InputIterator __l, size_type __n)$/;"	f	class:hash_multimap	access:public	signature:(_InputIterator __f, _InputIterator __l, size_type __n)
hash_multimap	/Users/lij/.vim/stl/stl_hash_map.h	/^  hash_multimap(_InputIterator __f, _InputIterator __l, size_type __n,$/;"	f	class:hash_multimap	access:public	signature:(_InputIterator __f, _InputIterator __l, size_type __n, const hasher& __hf)
hash_multimap	/Users/lij/.vim/stl/stl_hash_map.h	/^  hash_multimap(_InputIterator __f, _InputIterator __l, size_type __n,$/;"	f	class:hash_multimap	access:public	signature:(_InputIterator __f, _InputIterator __l, size_type __n, const hasher& __hf, const key_equal& __eql, const allocator_type& __a = allocator_type())
hash_multimap	/Users/lij/.vim/stl/stl_hash_map.h	/^  hash_multimap(const value_type* __f, const value_type* __l)$/;"	f	class:hash_multimap	access:public	signature:(const value_type* __f, const value_type* __l)
hash_multimap	/Users/lij/.vim/stl/stl_hash_map.h	/^  hash_multimap(const value_type* __f, const value_type* __l, size_type __n)$/;"	f	class:hash_multimap	access:public	signature:(const value_type* __f, const value_type* __l, size_type __n)
hash_multimap	/Users/lij/.vim/stl/stl_hash_map.h	/^  hash_multimap(const value_type* __f, const value_type* __l, size_type __n,$/;"	f	class:hash_multimap	access:public	signature:(const value_type* __f, const value_type* __l, size_type __n, const hasher& __hf)
hash_multimap	/Users/lij/.vim/stl/stl_hash_map.h	/^  hash_multimap(const value_type* __f, const value_type* __l, size_type __n,$/;"	f	class:hash_multimap	access:public	signature:(const value_type* __f, const value_type* __l, size_type __n, const hasher& __hf, const key_equal& __eql, const allocator_type& __a = allocator_type())
hash_multimap	/Users/lij/.vim/stl/stl_hash_map.h	/^  hash_multimap(const_iterator __f, const_iterator __l)$/;"	f	class:hash_multimap	access:public	signature:(const_iterator __f, const_iterator __l)
hash_multimap	/Users/lij/.vim/stl/stl_hash_map.h	/^  hash_multimap(const_iterator __f, const_iterator __l, size_type __n)$/;"	f	class:hash_multimap	access:public	signature:(const_iterator __f, const_iterator __l, size_type __n)
hash_multimap	/Users/lij/.vim/stl/stl_hash_map.h	/^  hash_multimap(const_iterator __f, const_iterator __l, size_type __n,$/;"	f	class:hash_multimap	access:public	signature:(const_iterator __f, const_iterator __l, size_type __n, const hasher& __hf)
hash_multimap	/Users/lij/.vim/stl/stl_hash_map.h	/^  hash_multimap(const_iterator __f, const_iterator __l, size_type __n,$/;"	f	class:hash_multimap	access:public	signature:(const_iterator __f, const_iterator __l, size_type __n, const hasher& __hf, const key_equal& __eql, const allocator_type& __a = allocator_type())
hash_multimap	/Users/lij/.vim/stl/stl_hash_map.h	/^  hash_multimap(size_type __n, const hasher& __hf)$/;"	f	class:hash_multimap	access:public	signature:(size_type __n, const hasher& __hf)
hash_multimap	/Users/lij/.vim/stl/stl_hash_map.h	/^  hash_multimap(size_type __n, const hasher& __hf, const key_equal& __eql,$/;"	f	class:hash_multimap	access:public	signature:(size_type __n, const hasher& __hf, const key_equal& __eql, const allocator_type& __a = allocator_type())
hash_multimap	/Users/lij/.vim/stl/stl_hash_map.h	/^class hash_multimap$/;"	c
hash_multimap::_Ht	/Users/lij/.vim/stl/stl_hash_map.h	/^          _Ht;$/;"	t	class:hash_multimap	access:private
hash_multimap::_M_ht	/Users/lij/.vim/stl/stl_hash_map.h	/^  _Ht _M_ht;$/;"	m	class:hash_multimap	access:private
hash_multimap::__STL_CLASS_BINARY_FUNCTION_CHECK	/Users/lij/.vim/stl/stl_hash_map.h	/^  __STL_CLASS_BINARY_FUNCTION_CHECK(_EqualKey, bool, _Key, _Key);$/;"	p	class:hash_multimap	access:private	signature:(_EqualKey, bool, _Key, _Key)
hash_multimap::__STL_CLASS_REQUIRES	/Users/lij/.vim/stl/stl_hash_map.h	/^  __STL_CLASS_REQUIRES(_Key, _Assignable);$/;"	p	class:hash_multimap	access:private	signature:(_Key, _Assignable)
hash_multimap::__STL_CLASS_REQUIRES	/Users/lij/.vim/stl/stl_hash_map.h	/^  __STL_CLASS_REQUIRES(_Tp, _Assignable);$/;"	p	class:hash_multimap	access:private	signature:(_Tp, _Assignable)
hash_multimap::__STL_CLASS_UNARY_FUNCTION_CHECK	/Users/lij/.vim/stl/stl_hash_map.h	/^  __STL_CLASS_UNARY_FUNCTION_CHECK(_HashFcn, size_t, _Key);$/;"	p	class:hash_multimap	access:private	signature:(_HashFcn, size_t, _Key)
hash_multimap::__STL_NULL_TMPL_ARGS	/Users/lij/.vim/stl/stl_hash_map.h	/^  operator== __STL_NULL_TMPL_ARGS (const hash_multimap&,const hash_multimap&);$/;"	p	class:hash_multimap	access:friend	signature:(const hash_multimap&,const hash_multimap&)
hash_multimap::allocator_type	/Users/lij/.vim/stl/stl_hash_map.h	/^  typedef typename _Ht::allocator_type allocator_type;$/;"	t	class:hash_multimap	access:public
hash_multimap::begin	/Users/lij/.vim/stl/stl_hash_map.h	/^  const_iterator begin() const { return _M_ht.begin(); }$/;"	f	class:hash_multimap	access:public	signature:() const
hash_multimap::begin	/Users/lij/.vim/stl/stl_hash_map.h	/^  iterator begin() { return _M_ht.begin(); }$/;"	f	class:hash_multimap	access:public	signature:()
hash_multimap::bucket_count	/Users/lij/.vim/stl/stl_hash_map.h	/^  size_type bucket_count() const { return _M_ht.bucket_count(); }$/;"	f	class:hash_multimap	access:public	signature:() const
hash_multimap::clear	/Users/lij/.vim/stl/stl_hash_map.h	/^  void clear() { _M_ht.clear(); }$/;"	f	class:hash_multimap	access:public	signature:()
hash_multimap::const_iterator	/Users/lij/.vim/stl/stl_hash_map.h	/^  typedef typename _Ht::const_iterator const_iterator;$/;"	t	class:hash_multimap	access:public
hash_multimap::const_pointer	/Users/lij/.vim/stl/stl_hash_map.h	/^  typedef typename _Ht::const_pointer const_pointer;$/;"	t	class:hash_multimap	access:public
hash_multimap::const_reference	/Users/lij/.vim/stl/stl_hash_map.h	/^  typedef typename _Ht::const_reference const_reference;$/;"	t	class:hash_multimap	access:public
hash_multimap::count	/Users/lij/.vim/stl/stl_hash_map.h	/^  size_type count(const key_type& __key) const { return _M_ht.count(__key); }$/;"	f	class:hash_multimap	access:public	signature:(const key_type& __key) const
hash_multimap::data_type	/Users/lij/.vim/stl/stl_hash_map.h	/^  typedef _Tp data_type;$/;"	t	class:hash_multimap	access:public
hash_multimap::difference_type	/Users/lij/.vim/stl/stl_hash_map.h	/^  typedef typename _Ht::difference_type difference_type;$/;"	t	class:hash_multimap	access:public
hash_multimap::elems_in_bucket	/Users/lij/.vim/stl/stl_hash_map.h	/^  size_type elems_in_bucket(size_type __n) const$/;"	f	class:hash_multimap	access:public	signature:(size_type __n) const
hash_multimap::empty	/Users/lij/.vim/stl/stl_hash_map.h	/^  bool empty() const { return _M_ht.empty(); }$/;"	f	class:hash_multimap	access:public	signature:() const
hash_multimap::end	/Users/lij/.vim/stl/stl_hash_map.h	/^  const_iterator end() const { return _M_ht.end(); }$/;"	f	class:hash_multimap	access:public	signature:() const
hash_multimap::end	/Users/lij/.vim/stl/stl_hash_map.h	/^  iterator end() { return _M_ht.end(); }$/;"	f	class:hash_multimap	access:public	signature:()
hash_multimap::equal_range	/Users/lij/.vim/stl/stl_hash_map.h	/^  equal_range(const key_type& __key) const$/;"	f	class:hash_multimap	access:public	signature:(const key_type& __key) const
hash_multimap::equal_range	/Users/lij/.vim/stl/stl_hash_map.h	/^  pair<iterator, iterator> equal_range(const key_type& __key)$/;"	f	class:hash_multimap	access:public	signature:(const key_type& __key)
hash_multimap::erase	/Users/lij/.vim/stl/stl_hash_map.h	/^  size_type erase(const key_type& __key) {return _M_ht.erase(__key); }$/;"	f	class:hash_multimap	access:public	signature:(const key_type& __key)
hash_multimap::erase	/Users/lij/.vim/stl/stl_hash_map.h	/^  void erase(iterator __f, iterator __l) { _M_ht.erase(__f, __l); }$/;"	f	class:hash_multimap	access:public	signature:(iterator __f, iterator __l)
hash_multimap::erase	/Users/lij/.vim/stl/stl_hash_map.h	/^  void erase(iterator __it) { _M_ht.erase(__it); }$/;"	f	class:hash_multimap	access:public	signature:(iterator __it)
hash_multimap::find	/Users/lij/.vim/stl/stl_hash_map.h	/^  const_iterator find(const key_type& __key) const $/;"	f	class:hash_multimap	access:public	signature:(const key_type& __key) const
hash_multimap::find	/Users/lij/.vim/stl/stl_hash_map.h	/^  iterator find(const key_type& __key) { return _M_ht.find(__key); }$/;"	f	class:hash_multimap	access:public	signature:(const key_type& __key)
hash_multimap::get_allocator	/Users/lij/.vim/stl/stl_hash_map.h	/^  allocator_type get_allocator() const { return _M_ht.get_allocator(); }$/;"	f	class:hash_multimap	access:public	signature:() const
hash_multimap::hash_funct	/Users/lij/.vim/stl/stl_hash_map.h	/^  hasher hash_funct() const { return _M_ht.hash_funct(); }$/;"	f	class:hash_multimap	access:public	signature:() const
hash_multimap::hash_multimap	/Users/lij/.vim/stl/stl_hash_map.h	/^  explicit hash_multimap(size_type __n)$/;"	f	class:hash_multimap	access:public	signature:(size_type __n)
hash_multimap::hash_multimap	/Users/lij/.vim/stl/stl_hash_map.h	/^  hash_multimap() : _M_ht(100, hasher(), key_equal(), allocator_type()) {}$/;"	f	class:hash_multimap	access:public	signature:()
hash_multimap::hash_multimap	/Users/lij/.vim/stl/stl_hash_map.h	/^  hash_multimap(_InputIterator __f, _InputIterator __l)$/;"	f	class:hash_multimap	access:public	signature:(_InputIterator __f, _InputIterator __l)
hash_multimap::hash_multimap	/Users/lij/.vim/stl/stl_hash_map.h	/^  hash_multimap(_InputIterator __f, _InputIterator __l, size_type __n)$/;"	f	class:hash_multimap	access:public	signature:(_InputIterator __f, _InputIterator __l, size_type __n)
hash_multimap::hash_multimap	/Users/lij/.vim/stl/stl_hash_map.h	/^  hash_multimap(_InputIterator __f, _InputIterator __l, size_type __n,$/;"	f	class:hash_multimap	access:public	signature:(_InputIterator __f, _InputIterator __l, size_type __n, const hasher& __hf)
hash_multimap::hash_multimap	/Users/lij/.vim/stl/stl_hash_map.h	/^  hash_multimap(_InputIterator __f, _InputIterator __l, size_type __n,$/;"	f	class:hash_multimap	access:public	signature:(_InputIterator __f, _InputIterator __l, size_type __n, const hasher& __hf, const key_equal& __eql, const allocator_type& __a = allocator_type())
hash_multimap::hash_multimap	/Users/lij/.vim/stl/stl_hash_map.h	/^  hash_multimap(const value_type* __f, const value_type* __l)$/;"	f	class:hash_multimap	access:public	signature:(const value_type* __f, const value_type* __l)
hash_multimap::hash_multimap	/Users/lij/.vim/stl/stl_hash_map.h	/^  hash_multimap(const value_type* __f, const value_type* __l, size_type __n)$/;"	f	class:hash_multimap	access:public	signature:(const value_type* __f, const value_type* __l, size_type __n)
hash_multimap::hash_multimap	/Users/lij/.vim/stl/stl_hash_map.h	/^  hash_multimap(const value_type* __f, const value_type* __l, size_type __n,$/;"	f	class:hash_multimap	access:public	signature:(const value_type* __f, const value_type* __l, size_type __n, const hasher& __hf)
hash_multimap::hash_multimap	/Users/lij/.vim/stl/stl_hash_map.h	/^  hash_multimap(const value_type* __f, const value_type* __l, size_type __n,$/;"	f	class:hash_multimap	access:public	signature:(const value_type* __f, const value_type* __l, size_type __n, const hasher& __hf, const key_equal& __eql, const allocator_type& __a = allocator_type())
hash_multimap::hash_multimap	/Users/lij/.vim/stl/stl_hash_map.h	/^  hash_multimap(const_iterator __f, const_iterator __l)$/;"	f	class:hash_multimap	access:public	signature:(const_iterator __f, const_iterator __l)
hash_multimap::hash_multimap	/Users/lij/.vim/stl/stl_hash_map.h	/^  hash_multimap(const_iterator __f, const_iterator __l, size_type __n)$/;"	f	class:hash_multimap	access:public	signature:(const_iterator __f, const_iterator __l, size_type __n)
hash_multimap::hash_multimap	/Users/lij/.vim/stl/stl_hash_map.h	/^  hash_multimap(const_iterator __f, const_iterator __l, size_type __n,$/;"	f	class:hash_multimap	access:public	signature:(const_iterator __f, const_iterator __l, size_type __n, const hasher& __hf)
hash_multimap::hash_multimap	/Users/lij/.vim/stl/stl_hash_map.h	/^  hash_multimap(const_iterator __f, const_iterator __l, size_type __n,$/;"	f	class:hash_multimap	access:public	signature:(const_iterator __f, const_iterator __l, size_type __n, const hasher& __hf, const key_equal& __eql, const allocator_type& __a = allocator_type())
hash_multimap::hash_multimap	/Users/lij/.vim/stl/stl_hash_map.h	/^  hash_multimap(size_type __n, const hasher& __hf)$/;"	f	class:hash_multimap	access:public	signature:(size_type __n, const hasher& __hf)
hash_multimap::hash_multimap	/Users/lij/.vim/stl/stl_hash_map.h	/^  hash_multimap(size_type __n, const hasher& __hf, const key_equal& __eql,$/;"	f	class:hash_multimap	access:public	signature:(size_type __n, const hasher& __hf, const key_equal& __eql, const allocator_type& __a = allocator_type())
hash_multimap::hasher	/Users/lij/.vim/stl/stl_hash_map.h	/^  typedef typename _Ht::hasher hasher;$/;"	t	class:hash_multimap	access:public
hash_multimap::insert	/Users/lij/.vim/stl/stl_hash_map.h	/^  iterator insert(const value_type& __obj) $/;"	f	class:hash_multimap	access:public	signature:(const value_type& __obj)
hash_multimap::insert	/Users/lij/.vim/stl/stl_hash_map.h	/^  void insert(_InputIterator __f, _InputIterator __l) $/;"	f	class:hash_multimap	access:public	signature:(_InputIterator __f, _InputIterator __l)
hash_multimap::insert	/Users/lij/.vim/stl/stl_hash_map.h	/^  void insert(const value_type* __f, const value_type* __l) {$/;"	f	class:hash_multimap	access:public	signature:(const value_type* __f, const value_type* __l)
hash_multimap::insert	/Users/lij/.vim/stl/stl_hash_map.h	/^  void insert(const_iterator __f, const_iterator __l) $/;"	f	class:hash_multimap	access:public	signature:(const_iterator __f, const_iterator __l)
hash_multimap::insert_noresize	/Users/lij/.vim/stl/stl_hash_map.h	/^  iterator insert_noresize(const value_type& __obj)$/;"	f	class:hash_multimap	access:public	signature:(const value_type& __obj)
hash_multimap::iterator	/Users/lij/.vim/stl/stl_hash_map.h	/^  typedef typename _Ht::iterator iterator;$/;"	t	class:hash_multimap	access:public
hash_multimap::key_eq	/Users/lij/.vim/stl/stl_hash_map.h	/^  key_equal key_eq() const { return _M_ht.key_eq(); }$/;"	f	class:hash_multimap	access:public	signature:() const
hash_multimap::key_equal	/Users/lij/.vim/stl/stl_hash_map.h	/^  typedef typename _Ht::key_equal key_equal;$/;"	t	class:hash_multimap	access:public
hash_multimap::key_type	/Users/lij/.vim/stl/stl_hash_map.h	/^  typedef typename _Ht::key_type key_type;$/;"	t	class:hash_multimap	access:public
hash_multimap::mapped_type	/Users/lij/.vim/stl/stl_hash_map.h	/^  typedef _Tp mapped_type;$/;"	t	class:hash_multimap	access:public
hash_multimap::max_bucket_count	/Users/lij/.vim/stl/stl_hash_map.h	/^  size_type max_bucket_count() const { return _M_ht.max_bucket_count(); }$/;"	f	class:hash_multimap	access:public	signature:() const
hash_multimap::max_size	/Users/lij/.vim/stl/stl_hash_map.h	/^  size_type max_size() const { return _M_ht.max_size(); }$/;"	f	class:hash_multimap	access:public	signature:() const
hash_multimap::operator ==	/Users/lij/.vim/stl/stl_hash_map.h	/^  friend bool operator== (const hash_multimap<_K1, _T1, _HF, _EqK, _Al>&,$/;"	p	class:hash_multimap	access:friend	signature:(const hash_multimap<_K1, _T1, _HF, _EqK, _Al>&, const hash_multimap<_K1, _T1, _HF, _EqK, _Al>&)
hash_multimap::pointer	/Users/lij/.vim/stl/stl_hash_map.h	/^  typedef typename _Ht::pointer pointer;$/;"	t	class:hash_multimap	access:public
hash_multimap::reference	/Users/lij/.vim/stl/stl_hash_map.h	/^  typedef typename _Ht::reference reference;$/;"	t	class:hash_multimap	access:public
hash_multimap::resize	/Users/lij/.vim/stl/stl_hash_map.h	/^  void resize(size_type __hint) { _M_ht.resize(__hint); }$/;"	f	class:hash_multimap	access:public	signature:(size_type __hint)
hash_multimap::size	/Users/lij/.vim/stl/stl_hash_map.h	/^  size_type size() const { return _M_ht.size(); }$/;"	f	class:hash_multimap	access:public	signature:() const
hash_multimap::size_type	/Users/lij/.vim/stl/stl_hash_map.h	/^  typedef typename _Ht::size_type size_type;$/;"	t	class:hash_multimap	access:public
hash_multimap::swap	/Users/lij/.vim/stl/stl_hash_map.h	/^  void swap(hash_multimap& __hs) { _M_ht.swap(__hs._M_ht); }$/;"	f	class:hash_multimap	access:public	signature:(hash_multimap& __hs)
hash_multimap::value_type	/Users/lij/.vim/stl/stl_hash_map.h	/^  typedef typename _Ht::value_type value_type;$/;"	t	class:hash_multimap	access:public
hash_multiset	/Users/lij/.vim/stl/stl_hash_set.h	/^  explicit hash_multiset(size_type __n)$/;"	f	class:hash_multiset	access:public	signature:(size_type __n)
hash_multiset	/Users/lij/.vim/stl/stl_hash_set.h	/^  hash_multiset()$/;"	f	class:hash_multiset	access:public	signature:()
hash_multiset	/Users/lij/.vim/stl/stl_hash_set.h	/^  hash_multiset(_InputIterator __f, _InputIterator __l)$/;"	f	class:hash_multiset	access:public	signature:(_InputIterator __f, _InputIterator __l)
hash_multiset	/Users/lij/.vim/stl/stl_hash_set.h	/^  hash_multiset(_InputIterator __f, _InputIterator __l, size_type __n)$/;"	f	class:hash_multiset	access:public	signature:(_InputIterator __f, _InputIterator __l, size_type __n)
hash_multiset	/Users/lij/.vim/stl/stl_hash_set.h	/^  hash_multiset(_InputIterator __f, _InputIterator __l, size_type __n,$/;"	f	class:hash_multiset	access:public	signature:(_InputIterator __f, _InputIterator __l, size_type __n, const hasher& __hf)
hash_multiset	/Users/lij/.vim/stl/stl_hash_set.h	/^  hash_multiset(_InputIterator __f, _InputIterator __l, size_type __n,$/;"	f	class:hash_multiset	access:public	signature:(_InputIterator __f, _InputIterator __l, size_type __n, const hasher& __hf, const key_equal& __eql, const allocator_type& __a = allocator_type())
hash_multiset	/Users/lij/.vim/stl/stl_hash_set.h	/^  hash_multiset(const value_type* __f, const value_type* __l)$/;"	f	class:hash_multiset	access:public	signature:(const value_type* __f, const value_type* __l)
hash_multiset	/Users/lij/.vim/stl/stl_hash_set.h	/^  hash_multiset(const value_type* __f, const value_type* __l, size_type __n)$/;"	f	class:hash_multiset	access:public	signature:(const value_type* __f, const value_type* __l, size_type __n)
hash_multiset	/Users/lij/.vim/stl/stl_hash_set.h	/^  hash_multiset(const value_type* __f, const value_type* __l, size_type __n,$/;"	f	class:hash_multiset	access:public	signature:(const value_type* __f, const value_type* __l, size_type __n, const hasher& __hf)
hash_multiset	/Users/lij/.vim/stl/stl_hash_set.h	/^  hash_multiset(const value_type* __f, const value_type* __l, size_type __n,$/;"	f	class:hash_multiset	access:public	signature:(const value_type* __f, const value_type* __l, size_type __n, const hasher& __hf, const key_equal& __eql, const allocator_type& __a = allocator_type())
hash_multiset	/Users/lij/.vim/stl/stl_hash_set.h	/^  hash_multiset(const_iterator __f, const_iterator __l)$/;"	f	class:hash_multiset	access:public	signature:(const_iterator __f, const_iterator __l)
hash_multiset	/Users/lij/.vim/stl/stl_hash_set.h	/^  hash_multiset(const_iterator __f, const_iterator __l, size_type __n)$/;"	f	class:hash_multiset	access:public	signature:(const_iterator __f, const_iterator __l, size_type __n)
hash_multiset	/Users/lij/.vim/stl/stl_hash_set.h	/^  hash_multiset(const_iterator __f, const_iterator __l, size_type __n,$/;"	f	class:hash_multiset	access:public	signature:(const_iterator __f, const_iterator __l, size_type __n, const hasher& __hf)
hash_multiset	/Users/lij/.vim/stl/stl_hash_set.h	/^  hash_multiset(const_iterator __f, const_iterator __l, size_type __n,$/;"	f	class:hash_multiset	access:public	signature:(const_iterator __f, const_iterator __l, size_type __n, const hasher& __hf, const key_equal& __eql, const allocator_type& __a = allocator_type())
hash_multiset	/Users/lij/.vim/stl/stl_hash_set.h	/^  hash_multiset(size_type __n, const hasher& __hf)$/;"	f	class:hash_multiset	access:public	signature:(size_type __n, const hasher& __hf)
hash_multiset	/Users/lij/.vim/stl/stl_hash_set.h	/^  hash_multiset(size_type __n, const hasher& __hf, const key_equal& __eql,$/;"	f	class:hash_multiset	access:public	signature:(size_type __n, const hasher& __hf, const key_equal& __eql, const allocator_type& __a = allocator_type())
hash_multiset	/Users/lij/.vim/stl/stl_hash_set.h	/^class hash_multiset$/;"	c
hash_multiset::_Ht	/Users/lij/.vim/stl/stl_hash_set.h	/^                    _EqualKey, _Alloc> _Ht;$/;"	t	class:hash_multiset	access:private
hash_multiset::_M_ht	/Users/lij/.vim/stl/stl_hash_set.h	/^  _Ht _M_ht;$/;"	m	class:hash_multiset	access:private
hash_multiset::__STL_CLASS_BINARY_FUNCTION_CHECK	/Users/lij/.vim/stl/stl_hash_set.h	/^  __STL_CLASS_BINARY_FUNCTION_CHECK(_EqualKey, bool, _Value, _Value);$/;"	p	class:hash_multiset	access:private	signature:(_EqualKey, bool, _Value, _Value)
hash_multiset::__STL_CLASS_REQUIRES	/Users/lij/.vim/stl/stl_hash_set.h	/^  __STL_CLASS_REQUIRES(_Value, _Assignable);$/;"	p	class:hash_multiset	access:private	signature:(_Value, _Assignable)
hash_multiset::__STL_CLASS_UNARY_FUNCTION_CHECK	/Users/lij/.vim/stl/stl_hash_set.h	/^  __STL_CLASS_UNARY_FUNCTION_CHECK(_HashFcn, size_t, _Value);$/;"	p	class:hash_multiset	access:private	signature:(_HashFcn, size_t, _Value)
hash_multiset::__STL_NULL_TMPL_ARGS	/Users/lij/.vim/stl/stl_hash_set.h	/^  operator== __STL_NULL_TMPL_ARGS (const hash_multiset&,const hash_multiset&);$/;"	p	class:hash_multiset	access:friend	signature:(const hash_multiset&,const hash_multiset&)
hash_multiset::allocator_type	/Users/lij/.vim/stl/stl_hash_set.h	/^  typedef typename _Ht::allocator_type allocator_type;$/;"	t	class:hash_multiset	access:public
hash_multiset::begin	/Users/lij/.vim/stl/stl_hash_set.h	/^  iterator begin() const { return _M_ht.begin(); }$/;"	f	class:hash_multiset	access:public	signature:() const
hash_multiset::bucket_count	/Users/lij/.vim/stl/stl_hash_set.h	/^  size_type bucket_count() const { return _M_ht.bucket_count(); }$/;"	f	class:hash_multiset	access:public	signature:() const
hash_multiset::clear	/Users/lij/.vim/stl/stl_hash_set.h	/^  void clear() { _M_ht.clear(); }$/;"	f	class:hash_multiset	access:public	signature:()
hash_multiset::const_iterator	/Users/lij/.vim/stl/stl_hash_set.h	/^  typedef typename _Ht::const_iterator const_iterator;$/;"	t	class:hash_multiset	access:public
hash_multiset::const_pointer	/Users/lij/.vim/stl/stl_hash_set.h	/^  typedef typename _Ht::const_pointer const_pointer;$/;"	t	class:hash_multiset	access:public
hash_multiset::const_reference	/Users/lij/.vim/stl/stl_hash_set.h	/^  typedef typename _Ht::const_reference const_reference;$/;"	t	class:hash_multiset	access:public
hash_multiset::count	/Users/lij/.vim/stl/stl_hash_set.h	/^  size_type count(const key_type& __key) const { return _M_ht.count(__key); }$/;"	f	class:hash_multiset	access:public	signature:(const key_type& __key) const
hash_multiset::difference_type	/Users/lij/.vim/stl/stl_hash_set.h	/^  typedef typename _Ht::difference_type difference_type;$/;"	t	class:hash_multiset	access:public
hash_multiset::elems_in_bucket	/Users/lij/.vim/stl/stl_hash_set.h	/^  size_type elems_in_bucket(size_type __n) const$/;"	f	class:hash_multiset	access:public	signature:(size_type __n) const
hash_multiset::empty	/Users/lij/.vim/stl/stl_hash_set.h	/^  bool empty() const { return _M_ht.empty(); }$/;"	f	class:hash_multiset	access:public	signature:() const
hash_multiset::end	/Users/lij/.vim/stl/stl_hash_set.h	/^  iterator end() const { return _M_ht.end(); }$/;"	f	class:hash_multiset	access:public	signature:() const
hash_multiset::equal_range	/Users/lij/.vim/stl/stl_hash_set.h	/^  pair<iterator, iterator> equal_range(const key_type& __key) const$/;"	f	class:hash_multiset	access:public	signature:(const key_type& __key) const
hash_multiset::erase	/Users/lij/.vim/stl/stl_hash_set.h	/^  size_type erase(const key_type& __key) {return _M_ht.erase(__key); }$/;"	f	class:hash_multiset	access:public	signature:(const key_type& __key)
hash_multiset::erase	/Users/lij/.vim/stl/stl_hash_set.h	/^  void erase(iterator __f, iterator __l) { _M_ht.erase(__f, __l); }$/;"	f	class:hash_multiset	access:public	signature:(iterator __f, iterator __l)
hash_multiset::erase	/Users/lij/.vim/stl/stl_hash_set.h	/^  void erase(iterator __it) { _M_ht.erase(__it); }$/;"	f	class:hash_multiset	access:public	signature:(iterator __it)
hash_multiset::find	/Users/lij/.vim/stl/stl_hash_set.h	/^  iterator find(const key_type& __key) const { return _M_ht.find(__key); }$/;"	f	class:hash_multiset	access:public	signature:(const key_type& __key) const
hash_multiset::get_allocator	/Users/lij/.vim/stl/stl_hash_set.h	/^  allocator_type get_allocator() const { return _M_ht.get_allocator(); }$/;"	f	class:hash_multiset	access:public	signature:() const
hash_multiset::hash_funct	/Users/lij/.vim/stl/stl_hash_set.h	/^  hasher hash_funct() const { return _M_ht.hash_funct(); }$/;"	f	class:hash_multiset	access:public	signature:() const
hash_multiset::hash_multiset	/Users/lij/.vim/stl/stl_hash_set.h	/^  explicit hash_multiset(size_type __n)$/;"	f	class:hash_multiset	access:public	signature:(size_type __n)
hash_multiset::hash_multiset	/Users/lij/.vim/stl/stl_hash_set.h	/^  hash_multiset()$/;"	f	class:hash_multiset	access:public	signature:()
hash_multiset::hash_multiset	/Users/lij/.vim/stl/stl_hash_set.h	/^  hash_multiset(_InputIterator __f, _InputIterator __l)$/;"	f	class:hash_multiset	access:public	signature:(_InputIterator __f, _InputIterator __l)
hash_multiset::hash_multiset	/Users/lij/.vim/stl/stl_hash_set.h	/^  hash_multiset(_InputIterator __f, _InputIterator __l, size_type __n)$/;"	f	class:hash_multiset	access:public	signature:(_InputIterator __f, _InputIterator __l, size_type __n)
hash_multiset::hash_multiset	/Users/lij/.vim/stl/stl_hash_set.h	/^  hash_multiset(_InputIterator __f, _InputIterator __l, size_type __n,$/;"	f	class:hash_multiset	access:public	signature:(_InputIterator __f, _InputIterator __l, size_type __n, const hasher& __hf)
hash_multiset::hash_multiset	/Users/lij/.vim/stl/stl_hash_set.h	/^  hash_multiset(_InputIterator __f, _InputIterator __l, size_type __n,$/;"	f	class:hash_multiset	access:public	signature:(_InputIterator __f, _InputIterator __l, size_type __n, const hasher& __hf, const key_equal& __eql, const allocator_type& __a = allocator_type())
hash_multiset::hash_multiset	/Users/lij/.vim/stl/stl_hash_set.h	/^  hash_multiset(const value_type* __f, const value_type* __l)$/;"	f	class:hash_multiset	access:public	signature:(const value_type* __f, const value_type* __l)
hash_multiset::hash_multiset	/Users/lij/.vim/stl/stl_hash_set.h	/^  hash_multiset(const value_type* __f, const value_type* __l, size_type __n)$/;"	f	class:hash_multiset	access:public	signature:(const value_type* __f, const value_type* __l, size_type __n)
hash_multiset::hash_multiset	/Users/lij/.vim/stl/stl_hash_set.h	/^  hash_multiset(const value_type* __f, const value_type* __l, size_type __n,$/;"	f	class:hash_multiset	access:public	signature:(const value_type* __f, const value_type* __l, size_type __n, const hasher& __hf)
hash_multiset::hash_multiset	/Users/lij/.vim/stl/stl_hash_set.h	/^  hash_multiset(const value_type* __f, const value_type* __l, size_type __n,$/;"	f	class:hash_multiset	access:public	signature:(const value_type* __f, const value_type* __l, size_type __n, const hasher& __hf, const key_equal& __eql, const allocator_type& __a = allocator_type())
hash_multiset::hash_multiset	/Users/lij/.vim/stl/stl_hash_set.h	/^  hash_multiset(const_iterator __f, const_iterator __l)$/;"	f	class:hash_multiset	access:public	signature:(const_iterator __f, const_iterator __l)
hash_multiset::hash_multiset	/Users/lij/.vim/stl/stl_hash_set.h	/^  hash_multiset(const_iterator __f, const_iterator __l, size_type __n)$/;"	f	class:hash_multiset	access:public	signature:(const_iterator __f, const_iterator __l, size_type __n)
hash_multiset::hash_multiset	/Users/lij/.vim/stl/stl_hash_set.h	/^  hash_multiset(const_iterator __f, const_iterator __l, size_type __n,$/;"	f	class:hash_multiset	access:public	signature:(const_iterator __f, const_iterator __l, size_type __n, const hasher& __hf)
hash_multiset::hash_multiset	/Users/lij/.vim/stl/stl_hash_set.h	/^  hash_multiset(const_iterator __f, const_iterator __l, size_type __n,$/;"	f	class:hash_multiset	access:public	signature:(const_iterator __f, const_iterator __l, size_type __n, const hasher& __hf, const key_equal& __eql, const allocator_type& __a = allocator_type())
hash_multiset::hash_multiset	/Users/lij/.vim/stl/stl_hash_set.h	/^  hash_multiset(size_type __n, const hasher& __hf)$/;"	f	class:hash_multiset	access:public	signature:(size_type __n, const hasher& __hf)
hash_multiset::hash_multiset	/Users/lij/.vim/stl/stl_hash_set.h	/^  hash_multiset(size_type __n, const hasher& __hf, const key_equal& __eql,$/;"	f	class:hash_multiset	access:public	signature:(size_type __n, const hasher& __hf, const key_equal& __eql, const allocator_type& __a = allocator_type())
hash_multiset::hasher	/Users/lij/.vim/stl/stl_hash_set.h	/^  typedef typename _Ht::hasher hasher;$/;"	t	class:hash_multiset	access:public
hash_multiset::insert	/Users/lij/.vim/stl/stl_hash_set.h	/^  iterator insert(const value_type& __obj)$/;"	f	class:hash_multiset	access:public	signature:(const value_type& __obj)
hash_multiset::insert	/Users/lij/.vim/stl/stl_hash_set.h	/^  void insert(_InputIterator __f, _InputIterator __l) $/;"	f	class:hash_multiset	access:public	signature:(_InputIterator __f, _InputIterator __l)
hash_multiset::insert	/Users/lij/.vim/stl/stl_hash_set.h	/^  void insert(const value_type* __f, const value_type* __l) {$/;"	f	class:hash_multiset	access:public	signature:(const value_type* __f, const value_type* __l)
hash_multiset::insert	/Users/lij/.vim/stl/stl_hash_set.h	/^  void insert(const_iterator __f, const_iterator __l) $/;"	f	class:hash_multiset	access:public	signature:(const_iterator __f, const_iterator __l)
hash_multiset::insert_noresize	/Users/lij/.vim/stl/stl_hash_set.h	/^  iterator insert_noresize(const value_type& __obj)$/;"	f	class:hash_multiset	access:public	signature:(const value_type& __obj)
hash_multiset::iterator	/Users/lij/.vim/stl/stl_hash_set.h	/^  typedef typename _Ht::const_iterator iterator;$/;"	t	class:hash_multiset	access:public
hash_multiset::key_eq	/Users/lij/.vim/stl/stl_hash_set.h	/^  key_equal key_eq() const { return _M_ht.key_eq(); }$/;"	f	class:hash_multiset	access:public	signature:() const
hash_multiset::key_equal	/Users/lij/.vim/stl/stl_hash_set.h	/^  typedef typename _Ht::key_equal key_equal;$/;"	t	class:hash_multiset	access:public
hash_multiset::key_type	/Users/lij/.vim/stl/stl_hash_set.h	/^  typedef typename _Ht::key_type key_type;$/;"	t	class:hash_multiset	access:public
hash_multiset::max_bucket_count	/Users/lij/.vim/stl/stl_hash_set.h	/^  size_type max_bucket_count() const { return _M_ht.max_bucket_count(); }$/;"	f	class:hash_multiset	access:public	signature:() const
hash_multiset::max_size	/Users/lij/.vim/stl/stl_hash_set.h	/^  size_type max_size() const { return _M_ht.max_size(); }$/;"	f	class:hash_multiset	access:public	signature:() const
hash_multiset::operator ==	/Users/lij/.vim/stl/stl_hash_set.h	/^  friend bool operator== (const hash_multiset<_Val, _HF, _EqK, _Al>&,$/;"	p	class:hash_multiset	access:friend	signature:(const hash_multiset<_Val, _HF, _EqK, _Al>&, const hash_multiset<_Val, _HF, _EqK, _Al>&)
hash_multiset::pointer	/Users/lij/.vim/stl/stl_hash_set.h	/^  typedef typename _Ht::const_pointer pointer;$/;"	t	class:hash_multiset	access:public
hash_multiset::reference	/Users/lij/.vim/stl/stl_hash_set.h	/^  typedef typename _Ht::const_reference reference;$/;"	t	class:hash_multiset	access:public
hash_multiset::resize	/Users/lij/.vim/stl/stl_hash_set.h	/^  void resize(size_type __hint) { _M_ht.resize(__hint); }$/;"	f	class:hash_multiset	access:public	signature:(size_type __hint)
hash_multiset::size	/Users/lij/.vim/stl/stl_hash_set.h	/^  size_type size() const { return _M_ht.size(); }$/;"	f	class:hash_multiset	access:public	signature:() const
hash_multiset::size_type	/Users/lij/.vim/stl/stl_hash_set.h	/^  typedef typename _Ht::size_type size_type;$/;"	t	class:hash_multiset	access:public
hash_multiset::swap	/Users/lij/.vim/stl/stl_hash_set.h	/^  void swap(hash_multiset& hs) { _M_ht.swap(hs._M_ht); }$/;"	f	class:hash_multiset	access:public	signature:(hash_multiset& hs)
hash_multiset::value_type	/Users/lij/.vim/stl/stl_hash_set.h	/^  typedef typename _Ht::value_type value_type;$/;"	t	class:hash_multiset	access:public
hash_set	/Users/lij/.vim/stl/stl_hash_set.h	/^  explicit hash_set(size_type __n)$/;"	f	class:hash_set	access:public	signature:(size_type __n)
hash_set	/Users/lij/.vim/stl/stl_hash_set.h	/^  hash_set()$/;"	f	class:hash_set	access:public	signature:()
hash_set	/Users/lij/.vim/stl/stl_hash_set.h	/^  hash_set(_InputIterator __f, _InputIterator __l)$/;"	f	class:hash_set	access:public	signature:(_InputIterator __f, _InputIterator __l)
hash_set	/Users/lij/.vim/stl/stl_hash_set.h	/^  hash_set(_InputIterator __f, _InputIterator __l, size_type __n)$/;"	f	class:hash_set	access:public	signature:(_InputIterator __f, _InputIterator __l, size_type __n)
hash_set	/Users/lij/.vim/stl/stl_hash_set.h	/^  hash_set(_InputIterator __f, _InputIterator __l, size_type __n,$/;"	f	class:hash_set	access:public	signature:(_InputIterator __f, _InputIterator __l, size_type __n, const hasher& __hf)
hash_set	/Users/lij/.vim/stl/stl_hash_set.h	/^  hash_set(_InputIterator __f, _InputIterator __l, size_type __n,$/;"	f	class:hash_set	access:public	signature:(_InputIterator __f, _InputIterator __l, size_type __n, const hasher& __hf, const key_equal& __eql, const allocator_type& __a = allocator_type())
hash_set	/Users/lij/.vim/stl/stl_hash_set.h	/^  hash_set(const value_type* __f, const value_type* __l)$/;"	f	class:hash_set	access:public	signature:(const value_type* __f, const value_type* __l)
hash_set	/Users/lij/.vim/stl/stl_hash_set.h	/^  hash_set(const value_type* __f, const value_type* __l, size_type __n)$/;"	f	class:hash_set	access:public	signature:(const value_type* __f, const value_type* __l, size_type __n)
hash_set	/Users/lij/.vim/stl/stl_hash_set.h	/^  hash_set(const value_type* __f, const value_type* __l, size_type __n,$/;"	f	class:hash_set	access:public	signature:(const value_type* __f, const value_type* __l, size_type __n, const hasher& __hf)
hash_set	/Users/lij/.vim/stl/stl_hash_set.h	/^  hash_set(const value_type* __f, const value_type* __l, size_type __n,$/;"	f	class:hash_set	access:public	signature:(const value_type* __f, const value_type* __l, size_type __n, const hasher& __hf, const key_equal& __eql, const allocator_type& __a = allocator_type())
hash_set	/Users/lij/.vim/stl/stl_hash_set.h	/^  hash_set(const_iterator __f, const_iterator __l)$/;"	f	class:hash_set	access:public	signature:(const_iterator __f, const_iterator __l)
hash_set	/Users/lij/.vim/stl/stl_hash_set.h	/^  hash_set(const_iterator __f, const_iterator __l, size_type __n)$/;"	f	class:hash_set	access:public	signature:(const_iterator __f, const_iterator __l, size_type __n)
hash_set	/Users/lij/.vim/stl/stl_hash_set.h	/^  hash_set(const_iterator __f, const_iterator __l, size_type __n,$/;"	f	class:hash_set	access:public	signature:(const_iterator __f, const_iterator __l, size_type __n, const hasher& __hf)
hash_set	/Users/lij/.vim/stl/stl_hash_set.h	/^  hash_set(const_iterator __f, const_iterator __l, size_type __n,$/;"	f	class:hash_set	access:public	signature:(const_iterator __f, const_iterator __l, size_type __n, const hasher& __hf, const key_equal& __eql, const allocator_type& __a = allocator_type())
hash_set	/Users/lij/.vim/stl/stl_hash_set.h	/^  hash_set(size_type __n, const hasher& __hf)$/;"	f	class:hash_set	access:public	signature:(size_type __n, const hasher& __hf)
hash_set	/Users/lij/.vim/stl/stl_hash_set.h	/^  hash_set(size_type __n, const hasher& __hf, const key_equal& __eql,$/;"	f	class:hash_set	access:public	signature:(size_type __n, const hasher& __hf, const key_equal& __eql, const allocator_type& __a = allocator_type())
hash_set	/Users/lij/.vim/stl/stl_hash_set.h	/^class hash_set$/;"	c
hash_set::_Ht	/Users/lij/.vim/stl/stl_hash_set.h	/^                    _EqualKey, _Alloc> _Ht;$/;"	t	class:hash_set	access:private
hash_set::_M_ht	/Users/lij/.vim/stl/stl_hash_set.h	/^  _Ht _M_ht;$/;"	m	class:hash_set	access:private
hash_set::__STL_CLASS_BINARY_FUNCTION_CHECK	/Users/lij/.vim/stl/stl_hash_set.h	/^  __STL_CLASS_BINARY_FUNCTION_CHECK(_EqualKey, bool, _Value, _Value);$/;"	p	class:hash_set	access:private	signature:(_EqualKey, bool, _Value, _Value)
hash_set::__STL_CLASS_REQUIRES	/Users/lij/.vim/stl/stl_hash_set.h	/^  __STL_CLASS_REQUIRES(_Value, _Assignable);$/;"	p	class:hash_set	access:private	signature:(_Value, _Assignable)
hash_set::__STL_CLASS_UNARY_FUNCTION_CHECK	/Users/lij/.vim/stl/stl_hash_set.h	/^  __STL_CLASS_UNARY_FUNCTION_CHECK(_HashFcn, size_t, _Value);$/;"	p	class:hash_set	access:private	signature:(_HashFcn, size_t, _Value)
hash_set::__STL_NULL_TMPL_ARGS	/Users/lij/.vim/stl/stl_hash_set.h	/^  operator== __STL_NULL_TMPL_ARGS (const hash_set&, const hash_set&);$/;"	p	class:hash_set	access:friend	signature:(const hash_set&, const hash_set&)
hash_set::allocator_type	/Users/lij/.vim/stl/stl_hash_set.h	/^  typedef typename _Ht::allocator_type allocator_type;$/;"	t	class:hash_set	access:public
hash_set::begin	/Users/lij/.vim/stl/stl_hash_set.h	/^  iterator begin() const { return _M_ht.begin(); }$/;"	f	class:hash_set	access:public	signature:() const
hash_set::bucket_count	/Users/lij/.vim/stl/stl_hash_set.h	/^  size_type bucket_count() const { return _M_ht.bucket_count(); }$/;"	f	class:hash_set	access:public	signature:() const
hash_set::clear	/Users/lij/.vim/stl/stl_hash_set.h	/^  void clear() { _M_ht.clear(); }$/;"	f	class:hash_set	access:public	signature:()
hash_set::const_iterator	/Users/lij/.vim/stl/stl_hash_set.h	/^  typedef typename _Ht::const_iterator const_iterator;$/;"	t	class:hash_set	access:public
hash_set::const_pointer	/Users/lij/.vim/stl/stl_hash_set.h	/^  typedef typename _Ht::const_pointer const_pointer;$/;"	t	class:hash_set	access:public
hash_set::const_reference	/Users/lij/.vim/stl/stl_hash_set.h	/^  typedef typename _Ht::const_reference const_reference;$/;"	t	class:hash_set	access:public
hash_set::count	/Users/lij/.vim/stl/stl_hash_set.h	/^  size_type count(const key_type& __key) const { return _M_ht.count(__key); }$/;"	f	class:hash_set	access:public	signature:(const key_type& __key) const
hash_set::difference_type	/Users/lij/.vim/stl/stl_hash_set.h	/^  typedef typename _Ht::difference_type difference_type;$/;"	t	class:hash_set	access:public
hash_set::elems_in_bucket	/Users/lij/.vim/stl/stl_hash_set.h	/^  size_type elems_in_bucket(size_type __n) const$/;"	f	class:hash_set	access:public	signature:(size_type __n) const
hash_set::empty	/Users/lij/.vim/stl/stl_hash_set.h	/^  bool empty() const { return _M_ht.empty(); }$/;"	f	class:hash_set	access:public	signature:() const
hash_set::end	/Users/lij/.vim/stl/stl_hash_set.h	/^  iterator end() const { return _M_ht.end(); }$/;"	f	class:hash_set	access:public	signature:() const
hash_set::equal_range	/Users/lij/.vim/stl/stl_hash_set.h	/^  pair<iterator, iterator> equal_range(const key_type& __key) const$/;"	f	class:hash_set	access:public	signature:(const key_type& __key) const
hash_set::erase	/Users/lij/.vim/stl/stl_hash_set.h	/^  size_type erase(const key_type& __key) {return _M_ht.erase(__key); }$/;"	f	class:hash_set	access:public	signature:(const key_type& __key)
hash_set::erase	/Users/lij/.vim/stl/stl_hash_set.h	/^  void erase(iterator __f, iterator __l) { _M_ht.erase(__f, __l); }$/;"	f	class:hash_set	access:public	signature:(iterator __f, iterator __l)
hash_set::erase	/Users/lij/.vim/stl/stl_hash_set.h	/^  void erase(iterator __it) { _M_ht.erase(__it); }$/;"	f	class:hash_set	access:public	signature:(iterator __it)
hash_set::find	/Users/lij/.vim/stl/stl_hash_set.h	/^  iterator find(const key_type& __key) const { return _M_ht.find(__key); }$/;"	f	class:hash_set	access:public	signature:(const key_type& __key) const
hash_set::get_allocator	/Users/lij/.vim/stl/stl_hash_set.h	/^  allocator_type get_allocator() const { return _M_ht.get_allocator(); }$/;"	f	class:hash_set	access:public	signature:() const
hash_set::hash_funct	/Users/lij/.vim/stl/stl_hash_set.h	/^  hasher hash_funct() const { return _M_ht.hash_funct(); }$/;"	f	class:hash_set	access:public	signature:() const
hash_set::hash_set	/Users/lij/.vim/stl/stl_hash_set.h	/^  explicit hash_set(size_type __n)$/;"	f	class:hash_set	access:public	signature:(size_type __n)
hash_set::hash_set	/Users/lij/.vim/stl/stl_hash_set.h	/^  hash_set()$/;"	f	class:hash_set	access:public	signature:()
hash_set::hash_set	/Users/lij/.vim/stl/stl_hash_set.h	/^  hash_set(_InputIterator __f, _InputIterator __l)$/;"	f	class:hash_set	access:public	signature:(_InputIterator __f, _InputIterator __l)
hash_set::hash_set	/Users/lij/.vim/stl/stl_hash_set.h	/^  hash_set(_InputIterator __f, _InputIterator __l, size_type __n)$/;"	f	class:hash_set	access:public	signature:(_InputIterator __f, _InputIterator __l, size_type __n)
hash_set::hash_set	/Users/lij/.vim/stl/stl_hash_set.h	/^  hash_set(_InputIterator __f, _InputIterator __l, size_type __n,$/;"	f	class:hash_set	access:public	signature:(_InputIterator __f, _InputIterator __l, size_type __n, const hasher& __hf)
hash_set::hash_set	/Users/lij/.vim/stl/stl_hash_set.h	/^  hash_set(_InputIterator __f, _InputIterator __l, size_type __n,$/;"	f	class:hash_set	access:public	signature:(_InputIterator __f, _InputIterator __l, size_type __n, const hasher& __hf, const key_equal& __eql, const allocator_type& __a = allocator_type())
hash_set::hash_set	/Users/lij/.vim/stl/stl_hash_set.h	/^  hash_set(const value_type* __f, const value_type* __l)$/;"	f	class:hash_set	access:public	signature:(const value_type* __f, const value_type* __l)
hash_set::hash_set	/Users/lij/.vim/stl/stl_hash_set.h	/^  hash_set(const value_type* __f, const value_type* __l, size_type __n)$/;"	f	class:hash_set	access:public	signature:(const value_type* __f, const value_type* __l, size_type __n)
hash_set::hash_set	/Users/lij/.vim/stl/stl_hash_set.h	/^  hash_set(const value_type* __f, const value_type* __l, size_type __n,$/;"	f	class:hash_set	access:public	signature:(const value_type* __f, const value_type* __l, size_type __n, const hasher& __hf)
hash_set::hash_set	/Users/lij/.vim/stl/stl_hash_set.h	/^  hash_set(const value_type* __f, const value_type* __l, size_type __n,$/;"	f	class:hash_set	access:public	signature:(const value_type* __f, const value_type* __l, size_type __n, const hasher& __hf, const key_equal& __eql, const allocator_type& __a = allocator_type())
hash_set::hash_set	/Users/lij/.vim/stl/stl_hash_set.h	/^  hash_set(const_iterator __f, const_iterator __l)$/;"	f	class:hash_set	access:public	signature:(const_iterator __f, const_iterator __l)
hash_set::hash_set	/Users/lij/.vim/stl/stl_hash_set.h	/^  hash_set(const_iterator __f, const_iterator __l, size_type __n)$/;"	f	class:hash_set	access:public	signature:(const_iterator __f, const_iterator __l, size_type __n)
hash_set::hash_set	/Users/lij/.vim/stl/stl_hash_set.h	/^  hash_set(const_iterator __f, const_iterator __l, size_type __n,$/;"	f	class:hash_set	access:public	signature:(const_iterator __f, const_iterator __l, size_type __n, const hasher& __hf)
hash_set::hash_set	/Users/lij/.vim/stl/stl_hash_set.h	/^  hash_set(const_iterator __f, const_iterator __l, size_type __n,$/;"	f	class:hash_set	access:public	signature:(const_iterator __f, const_iterator __l, size_type __n, const hasher& __hf, const key_equal& __eql, const allocator_type& __a = allocator_type())
hash_set::hash_set	/Users/lij/.vim/stl/stl_hash_set.h	/^  hash_set(size_type __n, const hasher& __hf)$/;"	f	class:hash_set	access:public	signature:(size_type __n, const hasher& __hf)
hash_set::hash_set	/Users/lij/.vim/stl/stl_hash_set.h	/^  hash_set(size_type __n, const hasher& __hf, const key_equal& __eql,$/;"	f	class:hash_set	access:public	signature:(size_type __n, const hasher& __hf, const key_equal& __eql, const allocator_type& __a = allocator_type())
hash_set::hasher	/Users/lij/.vim/stl/stl_hash_set.h	/^  typedef typename _Ht::hasher hasher;$/;"	t	class:hash_set	access:public
hash_set::insert	/Users/lij/.vim/stl/stl_hash_set.h	/^  pair<iterator, bool> insert(const value_type& __obj)$/;"	f	class:hash_set	access:public	signature:(const value_type& __obj)
hash_set::insert	/Users/lij/.vim/stl/stl_hash_set.h	/^  void insert(_InputIterator __f, _InputIterator __l) $/;"	f	class:hash_set	access:public	signature:(_InputIterator __f, _InputIterator __l)
hash_set::insert	/Users/lij/.vim/stl/stl_hash_set.h	/^  void insert(const value_type* __f, const value_type* __l) {$/;"	f	class:hash_set	access:public	signature:(const value_type* __f, const value_type* __l)
hash_set::insert	/Users/lij/.vim/stl/stl_hash_set.h	/^  void insert(const_iterator __f, const_iterator __l) $/;"	f	class:hash_set	access:public	signature:(const_iterator __f, const_iterator __l)
hash_set::insert_noresize	/Users/lij/.vim/stl/stl_hash_set.h	/^  pair<iterator, bool> insert_noresize(const value_type& __obj)$/;"	f	class:hash_set	access:public	signature:(const value_type& __obj)
hash_set::iterator	/Users/lij/.vim/stl/stl_hash_set.h	/^  typedef typename _Ht::const_iterator iterator;$/;"	t	class:hash_set	access:public
hash_set::key_eq	/Users/lij/.vim/stl/stl_hash_set.h	/^  key_equal key_eq() const { return _M_ht.key_eq(); }$/;"	f	class:hash_set	access:public	signature:() const
hash_set::key_equal	/Users/lij/.vim/stl/stl_hash_set.h	/^  typedef typename _Ht::key_equal key_equal;$/;"	t	class:hash_set	access:public
hash_set::key_type	/Users/lij/.vim/stl/stl_hash_set.h	/^  typedef typename _Ht::key_type key_type;$/;"	t	class:hash_set	access:public
hash_set::max_bucket_count	/Users/lij/.vim/stl/stl_hash_set.h	/^  size_type max_bucket_count() const { return _M_ht.max_bucket_count(); }$/;"	f	class:hash_set	access:public	signature:() const
hash_set::max_size	/Users/lij/.vim/stl/stl_hash_set.h	/^  size_type max_size() const { return _M_ht.max_size(); }$/;"	f	class:hash_set	access:public	signature:() const
hash_set::operator ==	/Users/lij/.vim/stl/stl_hash_set.h	/^  friend bool operator== (const hash_set<_Val, _HF, _EqK, _Al>&,$/;"	p	class:hash_set	access:friend	signature:(const hash_set<_Val, _HF, _EqK, _Al>&, const hash_set<_Val, _HF, _EqK, _Al>&)
hash_set::pointer	/Users/lij/.vim/stl/stl_hash_set.h	/^  typedef typename _Ht::const_pointer pointer;$/;"	t	class:hash_set	access:public
hash_set::reference	/Users/lij/.vim/stl/stl_hash_set.h	/^  typedef typename _Ht::const_reference reference;$/;"	t	class:hash_set	access:public
hash_set::resize	/Users/lij/.vim/stl/stl_hash_set.h	/^  void resize(size_type __hint) { _M_ht.resize(__hint); }$/;"	f	class:hash_set	access:public	signature:(size_type __hint)
hash_set::size	/Users/lij/.vim/stl/stl_hash_set.h	/^  size_type size() const { return _M_ht.size(); }$/;"	f	class:hash_set	access:public	signature:() const
hash_set::size_type	/Users/lij/.vim/stl/stl_hash_set.h	/^  typedef typename _Ht::size_type size_type;$/;"	t	class:hash_set	access:public
hash_set::swap	/Users/lij/.vim/stl/stl_hash_set.h	/^  void swap(hash_set& __hs) { _M_ht.swap(__hs._M_ht); }$/;"	f	class:hash_set	access:public	signature:(hash_set& __hs)
hash_set::value_type	/Users/lij/.vim/stl/stl_hash_set.h	/^  typedef typename _Ht::value_type value_type;$/;"	t	class:hash_set	access:public
hasher	/Users/lij/.vim/stl/stl_hash_map.h	/^  typedef typename _Ht::hasher hasher;$/;"	t	class:hash_map	access:public
hasher	/Users/lij/.vim/stl/stl_hash_map.h	/^  typedef typename _Ht::hasher hasher;$/;"	t	class:hash_multimap	access:public
hasher	/Users/lij/.vim/stl/stl_hash_set.h	/^  typedef typename _Ht::hasher hasher;$/;"	t	class:hash_multiset	access:public
hasher	/Users/lij/.vim/stl/stl_hash_set.h	/^  typedef typename _Ht::hasher hasher;$/;"	t	class:hash_set	access:public
hasher	/Users/lij/.vim/stl/stl_hashtable.h	/^  typedef _HashFcn hasher;$/;"	t	class:hashtable	access:public
hashtable	/Users/lij/.vim/stl/stl_hashtable.h	/^class hashtable {$/;"	c
hashtable::_M_bkt_num	/Users/lij/.vim/stl/stl_hashtable.h	/^  size_type _M_bkt_num(const value_type& __obj) const$/;"	f	class:hashtable	access:private	signature:(const value_type& __obj) const
hashtable::_M_bkt_num	/Users/lij/.vim/stl/stl_hashtable.h	/^  size_type _M_bkt_num(const value_type& __obj, size_t __n) const$/;"	f	class:hashtable	access:private	signature:(const value_type& __obj, size_t __n) const
hashtable::_M_bkt_num_key	/Users/lij/.vim/stl/stl_hashtable.h	/^  size_type _M_bkt_num_key(const key_type& __key) const$/;"	f	class:hashtable	access:private	signature:(const key_type& __key) const
hashtable::_M_bkt_num_key	/Users/lij/.vim/stl/stl_hashtable.h	/^  size_type _M_bkt_num_key(const key_type& __key, size_t __n) const$/;"	f	class:hashtable	access:private	signature:(const key_type& __key, size_t __n) const
hashtable::_M_buckets	/Users/lij/.vim/stl/stl_hashtable.h	/^      _M_buckets(__a),$/;"	p	class:hashtable	access:public	signature:(__a)
hashtable::_M_buckets	/Users/lij/.vim/stl/stl_hashtable.h	/^      _M_buckets(__ht.get_allocator()),$/;"	p	class:hashtable	access:public	signature:(__ht.get_allocator())
hashtable::_M_buckets	/Users/lij/.vim/stl/stl_hashtable.h	/^  vector<_Node*,_Alloc> _M_buckets;$/;"	m	class:hashtable	access:private
hashtable::_M_copy_from	/Users/lij/.vim/stl/stl_hashtable.h	/^  ::_M_copy_from(const hashtable& __ht)$/;"	f	class:hashtable	signature:(const hashtable& __ht)
hashtable::_M_copy_from	/Users/lij/.vim/stl/stl_hashtable.h	/^  void _M_copy_from(const hashtable& __ht);$/;"	p	class:hashtable	access:private	signature:(const hashtable& __ht)
hashtable::_M_delete_node	/Users/lij/.vim/stl/stl_hashtable.h	/^  void _M_delete_node(_Node* __n)$/;"	f	class:hashtable	access:private	signature:(_Node* __n)
hashtable::_M_equals	/Users/lij/.vim/stl/stl_hashtable.h	/^      _M_equals(__eql),$/;"	p	class:hashtable	access:public	signature:(__eql)
hashtable::_M_equals	/Users/lij/.vim/stl/stl_hashtable.h	/^      _M_equals(__ht._M_equals),$/;"	p	class:hashtable	access:public	signature:(__ht._M_equals)
hashtable::_M_equals	/Users/lij/.vim/stl/stl_hashtable.h	/^  key_equal             _M_equals;$/;"	m	class:hashtable	access:private
hashtable::_M_erase_bucket	/Users/lij/.vim/stl/stl_hashtable.h	/^  ::_M_erase_bucket(const size_type __n, _Node* __first, _Node* __last)$/;"	f	class:hashtable	signature:(const size_type __n, _Node* __first, _Node* __last)
hashtable::_M_erase_bucket	/Users/lij/.vim/stl/stl_hashtable.h	/^  ::_M_erase_bucket(const size_type __n, _Node* __last)$/;"	f	class:hashtable	signature:(const size_type __n, _Node* __last)
hashtable::_M_erase_bucket	/Users/lij/.vim/stl/stl_hashtable.h	/^  void _M_erase_bucket(const size_type __n, _Node* __first, _Node* __last);$/;"	p	class:hashtable	access:private	signature:(const size_type __n, _Node* __first, _Node* __last)
hashtable::_M_erase_bucket	/Users/lij/.vim/stl/stl_hashtable.h	/^  void _M_erase_bucket(const size_type __n, _Node* __last);$/;"	p	class:hashtable	access:private	signature:(const size_type __n, _Node* __last)
hashtable::_M_get_key	/Users/lij/.vim/stl/stl_hashtable.h	/^      _M_get_key(__ext),$/;"	p	class:hashtable	access:public	signature:(__ext)
hashtable::_M_get_key	/Users/lij/.vim/stl/stl_hashtable.h	/^      _M_get_key(__ht._M_get_key),$/;"	p	class:hashtable	access:public	signature:(__ht._M_get_key)
hashtable::_M_get_key	/Users/lij/.vim/stl/stl_hashtable.h	/^  _ExtractKey           _M_get_key;$/;"	m	class:hashtable	access:private
hashtable::_M_get_node	/Users/lij/.vim/stl/stl_hashtable.h	/^  _Node* _M_get_node() { return _M_node_allocator.allocate(1); }$/;"	f	class:hashtable	access:private	signature:()
hashtable::_M_get_node	/Users/lij/.vim/stl/stl_hashtable.h	/^  _Node* _M_get_node() { return _M_node_allocator_type::allocate(1); }$/;"	f	class:hashtable	access:private	signature:()
hashtable::_M_hash	/Users/lij/.vim/stl/stl_hashtable.h	/^      _M_hash(__hf),$/;"	p	class:hashtable	access:public	signature:(__hf)
hashtable::_M_hash	/Users/lij/.vim/stl/stl_hashtable.h	/^      _M_hash(__ht._M_hash),$/;"	p	class:hashtable	access:public	signature:(__ht._M_hash)
hashtable::_M_hash	/Users/lij/.vim/stl/stl_hashtable.h	/^  hasher                _M_hash;$/;"	m	class:hashtable	access:private
hashtable::_M_initialize_buckets	/Users/lij/.vim/stl/stl_hashtable.h	/^  void _M_initialize_buckets(size_type __n)$/;"	f	class:hashtable	access:private	signature:(size_type __n)
hashtable::_M_new_node	/Users/lij/.vim/stl/stl_hashtable.h	/^  _Node* _M_new_node(const value_type& __obj)$/;"	f	class:hashtable	access:private	signature:(const value_type& __obj)
hashtable::_M_next_size	/Users/lij/.vim/stl/stl_hashtable.h	/^  size_type _M_next_size(size_type __n) const$/;"	f	class:hashtable	access:private	signature:(size_type __n) const
hashtable::_M_node_allocator	/Users/lij/.vim/stl/stl_hashtable.h	/^  typename _Alloc_traits<_Node, _Alloc>::allocator_type _M_node_allocator;$/;"	m	class:hashtable	access:private
hashtable::_M_node_allocator_type	/Users/lij/.vim/stl/stl_hashtable.h	/^  typedef simple_alloc<_Node, _Alloc> _M_node_allocator_type;$/;"	t	class:hashtable	access:private
hashtable::_M_num_elements	/Users/lij/.vim/stl/stl_hashtable.h	/^  size_type             _M_num_elements;$/;"	m	class:hashtable	access:private
hashtable::_M_put_node	/Users/lij/.vim/stl/stl_hashtable.h	/^  void _M_put_node(_Node* __p) { _M_node_allocator.deallocate(__p, 1); }$/;"	f	class:hashtable	access:private	signature:(_Node* __p)
hashtable::_M_put_node	/Users/lij/.vim/stl/stl_hashtable.h	/^  void _M_put_node(_Node* __p) { _M_node_allocator_type::deallocate(__p, 1); }$/;"	f	class:hashtable	access:private	signature:(_Node* __p)
hashtable::_Node	/Users/lij/.vim/stl/stl_hashtable.h	/^  typedef _Hashtable_node<_Val> _Node;$/;"	t	class:hashtable	access:private
hashtable::__STL_NULL_TMPL_ARGS	/Users/lij/.vim/stl/stl_hashtable.h	/^  operator== __STL_NULL_TMPL_ARGS (const hashtable&, const hashtable&);$/;"	p	class:hashtable	access:friend	signature:(const hashtable&, const hashtable&)
hashtable::allocator_type	/Users/lij/.vim/stl/stl_hashtable.h	/^  typedef _Alloc allocator_type;$/;"	t	class:hashtable	access:public
hashtable::allocator_type	/Users/lij/.vim/stl/stl_hashtable.h	/^  typedef typename _Alloc_traits<_Val,_Alloc>::allocator_type allocator_type;$/;"	t	class:hashtable	access:public
hashtable::begin	/Users/lij/.vim/stl/stl_hashtable.h	/^  const_iterator begin() const$/;"	f	class:hashtable	access:public	signature:() const
hashtable::begin	/Users/lij/.vim/stl/stl_hashtable.h	/^  iterator begin()$/;"	f	class:hashtable	access:public	signature:()
hashtable::bucket_count	/Users/lij/.vim/stl/stl_hashtable.h	/^  size_type bucket_count() const { return _M_buckets.size(); }$/;"	f	class:hashtable	access:public	signature:() const
hashtable::clear	/Users/lij/.vim/stl/stl_hashtable.h	/^  void clear();$/;"	p	class:hashtable	access:public	signature:()
hashtable::clear	/Users/lij/.vim/stl/stl_hashtable.h	/^void hashtable<_Val,_Key,_HF,_Ex,_Eq,_All>::clear()$/;"	f	class:hashtable	signature:()
hashtable::const_iterator	/Users/lij/.vim/stl/stl_hashtable.h	/^          const_iterator;$/;"	t	class:hashtable	access:public
hashtable::const_pointer	/Users/lij/.vim/stl/stl_hashtable.h	/^  typedef const value_type* const_pointer;$/;"	t	class:hashtable	access:public
hashtable::const_reference	/Users/lij/.vim/stl/stl_hashtable.h	/^  typedef const value_type& const_reference;$/;"	t	class:hashtable	access:public
hashtable::count	/Users/lij/.vim/stl/stl_hashtable.h	/^  size_type count(const key_type& __key) const$/;"	f	class:hashtable	access:public	signature:(const key_type& __key) const
hashtable::difference_type	/Users/lij/.vim/stl/stl_hashtable.h	/^  typedef ptrdiff_t         difference_type;$/;"	t	class:hashtable	access:public
hashtable::elems_in_bucket	/Users/lij/.vim/stl/stl_hashtable.h	/^  size_type elems_in_bucket(size_type __bucket) const$/;"	f	class:hashtable	access:public	signature:(size_type __bucket) const
hashtable::empty	/Users/lij/.vim/stl/stl_hashtable.h	/^  bool empty() const { return size() == 0; }$/;"	f	class:hashtable	access:public	signature:() const
hashtable::end	/Users/lij/.vim/stl/stl_hashtable.h	/^  const_iterator end() const { return const_iterator(0, this); }$/;"	f	class:hashtable	access:public	signature:() const
hashtable::end	/Users/lij/.vim/stl/stl_hashtable.h	/^  iterator end() { return iterator(0, this); }$/;"	f	class:hashtable	access:public	signature:()
hashtable::equal_range	/Users/lij/.vim/stl/stl_hashtable.h	/^  ::equal_range(const key_type& __key) const$/;"	f	class:hashtable	signature:(const key_type& __key) const
hashtable::equal_range	/Users/lij/.vim/stl/stl_hashtable.h	/^  equal_range(const key_type& __key) const;$/;"	p	class:hashtable	access:public	signature:(const key_type& __key) const
hashtable::equal_range	/Users/lij/.vim/stl/stl_hashtable.h	/^  equal_range(const key_type& __key);$/;"	p	class:hashtable	access:public	signature:(const key_type& __key)
hashtable::equal_range	/Users/lij/.vim/stl/stl_hashtable.h	/^hashtable<_Val,_Key,_HF,_Ex,_Eq,_All>::equal_range(const key_type& __key)$/;"	f	class:hashtable	signature:(const key_type& __key)
hashtable::erase	/Users/lij/.vim/stl/stl_hashtable.h	/^  ::erase(iterator __first, iterator __last)$/;"	f	class:hashtable	signature:(iterator __first, iterator __last)
hashtable::erase	/Users/lij/.vim/stl/stl_hashtable.h	/^  size_type erase(const key_type& __key);$/;"	p	class:hashtable	access:public	signature:(const key_type& __key)
hashtable::erase	/Users/lij/.vim/stl/stl_hashtable.h	/^  void erase(const const_iterator& __it);$/;"	p	class:hashtable	access:public	signature:(const const_iterator& __it)
hashtable::erase	/Users/lij/.vim/stl/stl_hashtable.h	/^  void erase(const iterator& __it);$/;"	p	class:hashtable	access:public	signature:(const iterator& __it)
hashtable::erase	/Users/lij/.vim/stl/stl_hashtable.h	/^  void erase(const_iterator __first, const_iterator __last);$/;"	p	class:hashtable	access:public	signature:(const_iterator __first, const_iterator __last)
hashtable::erase	/Users/lij/.vim/stl/stl_hashtable.h	/^  void erase(iterator __first, iterator __last);$/;"	p	class:hashtable	access:public	signature:(iterator __first, iterator __last)
hashtable::erase	/Users/lij/.vim/stl/stl_hashtable.h	/^hashtable<_Val,_Key,_HF,_Ex,_Eq,_All>::erase(const const_iterator& __it)$/;"	f	class:hashtable	signature:(const const_iterator& __it)
hashtable::erase	/Users/lij/.vim/stl/stl_hashtable.h	/^hashtable<_Val,_Key,_HF,_Ex,_Eq,_All>::erase(const key_type& __key)$/;"	f	class:hashtable	signature:(const key_type& __key)
hashtable::erase	/Users/lij/.vim/stl/stl_hashtable.h	/^hashtable<_Val,_Key,_HF,_Ex,_Eq,_All>::erase(const_iterator __first,$/;"	f	class:hashtable	signature:(const_iterator __first, const_iterator __last)
hashtable::erase	/Users/lij/.vim/stl/stl_hashtable.h	/^void hashtable<_Val,_Key,_HF,_Ex,_Eq,_All>::erase(const iterator& __it)$/;"	f	class:hashtable	signature:(const iterator& __it)
hashtable::find	/Users/lij/.vim/stl/stl_hashtable.h	/^  const_iterator find(const key_type& __key) const$/;"	f	class:hashtable	access:public	signature:(const key_type& __key) const
hashtable::find	/Users/lij/.vim/stl/stl_hashtable.h	/^  iterator find(const key_type& __key) $/;"	f	class:hashtable	access:public	signature:(const key_type& __key)
hashtable::find_or_insert	/Users/lij/.vim/stl/stl_hashtable.h	/^  reference find_or_insert(const value_type& __obj);$/;"	p	class:hashtable	access:public	signature:(const value_type& __obj)
hashtable::find_or_insert	/Users/lij/.vim/stl/stl_hashtable.h	/^hashtable<_Val,_Key,_HF,_Ex,_Eq,_All>::find_or_insert(const value_type& __obj)$/;"	f	class:hashtable	signature:(const value_type& __obj)
hashtable::get_allocator	/Users/lij/.vim/stl/stl_hashtable.h	/^  allocator_type get_allocator() const { return _M_node_allocator; }$/;"	f	class:hashtable	access:public	signature:() const
hashtable::get_allocator	/Users/lij/.vim/stl/stl_hashtable.h	/^  allocator_type get_allocator() const { return allocator_type(); }$/;"	f	class:hashtable	access:public	signature:() const
hashtable::hash_funct	/Users/lij/.vim/stl/stl_hashtable.h	/^  hasher hash_funct() const { return _M_hash; }$/;"	f	class:hashtable	access:public	signature:() const
hashtable::hasher	/Users/lij/.vim/stl/stl_hashtable.h	/^  typedef _HashFcn hasher;$/;"	t	class:hashtable	access:public
hashtable::insert_equal	/Users/lij/.vim/stl/stl_hashtable.h	/^  iterator insert_equal(const value_type& __obj)$/;"	f	class:hashtable	access:public	signature:(const value_type& __obj)
hashtable::insert_equal	/Users/lij/.vim/stl/stl_hashtable.h	/^  void insert_equal(_ForwardIterator __f, _ForwardIterator __l,$/;"	f	class:hashtable	access:public	signature:(_ForwardIterator __f, _ForwardIterator __l, forward_iterator_tag)
hashtable::insert_equal	/Users/lij/.vim/stl/stl_hashtable.h	/^  void insert_equal(_InputIterator __f, _InputIterator __l)$/;"	f	class:hashtable	access:public	signature:(_InputIterator __f, _InputIterator __l)
hashtable::insert_equal	/Users/lij/.vim/stl/stl_hashtable.h	/^  void insert_equal(_InputIterator __f, _InputIterator __l,$/;"	f	class:hashtable	access:public	signature:(_InputIterator __f, _InputIterator __l, input_iterator_tag)
hashtable::insert_equal	/Users/lij/.vim/stl/stl_hashtable.h	/^  void insert_equal(const value_type* __f, const value_type* __l)$/;"	f	class:hashtable	access:public	signature:(const value_type* __f, const value_type* __l)
hashtable::insert_equal	/Users/lij/.vim/stl/stl_hashtable.h	/^  void insert_equal(const_iterator __f, const_iterator __l)$/;"	f	class:hashtable	access:public	signature:(const_iterator __f, const_iterator __l)
hashtable::insert_equal_noresize	/Users/lij/.vim/stl/stl_hashtable.h	/^  ::insert_equal_noresize(const value_type& __obj)$/;"	f	class:hashtable	signature:(const value_type& __obj)
hashtable::insert_equal_noresize	/Users/lij/.vim/stl/stl_hashtable.h	/^  iterator insert_equal_noresize(const value_type& __obj);$/;"	p	class:hashtable	access:public	signature:(const value_type& __obj)
hashtable::insert_unique	/Users/lij/.vim/stl/stl_hashtable.h	/^  pair<iterator, bool> insert_unique(const value_type& __obj)$/;"	f	class:hashtable	access:public	signature:(const value_type& __obj)
hashtable::insert_unique	/Users/lij/.vim/stl/stl_hashtable.h	/^  void insert_unique(_ForwardIterator __f, _ForwardIterator __l,$/;"	f	class:hashtable	access:public	signature:(_ForwardIterator __f, _ForwardIterator __l, forward_iterator_tag)
hashtable::insert_unique	/Users/lij/.vim/stl/stl_hashtable.h	/^  void insert_unique(_InputIterator __f, _InputIterator __l)$/;"	f	class:hashtable	access:public	signature:(_InputIterator __f, _InputIterator __l)
hashtable::insert_unique	/Users/lij/.vim/stl/stl_hashtable.h	/^  void insert_unique(_InputIterator __f, _InputIterator __l,$/;"	f	class:hashtable	access:public	signature:(_InputIterator __f, _InputIterator __l, input_iterator_tag)
hashtable::insert_unique	/Users/lij/.vim/stl/stl_hashtable.h	/^  void insert_unique(const value_type* __f, const value_type* __l)$/;"	f	class:hashtable	access:public	signature:(const value_type* __f, const value_type* __l)
hashtable::insert_unique	/Users/lij/.vim/stl/stl_hashtable.h	/^  void insert_unique(const_iterator __f, const_iterator __l)$/;"	f	class:hashtable	access:public	signature:(const_iterator __f, const_iterator __l)
hashtable::insert_unique_noresize	/Users/lij/.vim/stl/stl_hashtable.h	/^  ::insert_unique_noresize(const value_type& __obj)$/;"	f	class:hashtable	signature:(const value_type& __obj)
hashtable::insert_unique_noresize	/Users/lij/.vim/stl/stl_hashtable.h	/^  pair<iterator, bool> insert_unique_noresize(const value_type& __obj);$/;"	p	class:hashtable	access:public	signature:(const value_type& __obj)
hashtable::iterator	/Users/lij/.vim/stl/stl_hashtable.h	/^          iterator;$/;"	t	class:hashtable	access:public
hashtable::key_eq	/Users/lij/.vim/stl/stl_hashtable.h	/^  key_equal key_eq() const { return _M_equals; }$/;"	f	class:hashtable	access:public	signature:() const
hashtable::key_equal	/Users/lij/.vim/stl/stl_hashtable.h	/^  typedef _EqualKey key_equal;$/;"	t	class:hashtable	access:public
hashtable::key_type	/Users/lij/.vim/stl/stl_hashtable.h	/^  typedef _Key key_type;$/;"	t	class:hashtable	access:public
hashtable::max_bucket_count	/Users/lij/.vim/stl/stl_hashtable.h	/^  size_type max_bucket_count() const$/;"	f	class:hashtable	access:public	signature:() const
hashtable::max_size	/Users/lij/.vim/stl/stl_hashtable.h	/^  size_type max_size() const { return size_type(-1); }$/;"	f	class:hashtable	access:public	signature:() const
hashtable::operator =	/Users/lij/.vim/stl/stl_hashtable.h	/^  hashtable& operator= (const hashtable& __ht)$/;"	f	class:hashtable	access:public	signature:(const hashtable& __ht)
hashtable::operator ==	/Users/lij/.vim/stl/stl_hashtable.h	/^  friend bool operator== (const hashtable<_Vl, _Ky, _HF, _Ex, _Eq, _Al>&,$/;"	p	class:hashtable	access:friend	signature:(const hashtable<_Vl, _Ky, _HF, _Ex, _Eq, _Al>&, const hashtable<_Vl, _Ky, _HF, _Ex, _Eq, _Al>&)
hashtable::pointer	/Users/lij/.vim/stl/stl_hashtable.h	/^  typedef value_type*       pointer;$/;"	t	class:hashtable	access:public
hashtable::reference	/Users/lij/.vim/stl/stl_hashtable.h	/^  typedef value_type&       reference;$/;"	t	class:hashtable	access:public
hashtable::resize	/Users/lij/.vim/stl/stl_hashtable.h	/^  ::resize(size_type __num_elements_hint)$/;"	f	class:hashtable	signature:(size_type __num_elements_hint)
hashtable::resize	/Users/lij/.vim/stl/stl_hashtable.h	/^  void resize(size_type __num_elements_hint);$/;"	p	class:hashtable	access:public	signature:(size_type __num_elements_hint)
hashtable::size	/Users/lij/.vim/stl/stl_hashtable.h	/^  size_type size() const { return _M_num_elements; }$/;"	f	class:hashtable	access:public	signature:() const
hashtable::size_type	/Users/lij/.vim/stl/stl_hashtable.h	/^  typedef size_t            size_type;$/;"	t	class:hashtable	access:public
hashtable::swap	/Users/lij/.vim/stl/stl_hashtable.h	/^  void swap(hashtable& __ht)$/;"	f	class:hashtable	access:public	signature:(hashtable& __ht)
hashtable::value_type	/Users/lij/.vim/stl/stl_hashtable.h	/^  typedef _Val value_type;$/;"	t	class:hashtable	access:public
hashtable::~hashtable	/Users/lij/.vim/stl/stl_hashtable.h	/^  ~hashtable() { clear(); }$/;"	f	class:hashtable	access:public	signature:()
identity	/Users/lij/.vim/stl/stl_function.h	/^template <class _Tp> struct identity : public _Identity<_Tp> {};$/;"	s	inherits:_Identity
identity_element	/Users/lij/.vim/stl/stl_function.h	/^template <class _Tp> inline _Tp identity_element(multiplies<_Tp>) {$/;"	f	signature:(multiplies<_Tp>)
identity_element	/Users/lij/.vim/stl/stl_function.h	/^template <class _Tp> inline _Tp identity_element(plus<_Tp>) {$/;"	f	signature:(plus<_Tp>)
identity_element	/Users/lij/.vim/stl/stl_rope.h	/^identity_element(_Rope_Concat_fn<_CharT, _Alloc>)$/;"	f	signature:(_Rope_Concat_fn<_CharT, _Alloc>)
includes	/Users/lij/.vim/stl/stl_algo.h	/^bool includes(_InputIter1 __first1, _InputIter1 __last1,$/;"	f	signature:(_InputIter1 __first1, _InputIter1 __last1, _InputIter2 __first2, _InputIter2 __last2)
includes	/Users/lij/.vim/stl/stl_algo.h	/^bool includes(_InputIter1 __first1, _InputIter1 __last1,$/;"	f	signature:(_InputIter1 __first1, _InputIter1 __last1, _InputIter2 __first2, _InputIter2 __last2, _Compare __comp)
index	/Users/lij/.vim/stl/stl_rope.h	/^    size_t index() const { return _M_current_pos; }$/;"	f	class:_Rope_iterator_base	access:public	signature:() const
indirect_array	/Users/lij/.vim/stl/valarray	/^  indirect_array(const valarray<size_t>& __addr, valarray<_Tp>& __array)$/;"	f	class:indirect_array	file:	access:private	signature:(const valarray<size_t>& __addr, valarray<_Tp>& __array)
indirect_array	/Users/lij/.vim/stl/valarray	/^class indirect_array {$/;"	c	file:
indirect_array::_M_addr	/Users/lij/.vim/stl/valarray	/^  valarray<size_t> _M_addr;$/;"	m	class:indirect_array	file:	access:private
indirect_array::_M_array	/Users/lij/.vim/stl/valarray	/^  valarray<_Tp>&   _M_array;$/;"	m	class:indirect_array	file:	access:private
indirect_array::indirect_array	/Users/lij/.vim/stl/valarray	/^  indirect_array(const valarray<size_t>& __addr, valarray<_Tp>& __array)$/;"	f	class:indirect_array	file:	access:private	signature:(const valarray<size_t>& __addr, valarray<_Tp>& __array)
indirect_array::operator %=	/Users/lij/.vim/stl/valarray	/^  void operator%=(const valarray<value_type>& __x) const {$/;"	f	class:indirect_array	access:public	signature:(const valarray<value_type>& __x) const
indirect_array::operator &=	/Users/lij/.vim/stl/valarray	/^  void operator&=(const valarray<value_type>& __x) const {$/;"	f	class:indirect_array	access:public	signature:(const valarray<value_type>& __x) const
indirect_array::operator *=	/Users/lij/.vim/stl/valarray	/^  void operator*=(const valarray<value_type>& __x) const {$/;"	f	class:indirect_array	access:public	signature:(const valarray<value_type>& __x) const
indirect_array::operator +=	/Users/lij/.vim/stl/valarray	/^  void operator+=(const valarray<value_type>& __x) const {$/;"	f	class:indirect_array	access:public	signature:(const valarray<value_type>& __x) const
indirect_array::operator -=	/Users/lij/.vim/stl/valarray	/^  void operator-=(const valarray<value_type>& __x) const {$/;"	f	class:indirect_array	access:public	signature:(const valarray<value_type>& __x) const
indirect_array::operator /=	/Users/lij/.vim/stl/valarray	/^  void operator\/=(const valarray<value_type>& __x) const {$/;"	f	class:indirect_array	access:public	signature:(const valarray<value_type>& __x) const
indirect_array::operator <<=	/Users/lij/.vim/stl/valarray	/^  void operator<<=(const valarray<value_type>& __x) const {$/;"	f	class:indirect_array	access:public	signature:(const valarray<value_type>& __x) const
indirect_array::operator =	/Users/lij/.vim/stl/valarray	/^  void operator=(const indirect_array&);$/;"	p	class:indirect_array	file:	access:private	signature:(const indirect_array&)
indirect_array::operator =	/Users/lij/.vim/stl/valarray	/^  void operator=(const valarray<value_type>& __x) const {$/;"	f	class:indirect_array	access:public	signature:(const valarray<value_type>& __x) const
indirect_array::operator =	/Users/lij/.vim/stl/valarray	/^  void operator=(const value_type& __c) const {$/;"	f	class:indirect_array	access:public	signature:(const value_type& __c) const
indirect_array::operator >>=	/Users/lij/.vim/stl/valarray	/^  void operator>>=(const valarray<value_type>& __x) const {$/;"	f	class:indirect_array	access:public	signature:(const valarray<value_type>& __x) const
indirect_array::operator ^=	/Users/lij/.vim/stl/valarray	/^  void operator^=(const valarray<value_type>& __x) const {$/;"	f	class:indirect_array	access:public	signature:(const valarray<value_type>& __x) const
indirect_array::operator |=	/Users/lij/.vim/stl/valarray	/^  void operator|=(const valarray<value_type>& __x) const {$/;"	f	class:indirect_array	access:public	signature:(const valarray<value_type>& __x) const
indirect_array::value_type	/Users/lij/.vim/stl/valarray	/^  typedef _Tp value_type;$/;"	t	class:indirect_array	file:	access:public
indirect_array::~indirect_array	/Users/lij/.vim/stl/valarray	/^  ~indirect_array() {}$/;"	f	class:indirect_array	access:public	signature:()
init_page_size	/Users/lij/.vim/stl/defalloc.h	/^    size_type init_page_size() { $/;"	f	class:allocator	access:public	signature:()
inner_product	/Users/lij/.vim/stl/stl_numeric.h	/^_Tp inner_product(_InputIterator1 __first1, _InputIterator1 __last1,$/;"	f	signature:(_InputIterator1 __first1, _InputIterator1 __last1, _InputIterator2 __first2, _Tp __init)
inner_product	/Users/lij/.vim/stl/stl_numeric.h	/^_Tp inner_product(_InputIterator1 __first1, _InputIterator1 __last1,$/;"	f	signature:(_InputIterator1 __first1, _InputIterator1 __last1, _InputIterator2 __first2, _Tp __init, _BinaryOperation1 __binary_op1, _BinaryOperation2 __binary_op2)
inplace_merge	/Users/lij/.vim/stl/stl_algo.h	/^inline void inplace_merge(_BidirectionalIter __first,$/;"	f	signature:(_BidirectionalIter __first, _BidirectionalIter __middle, _BidirectionalIter __last)
inplace_merge	/Users/lij/.vim/stl/stl_algo.h	/^inline void inplace_merge(_BidirectionalIter __first,$/;"	f	signature:(_BidirectionalIter __first, _BidirectionalIter __middle, _BidirectionalIter __last, _Compare __comp)
input_iterator	/Users/lij/.vim/stl/stl_iterator_base.h	/^template <class _Tp, class _Distance> struct input_iterator {$/;"	s
input_iterator::difference_type	/Users/lij/.vim/stl/stl_iterator_base.h	/^  typedef _Distance          difference_type;$/;"	t	struct:input_iterator	access:public
input_iterator::iterator_category	/Users/lij/.vim/stl/stl_iterator_base.h	/^  typedef input_iterator_tag iterator_category;$/;"	t	struct:input_iterator	access:public
input_iterator::pointer	/Users/lij/.vim/stl/stl_iterator_base.h	/^  typedef _Tp*               pointer;$/;"	t	struct:input_iterator	access:public
input_iterator::reference	/Users/lij/.vim/stl/stl_iterator_base.h	/^  typedef _Tp&               reference;$/;"	t	struct:input_iterator	access:public
input_iterator::value_type	/Users/lij/.vim/stl/stl_iterator_base.h	/^  typedef _Tp                value_type;$/;"	t	struct:input_iterator	access:public
input_iterator_tag	/Users/lij/.vim/stl/stl_iterator_base.h	/^struct input_iterator_tag {};$/;"	s
insert	/Users/lij/.vim/stl/stl_bvector.h	/^  iterator insert(iterator __position, bool __x = bool()) {$/;"	f	class:__BVECTOR	access:public	signature:(iterator __position, bool __x = bool())
insert	/Users/lij/.vim/stl/stl_bvector.h	/^  void insert(iterator __position, const bool* __first, const bool* __last) {$/;"	f	class:__BVECTOR	access:public	signature:(iterator __position, const bool* __first, const bool* __last)
insert	/Users/lij/.vim/stl/stl_bvector.h	/^  void insert(iterator __position, size_type __n, bool __x) {$/;"	f	class:__BVECTOR	access:public	signature:(iterator __position, size_type __n, bool __x)
insert	/Users/lij/.vim/stl/stl_bvector.h	/^  void insert(iterator __position,$/;"	f	class:__BVECTOR	access:public	signature:(iterator __position, _InputIterator __first, _InputIterator __last)
insert	/Users/lij/.vim/stl/stl_bvector.h	/^  void insert(iterator __position,$/;"	f	class:__BVECTOR	access:public	signature:(iterator __position, const_iterator __first, const_iterator __last)
insert	/Users/lij/.vim/stl/stl_deque.h	/^  iterator insert(iterator __position)$/;"	f	class:deque	access:public	signature:(iterator __position)
insert	/Users/lij/.vim/stl/stl_deque.h	/^  iterator insert(iterator position, const value_type& __x) {$/;"	f	class:deque	access:public	signature:(iterator position, const value_type& __x)
insert	/Users/lij/.vim/stl/stl_deque.h	/^  void insert(iterator __pos, _InputIterator __first, _InputIterator __last) {$/;"	f	class:deque	access:public	signature:(iterator __pos, _InputIterator __first, _InputIterator __last)
insert	/Users/lij/.vim/stl/stl_deque.h	/^  void insert(iterator __pos, _InputIterator __first, _InputIterator __last,$/;"	p	class:deque	access:protected	signature:(iterator __pos, _InputIterator __first, _InputIterator __last, input_iterator_tag)
insert	/Users/lij/.vim/stl/stl_deque.h	/^  void insert(iterator __pos, size_type __n, const value_type& __x)$/;"	f	class:deque	access:public	signature:(iterator __pos, size_type __n, const value_type& __x)
insert	/Users/lij/.vim/stl/stl_deque.h	/^  void insert(iterator __pos,$/;"	p	class:deque	access:protected	signature:(iterator __pos, _ForwardIterator __first, _ForwardIterator __last, forward_iterator_tag)
insert	/Users/lij/.vim/stl/stl_deque.h	/^  void insert(iterator __pos,$/;"	p	class:deque	access:public	signature:(iterator __pos, const value_type* __first, const value_type* __last)
insert	/Users/lij/.vim/stl/stl_deque.h	/^  void insert(iterator __pos,$/;"	p	class:deque	access:public	signature:(iterator __pos, const_iterator __first, const_iterator __last)
insert	/Users/lij/.vim/stl/stl_deque.h	/^deque<_Tp,_Alloc>::insert(iterator __pos,$/;"	f	class:deque	signature:(iterator __pos, _ForwardIterator __first, _ForwardIterator __last, forward_iterator_tag)
insert	/Users/lij/.vim/stl/stl_deque.h	/^void deque<_Tp, _Alloc>::insert(iterator __pos,$/;"	f	class:deque	signature:(iterator __pos, const value_type* __first, const value_type* __last)
insert	/Users/lij/.vim/stl/stl_deque.h	/^void deque<_Tp,_Alloc>::insert(iterator __pos,$/;"	f	class:deque	signature:(iterator __pos, _InputIterator __first, _InputIterator __last, input_iterator_tag)
insert	/Users/lij/.vim/stl/stl_deque.h	/^void deque<_Tp,_Alloc>::insert(iterator __pos,$/;"	f	class:deque	signature:(iterator __pos, const_iterator __first, const_iterator __last)
insert	/Users/lij/.vim/stl/stl_hash_map.h	/^  iterator insert(const value_type& __obj) $/;"	f	class:hash_multimap	access:public	signature:(const value_type& __obj)
insert	/Users/lij/.vim/stl/stl_hash_map.h	/^  pair<iterator,bool> insert(const value_type& __obj)$/;"	f	class:hash_map	access:public	signature:(const value_type& __obj)
insert	/Users/lij/.vim/stl/stl_hash_map.h	/^  void insert(_InputIterator __f, _InputIterator __l) $/;"	f	class:hash_multimap	access:public	signature:(_InputIterator __f, _InputIterator __l)
insert	/Users/lij/.vim/stl/stl_hash_map.h	/^  void insert(_InputIterator __f, _InputIterator __l)$/;"	f	class:hash_map	access:public	signature:(_InputIterator __f, _InputIterator __l)
insert	/Users/lij/.vim/stl/stl_hash_map.h	/^  void insert(const value_type* __f, const value_type* __l) {$/;"	f	class:hash_map	access:public	signature:(const value_type* __f, const value_type* __l)
insert	/Users/lij/.vim/stl/stl_hash_map.h	/^  void insert(const value_type* __f, const value_type* __l) {$/;"	f	class:hash_multimap	access:public	signature:(const value_type* __f, const value_type* __l)
insert	/Users/lij/.vim/stl/stl_hash_map.h	/^  void insert(const_iterator __f, const_iterator __l) $/;"	f	class:hash_multimap	access:public	signature:(const_iterator __f, const_iterator __l)
insert	/Users/lij/.vim/stl/stl_hash_map.h	/^  void insert(const_iterator __f, const_iterator __l)$/;"	f	class:hash_map	access:public	signature:(const_iterator __f, const_iterator __l)
insert	/Users/lij/.vim/stl/stl_hash_set.h	/^  iterator insert(const value_type& __obj)$/;"	f	class:hash_multiset	access:public	signature:(const value_type& __obj)
insert	/Users/lij/.vim/stl/stl_hash_set.h	/^  pair<iterator, bool> insert(const value_type& __obj)$/;"	f	class:hash_set	access:public	signature:(const value_type& __obj)
insert	/Users/lij/.vim/stl/stl_hash_set.h	/^  void insert(_InputIterator __f, _InputIterator __l) $/;"	f	class:hash_multiset	access:public	signature:(_InputIterator __f, _InputIterator __l)
insert	/Users/lij/.vim/stl/stl_hash_set.h	/^  void insert(_InputIterator __f, _InputIterator __l) $/;"	f	class:hash_set	access:public	signature:(_InputIterator __f, _InputIterator __l)
insert	/Users/lij/.vim/stl/stl_hash_set.h	/^  void insert(const value_type* __f, const value_type* __l) {$/;"	f	class:hash_multiset	access:public	signature:(const value_type* __f, const value_type* __l)
insert	/Users/lij/.vim/stl/stl_hash_set.h	/^  void insert(const value_type* __f, const value_type* __l) {$/;"	f	class:hash_set	access:public	signature:(const value_type* __f, const value_type* __l)
insert	/Users/lij/.vim/stl/stl_hash_set.h	/^  void insert(const_iterator __f, const_iterator __l) $/;"	f	class:hash_multiset	access:public	signature:(const_iterator __f, const_iterator __l)
insert	/Users/lij/.vim/stl/stl_hash_set.h	/^  void insert(const_iterator __f, const_iterator __l) $/;"	f	class:hash_set	access:public	signature:(const_iterator __f, const_iterator __l)
insert	/Users/lij/.vim/stl/stl_list.h	/^  iterator insert(iterator __position) { return insert(__position, _Tp()); }$/;"	f	class:list	access:public	signature:(iterator __position)
insert	/Users/lij/.vim/stl/stl_list.h	/^  iterator insert(iterator __position, const _Tp& __x) {$/;"	f	class:list	access:public	signature:(iterator __position, const _Tp& __x)
insert	/Users/lij/.vim/stl/stl_list.h	/^  void insert(iterator __pos, _InputIterator __first, _InputIterator __last) {$/;"	f	class:list	access:public	signature:(iterator __pos, _InputIterator __first, _InputIterator __last)
insert	/Users/lij/.vim/stl/stl_list.h	/^  void insert(iterator __pos, size_type __n, const _Tp& __x)$/;"	f	class:list	access:public	signature:(iterator __pos, size_type __n, const _Tp& __x)
insert	/Users/lij/.vim/stl/stl_list.h	/^  void insert(iterator __position, const _Tp* __first, const _Tp* __last);$/;"	p	class:list	access:public	signature:(iterator __position, const _Tp* __first, const _Tp* __last)
insert	/Users/lij/.vim/stl/stl_list.h	/^  void insert(iterator __position,$/;"	p	class:list	access:public	signature:(iterator __position, const_iterator __first, const_iterator __last)
insert	/Users/lij/.vim/stl/stl_list.h	/^list<_Tp, _Alloc>::insert(iterator __position, $/;"	f	class:list	signature:(iterator __position, const _Tp* __first, const _Tp* __last)
insert	/Users/lij/.vim/stl/stl_list.h	/^list<_Tp, _Alloc>::insert(iterator __position,$/;"	f	class:list	signature:(iterator __position, const_iterator __first, const_iterator __last)
insert	/Users/lij/.vim/stl/stl_map.h	/^  iterator insert(iterator position, const value_type& __x)$/;"	f	class:map	access:public	signature:(iterator position, const value_type& __x)
insert	/Users/lij/.vim/stl/stl_map.h	/^  pair<iterator,bool> insert(const value_type& __x) $/;"	f	class:map	access:public	signature:(const value_type& __x)
insert	/Users/lij/.vim/stl/stl_map.h	/^  void insert(_InputIterator __first, _InputIterator __last) {$/;"	f	class:map	access:public	signature:(_InputIterator __first, _InputIterator __last)
insert	/Users/lij/.vim/stl/stl_map.h	/^  void insert(const value_type* __first, const value_type* __last) {$/;"	f	class:map	access:public	signature:(const value_type* __first, const value_type* __last)
insert	/Users/lij/.vim/stl/stl_map.h	/^  void insert(const_iterator __first, const_iterator __last) {$/;"	f	class:map	access:public	signature:(const_iterator __first, const_iterator __last)
insert	/Users/lij/.vim/stl/stl_multimap.h	/^  iterator insert(const value_type& __x) { return _M_t.insert_equal(__x); }$/;"	f	class:multimap	access:public	signature:(const value_type& __x)
insert	/Users/lij/.vim/stl/stl_multimap.h	/^  iterator insert(iterator __position, const value_type& __x) {$/;"	f	class:multimap	access:public	signature:(iterator __position, const value_type& __x)
insert	/Users/lij/.vim/stl/stl_multimap.h	/^  void insert(_InputIterator __first, _InputIterator __last) {$/;"	f	class:multimap	access:public	signature:(_InputIterator __first, _InputIterator __last)
insert	/Users/lij/.vim/stl/stl_multimap.h	/^  void insert(const value_type* __first, const value_type* __last) {$/;"	f	class:multimap	access:public	signature:(const value_type* __first, const value_type* __last)
insert	/Users/lij/.vim/stl/stl_multimap.h	/^  void insert(const_iterator __first, const_iterator __last) {$/;"	f	class:multimap	access:public	signature:(const_iterator __first, const_iterator __last)
insert	/Users/lij/.vim/stl/stl_multiset.h	/^  iterator insert(const value_type& __x) { $/;"	f	class:multiset	access:public	signature:(const value_type& __x)
insert	/Users/lij/.vim/stl/stl_multiset.h	/^  iterator insert(iterator __position, const value_type& __x) {$/;"	f	class:multiset	access:public	signature:(iterator __position, const value_type& __x)
insert	/Users/lij/.vim/stl/stl_multiset.h	/^  void insert(_InputIterator __first, _InputIterator __last) {$/;"	f	class:multiset	access:public	signature:(_InputIterator __first, _InputIterator __last)
insert	/Users/lij/.vim/stl/stl_multiset.h	/^  void insert(const value_type* __first, const value_type* __last) {$/;"	f	class:multiset	access:public	signature:(const value_type* __first, const value_type* __last)
insert	/Users/lij/.vim/stl/stl_multiset.h	/^  void insert(const_iterator __first, const_iterator __last) {$/;"	f	class:multiset	access:public	signature:(const_iterator __first, const_iterator __last)
insert	/Users/lij/.vim/stl/stl_rope.h	/^        iterator insert(const iterator& __p ) $/;"	f	class:rope	access:public	signature:(const iterator& __p )
insert	/Users/lij/.vim/stl/stl_rope.h	/^        iterator insert(const iterator& __p, _CharT __c) $/;"	f	class:rope	access:public	signature:(const iterator& __p, _CharT __c)
insert	/Users/lij/.vim/stl/stl_rope.h	/^        iterator insert(const iterator& __p, const _CharT* __i, $/;"	f	class:rope	access:public	signature:(const iterator& __p, const _CharT* __i, const _CharT* __j)
insert	/Users/lij/.vim/stl/stl_rope.h	/^        iterator insert(const iterator& __p, const _CharT* __i, size_t __n)$/;"	f	class:rope	access:public	signature:(const iterator& __p, const _CharT* __i, size_t __n)
insert	/Users/lij/.vim/stl/stl_rope.h	/^        iterator insert(const iterator& __p, const _CharT* c_string) $/;"	f	class:rope	access:public	signature:(const iterator& __p, const _CharT* c_string)
insert	/Users/lij/.vim/stl/stl_rope.h	/^        iterator insert(const iterator& __p, const rope& __r)$/;"	f	class:rope	access:public	signature:(const iterator& __p, const rope& __r)
insert	/Users/lij/.vim/stl/stl_rope.h	/^        iterator insert(const iterator& __p, size_t __n, _CharT __c)$/;"	f	class:rope	access:public	signature:(const iterator& __p, size_t __n, _CharT __c)
insert	/Users/lij/.vim/stl/stl_rope.h	/^        iterator insert(const iterator& __p,$/;"	f	class:rope	access:public	signature:(const iterator& __p, const const_iterator& __i, const const_iterator& __j)
insert	/Users/lij/.vim/stl/stl_rope.h	/^        iterator insert(const iterator& __p,$/;"	f	class:rope	access:public	signature:(const iterator& __p, const iterator& __i, const iterator& __j)
insert	/Users/lij/.vim/stl/stl_rope.h	/^        void insert(size_t __p) {$/;"	f	class:rope	access:public	signature:(size_t __p)
insert	/Users/lij/.vim/stl/stl_rope.h	/^        void insert(size_t __p, _CharT __c) {$/;"	f	class:rope	access:public	signature:(size_t __p, _CharT __c)
insert	/Users/lij/.vim/stl/stl_rope.h	/^        void insert(size_t __p, const _CharT* __c_string) {$/;"	f	class:rope	access:public	signature:(size_t __p, const _CharT* __c_string)
insert	/Users/lij/.vim/stl/stl_rope.h	/^        void insert(size_t __p, const _CharT* __i, const _CharT* __j) {$/;"	f	class:rope	access:public	signature:(size_t __p, const _CharT* __i, const _CharT* __j)
insert	/Users/lij/.vim/stl/stl_rope.h	/^        void insert(size_t __p, const _CharT* __i, size_t __n) {$/;"	f	class:rope	access:public	signature:(size_t __p, const _CharT* __i, size_t __n)
insert	/Users/lij/.vim/stl/stl_rope.h	/^        void insert(size_t __p, const const_iterator& __i,$/;"	f	class:rope	access:public	signature:(size_t __p, const const_iterator& __i, const const_iterator& __j)
insert	/Users/lij/.vim/stl/stl_rope.h	/^        void insert(size_t __p, const iterator& __i,$/;"	f	class:rope	access:public	signature:(size_t __p, const iterator& __i, const iterator& __j)
insert	/Users/lij/.vim/stl/stl_rope.h	/^        void insert(size_t __p, const rope& __r) {$/;"	f	class:rope	access:public	signature:(size_t __p, const rope& __r)
insert	/Users/lij/.vim/stl/stl_rope.h	/^        void insert(size_t __p, size_t __n, _CharT __c) {$/;"	f	class:rope	access:public	signature:(size_t __p, size_t __n, _CharT __c)
insert	/Users/lij/.vim/stl/stl_set.h	/^  iterator insert(iterator __position, const value_type& __x) {$/;"	f	class:set	access:public	signature:(iterator __position, const value_type& __x)
insert	/Users/lij/.vim/stl/stl_set.h	/^  pair<iterator,bool> insert(const value_type& __x) { $/;"	f	class:set	access:public	signature:(const value_type& __x)
insert	/Users/lij/.vim/stl/stl_set.h	/^  void insert(_InputIterator __first, _InputIterator __last) {$/;"	f	class:set	access:public	signature:(_InputIterator __first, _InputIterator __last)
insert	/Users/lij/.vim/stl/stl_set.h	/^  void insert(const value_type* __first, const value_type* __last) {$/;"	f	class:set	access:public	signature:(const value_type* __first, const value_type* __last)
insert	/Users/lij/.vim/stl/stl_set.h	/^  void insert(const_iterator __first, const_iterator __last) {$/;"	f	class:set	access:public	signature:(const_iterator __first, const_iterator __last)
insert	/Users/lij/.vim/stl/stl_slist.h	/^  iterator insert(iterator __pos) {$/;"	f	class:slist	access:public	signature:(iterator __pos)
insert	/Users/lij/.vim/stl/stl_slist.h	/^  iterator insert(iterator __pos, const value_type& __x) {$/;"	f	class:slist	access:public	signature:(iterator __pos, const value_type& __x)
insert	/Users/lij/.vim/stl/stl_slist.h	/^  void insert(iterator __pos, _InIter __first, _InIter __last) {$/;"	f	class:slist	access:public	signature:(iterator __pos, _InIter __first, _InIter __last)
insert	/Users/lij/.vim/stl/stl_slist.h	/^  void insert(iterator __pos, const value_type* __first, $/;"	f	class:slist	access:public	signature:(iterator __pos, const value_type* __first, const value_type* __last)
insert	/Users/lij/.vim/stl/stl_slist.h	/^  void insert(iterator __pos, const_iterator __first, const_iterator __last) {$/;"	f	class:slist	access:public	signature:(iterator __pos, const_iterator __first, const_iterator __last)
insert	/Users/lij/.vim/stl/stl_slist.h	/^  void insert(iterator __pos, size_type __n, const value_type& __x) {$/;"	f	class:slist	access:public	signature:(iterator __pos, size_type __n, const value_type& __x)
insert	/Users/lij/.vim/stl/stl_vector.h	/^  iterator insert(iterator __position) {$/;"	f	class:vector	access:public	signature:(iterator __position)
insert	/Users/lij/.vim/stl/stl_vector.h	/^  iterator insert(iterator __position, const _Tp& __x) {$/;"	f	class:vector	access:public	signature:(iterator __position, const _Tp& __x)
insert	/Users/lij/.vim/stl/stl_vector.h	/^  void insert (iterator __pos, size_type __n, const _Tp& __x)$/;"	f	class:vector	access:public	signature:(iterator __pos, size_type __n, const _Tp& __x)
insert	/Users/lij/.vim/stl/stl_vector.h	/^  void insert(iterator __pos, _InputIterator __first, _InputIterator __last) {$/;"	f	class:vector	access:public	signature:(iterator __pos, _InputIterator __first, _InputIterator __last)
insert	/Users/lij/.vim/stl/stl_vector.h	/^  void insert(iterator __position,$/;"	p	class:vector	access:public	signature:(iterator __position, const_iterator __first, const_iterator __last)
insert	/Users/lij/.vim/stl/stl_vector.h	/^vector<_Tp, _Alloc>::insert(iterator __position, $/;"	f	class:vector	signature:(iterator __position, const_iterator __first, const_iterator __last)
insert	/Users/lij/.vim/stl/string	/^  ::insert(basic_string<_CharT,_Traits,_Alloc>::iterator __position,$/;"	f	class:basic_string	signature:(basic_string<_CharT,_Traits,_Alloc>::iterator __position, size_t __n, _CharT __c)
insert	/Users/lij/.vim/stl/string	/^  basic_string& insert(size_type __pos, const _CharT* __s) {$/;"	f	class:basic_string	access:public	signature:(size_type __pos, const _CharT* __s)
insert	/Users/lij/.vim/stl/string	/^  basic_string& insert(size_type __pos, const _CharT* __s, size_type __n) {$/;"	f	class:basic_string	access:public	signature:(size_type __pos, const _CharT* __s, size_type __n)
insert	/Users/lij/.vim/stl/string	/^  basic_string& insert(size_type __pos, const basic_string& __s) {$/;"	f	class:basic_string	access:public	signature:(size_type __pos, const basic_string& __s)
insert	/Users/lij/.vim/stl/string	/^  basic_string& insert(size_type __pos, const basic_string& __s,$/;"	f	class:basic_string	access:public	signature:(size_type __pos, const basic_string& __s, size_type __beg, size_type __n)
insert	/Users/lij/.vim/stl/string	/^  basic_string& insert(size_type __pos, size_type __n, _CharT __c) {$/;"	f	class:basic_string	access:public	signature:(size_type __pos, size_type __n, _CharT __c)
insert	/Users/lij/.vim/stl/string	/^  iterator insert(iterator __p, _CharT __c) {$/;"	f	class:basic_string	access:public	signature:(iterator __p, _CharT __c)
insert	/Users/lij/.vim/stl/string	/^  void insert(iterator __p, _ForwardIter, _ForwardIter, forward_iterator_tag);$/;"	p	class:basic_string	file:	access:private	signature:(iterator __p, _ForwardIter, _ForwardIter, forward_iterator_tag)
insert	/Users/lij/.vim/stl/string	/^  void insert(iterator __p, _InputIter __first, _InputIter __last) {$/;"	f	class:basic_string	access:public	signature:(iterator __p, _InputIter __first, _InputIter __last)
insert	/Users/lij/.vim/stl/string	/^  void insert(iterator __p, _InputIter, _InputIter, input_iterator_tag);$/;"	p	class:basic_string	file:	access:private	signature:(iterator __p, _InputIter, _InputIter, input_iterator_tag)
insert	/Users/lij/.vim/stl/string	/^  void insert(iterator __p, const _CharT* __first, const _CharT* __last);$/;"	p	class:basic_string	file:	access:public	signature:(iterator __p, const _CharT* __first, const _CharT* __last)
insert	/Users/lij/.vim/stl/string	/^  void insert(iterator __p, size_t __n, _CharT __c);$/;"	p	class:basic_string	file:	access:public	signature:(iterator __p, size_t __n, _CharT __c)
insert	/Users/lij/.vim/stl/string	/^basic_string<_CharT,_Traits,_Alloc>::insert(iterator __position,$/;"	f	class:basic_string	signature:(iterator __position, _ForwardIter __first, _ForwardIter __last, forward_iterator_tag)
insert	/Users/lij/.vim/stl/string	/^basic_string<_CharT,_Traits,_Alloc>::insert(iterator __position,$/;"	f	class:basic_string	signature:(iterator __position, const _CharT* __first, const _CharT* __last)
insert	/Users/lij/.vim/stl/string	/^void basic_string<_Tp, _Traits, _Alloc>::insert(iterator __p,$/;"	f	class:basic_string	signature:(iterator __p, _InputIter __first, _InputIter __last, input_iterator_tag)
insert_after	/Users/lij/.vim/stl/stl_slist.h	/^  iterator insert_after(iterator __pos) {$/;"	f	class:slist	access:public	signature:(iterator __pos)
insert_after	/Users/lij/.vim/stl/stl_slist.h	/^  iterator insert_after(iterator __pos, const value_type& __x) {$/;"	f	class:slist	access:public	signature:(iterator __pos, const value_type& __x)
insert_after	/Users/lij/.vim/stl/stl_slist.h	/^  void insert_after(iterator __pos, _InIter __first, _InIter __last) {$/;"	f	class:slist	access:public	signature:(iterator __pos, _InIter __first, _InIter __last)
insert_after	/Users/lij/.vim/stl/stl_slist.h	/^  void insert_after(iterator __pos, size_type __n, const value_type& __x) {$/;"	f	class:slist	access:public	signature:(iterator __pos, size_type __n, const value_type& __x)
insert_after	/Users/lij/.vim/stl/stl_slist.h	/^  void insert_after(iterator __pos,$/;"	f	class:slist	access:public	signature:(iterator __pos, const value_type* __first, const value_type* __last)
insert_after	/Users/lij/.vim/stl/stl_slist.h	/^  void insert_after(iterator __pos,$/;"	f	class:slist	access:public	signature:(iterator __pos, const_iterator __first, const_iterator __last)
insert_equal	/Users/lij/.vim/stl/stl_hashtable.h	/^  iterator insert_equal(const value_type& __obj)$/;"	f	class:hashtable	access:public	signature:(const value_type& __obj)
insert_equal	/Users/lij/.vim/stl/stl_hashtable.h	/^  void insert_equal(_ForwardIterator __f, _ForwardIterator __l,$/;"	f	class:hashtable	access:public	signature:(_ForwardIterator __f, _ForwardIterator __l, forward_iterator_tag)
insert_equal	/Users/lij/.vim/stl/stl_hashtable.h	/^  void insert_equal(_InputIterator __f, _InputIterator __l)$/;"	f	class:hashtable	access:public	signature:(_InputIterator __f, _InputIterator __l)
insert_equal	/Users/lij/.vim/stl/stl_hashtable.h	/^  void insert_equal(_InputIterator __f, _InputIterator __l,$/;"	f	class:hashtable	access:public	signature:(_InputIterator __f, _InputIterator __l, input_iterator_tag)
insert_equal	/Users/lij/.vim/stl/stl_hashtable.h	/^  void insert_equal(const value_type* __f, const value_type* __l)$/;"	f	class:hashtable	access:public	signature:(const value_type* __f, const value_type* __l)
insert_equal	/Users/lij/.vim/stl/stl_hashtable.h	/^  void insert_equal(const_iterator __f, const_iterator __l)$/;"	f	class:hashtable	access:public	signature:(const_iterator __f, const_iterator __l)
insert_equal	/Users/lij/.vim/stl/stl_tree.h	/^  ::insert_equal(_II __first, _II __last)$/;"	f	class:_Rb_tree	signature:(_II __first, _II __last)
insert_equal	/Users/lij/.vim/stl/stl_tree.h	/^  ::insert_equal(const _Val* __first, const _Val* __last)$/;"	f	class:_Rb_tree	signature:(const _Val* __first, const _Val* __last)
insert_equal	/Users/lij/.vim/stl/stl_tree.h	/^  ::insert_equal(const _Value& __v)$/;"	f	class:_Rb_tree	signature:(const _Value& __v)
insert_equal	/Users/lij/.vim/stl/stl_tree.h	/^  ::insert_equal(const_iterator __first, const_iterator __last)$/;"	f	class:_Rb_tree	signature:(const_iterator __first, const_iterator __last)
insert_equal	/Users/lij/.vim/stl/stl_tree.h	/^  ::insert_equal(iterator __position, const _Val& __v)$/;"	f	class:_Rb_tree	signature:(iterator __position, const _Val& __v)
insert_equal	/Users/lij/.vim/stl/stl_tree.h	/^  iterator insert_equal(const value_type& __x);$/;"	p	class:_Rb_tree	access:public	signature:(const value_type& __x)
insert_equal	/Users/lij/.vim/stl/stl_tree.h	/^  iterator insert_equal(iterator __position, const value_type& __x);$/;"	p	class:_Rb_tree	access:public	signature:(iterator __position, const value_type& __x)
insert_equal	/Users/lij/.vim/stl/stl_tree.h	/^  void insert_equal(_InputIterator __first, _InputIterator __last);$/;"	p	class:_Rb_tree	access:public	signature:(_InputIterator __first, _InputIterator __last)
insert_equal	/Users/lij/.vim/stl/stl_tree.h	/^  void insert_equal(const value_type* __first, const value_type* __last);$/;"	p	class:_Rb_tree	access:public	signature:(const value_type* __first, const value_type* __last)
insert_equal	/Users/lij/.vim/stl/stl_tree.h	/^  void insert_equal(const_iterator __first, const_iterator __last);$/;"	p	class:_Rb_tree	access:public	signature:(const_iterator __first, const_iterator __last)
insert_equal_noresize	/Users/lij/.vim/stl/stl_hashtable.h	/^  ::insert_equal_noresize(const value_type& __obj)$/;"	f	class:hashtable	signature:(const value_type& __obj)
insert_equal_noresize	/Users/lij/.vim/stl/stl_hashtable.h	/^  iterator insert_equal_noresize(const value_type& __obj);$/;"	p	class:hashtable	access:public	signature:(const value_type& __obj)
insert_iterator	/Users/lij/.vim/stl/stl_hash_map.h	/^  insert_iterator(_Container& __x) : container(&__x) {}$/;"	f	class:insert_iterator	access:public	signature:(_Container& __x)
insert_iterator	/Users/lij/.vim/stl/stl_hash_map.h	/^  insert_iterator(_Container& __x, typename _Container::iterator)$/;"	f	class:insert_iterator	access:public	signature:(_Container& __x, typename _Container::iterator)
insert_iterator	/Users/lij/.vim/stl/stl_hash_map.h	/^class insert_iterator<hash_map<_Key, _Tp, _HashFn, _EqKey, _Alloc> > {$/;"	c
insert_iterator	/Users/lij/.vim/stl/stl_hash_map.h	/^class insert_iterator<hash_multimap<_Key, _Tp, _HashFn, _EqKey, _Alloc> > {$/;"	c
insert_iterator	/Users/lij/.vim/stl/stl_hash_set.h	/^  insert_iterator(_Container& __x) : container(&__x) {}$/;"	f	class:insert_iterator	access:public	signature:(_Container& __x)
insert_iterator	/Users/lij/.vim/stl/stl_hash_set.h	/^  insert_iterator(_Container& __x, typename _Container::iterator)$/;"	f	class:insert_iterator	access:public	signature:(_Container& __x, typename _Container::iterator)
insert_iterator	/Users/lij/.vim/stl/stl_hash_set.h	/^class insert_iterator<hash_multiset<_Value, _HashFcn, _EqualKey, _Alloc> > {$/;"	c
insert_iterator	/Users/lij/.vim/stl/stl_hash_set.h	/^class insert_iterator<hash_set<_Value, _HashFcn, _EqualKey, _Alloc> > {$/;"	c
insert_iterator	/Users/lij/.vim/stl/stl_iterator.h	/^  insert_iterator(_Container& __x, typename _Container::iterator __i) $/;"	f	class:insert_iterator	access:public	signature:(_Container& __x, typename _Container::iterator __i)
insert_iterator	/Users/lij/.vim/stl/stl_iterator.h	/^class insert_iterator {$/;"	c
insert_iterator	/Users/lij/.vim/stl/stl_slist.h	/^  insert_iterator(_Container& __x, typename _Container::iterator __i) $/;"	f	class:insert_iterator	access:public	signature:(_Container& __x, typename _Container::iterator __i)
insert_iterator	/Users/lij/.vim/stl/stl_slist.h	/^class insert_iterator<slist<_Tp, _Alloc> > {$/;"	c
insert_iterator::_Container	/Users/lij/.vim/stl/stl_hash_map.h	/^  typedef hash_map<_Key, _Tp, _HashFn, _EqKey, _Alloc> _Container;$/;"	t	class:insert_iterator	access:protected
insert_iterator::_Container	/Users/lij/.vim/stl/stl_hash_map.h	/^  typedef hash_multimap<_Key, _Tp, _HashFn, _EqKey, _Alloc> _Container;$/;"	t	class:insert_iterator	access:protected
insert_iterator::_Container	/Users/lij/.vim/stl/stl_hash_set.h	/^  typedef hash_multiset<_Value, _HashFcn, _EqualKey, _Alloc> _Container;$/;"	t	class:insert_iterator	access:protected
insert_iterator::_Container	/Users/lij/.vim/stl/stl_hash_set.h	/^  typedef hash_set<_Value, _HashFcn, _EqualKey, _Alloc> _Container;$/;"	t	class:insert_iterator	access:protected
insert_iterator::_Container	/Users/lij/.vim/stl/stl_slist.h	/^  typedef slist<_Tp, _Alloc> _Container;$/;"	t	class:insert_iterator	access:protected
insert_iterator::container	/Users/lij/.vim/stl/stl_hash_map.h	/^  _Container* container;$/;"	m	class:insert_iterator	access:protected
insert_iterator::container	/Users/lij/.vim/stl/stl_hash_set.h	/^  _Container* container;$/;"	m	class:insert_iterator	access:protected
insert_iterator::container	/Users/lij/.vim/stl/stl_iterator.h	/^  _Container* container;$/;"	m	class:insert_iterator	access:protected
insert_iterator::container	/Users/lij/.vim/stl/stl_slist.h	/^  _Container* container;$/;"	m	class:insert_iterator	access:protected
insert_iterator::container_type	/Users/lij/.vim/stl/stl_hash_map.h	/^  typedef _Container          container_type;$/;"	t	class:insert_iterator	access:public
insert_iterator::container_type	/Users/lij/.vim/stl/stl_hash_set.h	/^  typedef _Container          container_type;$/;"	t	class:insert_iterator	access:public
insert_iterator::container_type	/Users/lij/.vim/stl/stl_iterator.h	/^  typedef _Container          container_type;$/;"	t	class:insert_iterator	access:public
insert_iterator::container_type	/Users/lij/.vim/stl/stl_slist.h	/^  typedef _Container          container_type;$/;"	t	class:insert_iterator	access:public
insert_iterator::difference_type	/Users/lij/.vim/stl/stl_hash_map.h	/^  typedef void                difference_type;$/;"	t	class:insert_iterator	access:public
insert_iterator::difference_type	/Users/lij/.vim/stl/stl_hash_set.h	/^  typedef void                difference_type;$/;"	t	class:insert_iterator	access:public
insert_iterator::difference_type	/Users/lij/.vim/stl/stl_iterator.h	/^  typedef void                difference_type;$/;"	t	class:insert_iterator	access:public
insert_iterator::difference_type	/Users/lij/.vim/stl/stl_slist.h	/^  typedef void                difference_type;$/;"	t	class:insert_iterator	access:public
insert_iterator::insert_iterator	/Users/lij/.vim/stl/stl_hash_map.h	/^  insert_iterator(_Container& __x) : container(&__x) {}$/;"	f	class:insert_iterator	access:public	signature:(_Container& __x)
insert_iterator::insert_iterator	/Users/lij/.vim/stl/stl_hash_map.h	/^  insert_iterator(_Container& __x, typename _Container::iterator)$/;"	f	class:insert_iterator	access:public	signature:(_Container& __x, typename _Container::iterator)
insert_iterator::insert_iterator	/Users/lij/.vim/stl/stl_hash_set.h	/^  insert_iterator(_Container& __x) : container(&__x) {}$/;"	f	class:insert_iterator	access:public	signature:(_Container& __x)
insert_iterator::insert_iterator	/Users/lij/.vim/stl/stl_hash_set.h	/^  insert_iterator(_Container& __x, typename _Container::iterator)$/;"	f	class:insert_iterator	access:public	signature:(_Container& __x, typename _Container::iterator)
insert_iterator::insert_iterator	/Users/lij/.vim/stl/stl_iterator.h	/^  insert_iterator(_Container& __x, typename _Container::iterator __i) $/;"	f	class:insert_iterator	access:public	signature:(_Container& __x, typename _Container::iterator __i)
insert_iterator::insert_iterator	/Users/lij/.vim/stl/stl_slist.h	/^  insert_iterator(_Container& __x, typename _Container::iterator __i) $/;"	f	class:insert_iterator	access:public	signature:(_Container& __x, typename _Container::iterator __i)
insert_iterator::iter	/Users/lij/.vim/stl/stl_hash_map.h	/^  typename _Container::iterator iter;$/;"	m	class:insert_iterator	access:protected
insert_iterator::iter	/Users/lij/.vim/stl/stl_hash_set.h	/^  typename _Container::iterator iter;$/;"	m	class:insert_iterator	access:protected
insert_iterator::iter	/Users/lij/.vim/stl/stl_iterator.h	/^  typename _Container::iterator iter;$/;"	m	class:insert_iterator	access:protected
insert_iterator::iter	/Users/lij/.vim/stl/stl_slist.h	/^  typename _Container::iterator iter;$/;"	m	class:insert_iterator	access:protected
insert_iterator::iterator_category	/Users/lij/.vim/stl/stl_hash_map.h	/^  typedef output_iterator_tag iterator_category;$/;"	t	class:insert_iterator	access:public
insert_iterator::iterator_category	/Users/lij/.vim/stl/stl_hash_set.h	/^  typedef output_iterator_tag iterator_category;$/;"	t	class:insert_iterator	access:public
insert_iterator::iterator_category	/Users/lij/.vim/stl/stl_iterator.h	/^  typedef output_iterator_tag iterator_category;$/;"	t	class:insert_iterator	access:public
insert_iterator::iterator_category	/Users/lij/.vim/stl/stl_slist.h	/^  typedef output_iterator_tag iterator_category;$/;"	t	class:insert_iterator	access:public
insert_iterator::operator *	/Users/lij/.vim/stl/stl_hash_map.h	/^  insert_iterator<_Container>& operator*() { return *this; }$/;"	f	class:insert_iterator	access:public	signature:()
insert_iterator::operator *	/Users/lij/.vim/stl/stl_hash_set.h	/^  insert_iterator<_Container>& operator*() { return *this; }$/;"	f	class:insert_iterator	access:public	signature:()
insert_iterator::operator *	/Users/lij/.vim/stl/stl_iterator.h	/^  insert_iterator<_Container>& operator*() { return *this; }$/;"	f	class:insert_iterator	access:public	signature:()
insert_iterator::operator *	/Users/lij/.vim/stl/stl_slist.h	/^  insert_iterator<_Container>& operator*() { return *this; }$/;"	f	class:insert_iterator	access:public	signature:()
insert_iterator::operator ++	/Users/lij/.vim/stl/stl_hash_map.h	/^  insert_iterator<_Container>& operator++() { return *this; }$/;"	f	class:insert_iterator	access:public	signature:()
insert_iterator::operator ++	/Users/lij/.vim/stl/stl_hash_map.h	/^  insert_iterator<_Container>& operator++(int) { return *this; }$/;"	f	class:insert_iterator	access:public	signature:(int)
insert_iterator::operator ++	/Users/lij/.vim/stl/stl_hash_set.h	/^  insert_iterator<_Container>& operator++() { return *this; }$/;"	f	class:insert_iterator	access:public	signature:()
insert_iterator::operator ++	/Users/lij/.vim/stl/stl_hash_set.h	/^  insert_iterator<_Container>& operator++(int) { return *this; }$/;"	f	class:insert_iterator	access:public	signature:(int)
insert_iterator::operator ++	/Users/lij/.vim/stl/stl_iterator.h	/^  insert_iterator<_Container>& operator++() { return *this; }$/;"	f	class:insert_iterator	access:public	signature:()
insert_iterator::operator ++	/Users/lij/.vim/stl/stl_iterator.h	/^  insert_iterator<_Container>& operator++(int) { return *this; }$/;"	f	class:insert_iterator	access:public	signature:(int)
insert_iterator::operator ++	/Users/lij/.vim/stl/stl_slist.h	/^  insert_iterator<_Container>& operator++() { return *this; }$/;"	f	class:insert_iterator	access:public	signature:()
insert_iterator::operator ++	/Users/lij/.vim/stl/stl_slist.h	/^  insert_iterator<_Container>& operator++(int) { return *this; }$/;"	f	class:insert_iterator	access:public	signature:(int)
insert_iterator::operator =	/Users/lij/.vim/stl/stl_hash_map.h	/^  operator=(const typename _Container::value_type& __value) { $/;"	f	class:insert_iterator	access:public	signature:(const typename _Container::value_type& __value)
insert_iterator::operator =	/Users/lij/.vim/stl/stl_hash_set.h	/^  operator=(const typename _Container::value_type& __value) { $/;"	f	class:insert_iterator	access:public	signature:(const typename _Container::value_type& __value)
insert_iterator::operator =	/Users/lij/.vim/stl/stl_iterator.h	/^  operator=(const typename _Container::value_type& __value) { $/;"	f	class:insert_iterator	access:public	signature:(const typename _Container::value_type& __value)
insert_iterator::operator =	/Users/lij/.vim/stl/stl_slist.h	/^  operator=(const typename _Container::value_type& __value) { $/;"	f	class:insert_iterator	access:public	signature:(const typename _Container::value_type& __value)
insert_iterator::pointer	/Users/lij/.vim/stl/stl_hash_map.h	/^  typedef void                pointer;$/;"	t	class:insert_iterator	access:public
insert_iterator::pointer	/Users/lij/.vim/stl/stl_hash_set.h	/^  typedef void                pointer;$/;"	t	class:insert_iterator	access:public
insert_iterator::pointer	/Users/lij/.vim/stl/stl_iterator.h	/^  typedef void                pointer;$/;"	t	class:insert_iterator	access:public
insert_iterator::pointer	/Users/lij/.vim/stl/stl_slist.h	/^  typedef void                pointer;$/;"	t	class:insert_iterator	access:public
insert_iterator::reference	/Users/lij/.vim/stl/stl_hash_map.h	/^  typedef void                reference;$/;"	t	class:insert_iterator	access:public
insert_iterator::reference	/Users/lij/.vim/stl/stl_hash_set.h	/^  typedef void                reference;$/;"	t	class:insert_iterator	access:public
insert_iterator::reference	/Users/lij/.vim/stl/stl_iterator.h	/^  typedef void                reference;$/;"	t	class:insert_iterator	access:public
insert_iterator::reference	/Users/lij/.vim/stl/stl_slist.h	/^  typedef void                reference;$/;"	t	class:insert_iterator	access:public
insert_iterator::value_type	/Users/lij/.vim/stl/stl_hash_map.h	/^  typedef void                value_type;$/;"	t	class:insert_iterator	access:public
insert_iterator::value_type	/Users/lij/.vim/stl/stl_hash_set.h	/^  typedef void                value_type;$/;"	t	class:insert_iterator	access:public
insert_iterator::value_type	/Users/lij/.vim/stl/stl_iterator.h	/^  typedef void                value_type;$/;"	t	class:insert_iterator	access:public
insert_iterator::value_type	/Users/lij/.vim/stl/stl_slist.h	/^  typedef void                value_type;$/;"	t	class:insert_iterator	access:public
insert_noresize	/Users/lij/.vim/stl/stl_hash_map.h	/^  iterator insert_noresize(const value_type& __obj)$/;"	f	class:hash_multimap	access:public	signature:(const value_type& __obj)
insert_noresize	/Users/lij/.vim/stl/stl_hash_map.h	/^  pair<iterator,bool> insert_noresize(const value_type& __obj)$/;"	f	class:hash_map	access:public	signature:(const value_type& __obj)
insert_noresize	/Users/lij/.vim/stl/stl_hash_set.h	/^  iterator insert_noresize(const value_type& __obj)$/;"	f	class:hash_multiset	access:public	signature:(const value_type& __obj)
insert_noresize	/Users/lij/.vim/stl/stl_hash_set.h	/^  pair<iterator, bool> insert_noresize(const value_type& __obj)$/;"	f	class:hash_set	access:public	signature:(const value_type& __obj)
insert_unique	/Users/lij/.vim/stl/stl_hashtable.h	/^  pair<iterator, bool> insert_unique(const value_type& __obj)$/;"	f	class:hashtable	access:public	signature:(const value_type& __obj)
insert_unique	/Users/lij/.vim/stl/stl_hashtable.h	/^  void insert_unique(_ForwardIterator __f, _ForwardIterator __l,$/;"	f	class:hashtable	access:public	signature:(_ForwardIterator __f, _ForwardIterator __l, forward_iterator_tag)
insert_unique	/Users/lij/.vim/stl/stl_hashtable.h	/^  void insert_unique(_InputIterator __f, _InputIterator __l)$/;"	f	class:hashtable	access:public	signature:(_InputIterator __f, _InputIterator __l)
insert_unique	/Users/lij/.vim/stl/stl_hashtable.h	/^  void insert_unique(_InputIterator __f, _InputIterator __l,$/;"	f	class:hashtable	access:public	signature:(_InputIterator __f, _InputIterator __l, input_iterator_tag)
insert_unique	/Users/lij/.vim/stl/stl_hashtable.h	/^  void insert_unique(const value_type* __f, const value_type* __l)$/;"	f	class:hashtable	access:public	signature:(const value_type* __f, const value_type* __l)
insert_unique	/Users/lij/.vim/stl/stl_hashtable.h	/^  void insert_unique(const_iterator __f, const_iterator __l)$/;"	f	class:hashtable	access:public	signature:(const_iterator __f, const_iterator __l)
insert_unique	/Users/lij/.vim/stl/stl_tree.h	/^  ::insert_unique(_II __first, _II __last) {$/;"	f	class:_Rb_tree	signature:(_II __first, _II __last)
insert_unique	/Users/lij/.vim/stl/stl_tree.h	/^  ::insert_unique(const _Val* __first, const _Val* __last)$/;"	f	class:_Rb_tree	signature:(const _Val* __first, const _Val* __last)
insert_unique	/Users/lij/.vim/stl/stl_tree.h	/^  ::insert_unique(const _Value& __v)$/;"	f	class:_Rb_tree	signature:(const _Value& __v)
insert_unique	/Users/lij/.vim/stl/stl_tree.h	/^  ::insert_unique(const_iterator __first, const_iterator __last)$/;"	f	class:_Rb_tree	signature:(const_iterator __first, const_iterator __last)
insert_unique	/Users/lij/.vim/stl/stl_tree.h	/^  ::insert_unique(iterator __position, const _Val& __v)$/;"	f	class:_Rb_tree	signature:(iterator __position, const _Val& __v)
insert_unique	/Users/lij/.vim/stl/stl_tree.h	/^  iterator insert_unique(iterator __position, const value_type& __x);$/;"	p	class:_Rb_tree	access:public	signature:(iterator __position, const value_type& __x)
insert_unique	/Users/lij/.vim/stl/stl_tree.h	/^  pair<iterator,bool> insert_unique(const value_type& __x);$/;"	p	class:_Rb_tree	access:public	signature:(const value_type& __x)
insert_unique	/Users/lij/.vim/stl/stl_tree.h	/^  void insert_unique(_InputIterator __first, _InputIterator __last);$/;"	p	class:_Rb_tree	access:public	signature:(_InputIterator __first, _InputIterator __last)
insert_unique	/Users/lij/.vim/stl/stl_tree.h	/^  void insert_unique(const value_type* __first, const value_type* __last);$/;"	p	class:_Rb_tree	access:public	signature:(const value_type* __first, const value_type* __last)
insert_unique	/Users/lij/.vim/stl/stl_tree.h	/^  void insert_unique(const_iterator __first, const_iterator __last);$/;"	p	class:_Rb_tree	access:public	signature:(const_iterator __first, const_iterator __last)
insert_unique_noresize	/Users/lij/.vim/stl/stl_hashtable.h	/^  ::insert_unique_noresize(const value_type& __obj)$/;"	f	class:hashtable	signature:(const value_type& __obj)
insert_unique_noresize	/Users/lij/.vim/stl/stl_hashtable.h	/^  pair<iterator, bool> insert_unique_noresize(const value_type& __obj);$/;"	p	class:hashtable	access:public	signature:(const value_type& __obj)
inserter	/Users/lij/.vim/stl/stl_iterator.h	/^insert_iterator<_Container> inserter(_Container& __x, _Iterator __i)$/;"	f	signature:(_Container& __x, _Iterator __i)
int_type	/Users/lij/.vim/stl/char_traits.h	/^  typedef _IntT int_type;$/;"	t	class:__char_traits_base	access:public
int_type	/Users/lij/.vim/stl/stl_iterator.h	/^  typedef typename _Traits::int_type       int_type;$/;"	t	class:istreambuf_iterator	access:public
int_type	/Users/lij/.vim/stl/stl_iterator.h	/^  typedef typename _Traits::int_type       int_type;$/;"	t	class:ostreambuf_iterator	access:public
invalid_argument	/Users/lij/.vim/stl/stdexcept	/^  invalid_argument(const string& __arg) : logic_error(__arg) {}$/;"	f	class:invalid_argument	access:public	signature:(const string& __arg)
invalid_argument	/Users/lij/.vim/stl/stdexcept	/^class invalid_argument : public logic_error {$/;"	c	file:	inherits:logic_error
invalid_argument::invalid_argument	/Users/lij/.vim/stl/stdexcept	/^  invalid_argument(const string& __arg) : logic_error(__arg) {}$/;"	f	class:invalid_argument	access:public	signature:(const string& __arg)
iota	/Users/lij/.vim/stl/stl_numeric.h	/^iota(_ForwardIter __first, _ForwardIter __last, _Tp __value)$/;"	f	signature:(_ForwardIter __first, _ForwardIter __last, _Tp __value)
is_POD_type	/Users/lij/.vim/stl/type_traits.h	/^   typedef __false_type    is_POD_type;$/;"	t	struct:__type_traits	access:public
is_POD_type	/Users/lij/.vim/stl/type_traits.h	/^   typedef __true_type    is_POD_type;$/;"	t	struct:__type_traits	access:public
is_heap	/Users/lij/.vim/stl/stl_algo.h	/^inline bool is_heap(_RandomAccessIter __first, _RandomAccessIter __last)$/;"	f	signature:(_RandomAccessIter __first, _RandomAccessIter __last)
is_heap	/Users/lij/.vim/stl/stl_algo.h	/^inline bool is_heap(_RandomAccessIter __first, _RandomAccessIter __last,$/;"	f	signature:(_RandomAccessIter __first, _RandomAccessIter __last, _StrictWeakOrdering __comp)
is_sorted	/Users/lij/.vim/stl/stl_algo.h	/^bool is_sorted(_ForwardIter __first, _ForwardIter __last)$/;"	f	signature:(_ForwardIter __first, _ForwardIter __last)
is_sorted	/Users/lij/.vim/stl/stl_algo.h	/^bool is_sorted(_ForwardIter __first, _ForwardIter __last,$/;"	f	signature:(_ForwardIter __first, _ForwardIter __last, _StrictWeakOrdering __comp)
istream_iterator	/Users/lij/.vim/stl/stl_iterator.h	/^  istream_iterator() : _M_stream(&cin), _M_end_marker(false) {}$/;"	f	class:istream_iterator	access:public	signature:()
istream_iterator	/Users/lij/.vim/stl/stl_iterator.h	/^  istream_iterator() : _M_stream(0), _M_ok(false) {}$/;"	f	class:istream_iterator	access:public	signature:()
istream_iterator	/Users/lij/.vim/stl/stl_iterator.h	/^  istream_iterator(istream& __s) : _M_stream(&__s) { _M_read(); }$/;"	f	class:istream_iterator	access:public	signature:(istream& __s)
istream_iterator	/Users/lij/.vim/stl/stl_iterator.h	/^  istream_iterator(istream_type& __s) : _M_stream(&__s) { _M_read(); }$/;"	f	class:istream_iterator	access:public	signature:(istream_type& __s)
istream_iterator	/Users/lij/.vim/stl/stl_iterator.h	/^class istream_iterator {$/;"	c
istream_iterator::_M_end_marker	/Users/lij/.vim/stl/stl_iterator.h	/^  bool _M_end_marker;$/;"	m	class:istream_iterator	access:protected
istream_iterator::_M_equal	/Users/lij/.vim/stl/stl_iterator.h	/^  bool _M_equal(const istream_iterator& __x) const$/;"	f	class:istream_iterator	access:public	signature:(const istream_iterator& __x) const
istream_iterator::_M_ok	/Users/lij/.vim/stl/stl_iterator.h	/^  bool _M_ok;$/;"	m	class:istream_iterator	access:private
istream_iterator::_M_read	/Users/lij/.vim/stl/stl_iterator.h	/^  void _M_read() {$/;"	f	class:istream_iterator	access:private	signature:()
istream_iterator::_M_read	/Users/lij/.vim/stl/stl_iterator.h	/^  void _M_read() {$/;"	f	class:istream_iterator	access:protected	signature:()
istream_iterator::_M_stream	/Users/lij/.vim/stl/stl_iterator.h	/^  istream* _M_stream;$/;"	m	class:istream_iterator	access:protected
istream_iterator::_M_stream	/Users/lij/.vim/stl/stl_iterator.h	/^  istream_type* _M_stream;$/;"	m	class:istream_iterator	access:private
istream_iterator::_M_value	/Users/lij/.vim/stl/stl_iterator.h	/^  _Tp _M_value;$/;"	m	class:istream_iterator	access:private
istream_iterator::_M_value	/Users/lij/.vim/stl/stl_iterator.h	/^  _Tp _M_value;$/;"	m	class:istream_iterator	access:protected
istream_iterator::char_type	/Users/lij/.vim/stl/stl_iterator.h	/^  typedef _CharT                         char_type;$/;"	t	class:istream_iterator	access:public
istream_iterator::difference_type	/Users/lij/.vim/stl/stl_iterator.h	/^  typedef _Dist                          difference_type;$/;"	t	class:istream_iterator	access:public
istream_iterator::difference_type	/Users/lij/.vim/stl/stl_iterator.h	/^  typedef _Dist               difference_type;$/;"	t	class:istream_iterator	access:public
istream_iterator::istream_iterator	/Users/lij/.vim/stl/stl_iterator.h	/^  istream_iterator() : _M_stream(&cin), _M_end_marker(false) {}$/;"	f	class:istream_iterator	access:public	signature:()
istream_iterator::istream_iterator	/Users/lij/.vim/stl/stl_iterator.h	/^  istream_iterator() : _M_stream(0), _M_ok(false) {}$/;"	f	class:istream_iterator	access:public	signature:()
istream_iterator::istream_iterator	/Users/lij/.vim/stl/stl_iterator.h	/^  istream_iterator(istream& __s) : _M_stream(&__s) { _M_read(); }$/;"	f	class:istream_iterator	access:public	signature:(istream& __s)
istream_iterator::istream_iterator	/Users/lij/.vim/stl/stl_iterator.h	/^  istream_iterator(istream_type& __s) : _M_stream(&__s) { _M_read(); }$/;"	f	class:istream_iterator	access:public	signature:(istream_type& __s)
istream_iterator::istream_type	/Users/lij/.vim/stl/stl_iterator.h	/^  typedef basic_istream<_CharT, _Traits> istream_type;$/;"	t	class:istream_iterator	access:public
istream_iterator::iterator_category	/Users/lij/.vim/stl/stl_iterator.h	/^  typedef input_iterator_tag             iterator_category;$/;"	t	class:istream_iterator	access:public
istream_iterator::iterator_category	/Users/lij/.vim/stl/stl_iterator.h	/^  typedef input_iterator_tag  iterator_category;$/;"	t	class:istream_iterator	access:public
istream_iterator::operator *	/Users/lij/.vim/stl/stl_iterator.h	/^  reference operator*() const { return _M_value; }$/;"	f	class:istream_iterator	access:public	signature:() const
istream_iterator::operator ++	/Users/lij/.vim/stl/stl_iterator.h	/^  istream_iterator operator++(int)  {$/;"	f	class:istream_iterator	access:public	signature:(int)
istream_iterator::operator ++	/Users/lij/.vim/stl/stl_iterator.h	/^  istream_iterator& operator++() { $/;"	f	class:istream_iterator	access:public	signature:()
istream_iterator::operator ++	/Users/lij/.vim/stl/stl_iterator.h	/^  istream_iterator<_Tp, _Dist> operator++(int)  {$/;"	f	class:istream_iterator	access:public	signature:(int)
istream_iterator::operator ++	/Users/lij/.vim/stl/stl_iterator.h	/^  istream_iterator<_Tp, _Dist>& operator++() { $/;"	f	class:istream_iterator	access:public	signature:()
istream_iterator::operator ->	/Users/lij/.vim/stl/stl_iterator.h	/^  pointer operator->() const { return &(operator*()); }$/;"	f	class:istream_iterator	access:public	signature:() const
istream_iterator::operator ==	/Users/lij/.vim/stl/stl_iterator.h	/^  friend bool operator==(const istream_iterator<_T1, _D1>&,$/;"	p	class:istream_iterator	access:friend	signature:(const istream_iterator<_T1, _D1>&, const istream_iterator<_T1, _D1>&)
istream_iterator::pointer	/Users/lij/.vim/stl/stl_iterator.h	/^  typedef const _Tp*                     pointer;$/;"	t	class:istream_iterator	access:public
istream_iterator::pointer	/Users/lij/.vim/stl/stl_iterator.h	/^  typedef const _Tp*          pointer;$/;"	t	class:istream_iterator	access:public
istream_iterator::reference	/Users/lij/.vim/stl/stl_iterator.h	/^  typedef const _Tp&                     reference;$/;"	t	class:istream_iterator	access:public
istream_iterator::reference	/Users/lij/.vim/stl/stl_iterator.h	/^  typedef const _Tp&          reference;$/;"	t	class:istream_iterator	access:public
istream_iterator::traits_type	/Users/lij/.vim/stl/stl_iterator.h	/^  typedef _Traits                        traits_type;$/;"	t	class:istream_iterator	access:public
istream_iterator::value_type	/Users/lij/.vim/stl/stl_iterator.h	/^  typedef _Tp                            value_type;$/;"	t	class:istream_iterator	access:public
istream_iterator::value_type	/Users/lij/.vim/stl/stl_iterator.h	/^  typedef _Tp                 value_type;$/;"	t	class:istream_iterator	access:public
istream_type	/Users/lij/.vim/stl/stl_iterator.h	/^  typedef basic_istream<_CharT, _Traits>   istream_type;$/;"	t	class:istreambuf_iterator	access:public
istream_type	/Users/lij/.vim/stl/stl_iterator.h	/^  typedef basic_istream<_CharT, _Traits> istream_type;$/;"	t	class:istream_iterator	access:public
istreambuf_iterator	/Users/lij/.vim/stl/stl_iterator.h	/^  istreambuf_iterator(istream_type& __is) { this->_M_init(__is.rdbuf()); }$/;"	f	class:istreambuf_iterator	access:public	signature:(istream_type& __is)
istreambuf_iterator	/Users/lij/.vim/stl/stl_iterator.h	/^  istreambuf_iterator(streambuf_type* __p = 0) { this->_M_init(__p); }$/;"	f	class:istreambuf_iterator	access:public	signature:(streambuf_type* __p = 0)
istreambuf_iterator	/Users/lij/.vim/stl/stl_iterator.h	/^class istreambuf_iterator$/;"	c	inherits:iterator
istreambuf_iterator::_M_buf	/Users/lij/.vim/stl/stl_iterator.h	/^  streambuf_type* _M_buf;$/;"	m	class:istreambuf_iterator	access:private
istreambuf_iterator::_M_c	/Users/lij/.vim/stl/stl_iterator.h	/^  mutable _CharT _M_c;$/;"	m	class:istreambuf_iterator	access:private
istreambuf_iterator::_M_dereference_aux	/Users/lij/.vim/stl/stl_iterator.h	/^  char_type _M_dereference_aux() const;$/;"	p	class:istreambuf_iterator	access:private	signature:() const
istreambuf_iterator::_M_dereference_aux	/Users/lij/.vim/stl/stl_iterator.h	/^_CharT istreambuf_iterator<_CharT, _Traits>::_M_dereference_aux() const$/;"	f	class:istreambuf_iterator	signature:() const
istreambuf_iterator::_M_equal_aux	/Users/lij/.vim/stl/stl_iterator.h	/^  ::_M_equal_aux(const istreambuf_iterator& __i) const$/;"	f	class:istreambuf_iterator	signature:(const istreambuf_iterator& __i) const
istreambuf_iterator::_M_equal_aux	/Users/lij/.vim/stl/stl_iterator.h	/^  bool _M_equal_aux(const istreambuf_iterator&) const;$/;"	p	class:istreambuf_iterator	access:private	signature:(const istreambuf_iterator&) const
istreambuf_iterator::_M_getc	/Users/lij/.vim/stl/stl_iterator.h	/^  void _M_getc() const {$/;"	f	class:istreambuf_iterator	access:private	signature:() const
istreambuf_iterator::_M_init	/Users/lij/.vim/stl/stl_iterator.h	/^  void _M_init(streambuf_type* __p) {$/;"	f	class:istreambuf_iterator	access:private	signature:(streambuf_type* __p)
istreambuf_iterator::_M_nextc	/Users/lij/.vim/stl/stl_iterator.h	/^  void _M_nextc() {$/;"	f	class:istreambuf_iterator	access:private	signature:()
istreambuf_iterator::_M_postincr_aux	/Users/lij/.vim/stl/stl_iterator.h	/^  void _M_postincr_aux();$/;"	p	class:istreambuf_iterator	access:private	signature:()
istreambuf_iterator::_M_postincr_aux	/Users/lij/.vim/stl/stl_iterator.h	/^void istreambuf_iterator<_CharT, _Traits>::_M_postincr_aux()$/;"	f	class:istreambuf_iterator	signature:()
istreambuf_iterator::char_type	/Users/lij/.vim/stl/stl_iterator.h	/^  typedef _CharT                           char_type;$/;"	t	class:istreambuf_iterator	access:public
istreambuf_iterator::equal	/Users/lij/.vim/stl/stl_iterator.h	/^  bool equal(const istreambuf_iterator& __i) const {$/;"	f	class:istreambuf_iterator	access:public	signature:(const istreambuf_iterator& __i) const
istreambuf_iterator::int_type	/Users/lij/.vim/stl/stl_iterator.h	/^  typedef typename _Traits::int_type       int_type;$/;"	t	class:istreambuf_iterator	access:public
istreambuf_iterator::istream_type	/Users/lij/.vim/stl/stl_iterator.h	/^  typedef basic_istream<_CharT, _Traits>   istream_type;$/;"	t	class:istreambuf_iterator	access:public
istreambuf_iterator::istreambuf_iterator	/Users/lij/.vim/stl/stl_iterator.h	/^  istreambuf_iterator(istream_type& __is) { this->_M_init(__is.rdbuf()); }$/;"	f	class:istreambuf_iterator	access:public	signature:(istream_type& __is)
istreambuf_iterator::istreambuf_iterator	/Users/lij/.vim/stl/stl_iterator.h	/^  istreambuf_iterator(streambuf_type* __p = 0) { this->_M_init(__p); }$/;"	f	class:istreambuf_iterator	access:public	signature:(streambuf_type* __p = 0)
istreambuf_iterator::operator *	/Users/lij/.vim/stl/stl_iterator.h	/^  char_type operator*() const $/;"	f	class:istreambuf_iterator	access:public	signature:() const
istreambuf_iterator::operator ++	/Users/lij/.vim/stl/stl_iterator.h	/^  istreambuf_iterator  operator++(int) {$/;"	f	class:istreambuf_iterator	access:public	signature:(int)
istreambuf_iterator::operator ++	/Users/lij/.vim/stl/stl_iterator.h	/^  istreambuf_iterator& operator++() { this->_M_nextc(); return *this; }$/;"	f	class:istreambuf_iterator	access:public	signature:()
istreambuf_iterator::streambuf_type	/Users/lij/.vim/stl/stl_iterator.h	/^  typedef basic_streambuf<_CharT, _Traits> streambuf_type;$/;"	t	class:istreambuf_iterator	access:public
istreambuf_iterator::traits_type	/Users/lij/.vim/stl/stl_iterator.h	/^  typedef _Traits                          traits_type;$/;"	t	class:istreambuf_iterator	access:public
iter	/Users/lij/.vim/stl/stl_hash_map.h	/^  typename _Container::iterator iter;$/;"	m	class:insert_iterator	access:protected
iter	/Users/lij/.vim/stl/stl_hash_set.h	/^  typename _Container::iterator iter;$/;"	m	class:insert_iterator	access:protected
iter	/Users/lij/.vim/stl/stl_iterator.h	/^  typename _Container::iterator iter;$/;"	m	class:insert_iterator	access:protected
iter	/Users/lij/.vim/stl/stl_slist.h	/^  typename _Container::iterator iter;$/;"	m	class:insert_iterator	access:protected
iter_swap	/Users/lij/.vim/stl/stl_algobase.h	/^inline void iter_swap(_ForwardIter1 __a, _ForwardIter2 __b) {$/;"	f	signature:(_ForwardIter1 __a, _ForwardIter2 __b)
iterator	/Users/lij/.vim/stl/container_concepts.h	/^__STL_TYPEDEF_REQUIREMENT(iterator);$/;"	v
iterator	/Users/lij/.vim/stl/stl_bvector.h	/^  typedef _Bit_iterator                iterator;$/;"	t	class:__BVECTOR	access:public
iterator	/Users/lij/.vim/stl/stl_bvector.h	/^  typedef _Bit_iterator   iterator;$/;"	t	struct:_Bit_iterator	access:public
iterator	/Users/lij/.vim/stl/stl_deque.h	/^  typedef _Deque_iterator<_Tp, _Tp&, _Tp*>             iterator;$/;"	t	struct:_Deque_iterator	access:public
iterator	/Users/lij/.vim/stl/stl_deque.h	/^  typedef _Deque_iterator<_Tp,_Tp&,_Tp*>             iterator;$/;"	t	class:_Deque_base	access:public
iterator	/Users/lij/.vim/stl/stl_deque.h	/^  typedef typename _Base::iterator       iterator;$/;"	t	class:deque	access:public
iterator	/Users/lij/.vim/stl/stl_hash_map.h	/^  typedef typename _Ht::iterator iterator;$/;"	t	class:hash_map	access:public
iterator	/Users/lij/.vim/stl/stl_hash_map.h	/^  typedef typename _Ht::iterator iterator;$/;"	t	class:hash_multimap	access:public
iterator	/Users/lij/.vim/stl/stl_hash_set.h	/^  typedef typename _Ht::const_iterator iterator;$/;"	t	class:hash_multiset	access:public
iterator	/Users/lij/.vim/stl/stl_hash_set.h	/^  typedef typename _Ht::const_iterator iterator;$/;"	t	class:hash_set	access:public
iterator	/Users/lij/.vim/stl/stl_hashtable.h	/^          iterator;$/;"	t	class:hashtable	access:public
iterator	/Users/lij/.vim/stl/stl_hashtable.h	/^          iterator;$/;"	t	struct:_Hashtable_const_iterator	access:public
iterator	/Users/lij/.vim/stl/stl_hashtable.h	/^          iterator;$/;"	t	struct:_Hashtable_iterator	access:public
iterator	/Users/lij/.vim/stl/stl_iterator_base.h	/^struct iterator {$/;"	s
iterator	/Users/lij/.vim/stl/stl_list.h	/^  typedef _List_iterator<_Tp,_Tp&,_Tp*>             iterator;$/;"	t	class:list	access:public
iterator	/Users/lij/.vim/stl/stl_list.h	/^  typedef _List_iterator<_Tp,_Tp&,_Tp*>             iterator;$/;"	t	struct:_List_iterator	access:public
iterator	/Users/lij/.vim/stl/stl_map.h	/^  typedef typename _Rep_type::iterator iterator;$/;"	t	class:map	access:public
iterator	/Users/lij/.vim/stl/stl_multimap.h	/^  typedef typename _Rep_type::iterator iterator;$/;"	t	class:multimap	access:public
iterator	/Users/lij/.vim/stl/stl_multiset.h	/^  typedef typename _Rep_type::const_iterator iterator;$/;"	t	class:multiset	access:public
iterator	/Users/lij/.vim/stl/stl_rope.h	/^        typedef _Rope_iterator<_CharT,_Alloc> iterator;$/;"	t	class:rope	access:public
iterator	/Users/lij/.vim/stl/stl_set.h	/^  typedef typename _Rep_type::const_iterator iterator;$/;"	t	class:set	access:public
iterator	/Users/lij/.vim/stl/stl_slist.h	/^  typedef _Slist_iterator<_Tp, _Tp&, _Tp*>             iterator;$/;"	t	class:slist	access:public
iterator	/Users/lij/.vim/stl/stl_slist.h	/^  typedef _Slist_iterator<_Tp, _Tp&, _Tp*>             iterator;$/;"	t	struct:_Slist_iterator	access:public
iterator	/Users/lij/.vim/stl/stl_tree.h	/^    iterator;$/;"	t	struct:_Rb_tree_iterator	access:public
iterator	/Users/lij/.vim/stl/stl_tree.h	/^  typedef _Rb_tree_iterator<value_type, reference, pointer> iterator;$/;"	t	class:_Rb_tree	access:public
iterator	/Users/lij/.vim/stl/stl_vector.h	/^  typedef value_type* iterator;$/;"	t	class:vector	access:public
iterator	/Users/lij/.vim/stl/string	/^  typedef value_type*                      iterator;$/;"	t	class:basic_string	file:	access:public
iterator::difference_type	/Users/lij/.vim/stl/stl_iterator_base.h	/^  typedef _Distance  difference_type;$/;"	t	struct:iterator	access:public
iterator::iterator_category	/Users/lij/.vim/stl/stl_iterator_base.h	/^  typedef _Category  iterator_category;$/;"	t	struct:iterator	access:public
iterator::pointer	/Users/lij/.vim/stl/stl_iterator_base.h	/^  typedef _Pointer   pointer;$/;"	t	struct:iterator	access:public
iterator::reference	/Users/lij/.vim/stl/stl_iterator_base.h	/^  typedef _Reference reference;$/;"	t	struct:iterator	access:public
iterator::value_type	/Users/lij/.vim/stl/stl_iterator_base.h	/^  typedef _Tp        value_type;$/;"	t	struct:iterator	access:public
iterator_category	/Users/lij/.vim/stl/concept_checks.h	/^          iterator_category;$/;"	t	struct:__iterator_category_type_definition_requirement_violation	access:public
iterator_category	/Users/lij/.vim/stl/stl_deque.h	/^  typedef random_access_iterator_tag iterator_category;$/;"	t	struct:_Deque_iterator	access:public
iterator_category	/Users/lij/.vim/stl/stl_deque.h	/^iterator_category(const _Deque_iterator<_Tp,_Ref,_Ptr>&)$/;"	f	signature:(const _Deque_iterator<_Tp,_Ref,_Ptr>&)
iterator_category	/Users/lij/.vim/stl/stl_hash_map.h	/^  typedef output_iterator_tag iterator_category;$/;"	t	class:insert_iterator	access:public
iterator_category	/Users/lij/.vim/stl/stl_hash_set.h	/^  typedef output_iterator_tag iterator_category;$/;"	t	class:insert_iterator	access:public
iterator_category	/Users/lij/.vim/stl/stl_hashtable.h	/^  typedef forward_iterator_tag iterator_category;$/;"	t	struct:_Hashtable_const_iterator	access:public
iterator_category	/Users/lij/.vim/stl/stl_hashtable.h	/^  typedef forward_iterator_tag iterator_category;$/;"	t	struct:_Hashtable_iterator	access:public
iterator_category	/Users/lij/.vim/stl/stl_hashtable.h	/^iterator_category(const _Hashtable_const_iterator<_Val,_Key,_HF,$/;"	f	signature:(const _Hashtable_const_iterator<_Val,_Key,_HF, _ExK,_EqK,_All>&)
iterator_category	/Users/lij/.vim/stl/stl_hashtable.h	/^iterator_category(const _Hashtable_iterator<_Val,_Key,_HF,_ExK,_EqK,_All>&)$/;"	f	signature:(const _Hashtable_iterator<_Val,_Key,_HF,_ExK,_EqK,_All>&)
iterator_category	/Users/lij/.vim/stl/stl_iterator.h	/^          iterator_category;$/;"	t	class:reverse_iterator	access:public
iterator_category	/Users/lij/.vim/stl/stl_iterator.h	/^  typedef bidirectional_iterator_tag iterator_category;$/;"	t	class:reverse_bidirectional_iterator	access:public
iterator_category	/Users/lij/.vim/stl/stl_iterator.h	/^  typedef input_iterator_tag             iterator_category;$/;"	t	class:istream_iterator	access:public
iterator_category	/Users/lij/.vim/stl/stl_iterator.h	/^  typedef input_iterator_tag  iterator_category;$/;"	t	class:istream_iterator	access:public
iterator_category	/Users/lij/.vim/stl/stl_iterator.h	/^  typedef output_iterator_tag            iterator_category;$/;"	t	class:ostream_iterator	access:public
iterator_category	/Users/lij/.vim/stl/stl_iterator.h	/^  typedef output_iterator_tag iterator_category;$/;"	t	class:back_insert_iterator	access:public
iterator_category	/Users/lij/.vim/stl/stl_iterator.h	/^  typedef output_iterator_tag iterator_category;$/;"	t	class:front_insert_iterator	access:public
iterator_category	/Users/lij/.vim/stl/stl_iterator.h	/^  typedef output_iterator_tag iterator_category;$/;"	t	class:insert_iterator	access:public
iterator_category	/Users/lij/.vim/stl/stl_iterator.h	/^  typedef output_iterator_tag iterator_category;$/;"	t	class:ostream_iterator	access:public
iterator_category	/Users/lij/.vim/stl/stl_iterator.h	/^  typedef random_access_iterator_tag iterator_category;$/;"	t	class:reverse_iterator	access:public
iterator_category	/Users/lij/.vim/stl/stl_iterator.h	/^iterator_category(const back_insert_iterator<_Container>&)$/;"	f	signature:(const back_insert_iterator<_Container>&)
iterator_category	/Users/lij/.vim/stl/stl_iterator.h	/^iterator_category(const front_insert_iterator<_Container>&)$/;"	f	signature:(const front_insert_iterator<_Container>&)
iterator_category	/Users/lij/.vim/stl/stl_iterator.h	/^iterator_category(const insert_iterator<_Container>&)$/;"	f	signature:(const insert_iterator<_Container>&)
iterator_category	/Users/lij/.vim/stl/stl_iterator.h	/^iterator_category(const istream_iterator<_Tp, _Dist>&)$/;"	f	signature:(const istream_iterator<_Tp, _Dist>&)
iterator_category	/Users/lij/.vim/stl/stl_iterator.h	/^iterator_category(const ostream_iterator<_Tp>&) {$/;"	f	signature:(const ostream_iterator<_Tp>&)
iterator_category	/Users/lij/.vim/stl/stl_iterator.h	/^iterator_category(const reverse_bidirectional_iterator<_BidirectionalIterator,$/;"	f	signature:(const reverse_bidirectional_iterator<_BidirectionalIterator, _Tp, _Reference, _Distance>&)
iterator_category	/Users/lij/.vim/stl/stl_iterator.h	/^iterator_category(const reverse_iterator<_RandomAccessIterator, _Tp,$/;"	f	signature:(const reverse_iterator<_RandomAccessIterator, _Tp, _Reference, _Distance>&)
iterator_category	/Users/lij/.vim/stl/stl_iterator_base.h	/^  typedef _Category  iterator_category;$/;"	t	struct:iterator	access:public
iterator_category	/Users/lij/.vim/stl/stl_iterator_base.h	/^  typedef bidirectional_iterator_tag iterator_category;$/;"	t	struct:bidirectional_iterator	access:public
iterator_category	/Users/lij/.vim/stl/stl_iterator_base.h	/^  typedef forward_iterator_tag iterator_category;$/;"	t	struct:forward_iterator	access:public
iterator_category	/Users/lij/.vim/stl/stl_iterator_base.h	/^  typedef input_iterator_tag iterator_category;$/;"	t	struct:input_iterator	access:public
iterator_category	/Users/lij/.vim/stl/stl_iterator_base.h	/^  typedef output_iterator_tag iterator_category;$/;"	t	struct:output_iterator	access:public
iterator_category	/Users/lij/.vim/stl/stl_iterator_base.h	/^  typedef random_access_iterator_tag iterator_category;$/;"	t	struct:iterator_traits	access:public
iterator_category	/Users/lij/.vim/stl/stl_iterator_base.h	/^  typedef random_access_iterator_tag iterator_category;$/;"	t	struct:random_access_iterator	access:public
iterator_category	/Users/lij/.vim/stl/stl_iterator_base.h	/^  typedef typename _Iterator::iterator_category iterator_category;$/;"	t	struct:iterator_traits	access:public
iterator_category	/Users/lij/.vim/stl/stl_iterator_base.h	/^inline output_iterator_tag iterator_category(const output_iterator&)$/;"	f	signature:(const output_iterator&)
iterator_category	/Users/lij/.vim/stl/stl_iterator_base.h	/^inline random_access_iterator_tag iterator_category(const _Tp*)$/;"	f	signature:(const _Tp*)
iterator_category	/Users/lij/.vim/stl/stl_iterator_base.h	/^iterator_category(const _Iter& __i) { return __iterator_category(__i); }$/;"	f	signature:(const _Iter& __i)
iterator_category	/Users/lij/.vim/stl/stl_iterator_base.h	/^iterator_category(const bidirectional_iterator<_Tp, _Distance>&)$/;"	f	signature:(const bidirectional_iterator<_Tp, _Distance>&)
iterator_category	/Users/lij/.vim/stl/stl_iterator_base.h	/^iterator_category(const forward_iterator<_Tp, _Distance>&)$/;"	f	signature:(const forward_iterator<_Tp, _Distance>&)
iterator_category	/Users/lij/.vim/stl/stl_iterator_base.h	/^iterator_category(const input_iterator<_Tp, _Distance>&)$/;"	f	signature:(const input_iterator<_Tp, _Distance>&)
iterator_category	/Users/lij/.vim/stl/stl_iterator_base.h	/^iterator_category(const random_access_iterator<_Tp, _Distance>&)$/;"	f	signature:(const random_access_iterator<_Tp, _Distance>&)
iterator_category	/Users/lij/.vim/stl/stl_list.h	/^  typedef bidirectional_iterator_tag iterator_category;$/;"	t	struct:_List_iterator_base	access:public
iterator_category	/Users/lij/.vim/stl/stl_list.h	/^iterator_category(const _List_iterator_base&)$/;"	f	signature:(const _List_iterator_base&)
iterator_category	/Users/lij/.vim/stl/stl_raw_storage_iter.h	/^  typedef output_iterator_tag iterator_category;$/;"	t	class:raw_storage_iterator	access:public
iterator_category	/Users/lij/.vim/stl/stl_raw_storage_iter.h	/^iterator_category(const raw_storage_iterator<_ForwardIterator, _Tp>&)$/;"	f	signature:(const raw_storage_iterator<_ForwardIterator, _Tp>&)
iterator_category	/Users/lij/.vim/stl/stl_slist.h	/^  typedef forward_iterator_tag iterator_category;$/;"	t	struct:_Slist_iterator_base	access:public
iterator_category	/Users/lij/.vim/stl/stl_slist.h	/^  typedef output_iterator_tag iterator_category;$/;"	t	class:insert_iterator	access:public
iterator_category	/Users/lij/.vim/stl/stl_slist.h	/^inline forward_iterator_tag iterator_category(const _Slist_iterator_base&) {$/;"	f	signature:(const _Slist_iterator_base&)
iterator_category	/Users/lij/.vim/stl/stl_tree.h	/^  typedef bidirectional_iterator_tag iterator_category;$/;"	t	struct:_Rb_tree_base_iterator	access:public
iterator_category	/Users/lij/.vim/stl/stl_tree.h	/^iterator_category(const _Rb_tree_base_iterator&) {$/;"	f	signature:(const _Rb_tree_base_iterator&)
iterator_traits	/Users/lij/.vim/stl/stl_iterator_base.h	/^struct iterator_traits {$/;"	s
iterator_traits	/Users/lij/.vim/stl/stl_iterator_base.h	/^struct iterator_traits<_Tp*> {$/;"	s
iterator_traits	/Users/lij/.vim/stl/stl_iterator_base.h	/^struct iterator_traits<const _Tp*> {$/;"	s
iterator_traits::difference_type	/Users/lij/.vim/stl/stl_iterator_base.h	/^  typedef ptrdiff_t                   difference_type;$/;"	t	struct:iterator_traits	access:public
iterator_traits::difference_type	/Users/lij/.vim/stl/stl_iterator_base.h	/^  typedef typename _Iterator::difference_type   difference_type;$/;"	t	struct:iterator_traits	access:public
iterator_traits::iterator_category	/Users/lij/.vim/stl/stl_iterator_base.h	/^  typedef random_access_iterator_tag iterator_category;$/;"	t	struct:iterator_traits	access:public
iterator_traits::iterator_category	/Users/lij/.vim/stl/stl_iterator_base.h	/^  typedef typename _Iterator::iterator_category iterator_category;$/;"	t	struct:iterator_traits	access:public
iterator_traits::pointer	/Users/lij/.vim/stl/stl_iterator_base.h	/^  typedef _Tp*                        pointer;$/;"	t	struct:iterator_traits	access:public
iterator_traits::pointer	/Users/lij/.vim/stl/stl_iterator_base.h	/^  typedef const _Tp*                  pointer;$/;"	t	struct:iterator_traits	access:public
iterator_traits::pointer	/Users/lij/.vim/stl/stl_iterator_base.h	/^  typedef typename _Iterator::pointer           pointer;$/;"	t	struct:iterator_traits	access:public
iterator_traits::reference	/Users/lij/.vim/stl/stl_iterator_base.h	/^  typedef _Tp&                        reference;$/;"	t	struct:iterator_traits	access:public
iterator_traits::reference	/Users/lij/.vim/stl/stl_iterator_base.h	/^  typedef const _Tp&                  reference;$/;"	t	struct:iterator_traits	access:public
iterator_traits::reference	/Users/lij/.vim/stl/stl_iterator_base.h	/^  typedef typename _Iterator::reference         reference;$/;"	t	struct:iterator_traits	access:public
iterator_traits::value_type	/Users/lij/.vim/stl/stl_iterator_base.h	/^  typedef _Tp                         value_type;$/;"	t	struct:iterator_traits	access:public
iterator_traits::value_type	/Users/lij/.vim/stl/stl_iterator_base.h	/^  typedef typename _Iterator::value_type        value_type;$/;"	t	struct:iterator_traits	access:public
iterator_type	/Users/lij/.vim/stl/stl_iterator.h	/^  typedef _Iterator iterator_type;$/;"	t	class:reverse_iterator	access:public
key_comp	/Users/lij/.vim/stl/stl_map.h	/^  key_compare key_comp() const { return _M_t.key_comp(); }$/;"	f	class:map	access:public	signature:() const
key_comp	/Users/lij/.vim/stl/stl_multimap.h	/^  key_compare key_comp() const { return _M_t.key_comp(); }$/;"	f	class:multimap	access:public	signature:() const
key_comp	/Users/lij/.vim/stl/stl_multiset.h	/^  key_compare key_comp() const { return _M_t.key_comp(); }$/;"	f	class:multiset	access:public	signature:() const
key_comp	/Users/lij/.vim/stl/stl_set.h	/^  key_compare key_comp() const { return _M_t.key_comp(); }$/;"	f	class:set	access:public	signature:() const
key_comp	/Users/lij/.vim/stl/stl_tree.h	/^  _Compare key_comp() const { return _M_key_compare; }$/;"	f	class:_Rb_tree	access:public	signature:() const
key_compare	/Users/lij/.vim/stl/stl_map.h	/^  typedef _Compare              key_compare;$/;"	t	class:map	access:public
key_compare	/Users/lij/.vim/stl/stl_multimap.h	/^  typedef _Compare              key_compare;$/;"	t	class:multimap	access:public
key_compare	/Users/lij/.vim/stl/stl_multiset.h	/^  typedef _Compare key_compare;$/;"	t	class:multiset	access:public
key_compare	/Users/lij/.vim/stl/stl_set.h	/^  typedef _Compare key_compare;$/;"	t	class:set	access:public
key_eq	/Users/lij/.vim/stl/stl_hash_map.h	/^  key_equal key_eq() const { return _M_ht.key_eq(); }$/;"	f	class:hash_map	access:public	signature:() const
key_eq	/Users/lij/.vim/stl/stl_hash_map.h	/^  key_equal key_eq() const { return _M_ht.key_eq(); }$/;"	f	class:hash_multimap	access:public	signature:() const
key_eq	/Users/lij/.vim/stl/stl_hash_set.h	/^  key_equal key_eq() const { return _M_ht.key_eq(); }$/;"	f	class:hash_multiset	access:public	signature:() const
key_eq	/Users/lij/.vim/stl/stl_hash_set.h	/^  key_equal key_eq() const { return _M_ht.key_eq(); }$/;"	f	class:hash_set	access:public	signature:() const
key_eq	/Users/lij/.vim/stl/stl_hashtable.h	/^  key_equal key_eq() const { return _M_equals; }$/;"	f	class:hashtable	access:public	signature:() const
key_equal	/Users/lij/.vim/stl/stl_hash_map.h	/^  typedef typename _Ht::key_equal key_equal;$/;"	t	class:hash_map	access:public
key_equal	/Users/lij/.vim/stl/stl_hash_map.h	/^  typedef typename _Ht::key_equal key_equal;$/;"	t	class:hash_multimap	access:public
key_equal	/Users/lij/.vim/stl/stl_hash_set.h	/^  typedef typename _Ht::key_equal key_equal;$/;"	t	class:hash_multiset	access:public
key_equal	/Users/lij/.vim/stl/stl_hash_set.h	/^  typedef typename _Ht::key_equal key_equal;$/;"	t	class:hash_set	access:public
key_equal	/Users/lij/.vim/stl/stl_hashtable.h	/^  typedef _EqualKey key_equal;$/;"	t	class:hashtable	access:public
key_type	/Users/lij/.vim/stl/stl_hash_map.h	/^  typedef typename _Ht::key_type key_type;$/;"	t	class:hash_map	access:public
key_type	/Users/lij/.vim/stl/stl_hash_map.h	/^  typedef typename _Ht::key_type key_type;$/;"	t	class:hash_multimap	access:public
key_type	/Users/lij/.vim/stl/stl_hash_set.h	/^  typedef typename _Ht::key_type key_type;$/;"	t	class:hash_multiset	access:public
key_type	/Users/lij/.vim/stl/stl_hash_set.h	/^  typedef typename _Ht::key_type key_type;$/;"	t	class:hash_set	access:public
key_type	/Users/lij/.vim/stl/stl_hashtable.h	/^  typedef _Key key_type;$/;"	t	class:hashtable	access:public
key_type	/Users/lij/.vim/stl/stl_map.h	/^  typedef _Key                  key_type;$/;"	t	class:map	access:public
key_type	/Users/lij/.vim/stl/stl_multimap.h	/^  typedef _Key                  key_type;$/;"	t	class:multimap	access:public
key_type	/Users/lij/.vim/stl/stl_multiset.h	/^  typedef _Key     key_type;$/;"	t	class:multiset	access:public
key_type	/Users/lij/.vim/stl/stl_set.h	/^  typedef _Key     key_type;$/;"	t	class:set	access:public
key_type	/Users/lij/.vim/stl/stl_tree.h	/^  typedef _Key key_type;$/;"	t	class:_Rb_tree	access:public
length	/Users/lij/.vim/stl/char_traits.h	/^  static size_t length(const _CharT* __s) {$/;"	f	class:__char_traits_base	access:public	signature:(const _CharT* __s)
length	/Users/lij/.vim/stl/char_traits.h	/^  static size_t length(const char* __s) { return strlen(__s); }$/;"	f	class:char_traits	access:public	signature:(const char* __s)
length	/Users/lij/.vim/stl/stl_rope.h	/^        size_type length() const {$/;"	f	class:rope	access:public	signature:() const
length	/Users/lij/.vim/stl/string	/^  size_type length() const { return size(); }$/;"	f	class:basic_string	access:public	signature:() const
length_error	/Users/lij/.vim/stl/stdexcept	/^  length_error(const string& __arg) : logic_error(__arg) {}$/;"	f	class:length_error	access:public	signature:(const string& __arg)
length_error	/Users/lij/.vim/stl/stdexcept	/^class length_error : public logic_error {$/;"	c	file:	inherits:logic_error
length_error::length_error	/Users/lij/.vim/stl/stdexcept	/^  length_error(const string& __arg) : logic_error(__arg) {}$/;"	f	class:length_error	access:public	signature:(const string& __arg)
less	/Users/lij/.vim/stl/stl_function.h	/^struct less : public binary_function<_Tp,_Tp,bool> $/;"	s	inherits:binary_function
less::operator ()	/Users/lij/.vim/stl/stl_function.h	/^  bool operator()(const _Tp& __x, const _Tp& __y) const { return __x < __y; }$/;"	f	struct:less	access:public	signature:(const _Tp& __x, const _Tp& __y) const
less_equal	/Users/lij/.vim/stl/stl_function.h	/^struct less_equal : public binary_function<_Tp,_Tp,bool> $/;"	s	inherits:binary_function
less_equal::operator ()	/Users/lij/.vim/stl/stl_function.h	/^  bool operator()(const _Tp& __x, const _Tp& __y) const { return __x <= __y; }$/;"	f	struct:less_equal	access:public	signature:(const _Tp& __x, const _Tp& __y) const
lexicographical_compare	/Users/lij/.vim/stl/stl_algobase.h	/^bool lexicographical_compare(_InputIter1 __first1, _InputIter1 __last1,$/;"	f	signature:(_InputIter1 __first1, _InputIter1 __last1, _InputIter2 __first2, _InputIter2 __last2)
lexicographical_compare	/Users/lij/.vim/stl/stl_algobase.h	/^bool lexicographical_compare(_InputIter1 __first1, _InputIter1 __last1,$/;"	f	signature:(_InputIter1 __first1, _InputIter1 __last1, _InputIter2 __first2, _InputIter2 __last2, _Compare __comp)
lexicographical_compare	/Users/lij/.vim/stl/stl_algobase.h	/^inline bool lexicographical_compare(const char* __first1, const char* __last1,$/;"	f	signature:(const char* __first1, const char* __last1, const char* __first2, const char* __last2)
lexicographical_compare	/Users/lij/.vim/stl/stl_algobase.h	/^lexicographical_compare(const unsigned char* __first1,$/;"	f	signature:(const unsigned char* __first1, const unsigned char* __last1, const unsigned char* __first2, const unsigned char* __last2)
lexicographical_compare_3way	/Users/lij/.vim/stl/stl_algobase.h	/^int lexicographical_compare_3way(_InputIter1 __first1, _InputIter1 __last1,$/;"	f	signature:(_InputIter1 __first1, _InputIter1 __last1, _InputIter2 __first2, _InputIter2 __last2)
list	/Users/lij/.vim/stl/stl_list.h	/^  explicit list(const allocator_type& __a = allocator_type()) : _Base(__a) {}$/;"	f	class:list	access:public	signature:(const allocator_type& __a = allocator_type())
list	/Users/lij/.vim/stl/stl_list.h	/^  explicit list(size_type __n)$/;"	f	class:list	access:public	signature:(size_type __n)
list	/Users/lij/.vim/stl/stl_list.h	/^  list(_InputIterator __first, _InputIterator __last,$/;"	f	class:list	access:public	signature:(_InputIterator __first, _InputIterator __last, const allocator_type& __a = allocator_type())
list	/Users/lij/.vim/stl/stl_list.h	/^  list(const _Tp* __first, const _Tp* __last,$/;"	f	class:list	access:public	signature:(const _Tp* __first, const _Tp* __last, const allocator_type& __a = allocator_type())
list	/Users/lij/.vim/stl/stl_list.h	/^  list(const list<_Tp, _Alloc>& __x) : _Base(__x.get_allocator())$/;"	f	class:list	access:public	signature:(const list<_Tp, _Alloc>& __x)
list	/Users/lij/.vim/stl/stl_list.h	/^  list(const_iterator __first, const_iterator __last,$/;"	f	class:list	access:public	signature:(const_iterator __first, const_iterator __last, const allocator_type& __a = allocator_type())
list	/Users/lij/.vim/stl/stl_list.h	/^  list(size_type __n, const _Tp& __value,$/;"	f	class:list	access:public	signature:(size_type __n, const _Tp& __value, const allocator_type& __a = allocator_type())
list	/Users/lij/.vim/stl/stl_list.h	/^class list : protected _List_base<_Tp, _Alloc> {$/;"	c	inherits:_List_base
list::_Base	/Users/lij/.vim/stl/stl_list.h	/^  typedef _List_base<_Tp, _Alloc> _Base;$/;"	t	class:list	access:private
list::_M_assign_dispatch	/Users/lij/.vim/stl/stl_list.h	/^  void _M_assign_dispatch(_InputIterator __first, _InputIterator __last,$/;"	p	class:list	access:public	signature:(_InputIterator __first, _InputIterator __last, __false_type)
list::_M_assign_dispatch	/Users/lij/.vim/stl/stl_list.h	/^  void _M_assign_dispatch(_Integer __n, _Integer __val, __true_type)$/;"	f	class:list	access:public	signature:(_Integer __n, _Integer __val, __true_type)
list::_M_assign_dispatch	/Users/lij/.vim/stl/stl_list.h	/^list<_Tp, _Alloc>::_M_assign_dispatch(_InputIter __first2, _InputIter __last2,$/;"	f	class:list	signature:(_InputIter __first2, _InputIter __last2, __false_type)
list::_M_create_node	/Users/lij/.vim/stl/stl_list.h	/^  _Node* _M_create_node()$/;"	f	class:list	access:protected	signature:()
list::_M_create_node	/Users/lij/.vim/stl/stl_list.h	/^  _Node* _M_create_node(const _Tp& __x)$/;"	f	class:list	access:protected	signature:(const _Tp& __x)
list::_M_fill_assign	/Users/lij/.vim/stl/stl_list.h	/^  void _M_fill_assign(size_type __n, const _Tp& __val);$/;"	p	class:list	access:public	signature:(size_type __n, const _Tp& __val)
list::_M_fill_assign	/Users/lij/.vim/stl/stl_list.h	/^void list<_Tp, _Alloc>::_M_fill_assign(size_type __n, const _Tp& __val) {$/;"	f	class:list	signature:(size_type __n, const _Tp& __val)
list::_M_fill_insert	/Users/lij/.vim/stl/stl_list.h	/^  void _M_fill_insert(iterator __pos, size_type __n, const _Tp& __x); $/;"	p	class:list	access:public	signature:(iterator __pos, size_type __n, const _Tp& __x)
list::_M_fill_insert	/Users/lij/.vim/stl/stl_list.h	/^list<_Tp, _Alloc>::_M_fill_insert(iterator __position,$/;"	f	class:list	signature:(iterator __position, size_type __n, const _Tp& __x)
list::_M_insert_dispatch	/Users/lij/.vim/stl/stl_list.h	/^  void _M_insert_dispatch(iterator __pos, _Integer __n, _Integer __x,$/;"	f	class:list	access:public	signature:(iterator __pos, _Integer __n, _Integer __x, __true_type)
list::_M_insert_dispatch	/Users/lij/.vim/stl/stl_list.h	/^  void _M_insert_dispatch(iterator __pos,$/;"	p	class:list	access:public	signature:(iterator __pos, _InputIterator __first, _InputIterator __last, __false_type)
list::_M_insert_dispatch	/Users/lij/.vim/stl/stl_list.h	/^list<_Tp, _Alloc>::_M_insert_dispatch(iterator __position,$/;"	f	class:list	signature:(iterator __position, _InputIter __first, _InputIter __last, __false_type)
list::_Node	/Users/lij/.vim/stl/stl_list.h	/^  typedef _List_node<_Tp> _Node;$/;"	t	class:list	access:public
list::_Void_pointer	/Users/lij/.vim/stl/stl_list.h	/^  typedef void* _Void_pointer;$/;"	t	class:list	access:protected
list::__STL_CLASS_REQUIRES	/Users/lij/.vim/stl/stl_list.h	/^  __STL_CLASS_REQUIRES(_Tp, _Assignable);$/;"	p	class:list	access:private	signature:(_Tp, _Assignable)
list::allocator_type	/Users/lij/.vim/stl/stl_list.h	/^  typedef typename _Base::allocator_type allocator_type;$/;"	t	class:list	access:public
list::assign	/Users/lij/.vim/stl/stl_list.h	/^  void assign(_InputIterator __first, _InputIterator __last) {$/;"	f	class:list	access:public	signature:(_InputIterator __first, _InputIterator __last)
list::assign	/Users/lij/.vim/stl/stl_list.h	/^  void assign(size_type __n, const _Tp& __val) { _M_fill_assign(__n, __val); }$/;"	f	class:list	access:public	signature:(size_type __n, const _Tp& __val)
list::back	/Users/lij/.vim/stl/stl_list.h	/^  const_reference back() const { return *(--end()); }$/;"	f	class:list	access:public	signature:() const
list::back	/Users/lij/.vim/stl/stl_list.h	/^  reference back() { return *(--end()); }$/;"	f	class:list	access:public	signature:()
list::begin	/Users/lij/.vim/stl/stl_list.h	/^  const_iterator begin() const { return (_Node*)(_M_node->_M_next); }$/;"	f	class:list	access:public	signature:() const
list::begin	/Users/lij/.vim/stl/stl_list.h	/^  iterator begin()             { return (_Node*)(_M_node->_M_next); }$/;"	f	class:list	access:public	signature:()
list::clear	/Users/lij/.vim/stl/stl_list.h	/^  void clear() { _Base::clear(); }$/;"	f	class:list	access:public	signature:()
list::const_iterator	/Users/lij/.vim/stl/stl_list.h	/^  typedef _List_iterator<_Tp,const _Tp&,const _Tp*> const_iterator;$/;"	t	class:list	access:public
list::const_pointer	/Users/lij/.vim/stl/stl_list.h	/^  typedef const value_type* const_pointer;$/;"	t	class:list	access:public
list::const_reference	/Users/lij/.vim/stl/stl_list.h	/^  typedef const value_type& const_reference;$/;"	t	class:list	access:public
list::const_reverse_iterator	/Users/lij/.vim/stl/stl_list.h	/^          const_reverse_iterator;$/;"	t	class:list	access:public
list::const_reverse_iterator	/Users/lij/.vim/stl/stl_list.h	/^  typedef reverse_iterator<const_iterator> const_reverse_iterator;$/;"	t	class:list	access:public
list::difference_type	/Users/lij/.vim/stl/stl_list.h	/^  typedef ptrdiff_t difference_type;$/;"	t	class:list	access:public
list::empty	/Users/lij/.vim/stl/stl_list.h	/^  bool empty() const { return _M_node->_M_next == _M_node; }$/;"	f	class:list	access:public	signature:() const
list::end	/Users/lij/.vim/stl/stl_list.h	/^  const_iterator end() const { return _M_node; }$/;"	f	class:list	access:public	signature:() const
list::end	/Users/lij/.vim/stl/stl_list.h	/^  iterator end()             { return _M_node; }$/;"	f	class:list	access:public	signature:()
list::erase	/Users/lij/.vim/stl/stl_list.h	/^  iterator erase(iterator __first, iterator __last);$/;"	p	class:list	access:public	signature:(iterator __first, iterator __last)
list::erase	/Users/lij/.vim/stl/stl_list.h	/^  iterator erase(iterator __position) {$/;"	f	class:list	access:public	signature:(iterator __position)
list::erase	/Users/lij/.vim/stl/stl_list.h	/^typename list<_Tp,_Alloc>::iterator list<_Tp, _Alloc>::erase(iterator __first, $/;"	f	class:list	signature:(iterator __first, iterator __last)
list::front	/Users/lij/.vim/stl/stl_list.h	/^  const_reference front() const { return *begin(); }$/;"	f	class:list	access:public	signature:() const
list::front	/Users/lij/.vim/stl/stl_list.h	/^  reference front() { return *begin(); }$/;"	f	class:list	access:public	signature:()
list::get_allocator	/Users/lij/.vim/stl/stl_list.h	/^  allocator_type get_allocator() const { return _Base::get_allocator(); }$/;"	f	class:list	access:public	signature:() const
list::insert	/Users/lij/.vim/stl/stl_list.h	/^  iterator insert(iterator __position) { return insert(__position, _Tp()); }$/;"	f	class:list	access:public	signature:(iterator __position)
list::insert	/Users/lij/.vim/stl/stl_list.h	/^  iterator insert(iterator __position, const _Tp& __x) {$/;"	f	class:list	access:public	signature:(iterator __position, const _Tp& __x)
list::insert	/Users/lij/.vim/stl/stl_list.h	/^  void insert(iterator __pos, _InputIterator __first, _InputIterator __last) {$/;"	f	class:list	access:public	signature:(iterator __pos, _InputIterator __first, _InputIterator __last)
list::insert	/Users/lij/.vim/stl/stl_list.h	/^  void insert(iterator __pos, size_type __n, const _Tp& __x)$/;"	f	class:list	access:public	signature:(iterator __pos, size_type __n, const _Tp& __x)
list::insert	/Users/lij/.vim/stl/stl_list.h	/^  void insert(iterator __position, const _Tp* __first, const _Tp* __last);$/;"	p	class:list	access:public	signature:(iterator __position, const _Tp* __first, const _Tp* __last)
list::insert	/Users/lij/.vim/stl/stl_list.h	/^  void insert(iterator __position,$/;"	p	class:list	access:public	signature:(iterator __position, const_iterator __first, const_iterator __last)
list::insert	/Users/lij/.vim/stl/stl_list.h	/^list<_Tp, _Alloc>::insert(iterator __position, $/;"	f	class:list	signature:(iterator __position, const _Tp* __first, const _Tp* __last)
list::insert	/Users/lij/.vim/stl/stl_list.h	/^list<_Tp, _Alloc>::insert(iterator __position,$/;"	f	class:list	signature:(iterator __position, const_iterator __first, const_iterator __last)
list::iterator	/Users/lij/.vim/stl/stl_list.h	/^  typedef _List_iterator<_Tp,_Tp&,_Tp*>             iterator;$/;"	t	class:list	access:public
list::list	/Users/lij/.vim/stl/stl_list.h	/^  explicit list(const allocator_type& __a = allocator_type()) : _Base(__a) {}$/;"	f	class:list	access:public	signature:(const allocator_type& __a = allocator_type())
list::list	/Users/lij/.vim/stl/stl_list.h	/^  explicit list(size_type __n)$/;"	f	class:list	access:public	signature:(size_type __n)
list::list	/Users/lij/.vim/stl/stl_list.h	/^  list(_InputIterator __first, _InputIterator __last,$/;"	f	class:list	access:public	signature:(_InputIterator __first, _InputIterator __last, const allocator_type& __a = allocator_type())
list::list	/Users/lij/.vim/stl/stl_list.h	/^  list(const _Tp* __first, const _Tp* __last,$/;"	f	class:list	access:public	signature:(const _Tp* __first, const _Tp* __last, const allocator_type& __a = allocator_type())
list::list	/Users/lij/.vim/stl/stl_list.h	/^  list(const list<_Tp, _Alloc>& __x) : _Base(__x.get_allocator())$/;"	f	class:list	access:public	signature:(const list<_Tp, _Alloc>& __x)
list::list	/Users/lij/.vim/stl/stl_list.h	/^  list(const_iterator __first, const_iterator __last,$/;"	f	class:list	access:public	signature:(const_iterator __first, const_iterator __last, const allocator_type& __a = allocator_type())
list::list	/Users/lij/.vim/stl/stl_list.h	/^  list(size_type __n, const _Tp& __value,$/;"	f	class:list	access:public	signature:(size_type __n, const _Tp& __value, const allocator_type& __a = allocator_type())
list::max_size	/Users/lij/.vim/stl/stl_list.h	/^  size_type max_size() const { return size_type(-1); }$/;"	f	class:list	access:public	signature:() const
list::merge	/Users/lij/.vim/stl/stl_list.h	/^  template <class _StrictWeakOrdering> void merge(list&, _StrictWeakOrdering);$/;"	p	class:list	access:public	signature:(list&, _StrictWeakOrdering)
list::merge	/Users/lij/.vim/stl/stl_list.h	/^  void merge(list& __x);$/;"	p	class:list	access:public	signature:(list& __x)
list::merge	/Users/lij/.vim/stl/stl_list.h	/^void list<_Tp, _Alloc>::merge(list<_Tp, _Alloc>& __x)$/;"	f	class:list	signature:(list<_Tp, _Alloc>& __x)
list::merge	/Users/lij/.vim/stl/stl_list.h	/^void list<_Tp, _Alloc>::merge(list<_Tp, _Alloc>& __x,$/;"	f	class:list	signature:(list<_Tp, _Alloc>& __x, _StrictWeakOrdering __comp)
list::operator =	/Users/lij/.vim/stl/stl_list.h	/^  list<_Tp, _Alloc>& operator=(const list<_Tp, _Alloc>& __x);$/;"	p	class:list	access:public	signature:(const list<_Tp, _Alloc>& __x)
list::operator =	/Users/lij/.vim/stl/stl_list.h	/^list<_Tp, _Alloc>& list<_Tp, _Alloc>::operator=(const list<_Tp, _Alloc>& __x)$/;"	f	class:list	signature:(const list<_Tp, _Alloc>& __x)
list::pointer	/Users/lij/.vim/stl/stl_list.h	/^  typedef value_type* pointer;$/;"	t	class:list	access:public
list::pop_back	/Users/lij/.vim/stl/stl_list.h	/^  void pop_back() { $/;"	f	class:list	access:public	signature:()
list::pop_front	/Users/lij/.vim/stl/stl_list.h	/^  void pop_front() { erase(begin()); }$/;"	f	class:list	access:public	signature:()
list::push_back	/Users/lij/.vim/stl/stl_list.h	/^  void push_back() {insert(end());}$/;"	f	class:list	access:public	signature:()
list::push_back	/Users/lij/.vim/stl/stl_list.h	/^  void push_back(const _Tp& __x) { insert(end(), __x); }$/;"	f	class:list	access:public	signature:(const _Tp& __x)
list::push_front	/Users/lij/.vim/stl/stl_list.h	/^  void push_front() {insert(begin());}$/;"	f	class:list	access:public	signature:()
list::push_front	/Users/lij/.vim/stl/stl_list.h	/^  void push_front(const _Tp& __x) { insert(begin(), __x); }$/;"	f	class:list	access:public	signature:(const _Tp& __x)
list::rbegin	/Users/lij/.vim/stl/stl_list.h	/^  const_reverse_iterator rbegin() const $/;"	f	class:list	access:public	signature:() const
list::rbegin	/Users/lij/.vim/stl/stl_list.h	/^  reverse_iterator rbegin() $/;"	f	class:list	access:public	signature:()
list::reference	/Users/lij/.vim/stl/stl_list.h	/^  typedef value_type& reference;$/;"	t	class:list	access:public
list::remove	/Users/lij/.vim/stl/stl_list.h	/^  void remove(const _Tp& __value);$/;"	p	class:list	access:public	signature:(const _Tp& __value)
list::remove	/Users/lij/.vim/stl/stl_list.h	/^void list<_Tp, _Alloc>::remove(const _Tp& __value)$/;"	f	class:list	signature:(const _Tp& __value)
list::remove_if	/Users/lij/.vim/stl/stl_list.h	/^  template <class _Predicate> void remove_if(_Predicate);$/;"	p	class:list	access:public	signature:(_Predicate)
list::remove_if	/Users/lij/.vim/stl/stl_list.h	/^void list<_Tp, _Alloc>::remove_if(_Predicate __pred)$/;"	f	class:list	signature:(_Predicate __pred)
list::rend	/Users/lij/.vim/stl/stl_list.h	/^  const_reverse_iterator rend() const$/;"	f	class:list	access:public	signature:() const
list::rend	/Users/lij/.vim/stl/stl_list.h	/^  reverse_iterator rend()$/;"	f	class:list	access:public	signature:()
list::resize	/Users/lij/.vim/stl/stl_list.h	/^  void resize(size_type __new_size) { this->resize(__new_size, _Tp()); }$/;"	f	class:list	access:public	signature:(size_type __new_size)
list::resize	/Users/lij/.vim/stl/stl_list.h	/^  void resize(size_type __new_size, const _Tp& __x);$/;"	p	class:list	access:public	signature:(size_type __new_size, const _Tp& __x)
list::resize	/Users/lij/.vim/stl/stl_list.h	/^void list<_Tp, _Alloc>::resize(size_type __new_size, const _Tp& __x)$/;"	f	class:list	signature:(size_type __new_size, const _Tp& __x)
list::reverse	/Users/lij/.vim/stl/stl_list.h	/^  void reverse();$/;"	p	class:list	access:public	signature:()
list::reverse	/Users/lij/.vim/stl/stl_list.h	/^inline void list<_Tp, _Alloc>::reverse() $/;"	f	class:list	signature:()
list::reverse_iterator	/Users/lij/.vim/stl/stl_list.h	/^          reverse_iterator; $/;"	t	class:list	access:public
list::reverse_iterator	/Users/lij/.vim/stl/stl_list.h	/^  typedef reverse_iterator<iterator>       reverse_iterator;$/;"	t	class:list	access:public
list::size	/Users/lij/.vim/stl/stl_list.h	/^  size_type size() const {$/;"	f	class:list	access:public	signature:() const
list::size_type	/Users/lij/.vim/stl/stl_list.h	/^  typedef size_t size_type;$/;"	t	class:list	access:public
list::sort	/Users/lij/.vim/stl/stl_list.h	/^  template <class _StrictWeakOrdering> void sort(_StrictWeakOrdering);$/;"	p	class:list	access:public	signature:(_StrictWeakOrdering)
list::sort	/Users/lij/.vim/stl/stl_list.h	/^  void sort();$/;"	p	class:list	access:public	signature:()
list::sort	/Users/lij/.vim/stl/stl_list.h	/^void list<_Tp, _Alloc>::sort()$/;"	f	class:list	signature:()
list::sort	/Users/lij/.vim/stl/stl_list.h	/^void list<_Tp, _Alloc>::sort(_StrictWeakOrdering __comp)$/;"	f	class:list	signature:(_StrictWeakOrdering __comp)
list::splice	/Users/lij/.vim/stl/stl_list.h	/^  void splice(iterator __position, list& __x) {$/;"	f	class:list	access:public	signature:(iterator __position, list& __x)
list::splice	/Users/lij/.vim/stl/stl_list.h	/^  void splice(iterator __position, list&, iterator __first, iterator __last) {$/;"	f	class:list	access:public	signature:(iterator __position, list&, iterator __first, iterator __last)
list::splice	/Users/lij/.vim/stl/stl_list.h	/^  void splice(iterator __position, list&, iterator __i) {$/;"	f	class:list	access:public	signature:(iterator __position, list&, iterator __i)
list::swap	/Users/lij/.vim/stl/stl_list.h	/^  void swap(list<_Tp, _Alloc>& __x) { __STD::swap(_M_node, __x._M_node); }$/;"	f	class:list	access:public	signature:(list<_Tp, _Alloc>& __x)
list::transfer	/Users/lij/.vim/stl/stl_list.h	/^  void transfer(iterator __position, iterator __first, iterator __last) {$/;"	f	class:list	access:protected	signature:(iterator __position, iterator __first, iterator __last)
list::unique	/Users/lij/.vim/stl/stl_list.h	/^  template <class _BinaryPredicate> void unique(_BinaryPredicate);$/;"	p	class:list	access:public	signature:(_BinaryPredicate)
list::unique	/Users/lij/.vim/stl/stl_list.h	/^  void unique();$/;"	p	class:list	access:public	signature:()
list::unique	/Users/lij/.vim/stl/stl_list.h	/^void list<_Tp, _Alloc>::unique()$/;"	f	class:list	signature:()
list::unique	/Users/lij/.vim/stl/stl_list.h	/^void list<_Tp, _Alloc>::unique(_BinaryPredicate __binary_pred)$/;"	f	class:list	signature:(_BinaryPredicate __binary_pred)
list::value_type	/Users/lij/.vim/stl/stl_list.h	/^  typedef _Tp value_type;$/;"	t	class:list	access:public
list::~list	/Users/lij/.vim/stl/stl_list.h	/^  ~list() { }$/;"	f	class:list	access:public	signature:()
log	/Users/lij/.vim/stl/valarray	/^inline valarray<_Tp> log(const valarray<_Tp>& __x) {$/;"	f	signature:(const valarray<_Tp>& __x)
log10	/Users/lij/.vim/stl/valarray	/^inline valarray<_Tp> log10(const valarray<_Tp>& __x) {$/;"	f	signature:(const valarray<_Tp>& __x)
logic_error	/Users/lij/.vim/stl/stdexcept	/^  logic_error(const string& __s) : __Named_exception(__s) {}$/;"	f	class:logic_error	access:public	signature:(const string& __s)
logic_error	/Users/lij/.vim/stl/stdexcept	/^class logic_error : public __Named_exception {$/;"	c	file:	inherits:__Named_exception
logic_error::logic_error	/Users/lij/.vim/stl/stdexcept	/^  logic_error(const string& __s) : __Named_exception(__s) {}$/;"	f	class:logic_error	access:public	signature:(const string& __s)
logical_and	/Users/lij/.vim/stl/stl_function.h	/^struct logical_and : public binary_function<_Tp,_Tp,bool>$/;"	s	inherits:binary_function
logical_and::operator ()	/Users/lij/.vim/stl/stl_function.h	/^  bool operator()(const _Tp& __x, const _Tp& __y) const { return __x && __y; }$/;"	f	struct:logical_and	access:public	signature:(const _Tp& __x, const _Tp& __y) const
logical_not	/Users/lij/.vim/stl/stl_function.h	/^struct logical_not : public unary_function<_Tp,bool>$/;"	s	inherits:unary_function
logical_not::operator ()	/Users/lij/.vim/stl/stl_function.h	/^  bool operator()(const _Tp& __x) const { return !__x; }$/;"	f	struct:logical_not	access:public	signature:(const _Tp& __x) const
logical_or	/Users/lij/.vim/stl/stl_function.h	/^struct logical_or : public binary_function<_Tp,_Tp,bool>$/;"	s	inherits:binary_function
logical_or::operator ()	/Users/lij/.vim/stl/stl_function.h	/^  bool operator()(const _Tp& __x, const _Tp& __y) const { return __x || __y; }$/;"	f	struct:logical_or	access:public	signature:(const _Tp& __x, const _Tp& __y) const
lower_bound	/Users/lij/.vim/stl/stl_algo.h	/^inline _ForwardIter lower_bound(_ForwardIter __first, _ForwardIter __last,$/;"	f	signature:(_ForwardIter __first, _ForwardIter __last, const _Tp& __val)
lower_bound	/Users/lij/.vim/stl/stl_algo.h	/^inline _ForwardIter lower_bound(_ForwardIter __first, _ForwardIter __last,$/;"	f	signature:(_ForwardIter __first, _ForwardIter __last, const _Tp& __val, _Compare __comp)
lower_bound	/Users/lij/.vim/stl/stl_map.h	/^  const_iterator lower_bound(const key_type& __x) const {$/;"	f	class:map	access:public	signature:(const key_type& __x) const
lower_bound	/Users/lij/.vim/stl/stl_map.h	/^  iterator lower_bound(const key_type& __x) {return _M_t.lower_bound(__x); }$/;"	f	class:map	access:public	signature:(const key_type& __x)
lower_bound	/Users/lij/.vim/stl/stl_multimap.h	/^  const_iterator lower_bound(const key_type& __x) const {$/;"	f	class:multimap	access:public	signature:(const key_type& __x) const
lower_bound	/Users/lij/.vim/stl/stl_multimap.h	/^  iterator lower_bound(const key_type& __x) {return _M_t.lower_bound(__x); }$/;"	f	class:multimap	access:public	signature:(const key_type& __x)
lower_bound	/Users/lij/.vim/stl/stl_multiset.h	/^  iterator lower_bound(const key_type& __x) const {$/;"	f	class:multiset	access:public	signature:(const key_type& __x) const
lower_bound	/Users/lij/.vim/stl/stl_set.h	/^  iterator lower_bound(const key_type& __x) const {$/;"	f	class:set	access:public	signature:(const key_type& __x) const
lower_bound	/Users/lij/.vim/stl/stl_tree.h	/^  ::lower_bound(const _Key& __k) const$/;"	f	class:_Rb_tree	signature:(const _Key& __k) const
lower_bound	/Users/lij/.vim/stl/stl_tree.h	/^  ::lower_bound(const _Key& __k)$/;"	f	class:_Rb_tree	signature:(const _Key& __k)
lower_bound	/Users/lij/.vim/stl/stl_tree.h	/^  const_iterator lower_bound(const key_type& __x) const;$/;"	p	class:_Rb_tree	access:public	signature:(const key_type& __x) const
lower_bound	/Users/lij/.vim/stl/stl_tree.h	/^  iterator lower_bound(const key_type& __x);$/;"	p	class:_Rb_tree	access:public	signature:(const key_type& __x)
lt	/Users/lij/.vim/stl/char_traits.h	/^  static bool lt(const _CharT& __c1, const _CharT& __c2) $/;"	f	class:__char_traits_base	access:public	signature:(const _CharT& __c1, const _CharT& __c2)
make_heap	/Users/lij/.vim/stl/stl_heap.h	/^make_heap(_RandomAccessIterator __first, $/;"	f	signature:(_RandomAccessIterator __first, _RandomAccessIterator __last, _Compare __comp)
make_heap	/Users/lij/.vim/stl/stl_heap.h	/^make_heap(_RandomAccessIterator __first, _RandomAccessIterator __last)$/;"	f	signature:(_RandomAccessIterator __first, _RandomAccessIterator __last)
make_pair	/Users/lij/.vim/stl/stl_pair.h	/^inline pair<_T1, _T2> make_pair(const _T1& __x, const _T2& __y)$/;"	f	signature:(const _T1& __x, const _T2& __y)
malloc_alloc	/Users/lij/.vim/stl/stl_alloc.h	/^typedef __malloc_alloc_template<0> malloc_alloc;$/;"	t
map	/Users/lij/.vim/stl/stl_map.h	/^  explicit map(const _Compare& __comp,$/;"	f	class:map	access:public	signature:(const _Compare& __comp, const allocator_type& __a = allocator_type())
map	/Users/lij/.vim/stl/stl_map.h	/^  map() : _M_t(_Compare(), allocator_type()) {}$/;"	f	class:map	access:public	signature:()
map	/Users/lij/.vim/stl/stl_map.h	/^  map(_InputIterator __first, _InputIterator __last)$/;"	f	class:map	access:public	signature:(_InputIterator __first, _InputIterator __last)
map	/Users/lij/.vim/stl/stl_map.h	/^  map(_InputIterator __first, _InputIterator __last, const _Compare& __comp,$/;"	f	class:map	access:public	signature:(_InputIterator __first, _InputIterator __last, const _Compare& __comp, const allocator_type& __a = allocator_type())
map	/Users/lij/.vim/stl/stl_map.h	/^  map(const map<_Key,_Tp,_Compare,_Alloc>& __x) : _M_t(__x._M_t) {}$/;"	f	class:map	access:public	signature:(const map<_Key,_Tp,_Compare,_Alloc>& __x)
map	/Users/lij/.vim/stl/stl_map.h	/^  map(const value_type* __first, const value_type* __last)$/;"	f	class:map	access:public	signature:(const value_type* __first, const value_type* __last)
map	/Users/lij/.vim/stl/stl_map.h	/^  map(const value_type* __first,$/;"	f	class:map	access:public	signature:(const value_type* __first, const value_type* __last, const _Compare& __comp, const allocator_type& __a = allocator_type())
map	/Users/lij/.vim/stl/stl_map.h	/^  map(const_iterator __first, const_iterator __last)$/;"	f	class:map	access:public	signature:(const_iterator __first, const_iterator __last)
map	/Users/lij/.vim/stl/stl_map.h	/^  map(const_iterator __first, const_iterator __last, const _Compare& __comp,$/;"	f	class:map	access:public	signature:(const_iterator __first, const_iterator __last, const _Compare& __comp, const allocator_type& __a = allocator_type())
map	/Users/lij/.vim/stl/stl_map.h	/^class map {$/;"	c
map::_M_t	/Users/lij/.vim/stl/stl_map.h	/^  _Rep_type _M_t;  \/\/ red-black tree representing map$/;"	m	class:map	access:private
map::_Rep_type	/Users/lij/.vim/stl/stl_map.h	/^                   _Select1st<value_type>, key_compare, _Alloc> _Rep_type;$/;"	t	class:map	access:private
map::__STL_CLASS_BINARY_FUNCTION_CHECK	/Users/lij/.vim/stl/stl_map.h	/^  __STL_CLASS_BINARY_FUNCTION_CHECK(_Compare, bool, _Key, _Key);$/;"	p	class:map	access:public	signature:(_Compare, bool, _Key, _Key)
map::__STL_CLASS_REQUIRES	/Users/lij/.vim/stl/stl_map.h	/^  __STL_CLASS_REQUIRES(_Tp, _Assignable);$/;"	p	class:map	access:public	signature:(_Tp, _Assignable)
map::__STL_NULL_TMPL_ARGS	/Users/lij/.vim/stl/stl_map.h	/^  operator< __STL_NULL_TMPL_ARGS (const map&, const map&);$/;"	p	class:map	access:friend	signature:(const map&, const map&)
map::__STL_NULL_TMPL_ARGS	/Users/lij/.vim/stl/stl_map.h	/^  operator== __STL_NULL_TMPL_ARGS (const map&, const map&);$/;"	p	class:map	access:friend	signature:(const map&, const map&)
map::allocator_type	/Users/lij/.vim/stl/stl_map.h	/^  typedef typename _Rep_type::allocator_type allocator_type;$/;"	t	class:map	access:public
map::begin	/Users/lij/.vim/stl/stl_map.h	/^  const_iterator begin() const { return _M_t.begin(); }$/;"	f	class:map	access:public	signature:() const
map::begin	/Users/lij/.vim/stl/stl_map.h	/^  iterator begin() { return _M_t.begin(); }$/;"	f	class:map	access:public	signature:()
map::clear	/Users/lij/.vim/stl/stl_map.h	/^  void clear() { _M_t.clear(); }$/;"	f	class:map	access:public	signature:()
map::const_iterator	/Users/lij/.vim/stl/stl_map.h	/^  typedef typename _Rep_type::const_iterator const_iterator;$/;"	t	class:map	access:public
map::const_pointer	/Users/lij/.vim/stl/stl_map.h	/^  typedef typename _Rep_type::const_pointer const_pointer;$/;"	t	class:map	access:public
map::const_reference	/Users/lij/.vim/stl/stl_map.h	/^  typedef typename _Rep_type::const_reference const_reference;$/;"	t	class:map	access:public
map::const_reverse_iterator	/Users/lij/.vim/stl/stl_map.h	/^  typedef typename _Rep_type::const_reverse_iterator const_reverse_iterator;$/;"	t	class:map	access:public
map::count	/Users/lij/.vim/stl/stl_map.h	/^  size_type count(const key_type& __x) const {$/;"	f	class:map	access:public	signature:(const key_type& __x) const
map::data_type	/Users/lij/.vim/stl/stl_map.h	/^  typedef _Tp                   data_type;$/;"	t	class:map	access:public
map::difference_type	/Users/lij/.vim/stl/stl_map.h	/^  typedef typename _Rep_type::difference_type difference_type;$/;"	t	class:map	access:public
map::empty	/Users/lij/.vim/stl/stl_map.h	/^  bool empty() const { return _M_t.empty(); }$/;"	f	class:map	access:public	signature:() const
map::end	/Users/lij/.vim/stl/stl_map.h	/^  const_iterator end() const { return _M_t.end(); }$/;"	f	class:map	access:public	signature:() const
map::end	/Users/lij/.vim/stl/stl_map.h	/^  iterator end() { return _M_t.end(); }$/;"	f	class:map	access:public	signature:()
map::equal_range	/Users/lij/.vim/stl/stl_map.h	/^  pair<const_iterator,const_iterator> equal_range(const key_type& __x) const {$/;"	f	class:map	access:public	signature:(const key_type& __x) const
map::equal_range	/Users/lij/.vim/stl/stl_map.h	/^  pair<iterator,iterator> equal_range(const key_type& __x) {$/;"	f	class:map	access:public	signature:(const key_type& __x)
map::erase	/Users/lij/.vim/stl/stl_map.h	/^  size_type erase(const key_type& __x) { return _M_t.erase(__x); }$/;"	f	class:map	access:public	signature:(const key_type& __x)
map::erase	/Users/lij/.vim/stl/stl_map.h	/^  void erase(iterator __first, iterator __last)$/;"	f	class:map	access:public	signature:(iterator __first, iterator __last)
map::erase	/Users/lij/.vim/stl/stl_map.h	/^  void erase(iterator __position) { _M_t.erase(__position); }$/;"	f	class:map	access:public	signature:(iterator __position)
map::find	/Users/lij/.vim/stl/stl_map.h	/^  const_iterator find(const key_type& __x) const { return _M_t.find(__x); }$/;"	f	class:map	access:public	signature:(const key_type& __x) const
map::find	/Users/lij/.vim/stl/stl_map.h	/^  iterator find(const key_type& __x) { return _M_t.find(__x); }$/;"	f	class:map	access:public	signature:(const key_type& __x)
map::get_allocator	/Users/lij/.vim/stl/stl_map.h	/^  allocator_type get_allocator() const { return _M_t.get_allocator(); }$/;"	f	class:map	access:public	signature:() const
map::insert	/Users/lij/.vim/stl/stl_map.h	/^  iterator insert(iterator position, const value_type& __x)$/;"	f	class:map	access:public	signature:(iterator position, const value_type& __x)
map::insert	/Users/lij/.vim/stl/stl_map.h	/^  pair<iterator,bool> insert(const value_type& __x) $/;"	f	class:map	access:public	signature:(const value_type& __x)
map::insert	/Users/lij/.vim/stl/stl_map.h	/^  void insert(_InputIterator __first, _InputIterator __last) {$/;"	f	class:map	access:public	signature:(_InputIterator __first, _InputIterator __last)
map::insert	/Users/lij/.vim/stl/stl_map.h	/^  void insert(const value_type* __first, const value_type* __last) {$/;"	f	class:map	access:public	signature:(const value_type* __first, const value_type* __last)
map::insert	/Users/lij/.vim/stl/stl_map.h	/^  void insert(const_iterator __first, const_iterator __last) {$/;"	f	class:map	access:public	signature:(const_iterator __first, const_iterator __last)
map::iterator	/Users/lij/.vim/stl/stl_map.h	/^  typedef typename _Rep_type::iterator iterator;$/;"	t	class:map	access:public
map::key_comp	/Users/lij/.vim/stl/stl_map.h	/^  key_compare key_comp() const { return _M_t.key_comp(); }$/;"	f	class:map	access:public	signature:() const
map::key_compare	/Users/lij/.vim/stl/stl_map.h	/^  typedef _Compare              key_compare;$/;"	t	class:map	access:public
map::key_type	/Users/lij/.vim/stl/stl_map.h	/^  typedef _Key                  key_type;$/;"	t	class:map	access:public
map::lower_bound	/Users/lij/.vim/stl/stl_map.h	/^  const_iterator lower_bound(const key_type& __x) const {$/;"	f	class:map	access:public	signature:(const key_type& __x) const
map::lower_bound	/Users/lij/.vim/stl/stl_map.h	/^  iterator lower_bound(const key_type& __x) {return _M_t.lower_bound(__x); }$/;"	f	class:map	access:public	signature:(const key_type& __x)
map::map	/Users/lij/.vim/stl/stl_map.h	/^  explicit map(const _Compare& __comp,$/;"	f	class:map	access:public	signature:(const _Compare& __comp, const allocator_type& __a = allocator_type())
map::map	/Users/lij/.vim/stl/stl_map.h	/^  map() : _M_t(_Compare(), allocator_type()) {}$/;"	f	class:map	access:public	signature:()
map::map	/Users/lij/.vim/stl/stl_map.h	/^  map(_InputIterator __first, _InputIterator __last)$/;"	f	class:map	access:public	signature:(_InputIterator __first, _InputIterator __last)
map::map	/Users/lij/.vim/stl/stl_map.h	/^  map(_InputIterator __first, _InputIterator __last, const _Compare& __comp,$/;"	f	class:map	access:public	signature:(_InputIterator __first, _InputIterator __last, const _Compare& __comp, const allocator_type& __a = allocator_type())
map::map	/Users/lij/.vim/stl/stl_map.h	/^  map(const map<_Key,_Tp,_Compare,_Alloc>& __x) : _M_t(__x._M_t) {}$/;"	f	class:map	access:public	signature:(const map<_Key,_Tp,_Compare,_Alloc>& __x)
map::map	/Users/lij/.vim/stl/stl_map.h	/^  map(const value_type* __first, const value_type* __last)$/;"	f	class:map	access:public	signature:(const value_type* __first, const value_type* __last)
map::map	/Users/lij/.vim/stl/stl_map.h	/^  map(const value_type* __first,$/;"	f	class:map	access:public	signature:(const value_type* __first, const value_type* __last, const _Compare& __comp, const allocator_type& __a = allocator_type())
map::map	/Users/lij/.vim/stl/stl_map.h	/^  map(const_iterator __first, const_iterator __last)$/;"	f	class:map	access:public	signature:(const_iterator __first, const_iterator __last)
map::map	/Users/lij/.vim/stl/stl_map.h	/^  map(const_iterator __first, const_iterator __last, const _Compare& __comp,$/;"	f	class:map	access:public	signature:(const_iterator __first, const_iterator __last, const _Compare& __comp, const allocator_type& __a = allocator_type())
map::mapped_type	/Users/lij/.vim/stl/stl_map.h	/^  typedef _Tp                   mapped_type;$/;"	t	class:map	access:public
map::max_size	/Users/lij/.vim/stl/stl_map.h	/^  size_type max_size() const { return _M_t.max_size(); }$/;"	f	class:map	access:public	signature:() const
map::operator <	/Users/lij/.vim/stl/stl_map.h	/^  friend bool operator< (const map<_K1, _T1, _C1, _A1>&,$/;"	p	class:map	access:friend	signature:(const map<_K1, _T1, _C1, _A1>&, const map<_K1, _T1, _C1, _A1>&)
map::operator =	/Users/lij/.vim/stl/stl_map.h	/^  operator=(const map<_Key, _Tp, _Compare, _Alloc>& __x)$/;"	f	class:map	access:public	signature:(const map<_Key, _Tp, _Compare, _Alloc>& __x)
map::operator ==	/Users/lij/.vim/stl/stl_map.h	/^  friend bool operator== (const map<_K1, _T1, _C1, _A1>&,$/;"	p	class:map	access:friend	signature:(const map<_K1, _T1, _C1, _A1>&, const map<_K1, _T1, _C1, _A1>&)
map::operator []	/Users/lij/.vim/stl/stl_map.h	/^  _Tp& operator[](const key_type& __k) {$/;"	f	class:map	access:public	signature:(const key_type& __k)
map::pointer	/Users/lij/.vim/stl/stl_map.h	/^  typedef typename _Rep_type::pointer pointer;$/;"	t	class:map	access:public
map::rbegin	/Users/lij/.vim/stl/stl_map.h	/^  const_reverse_iterator rbegin() const { return _M_t.rbegin(); }$/;"	f	class:map	access:public	signature:() const
map::rbegin	/Users/lij/.vim/stl/stl_map.h	/^  reverse_iterator rbegin() { return _M_t.rbegin(); }$/;"	f	class:map	access:public	signature:()
map::reference	/Users/lij/.vim/stl/stl_map.h	/^  typedef typename _Rep_type::reference reference;$/;"	t	class:map	access:public
map::rend	/Users/lij/.vim/stl/stl_map.h	/^  const_reverse_iterator rend() const { return _M_t.rend(); }$/;"	f	class:map	access:public	signature:() const
map::rend	/Users/lij/.vim/stl/stl_map.h	/^  reverse_iterator rend() { return _M_t.rend(); }$/;"	f	class:map	access:public	signature:()
map::reverse_iterator	/Users/lij/.vim/stl/stl_map.h	/^  typedef typename _Rep_type::reverse_iterator reverse_iterator;$/;"	t	class:map	access:public
map::size	/Users/lij/.vim/stl/stl_map.h	/^  size_type size() const { return _M_t.size(); }$/;"	f	class:map	access:public	signature:() const
map::size_type	/Users/lij/.vim/stl/stl_map.h	/^  typedef typename _Rep_type::size_type size_type;$/;"	t	class:map	access:public
map::swap	/Users/lij/.vim/stl/stl_map.h	/^  void swap(map<_Key,_Tp,_Compare,_Alloc>& __x) { _M_t.swap(__x._M_t); }$/;"	f	class:map	access:public	signature:(map<_Key,_Tp,_Compare,_Alloc>& __x)
map::upper_bound	/Users/lij/.vim/stl/stl_map.h	/^  const_iterator upper_bound(const key_type& __x) const {$/;"	f	class:map	access:public	signature:(const key_type& __x) const
map::upper_bound	/Users/lij/.vim/stl/stl_map.h	/^  iterator upper_bound(const key_type& __x) {return _M_t.upper_bound(__x); }$/;"	f	class:map	access:public	signature:(const key_type& __x)
map::value_comp	/Users/lij/.vim/stl/stl_map.h	/^  value_compare value_comp() const { return value_compare(_M_t.key_comp()); }$/;"	f	class:map	access:public	signature:() const
map::value_compare	/Users/lij/.vim/stl/stl_map.h	/^  class value_compare$/;"	c	class:map	inherits:binary_function	access:public
map::value_compare::comp	/Users/lij/.vim/stl/stl_map.h	/^    _Compare comp;$/;"	m	class:map::value_compare	access:protected
map::value_compare::operator ()	/Users/lij/.vim/stl/stl_map.h	/^    bool operator()(const value_type& __x, const value_type& __y) const {$/;"	f	class:map::value_compare	access:public	signature:(const value_type& __x, const value_type& __y) const
map::value_compare::value_compare	/Users/lij/.vim/stl/stl_map.h	/^    value_compare(_Compare __c) : comp(__c) {}$/;"	f	class:map::value_compare	access:protected	signature:(_Compare __c)
map::value_type	/Users/lij/.vim/stl/stl_map.h	/^  typedef pair<const _Key, _Tp> value_type;$/;"	t	class:map	access:public
mapped_type	/Users/lij/.vim/stl/stl_hash_map.h	/^  typedef _Tp mapped_type;$/;"	t	class:hash_map	access:public
mapped_type	/Users/lij/.vim/stl/stl_hash_map.h	/^  typedef _Tp mapped_type;$/;"	t	class:hash_multimap	access:public
mapped_type	/Users/lij/.vim/stl/stl_map.h	/^  typedef _Tp                   mapped_type;$/;"	t	class:map	access:public
mapped_type	/Users/lij/.vim/stl/stl_multimap.h	/^  typedef _Tp                   mapped_type;$/;"	t	class:multimap	access:public
mask_array	/Users/lij/.vim/stl/valarray	/^  mask_array(const valarray<bool>& __mask, valarray<_Tp>& __array)$/;"	f	class:mask_array	file:	access:private	signature:(const valarray<bool>& __mask, valarray<_Tp>& __array)
mask_array	/Users/lij/.vim/stl/valarray	/^class mask_array {$/;"	c	file:
mask_array::_M_array	/Users/lij/.vim/stl/valarray	/^  valarray<_Tp>& _M_array;$/;"	m	class:mask_array	file:	access:private
mask_array::_M_mask	/Users/lij/.vim/stl/valarray	/^  valarray<bool> _M_mask;$/;"	m	class:mask_array	file:	access:private
mask_array::_M_num_true	/Users/lij/.vim/stl/valarray	/^  size_t _M_num_true() const {$/;"	f	class:mask_array	access:public	signature:() const
mask_array::mask_array	/Users/lij/.vim/stl/valarray	/^  mask_array(const valarray<bool>& __mask, valarray<_Tp>& __array)$/;"	f	class:mask_array	file:	access:private	signature:(const valarray<bool>& __mask, valarray<_Tp>& __array)
mask_array::operator %=	/Users/lij/.vim/stl/valarray	/^  void operator%=(const valarray<value_type>& __x) const {$/;"	f	class:mask_array	access:public	signature:(const valarray<value_type>& __x) const
mask_array::operator &=	/Users/lij/.vim/stl/valarray	/^  void operator&=(const valarray<value_type>& __x) const {$/;"	f	class:mask_array	access:public	signature:(const valarray<value_type>& __x) const
mask_array::operator *=	/Users/lij/.vim/stl/valarray	/^  void operator*=(const valarray<value_type>& __x) const {$/;"	f	class:mask_array	access:public	signature:(const valarray<value_type>& __x) const
mask_array::operator +=	/Users/lij/.vim/stl/valarray	/^  void operator+=(const valarray<value_type>& __x) const {$/;"	f	class:mask_array	access:public	signature:(const valarray<value_type>& __x) const
mask_array::operator -=	/Users/lij/.vim/stl/valarray	/^  void operator-=(const valarray<value_type>& __x) const {$/;"	f	class:mask_array	access:public	signature:(const valarray<value_type>& __x) const
mask_array::operator /=	/Users/lij/.vim/stl/valarray	/^  void operator\/=(const valarray<value_type>& __x) const {$/;"	f	class:mask_array	access:public	signature:(const valarray<value_type>& __x) const
mask_array::operator <<=	/Users/lij/.vim/stl/valarray	/^  void operator<<=(const valarray<value_type>& __x) const {$/;"	f	class:mask_array	access:public	signature:(const valarray<value_type>& __x) const
mask_array::operator =	/Users/lij/.vim/stl/valarray	/^  void operator=(const mask_array&);$/;"	p	class:mask_array	file:	access:private	signature:(const mask_array&)
mask_array::operator =	/Users/lij/.vim/stl/valarray	/^  void operator=(const valarray<value_type>& __x) const {$/;"	f	class:mask_array	access:public	signature:(const valarray<value_type>& __x) const
mask_array::operator =	/Users/lij/.vim/stl/valarray	/^  void operator=(const value_type& __c) const {$/;"	f	class:mask_array	access:public	signature:(const value_type& __c) const
mask_array::operator >>=	/Users/lij/.vim/stl/valarray	/^  void operator>>=(const valarray<value_type>& __x) const {$/;"	f	class:mask_array	access:public	signature:(const valarray<value_type>& __x) const
mask_array::operator ^=	/Users/lij/.vim/stl/valarray	/^  void operator^=(const valarray<value_type>& __x) const {$/;"	f	class:mask_array	access:public	signature:(const valarray<value_type>& __x) const
mask_array::operator |=	/Users/lij/.vim/stl/valarray	/^  void operator|=(const valarray<value_type>& __x) const {$/;"	f	class:mask_array	access:public	signature:(const valarray<value_type>& __x) const
mask_array::value_type	/Users/lij/.vim/stl/valarray	/^  typedef _Tp value_type;$/;"	t	class:mask_array	file:	access:public
mask_array::~mask_array	/Users/lij/.vim/stl/valarray	/^  ~mask_array() {}$/;"	f	class:mask_array	access:public	signature:()
max	/Users/lij/.vim/stl/stl_algobase.h	/^#undef max$/;"	d
max	/Users/lij/.vim/stl/stl_algobase.h	/^inline const _Tp& max(const _Tp& __a, const _Tp& __b) {$/;"	f	signature:(const _Tp& __a, const _Tp& __b)
max	/Users/lij/.vim/stl/stl_algobase.h	/^inline const _Tp& max(const _Tp& __a, const _Tp& __b, _Compare __comp) {$/;"	f	signature:(const _Tp& __a, const _Tp& __b, _Compare __comp)
max	/Users/lij/.vim/stl/stl_config.h	/^#     undef max$/;"	d
max	/Users/lij/.vim/stl/valarray	/^  value_type max() const {$/;"	f	class:valarray	access:public	signature:() const
max_bucket_count	/Users/lij/.vim/stl/stl_hash_map.h	/^  size_type max_bucket_count() const { return _M_ht.max_bucket_count(); }$/;"	f	class:hash_map	access:public	signature:() const
max_bucket_count	/Users/lij/.vim/stl/stl_hash_map.h	/^  size_type max_bucket_count() const { return _M_ht.max_bucket_count(); }$/;"	f	class:hash_multimap	access:public	signature:() const
max_bucket_count	/Users/lij/.vim/stl/stl_hash_set.h	/^  size_type max_bucket_count() const { return _M_ht.max_bucket_count(); }$/;"	f	class:hash_multiset	access:public	signature:() const
max_bucket_count	/Users/lij/.vim/stl/stl_hash_set.h	/^  size_type max_bucket_count() const { return _M_ht.max_bucket_count(); }$/;"	f	class:hash_set	access:public	signature:() const
max_bucket_count	/Users/lij/.vim/stl/stl_hashtable.h	/^  size_type max_bucket_count() const$/;"	f	class:hashtable	access:public	signature:() const
max_element	/Users/lij/.vim/stl/stl_algo.h	/^_ForwardIter max_element(_ForwardIter __first, _ForwardIter __last) {$/;"	f	signature:(_ForwardIter __first, _ForwardIter __last)
max_element	/Users/lij/.vim/stl/stl_algo.h	/^_ForwardIter max_element(_ForwardIter __first, _ForwardIter __last,$/;"	f	signature:(_ForwardIter __first, _ForwardIter __last, _Compare __comp)
max_size	/Users/lij/.vim/stl/defalloc.h	/^    size_type max_size() const { $/;"	f	class:allocator	access:public	signature:() const
max_size	/Users/lij/.vim/stl/stl_bvector.h	/^  size_type max_size() const { return size_type(-1); }$/;"	f	class:__BVECTOR	access:public	signature:() const
max_size	/Users/lij/.vim/stl/stl_deque.h	/^  size_type max_size() const { return size_type(-1); }$/;"	f	class:deque	access:public	signature:() const
max_size	/Users/lij/.vim/stl/stl_hash_map.h	/^  size_type max_size() const { return _M_ht.max_size(); }$/;"	f	class:hash_map	access:public	signature:() const
max_size	/Users/lij/.vim/stl/stl_hash_map.h	/^  size_type max_size() const { return _M_ht.max_size(); }$/;"	f	class:hash_multimap	access:public	signature:() const
max_size	/Users/lij/.vim/stl/stl_hash_set.h	/^  size_type max_size() const { return _M_ht.max_size(); }$/;"	f	class:hash_multiset	access:public	signature:() const
max_size	/Users/lij/.vim/stl/stl_hash_set.h	/^  size_type max_size() const { return _M_ht.max_size(); }$/;"	f	class:hash_set	access:public	signature:() const
max_size	/Users/lij/.vim/stl/stl_hashtable.h	/^  size_type max_size() const { return size_type(-1); }$/;"	f	class:hashtable	access:public	signature:() const
max_size	/Users/lij/.vim/stl/stl_list.h	/^  size_type max_size() const { return size_type(-1); }$/;"	f	class:list	access:public	signature:() const
max_size	/Users/lij/.vim/stl/stl_map.h	/^  size_type max_size() const { return _M_t.max_size(); }$/;"	f	class:map	access:public	signature:() const
max_size	/Users/lij/.vim/stl/stl_multimap.h	/^  size_type max_size() const { return _M_t.max_size(); }$/;"	f	class:multimap	access:public	signature:() const
max_size	/Users/lij/.vim/stl/stl_multiset.h	/^  size_type max_size() const { return _M_t.max_size(); }$/;"	f	class:multiset	access:public	signature:() const
max_size	/Users/lij/.vim/stl/stl_rope.h	/^        size_type max_size() const {$/;"	f	class:rope	access:public	signature:() const
max_size	/Users/lij/.vim/stl/stl_set.h	/^  size_type max_size() const { return _M_t.max_size(); }$/;"	f	class:set	access:public	signature:() const
max_size	/Users/lij/.vim/stl/stl_slist.h	/^  size_type max_size() const { return size_type(-1); }$/;"	f	class:slist	access:public	signature:() const
max_size	/Users/lij/.vim/stl/stl_tree.h	/^  size_type max_size() const { return size_type(-1); }$/;"	f	class:_Rb_tree	access:public	signature:() const
max_size	/Users/lij/.vim/stl/stl_vector.h	/^  size_type max_size() const$/;"	f	class:vector	access:public	signature:() const
max_size	/Users/lij/.vim/stl/string	/^  size_t max_size() const { return (size_t(-1) \/ sizeof(_Tp)) - 1; }$/;"	f	class:_String_base	access:protected	signature:() const
max_size	/Users/lij/.vim/stl/string	/^  size_t max_size() const { return _Base::max_size(); }$/;"	f	class:basic_string	access:public	signature:() const
mem_fun1_ref_t	/Users/lij/.vim/stl/stl_function.h	/^  explicit mem_fun1_ref_t(void (_Tp::*__pf)(_Arg)) : _M_f(__pf) {}$/;"	f	class:mem_fun1_ref_t	access:public	signature:(void (_Tp::*__pf)(_Arg))
mem_fun1_ref_t	/Users/lij/.vim/stl/stl_function.h	/^class mem_fun1_ref_t : public binary_function<_Tp,_Arg,_Ret> {$/;"	c	inherits:binary_function
mem_fun1_ref_t	/Users/lij/.vim/stl/stl_function.h	/^class mem_fun1_ref_t<void, _Tp, _Arg>$/;"	c	inherits:binary_function
mem_fun1_ref_t::_M_f	/Users/lij/.vim/stl/stl_function.h	/^  _Ret (_Tp::*_M_f)(_Arg);$/;"	m	class:mem_fun1_ref_t	access:private
mem_fun1_ref_t::_M_f	/Users/lij/.vim/stl/stl_function.h	/^  void (_Tp::*_M_f)(_Arg);$/;"	m	class:mem_fun1_ref_t	access:private
mem_fun1_ref_t::_Ret	/Users/lij/.vim/stl/stl_function.h	/^  explicit mem_fun1_ref_t(_Ret (_Tp::*__pf)(_Arg)) : _M_f(__pf) {}$/;"	f	class:mem_fun1_ref_t	access:public	signature:(_Tp::*__pf)
mem_fun1_ref_t::mem_fun1_ref_t	/Users/lij/.vim/stl/stl_function.h	/^  explicit mem_fun1_ref_t(void (_Tp::*__pf)(_Arg)) : _M_f(__pf) {}$/;"	f	class:mem_fun1_ref_t	access:public	signature:(void (_Tp::*__pf)(_Arg))
mem_fun1_ref_t::operator ()	/Users/lij/.vim/stl/stl_function.h	/^  _Ret operator()(_Tp& __r, _Arg __x) const { return (__r.*_M_f)(__x); }$/;"	f	class:mem_fun1_ref_t	access:public	signature:(_Tp& __r, _Arg __x) const
mem_fun1_ref_t::operator ()	/Users/lij/.vim/stl/stl_function.h	/^  void operator()(_Tp& __r, _Arg __x) const { (__r.*_M_f)(__x); }$/;"	f	class:mem_fun1_ref_t	access:public	signature:(_Tp& __r, _Arg __x) const
mem_fun1_t	/Users/lij/.vim/stl/stl_function.h	/^  explicit mem_fun1_t(void (_Tp::*__pf)(_Arg)) : _M_f(__pf) {}$/;"	f	class:mem_fun1_t	access:public	signature:(void (_Tp::*__pf)(_Arg))
mem_fun1_t	/Users/lij/.vim/stl/stl_function.h	/^class mem_fun1_t : public binary_function<_Tp*,_Arg,_Ret> {$/;"	c	inherits:binary_function
mem_fun1_t	/Users/lij/.vim/stl/stl_function.h	/^class mem_fun1_t<void, _Tp, _Arg> : public binary_function<_Tp*,_Arg,void> {$/;"	c	inherits:binary_function
mem_fun1_t::_M_f	/Users/lij/.vim/stl/stl_function.h	/^  _Ret (_Tp::*_M_f)(_Arg);$/;"	m	class:mem_fun1_t	access:private
mem_fun1_t::_M_f	/Users/lij/.vim/stl/stl_function.h	/^  void (_Tp::*_M_f)(_Arg);$/;"	m	class:mem_fun1_t	access:private
mem_fun1_t::_Ret	/Users/lij/.vim/stl/stl_function.h	/^  explicit mem_fun1_t(_Ret (_Tp::*__pf)(_Arg)) : _M_f(__pf) {}$/;"	f	class:mem_fun1_t	access:public	signature:(_Tp::*__pf)
mem_fun1_t::mem_fun1_t	/Users/lij/.vim/stl/stl_function.h	/^  explicit mem_fun1_t(void (_Tp::*__pf)(_Arg)) : _M_f(__pf) {}$/;"	f	class:mem_fun1_t	access:public	signature:(void (_Tp::*__pf)(_Arg))
mem_fun1_t::operator ()	/Users/lij/.vim/stl/stl_function.h	/^  _Ret operator()(_Tp* __p, _Arg __x) const { return (__p->*_M_f)(__x); }$/;"	f	class:mem_fun1_t	access:public	signature:(_Tp* __p, _Arg __x) const
mem_fun1_t::operator ()	/Users/lij/.vim/stl/stl_function.h	/^  void operator()(_Tp* __p, _Arg __x) const { (__p->*_M_f)(__x); }$/;"	f	class:mem_fun1_t	access:public	signature:(_Tp* __p, _Arg __x) const
mem_fun_ref_t	/Users/lij/.vim/stl/stl_function.h	/^  explicit mem_fun_ref_t(void (_Tp::*__pf)()) : _M_f(__pf) {}$/;"	f	class:mem_fun_ref_t	access:public	signature:(void (_Tp::*__pf)())
mem_fun_ref_t	/Users/lij/.vim/stl/stl_function.h	/^class mem_fun_ref_t : public unary_function<_Tp,_Ret> {$/;"	c	inherits:unary_function
mem_fun_ref_t	/Users/lij/.vim/stl/stl_function.h	/^class mem_fun_ref_t<void, _Tp> : public unary_function<_Tp,void> {$/;"	c	inherits:unary_function
mem_fun_ref_t::_M_f	/Users/lij/.vim/stl/stl_function.h	/^  _Ret (_Tp::*_M_f)();$/;"	m	class:mem_fun_ref_t	access:private
mem_fun_ref_t::_M_f	/Users/lij/.vim/stl/stl_function.h	/^  void (_Tp::*_M_f)();$/;"	m	class:mem_fun_ref_t	access:private
mem_fun_ref_t::_Ret	/Users/lij/.vim/stl/stl_function.h	/^  explicit mem_fun_ref_t(_Ret (_Tp::*__pf)()) : _M_f(__pf) {}$/;"	f	class:mem_fun_ref_t	access:public	signature:(_Tp::*__pf)
mem_fun_ref_t::mem_fun_ref_t	/Users/lij/.vim/stl/stl_function.h	/^  explicit mem_fun_ref_t(void (_Tp::*__pf)()) : _M_f(__pf) {}$/;"	f	class:mem_fun_ref_t	access:public	signature:(void (_Tp::*__pf)())
mem_fun_ref_t::operator ()	/Users/lij/.vim/stl/stl_function.h	/^  _Ret operator()(_Tp& __r) const { return (__r.*_M_f)(); }$/;"	f	class:mem_fun_ref_t	access:public	signature:(_Tp& __r) const
mem_fun_ref_t::operator ()	/Users/lij/.vim/stl/stl_function.h	/^  void operator()(_Tp& __r) const { (__r.*_M_f)(); }$/;"	f	class:mem_fun_ref_t	access:public	signature:(_Tp& __r) const
mem_fun_t	/Users/lij/.vim/stl/stl_function.h	/^  explicit mem_fun_t(void (_Tp::*__pf)()) : _M_f(__pf) {}$/;"	f	class:mem_fun_t	access:public	signature:(void (_Tp::*__pf)())
mem_fun_t	/Users/lij/.vim/stl/stl_function.h	/^class mem_fun_t : public unary_function<_Tp*,_Ret> {$/;"	c	inherits:unary_function
mem_fun_t	/Users/lij/.vim/stl/stl_function.h	/^class mem_fun_t<void, _Tp> : public unary_function<_Tp*,void> {$/;"	c	inherits:unary_function
mem_fun_t::_M_f	/Users/lij/.vim/stl/stl_function.h	/^  _Ret (_Tp::*_M_f)();$/;"	m	class:mem_fun_t	access:private
mem_fun_t::_M_f	/Users/lij/.vim/stl/stl_function.h	/^  void (_Tp::*_M_f)();$/;"	m	class:mem_fun_t	access:private
mem_fun_t::_Ret	/Users/lij/.vim/stl/stl_function.h	/^  explicit mem_fun_t(_Ret (_Tp::*__pf)()) : _M_f(__pf) {}$/;"	f	class:mem_fun_t	access:public	signature:(_Tp::*__pf)
mem_fun_t::mem_fun_t	/Users/lij/.vim/stl/stl_function.h	/^  explicit mem_fun_t(void (_Tp::*__pf)()) : _M_f(__pf) {}$/;"	f	class:mem_fun_t	access:public	signature:(void (_Tp::*__pf)())
mem_fun_t::operator ()	/Users/lij/.vim/stl/stl_function.h	/^  _Ret operator()(_Tp* __p) const { return (__p->*_M_f)(); }$/;"	f	class:mem_fun_t	access:public	signature:(_Tp* __p) const
mem_fun_t::operator ()	/Users/lij/.vim/stl/stl_function.h	/^  void operator()(_Tp* __p) const { (__p->*_M_f)(); }$/;"	f	class:mem_fun_t	access:public	signature:(_Tp* __p) const
merge	/Users/lij/.vim/stl/stl_algo.h	/^_OutputIter merge(_InputIter1 __first1, _InputIter1 __last1,$/;"	f	signature:(_InputIter1 __first1, _InputIter1 __last1, _InputIter2 __first2, _InputIter2 __last2, _OutputIter __result)
merge	/Users/lij/.vim/stl/stl_algo.h	/^_OutputIter merge(_InputIter1 __first1, _InputIter1 __last1,$/;"	f	signature:(_InputIter1 __first1, _InputIter1 __last1, _InputIter2 __first2, _InputIter2 __last2, _OutputIter __result, _Compare __comp)
merge	/Users/lij/.vim/stl/stl_list.h	/^  template <class _StrictWeakOrdering> void merge(list&, _StrictWeakOrdering);$/;"	p	class:list	access:public	signature:(list&, _StrictWeakOrdering)
merge	/Users/lij/.vim/stl/stl_list.h	/^  void merge(list& __x);$/;"	p	class:list	access:public	signature:(list& __x)
merge	/Users/lij/.vim/stl/stl_list.h	/^void list<_Tp, _Alloc>::merge(list<_Tp, _Alloc>& __x)$/;"	f	class:list	signature:(list<_Tp, _Alloc>& __x)
merge	/Users/lij/.vim/stl/stl_list.h	/^void list<_Tp, _Alloc>::merge(list<_Tp, _Alloc>& __x,$/;"	f	class:list	signature:(list<_Tp, _Alloc>& __x, _StrictWeakOrdering __comp)
merge	/Users/lij/.vim/stl/stl_slist.h	/^  void merge(slist& __x);$/;"	p	class:slist	access:public	signature:(slist& __x)
merge	/Users/lij/.vim/stl/stl_slist.h	/^  void merge(slist&, _StrictWeakOrdering);$/;"	p	class:slist	access:public	signature:(slist&, _StrictWeakOrdering)
merge	/Users/lij/.vim/stl/stl_slist.h	/^void slist<_Tp,_Alloc>::merge(slist<_Tp,_Alloc>& __x)$/;"	f	class:slist	signature:(slist<_Tp,_Alloc>& __x)
merge	/Users/lij/.vim/stl/stl_slist.h	/^void slist<_Tp,_Alloc>::merge(slist<_Tp,_Alloc>& __x,$/;"	f	class:slist	signature:(slist<_Tp,_Alloc>& __x, _StrictWeakOrdering __comp)
min	/Users/lij/.vim/stl/stl_algobase.h	/^#undef min$/;"	d
min	/Users/lij/.vim/stl/stl_algobase.h	/^inline const _Tp& min(const _Tp& __a, const _Tp& __b) {$/;"	f	signature:(const _Tp& __a, const _Tp& __b)
min	/Users/lij/.vim/stl/stl_algobase.h	/^inline const _Tp& min(const _Tp& __a, const _Tp& __b, _Compare __comp) {$/;"	f	signature:(const _Tp& __a, const _Tp& __b, _Compare __comp)
min	/Users/lij/.vim/stl/stl_config.h	/^#     undef min$/;"	d
min	/Users/lij/.vim/stl/valarray	/^  value_type min() const {$/;"	f	class:valarray	access:public	signature:() const
min_element	/Users/lij/.vim/stl/stl_algo.h	/^_ForwardIter min_element(_ForwardIter __first, _ForwardIter __last) {$/;"	f	signature:(_ForwardIter __first, _ForwardIter __last)
min_element	/Users/lij/.vim/stl/stl_algo.h	/^_ForwardIter min_element(_ForwardIter __first, _ForwardIter __last,$/;"	f	signature:(_ForwardIter __first, _ForwardIter __last, _Compare __comp)
minus	/Users/lij/.vim/stl/stl_function.h	/^struct minus : public binary_function<_Tp,_Tp,_Tp> {$/;"	s	inherits:binary_function
minus::operator ()	/Users/lij/.vim/stl/stl_function.h	/^  _Tp operator()(const _Tp& __x, const _Tp& __y) const { return __x - __y; }$/;"	f	struct:minus	access:public	signature:(const _Tp& __x, const _Tp& __y) const
mismatch	/Users/lij/.vim/stl/stl_algobase.h	/^pair<_InputIter1, _InputIter2> mismatch(_InputIter1 __first1,$/;"	f	signature:(_InputIter1 __first1, _InputIter1 __last1, _InputIter2 __first2)
mismatch	/Users/lij/.vim/stl/stl_algobase.h	/^pair<_InputIter1, _InputIter2> mismatch(_InputIter1 __first1,$/;"	f	signature:(_InputIter1 __first1, _InputIter1 __last1, _InputIter2 __first2, _BinaryPredicate __binary_pred)
modulus	/Users/lij/.vim/stl/stl_function.h	/^struct modulus : public binary_function<_Tp,_Tp,_Tp> $/;"	s	inherits:binary_function
modulus::operator ()	/Users/lij/.vim/stl/stl_function.h	/^  _Tp operator()(const _Tp& __x, const _Tp& __y) const { return __x % __y; }$/;"	f	struct:modulus	access:public	signature:(const _Tp& __x, const _Tp& __y) const
move	/Users/lij/.vim/stl/char_traits.h	/^  static _CharT* move(_CharT* __s1, const _CharT* __s2, size_t __n) {$/;"	f	class:__char_traits_base	access:public	signature:(_CharT* __s1, const _CharT* __s2, size_t __n)
multimap	/Users/lij/.vim/stl/stl_multimap.h	/^  explicit multimap(const _Compare& __comp,$/;"	f	class:multimap	access:public	signature:(const _Compare& __comp, const allocator_type& __a = allocator_type())
multimap	/Users/lij/.vim/stl/stl_multimap.h	/^  multimap() : _M_t(_Compare(), allocator_type()) { }$/;"	f	class:multimap	access:public	signature:()
multimap	/Users/lij/.vim/stl/stl_multimap.h	/^  multimap(_InputIterator __first, _InputIterator __last)$/;"	f	class:multimap	access:public	signature:(_InputIterator __first, _InputIterator __last)
multimap	/Users/lij/.vim/stl/stl_multimap.h	/^  multimap(_InputIterator __first, _InputIterator __last,$/;"	f	class:multimap	access:public	signature:(_InputIterator __first, _InputIterator __last, const _Compare& __comp, const allocator_type& __a = allocator_type())
multimap	/Users/lij/.vim/stl/stl_multimap.h	/^  multimap(const multimap<_Key,_Tp,_Compare,_Alloc>& __x) : _M_t(__x._M_t) { }$/;"	f	class:multimap	access:public	signature:(const multimap<_Key,_Tp,_Compare,_Alloc>& __x)
multimap	/Users/lij/.vim/stl/stl_multimap.h	/^  multimap(const value_type* __first, const value_type* __last)$/;"	f	class:multimap	access:public	signature:(const value_type* __first, const value_type* __last)
multimap	/Users/lij/.vim/stl/stl_multimap.h	/^  multimap(const value_type* __first, const value_type* __last,$/;"	f	class:multimap	access:public	signature:(const value_type* __first, const value_type* __last, const _Compare& __comp, const allocator_type& __a = allocator_type())
multimap	/Users/lij/.vim/stl/stl_multimap.h	/^  multimap(const_iterator __first, const_iterator __last)$/;"	f	class:multimap	access:public	signature:(const_iterator __first, const_iterator __last)
multimap	/Users/lij/.vim/stl/stl_multimap.h	/^  multimap(const_iterator __first, const_iterator __last,$/;"	f	class:multimap	access:public	signature:(const_iterator __first, const_iterator __last, const _Compare& __comp, const allocator_type& __a = allocator_type())
multimap	/Users/lij/.vim/stl/stl_multimap.h	/^class multimap {$/;"	c
multimap::_M_t	/Users/lij/.vim/stl/stl_multimap.h	/^  _Rep_type _M_t;  \/\/ red-black tree representing multimap$/;"	m	class:multimap	access:private
multimap::_Rep_type	/Users/lij/.vim/stl/stl_multimap.h	/^                  _Select1st<value_type>, key_compare, _Alloc> _Rep_type;$/;"	t	class:multimap	access:private
multimap::__STL_CLASS_BINARY_FUNCTION_CHECK	/Users/lij/.vim/stl/stl_multimap.h	/^  __STL_CLASS_BINARY_FUNCTION_CHECK(_Compare, bool, _Key, _Key);$/;"	p	class:multimap	access:private	signature:(_Compare, bool, _Key, _Key)
multimap::__STL_CLASS_REQUIRES	/Users/lij/.vim/stl/stl_multimap.h	/^  __STL_CLASS_REQUIRES(_Tp, _Assignable);$/;"	p	class:multimap	access:private	signature:(_Tp, _Assignable)
multimap::__STL_NULL_TMPL_ARGS	/Users/lij/.vim/stl/stl_multimap.h	/^  operator< __STL_NULL_TMPL_ARGS (const multimap&, const multimap&);$/;"	p	class:multimap	access:friend	signature:(const multimap&, const multimap&)
multimap::__STL_NULL_TMPL_ARGS	/Users/lij/.vim/stl/stl_multimap.h	/^  operator== __STL_NULL_TMPL_ARGS (const multimap&, const multimap&);$/;"	p	class:multimap	access:friend	signature:(const multimap&, const multimap&)
multimap::allocator_type	/Users/lij/.vim/stl/stl_multimap.h	/^  typedef typename _Rep_type::allocator_type allocator_type;$/;"	t	class:multimap	access:public
multimap::begin	/Users/lij/.vim/stl/stl_multimap.h	/^  const_iterator begin() const { return _M_t.begin(); }$/;"	f	class:multimap	access:public	signature:() const
multimap::begin	/Users/lij/.vim/stl/stl_multimap.h	/^  iterator begin() { return _M_t.begin(); }$/;"	f	class:multimap	access:public	signature:()
multimap::clear	/Users/lij/.vim/stl/stl_multimap.h	/^  void clear() { _M_t.clear(); }$/;"	f	class:multimap	access:public	signature:()
multimap::const_iterator	/Users/lij/.vim/stl/stl_multimap.h	/^  typedef typename _Rep_type::const_iterator const_iterator; $/;"	t	class:multimap	access:public
multimap::const_pointer	/Users/lij/.vim/stl/stl_multimap.h	/^  typedef typename _Rep_type::const_pointer const_pointer;$/;"	t	class:multimap	access:public
multimap::const_reference	/Users/lij/.vim/stl/stl_multimap.h	/^  typedef typename _Rep_type::const_reference const_reference;$/;"	t	class:multimap	access:public
multimap::const_reverse_iterator	/Users/lij/.vim/stl/stl_multimap.h	/^  typedef typename _Rep_type::const_reverse_iterator const_reverse_iterator;$/;"	t	class:multimap	access:public
multimap::count	/Users/lij/.vim/stl/stl_multimap.h	/^  size_type count(const key_type& __x) const { return _M_t.count(__x); }$/;"	f	class:multimap	access:public	signature:(const key_type& __x) const
multimap::data_type	/Users/lij/.vim/stl/stl_multimap.h	/^  typedef _Tp                   data_type;$/;"	t	class:multimap	access:public
multimap::difference_type	/Users/lij/.vim/stl/stl_multimap.h	/^  typedef typename _Rep_type::difference_type difference_type;$/;"	t	class:multimap	access:public
multimap::empty	/Users/lij/.vim/stl/stl_multimap.h	/^  bool empty() const { return _M_t.empty(); }$/;"	f	class:multimap	access:public	signature:() const
multimap::end	/Users/lij/.vim/stl/stl_multimap.h	/^  const_iterator end() const { return _M_t.end(); }$/;"	f	class:multimap	access:public	signature:() const
multimap::end	/Users/lij/.vim/stl/stl_multimap.h	/^  iterator end() { return _M_t.end(); }$/;"	f	class:multimap	access:public	signature:()
multimap::equal_range	/Users/lij/.vim/stl/stl_multimap.h	/^   pair<iterator,iterator> equal_range(const key_type& __x) {$/;"	f	class:multimap	access:public	signature:(const key_type& __x)
multimap::equal_range	/Users/lij/.vim/stl/stl_multimap.h	/^  pair<const_iterator,const_iterator> equal_range(const key_type& __x) const {$/;"	f	class:multimap	access:public	signature:(const key_type& __x) const
multimap::erase	/Users/lij/.vim/stl/stl_multimap.h	/^  size_type erase(const key_type& __x) { return _M_t.erase(__x); }$/;"	f	class:multimap	access:public	signature:(const key_type& __x)
multimap::erase	/Users/lij/.vim/stl/stl_multimap.h	/^  void erase(iterator __first, iterator __last)$/;"	f	class:multimap	access:public	signature:(iterator __first, iterator __last)
multimap::erase	/Users/lij/.vim/stl/stl_multimap.h	/^  void erase(iterator __position) { _M_t.erase(__position); }$/;"	f	class:multimap	access:public	signature:(iterator __position)
multimap::find	/Users/lij/.vim/stl/stl_multimap.h	/^  const_iterator find(const key_type& __x) const { return _M_t.find(__x); }$/;"	f	class:multimap	access:public	signature:(const key_type& __x) const
multimap::find	/Users/lij/.vim/stl/stl_multimap.h	/^  iterator find(const key_type& __x) { return _M_t.find(__x); }$/;"	f	class:multimap	access:public	signature:(const key_type& __x)
multimap::get_allocator	/Users/lij/.vim/stl/stl_multimap.h	/^  allocator_type get_allocator() const { return _M_t.get_allocator(); }$/;"	f	class:multimap	access:public	signature:() const
multimap::insert	/Users/lij/.vim/stl/stl_multimap.h	/^  iterator insert(const value_type& __x) { return _M_t.insert_equal(__x); }$/;"	f	class:multimap	access:public	signature:(const value_type& __x)
multimap::insert	/Users/lij/.vim/stl/stl_multimap.h	/^  iterator insert(iterator __position, const value_type& __x) {$/;"	f	class:multimap	access:public	signature:(iterator __position, const value_type& __x)
multimap::insert	/Users/lij/.vim/stl/stl_multimap.h	/^  void insert(_InputIterator __first, _InputIterator __last) {$/;"	f	class:multimap	access:public	signature:(_InputIterator __first, _InputIterator __last)
multimap::insert	/Users/lij/.vim/stl/stl_multimap.h	/^  void insert(const value_type* __first, const value_type* __last) {$/;"	f	class:multimap	access:public	signature:(const value_type* __first, const value_type* __last)
multimap::insert	/Users/lij/.vim/stl/stl_multimap.h	/^  void insert(const_iterator __first, const_iterator __last) {$/;"	f	class:multimap	access:public	signature:(const_iterator __first, const_iterator __last)
multimap::iterator	/Users/lij/.vim/stl/stl_multimap.h	/^  typedef typename _Rep_type::iterator iterator;$/;"	t	class:multimap	access:public
multimap::key_comp	/Users/lij/.vim/stl/stl_multimap.h	/^  key_compare key_comp() const { return _M_t.key_comp(); }$/;"	f	class:multimap	access:public	signature:() const
multimap::key_compare	/Users/lij/.vim/stl/stl_multimap.h	/^  typedef _Compare              key_compare;$/;"	t	class:multimap	access:public
multimap::key_type	/Users/lij/.vim/stl/stl_multimap.h	/^  typedef _Key                  key_type;$/;"	t	class:multimap	access:public
multimap::lower_bound	/Users/lij/.vim/stl/stl_multimap.h	/^  const_iterator lower_bound(const key_type& __x) const {$/;"	f	class:multimap	access:public	signature:(const key_type& __x) const
multimap::lower_bound	/Users/lij/.vim/stl/stl_multimap.h	/^  iterator lower_bound(const key_type& __x) {return _M_t.lower_bound(__x); }$/;"	f	class:multimap	access:public	signature:(const key_type& __x)
multimap::mapped_type	/Users/lij/.vim/stl/stl_multimap.h	/^  typedef _Tp                   mapped_type;$/;"	t	class:multimap	access:public
multimap::max_size	/Users/lij/.vim/stl/stl_multimap.h	/^  size_type max_size() const { return _M_t.max_size(); }$/;"	f	class:multimap	access:public	signature:() const
multimap::multimap	/Users/lij/.vim/stl/stl_multimap.h	/^  explicit multimap(const _Compare& __comp,$/;"	f	class:multimap	access:public	signature:(const _Compare& __comp, const allocator_type& __a = allocator_type())
multimap::multimap	/Users/lij/.vim/stl/stl_multimap.h	/^  multimap() : _M_t(_Compare(), allocator_type()) { }$/;"	f	class:multimap	access:public	signature:()
multimap::multimap	/Users/lij/.vim/stl/stl_multimap.h	/^  multimap(_InputIterator __first, _InputIterator __last)$/;"	f	class:multimap	access:public	signature:(_InputIterator __first, _InputIterator __last)
multimap::multimap	/Users/lij/.vim/stl/stl_multimap.h	/^  multimap(_InputIterator __first, _InputIterator __last,$/;"	f	class:multimap	access:public	signature:(_InputIterator __first, _InputIterator __last, const _Compare& __comp, const allocator_type& __a = allocator_type())
multimap::multimap	/Users/lij/.vim/stl/stl_multimap.h	/^  multimap(const multimap<_Key,_Tp,_Compare,_Alloc>& __x) : _M_t(__x._M_t) { }$/;"	f	class:multimap	access:public	signature:(const multimap<_Key,_Tp,_Compare,_Alloc>& __x)
multimap::multimap	/Users/lij/.vim/stl/stl_multimap.h	/^  multimap(const value_type* __first, const value_type* __last)$/;"	f	class:multimap	access:public	signature:(const value_type* __first, const value_type* __last)
multimap::multimap	/Users/lij/.vim/stl/stl_multimap.h	/^  multimap(const value_type* __first, const value_type* __last,$/;"	f	class:multimap	access:public	signature:(const value_type* __first, const value_type* __last, const _Compare& __comp, const allocator_type& __a = allocator_type())
multimap::multimap	/Users/lij/.vim/stl/stl_multimap.h	/^  multimap(const_iterator __first, const_iterator __last)$/;"	f	class:multimap	access:public	signature:(const_iterator __first, const_iterator __last)
multimap::multimap	/Users/lij/.vim/stl/stl_multimap.h	/^  multimap(const_iterator __first, const_iterator __last,$/;"	f	class:multimap	access:public	signature:(const_iterator __first, const_iterator __last, const _Compare& __comp, const allocator_type& __a = allocator_type())
multimap::operator <	/Users/lij/.vim/stl/stl_multimap.h	/^  friend bool operator< (const multimap<_K1, _T1, _C1, _A1>&,$/;"	p	class:multimap	access:friend	signature:(const multimap<_K1, _T1, _C1, _A1>&, const multimap<_K1, _T1, _C1, _A1>&)
multimap::operator =	/Users/lij/.vim/stl/stl_multimap.h	/^  operator=(const multimap<_Key,_Tp,_Compare,_Alloc>& __x) {$/;"	f	class:multimap	access:public	signature:(const multimap<_Key,_Tp,_Compare,_Alloc>& __x)
multimap::operator ==	/Users/lij/.vim/stl/stl_multimap.h	/^  friend bool operator== (const multimap<_K1, _T1, _C1, _A1>&,$/;"	p	class:multimap	access:friend	signature:(const multimap<_K1, _T1, _C1, _A1>&, const multimap<_K1, _T1, _C1, _A1>&)
multimap::pointer	/Users/lij/.vim/stl/stl_multimap.h	/^  typedef typename _Rep_type::pointer pointer;$/;"	t	class:multimap	access:public
multimap::rbegin	/Users/lij/.vim/stl/stl_multimap.h	/^  const_reverse_iterator rbegin() const { return _M_t.rbegin(); }$/;"	f	class:multimap	access:public	signature:() const
multimap::rbegin	/Users/lij/.vim/stl/stl_multimap.h	/^  reverse_iterator rbegin() { return _M_t.rbegin(); }$/;"	f	class:multimap	access:public	signature:()
multimap::reference	/Users/lij/.vim/stl/stl_multimap.h	/^  typedef typename _Rep_type::reference reference;$/;"	t	class:multimap	access:public
multimap::rend	/Users/lij/.vim/stl/stl_multimap.h	/^  const_reverse_iterator rend() const { return _M_t.rend(); }$/;"	f	class:multimap	access:public	signature:() const
multimap::rend	/Users/lij/.vim/stl/stl_multimap.h	/^  reverse_iterator rend() { return _M_t.rend(); }$/;"	f	class:multimap	access:public	signature:()
multimap::reverse_iterator	/Users/lij/.vim/stl/stl_multimap.h	/^  typedef typename _Rep_type::reverse_iterator reverse_iterator;$/;"	t	class:multimap	access:public
multimap::size	/Users/lij/.vim/stl/stl_multimap.h	/^  size_type size() const { return _M_t.size(); }$/;"	f	class:multimap	access:public	signature:() const
multimap::size_type	/Users/lij/.vim/stl/stl_multimap.h	/^  typedef typename _Rep_type::size_type size_type;$/;"	t	class:multimap	access:public
multimap::swap	/Users/lij/.vim/stl/stl_multimap.h	/^  void swap(multimap<_Key,_Tp,_Compare,_Alloc>& __x) { _M_t.swap(__x._M_t); }$/;"	f	class:multimap	access:public	signature:(multimap<_Key,_Tp,_Compare,_Alloc>& __x)
multimap::upper_bound	/Users/lij/.vim/stl/stl_multimap.h	/^  const_iterator upper_bound(const key_type& __x) const {$/;"	f	class:multimap	access:public	signature:(const key_type& __x) const
multimap::upper_bound	/Users/lij/.vim/stl/stl_multimap.h	/^  iterator upper_bound(const key_type& __x) {return _M_t.upper_bound(__x); }$/;"	f	class:multimap	access:public	signature:(const key_type& __x)
multimap::value_comp	/Users/lij/.vim/stl/stl_multimap.h	/^  value_compare value_comp() const { return value_compare(_M_t.key_comp()); }$/;"	f	class:multimap	access:public	signature:() const
multimap::value_compare	/Users/lij/.vim/stl/stl_multimap.h	/^  class value_compare : public binary_function<value_type, value_type, bool> {$/;"	c	class:multimap	inherits:binary_function	access:public
multimap::value_compare::comp	/Users/lij/.vim/stl/stl_multimap.h	/^    _Compare comp;$/;"	m	class:multimap::value_compare	access:protected
multimap::value_compare::operator ()	/Users/lij/.vim/stl/stl_multimap.h	/^    bool operator()(const value_type& __x, const value_type& __y) const {$/;"	f	class:multimap::value_compare	access:public	signature:(const value_type& __x, const value_type& __y) const
multimap::value_compare::value_compare	/Users/lij/.vim/stl/stl_multimap.h	/^    value_compare(_Compare __c) : comp(__c) {}$/;"	f	class:multimap::value_compare	access:protected	signature:(_Compare __c)
multimap::value_type	/Users/lij/.vim/stl/stl_multimap.h	/^  typedef pair<const _Key, _Tp> value_type;$/;"	t	class:multimap	access:public
multiplies	/Users/lij/.vim/stl/stl_function.h	/^struct multiplies : public binary_function<_Tp,_Tp,_Tp> {$/;"	s	inherits:binary_function
multiplies::operator ()	/Users/lij/.vim/stl/stl_function.h	/^  _Tp operator()(const _Tp& __x, const _Tp& __y) const { return __x * __y; }$/;"	f	struct:multiplies	access:public	signature:(const _Tp& __x, const _Tp& __y) const
multiset	/Users/lij/.vim/stl/stl_multiset.h	/^  explicit multiset(const _Compare& __comp,$/;"	f	class:multiset	access:public	signature:(const _Compare& __comp, const allocator_type& __a = allocator_type())
multiset	/Users/lij/.vim/stl/stl_multiset.h	/^  multiset() : _M_t(_Compare(), allocator_type()) {}$/;"	f	class:multiset	access:public	signature:()
multiset	/Users/lij/.vim/stl/stl_multiset.h	/^  multiset(_InputIterator __first, _InputIterator __last)$/;"	f	class:multiset	access:public	signature:(_InputIterator __first, _InputIterator __last)
multiset	/Users/lij/.vim/stl/stl_multiset.h	/^  multiset(_InputIterator __first, _InputIterator __last,$/;"	f	class:multiset	access:public	signature:(_InputIterator __first, _InputIterator __last, const _Compare& __comp, const allocator_type& __a = allocator_type())
multiset	/Users/lij/.vim/stl/stl_multiset.h	/^  multiset(const multiset<_Key,_Compare,_Alloc>& __x) : _M_t(__x._M_t) {}$/;"	f	class:multiset	access:public	signature:(const multiset<_Key,_Compare,_Alloc>& __x)
multiset	/Users/lij/.vim/stl/stl_multiset.h	/^  multiset(const value_type* __first, const value_type* __last)$/;"	f	class:multiset	access:public	signature:(const value_type* __first, const value_type* __last)
multiset	/Users/lij/.vim/stl/stl_multiset.h	/^  multiset(const value_type* __first, const value_type* __last,$/;"	f	class:multiset	access:public	signature:(const value_type* __first, const value_type* __last, const _Compare& __comp, const allocator_type& __a = allocator_type())
multiset	/Users/lij/.vim/stl/stl_multiset.h	/^  multiset(const_iterator __first, const_iterator __last)$/;"	f	class:multiset	access:public	signature:(const_iterator __first, const_iterator __last)
multiset	/Users/lij/.vim/stl/stl_multiset.h	/^  multiset(const_iterator __first, const_iterator __last,$/;"	f	class:multiset	access:public	signature:(const_iterator __first, const_iterator __last, const _Compare& __comp, const allocator_type& __a = allocator_type())
multiset	/Users/lij/.vim/stl/stl_multiset.h	/^class multiset {$/;"	c
multiset::_M_t	/Users/lij/.vim/stl/stl_multiset.h	/^  _Rep_type _M_t;  \/\/ red-black tree representing multiset$/;"	m	class:multiset	access:private
multiset::_Rep_type	/Users/lij/.vim/stl/stl_multiset.h	/^                  _Identity<value_type>, key_compare, _Alloc> _Rep_type;$/;"	t	class:multiset	access:private
multiset::__STL_CLASS_BINARY_FUNCTION_CHECK	/Users/lij/.vim/stl/stl_multiset.h	/^  __STL_CLASS_BINARY_FUNCTION_CHECK(_Compare, bool, _Key, _Key);$/;"	p	class:multiset	access:private	signature:(_Compare, bool, _Key, _Key)
multiset::__STL_CLASS_REQUIRES	/Users/lij/.vim/stl/stl_multiset.h	/^  __STL_CLASS_REQUIRES(_Key, _Assignable);$/;"	p	class:multiset	access:private	signature:(_Key, _Assignable)
multiset::__STL_NULL_TMPL_ARGS	/Users/lij/.vim/stl/stl_multiset.h	/^  operator< __STL_NULL_TMPL_ARGS (const multiset&, const multiset&);$/;"	p	class:multiset	access:friend	signature:(const multiset&, const multiset&)
multiset::__STL_NULL_TMPL_ARGS	/Users/lij/.vim/stl/stl_multiset.h	/^  operator== __STL_NULL_TMPL_ARGS (const multiset&, const multiset&);$/;"	p	class:multiset	access:friend	signature:(const multiset&, const multiset&)
multiset::allocator_type	/Users/lij/.vim/stl/stl_multiset.h	/^  typedef typename _Rep_type::allocator_type allocator_type;$/;"	t	class:multiset	access:public
multiset::begin	/Users/lij/.vim/stl/stl_multiset.h	/^  iterator begin() const { return _M_t.begin(); }$/;"	f	class:multiset	access:public	signature:() const
multiset::clear	/Users/lij/.vim/stl/stl_multiset.h	/^  void clear() { _M_t.clear(); }$/;"	f	class:multiset	access:public	signature:()
multiset::const_iterator	/Users/lij/.vim/stl/stl_multiset.h	/^  typedef typename _Rep_type::const_iterator const_iterator;$/;"	t	class:multiset	access:public
multiset::const_pointer	/Users/lij/.vim/stl/stl_multiset.h	/^  typedef typename _Rep_type::const_pointer const_pointer;$/;"	t	class:multiset	access:public
multiset::const_reference	/Users/lij/.vim/stl/stl_multiset.h	/^  typedef typename _Rep_type::const_reference const_reference;$/;"	t	class:multiset	access:public
multiset::const_reverse_iterator	/Users/lij/.vim/stl/stl_multiset.h	/^  typedef typename _Rep_type::const_reverse_iterator const_reverse_iterator;$/;"	t	class:multiset	access:public
multiset::count	/Users/lij/.vim/stl/stl_multiset.h	/^  size_type count(const key_type& __x) const { return _M_t.count(__x); }$/;"	f	class:multiset	access:public	signature:(const key_type& __x) const
multiset::difference_type	/Users/lij/.vim/stl/stl_multiset.h	/^  typedef typename _Rep_type::difference_type difference_type;$/;"	t	class:multiset	access:public
multiset::empty	/Users/lij/.vim/stl/stl_multiset.h	/^  bool empty() const { return _M_t.empty(); }$/;"	f	class:multiset	access:public	signature:() const
multiset::end	/Users/lij/.vim/stl/stl_multiset.h	/^  iterator end() const { return _M_t.end(); }$/;"	f	class:multiset	access:public	signature:() const
multiset::equal_range	/Users/lij/.vim/stl/stl_multiset.h	/^  pair<iterator,iterator> equal_range(const key_type& __x) const {$/;"	f	class:multiset	access:public	signature:(const key_type& __x) const
multiset::erase	/Users/lij/.vim/stl/stl_multiset.h	/^  size_type erase(const key_type& __x) { $/;"	f	class:multiset	access:public	signature:(const key_type& __x)
multiset::erase	/Users/lij/.vim/stl/stl_multiset.h	/^  void erase(iterator __first, iterator __last) { $/;"	f	class:multiset	access:public	signature:(iterator __first, iterator __last)
multiset::erase	/Users/lij/.vim/stl/stl_multiset.h	/^  void erase(iterator __position) { $/;"	f	class:multiset	access:public	signature:(iterator __position)
multiset::find	/Users/lij/.vim/stl/stl_multiset.h	/^  iterator find(const key_type& __x) const { return _M_t.find(__x); }$/;"	f	class:multiset	access:public	signature:(const key_type& __x) const
multiset::get_allocator	/Users/lij/.vim/stl/stl_multiset.h	/^  allocator_type get_allocator() const { return _M_t.get_allocator(); }$/;"	f	class:multiset	access:public	signature:() const
multiset::insert	/Users/lij/.vim/stl/stl_multiset.h	/^  iterator insert(const value_type& __x) { $/;"	f	class:multiset	access:public	signature:(const value_type& __x)
multiset::insert	/Users/lij/.vim/stl/stl_multiset.h	/^  iterator insert(iterator __position, const value_type& __x) {$/;"	f	class:multiset	access:public	signature:(iterator __position, const value_type& __x)
multiset::insert	/Users/lij/.vim/stl/stl_multiset.h	/^  void insert(_InputIterator __first, _InputIterator __last) {$/;"	f	class:multiset	access:public	signature:(_InputIterator __first, _InputIterator __last)
multiset::insert	/Users/lij/.vim/stl/stl_multiset.h	/^  void insert(const value_type* __first, const value_type* __last) {$/;"	f	class:multiset	access:public	signature:(const value_type* __first, const value_type* __last)
multiset::insert	/Users/lij/.vim/stl/stl_multiset.h	/^  void insert(const_iterator __first, const_iterator __last) {$/;"	f	class:multiset	access:public	signature:(const_iterator __first, const_iterator __last)
multiset::iterator	/Users/lij/.vim/stl/stl_multiset.h	/^  typedef typename _Rep_type::const_iterator iterator;$/;"	t	class:multiset	access:public
multiset::key_comp	/Users/lij/.vim/stl/stl_multiset.h	/^  key_compare key_comp() const { return _M_t.key_comp(); }$/;"	f	class:multiset	access:public	signature:() const
multiset::key_compare	/Users/lij/.vim/stl/stl_multiset.h	/^  typedef _Compare key_compare;$/;"	t	class:multiset	access:public
multiset::key_type	/Users/lij/.vim/stl/stl_multiset.h	/^  typedef _Key     key_type;$/;"	t	class:multiset	access:public
multiset::lower_bound	/Users/lij/.vim/stl/stl_multiset.h	/^  iterator lower_bound(const key_type& __x) const {$/;"	f	class:multiset	access:public	signature:(const key_type& __x) const
multiset::max_size	/Users/lij/.vim/stl/stl_multiset.h	/^  size_type max_size() const { return _M_t.max_size(); }$/;"	f	class:multiset	access:public	signature:() const
multiset::multiset	/Users/lij/.vim/stl/stl_multiset.h	/^  explicit multiset(const _Compare& __comp,$/;"	f	class:multiset	access:public	signature:(const _Compare& __comp, const allocator_type& __a = allocator_type())
multiset::multiset	/Users/lij/.vim/stl/stl_multiset.h	/^  multiset() : _M_t(_Compare(), allocator_type()) {}$/;"	f	class:multiset	access:public	signature:()
multiset::multiset	/Users/lij/.vim/stl/stl_multiset.h	/^  multiset(_InputIterator __first, _InputIterator __last)$/;"	f	class:multiset	access:public	signature:(_InputIterator __first, _InputIterator __last)
multiset::multiset	/Users/lij/.vim/stl/stl_multiset.h	/^  multiset(_InputIterator __first, _InputIterator __last,$/;"	f	class:multiset	access:public	signature:(_InputIterator __first, _InputIterator __last, const _Compare& __comp, const allocator_type& __a = allocator_type())
multiset::multiset	/Users/lij/.vim/stl/stl_multiset.h	/^  multiset(const multiset<_Key,_Compare,_Alloc>& __x) : _M_t(__x._M_t) {}$/;"	f	class:multiset	access:public	signature:(const multiset<_Key,_Compare,_Alloc>& __x)
multiset::multiset	/Users/lij/.vim/stl/stl_multiset.h	/^  multiset(const value_type* __first, const value_type* __last)$/;"	f	class:multiset	access:public	signature:(const value_type* __first, const value_type* __last)
multiset::multiset	/Users/lij/.vim/stl/stl_multiset.h	/^  multiset(const value_type* __first, const value_type* __last,$/;"	f	class:multiset	access:public	signature:(const value_type* __first, const value_type* __last, const _Compare& __comp, const allocator_type& __a = allocator_type())
multiset::multiset	/Users/lij/.vim/stl/stl_multiset.h	/^  multiset(const_iterator __first, const_iterator __last)$/;"	f	class:multiset	access:public	signature:(const_iterator __first, const_iterator __last)
multiset::multiset	/Users/lij/.vim/stl/stl_multiset.h	/^  multiset(const_iterator __first, const_iterator __last,$/;"	f	class:multiset	access:public	signature:(const_iterator __first, const_iterator __last, const _Compare& __comp, const allocator_type& __a = allocator_type())
multiset::operator <	/Users/lij/.vim/stl/stl_multiset.h	/^  friend bool operator< (const multiset<_K1,_C1,_A1>&,$/;"	p	class:multiset	access:friend	signature:(const multiset<_K1,_C1,_A1>&, const multiset<_K1,_C1,_A1>&)
multiset::operator =	/Users/lij/.vim/stl/stl_multiset.h	/^  operator=(const multiset<_Key,_Compare,_Alloc>& __x) {$/;"	f	class:multiset	access:public	signature:(const multiset<_Key,_Compare,_Alloc>& __x)
multiset::operator ==	/Users/lij/.vim/stl/stl_multiset.h	/^  friend bool operator== (const multiset<_K1,_C1,_A1>&,$/;"	p	class:multiset	access:friend	signature:(const multiset<_K1,_C1,_A1>&, const multiset<_K1,_C1,_A1>&)
multiset::pointer	/Users/lij/.vim/stl/stl_multiset.h	/^  typedef typename _Rep_type::const_pointer pointer;$/;"	t	class:multiset	access:public
multiset::rbegin	/Users/lij/.vim/stl/stl_multiset.h	/^  reverse_iterator rbegin() const { return _M_t.rbegin(); } $/;"	f	class:multiset	access:public	signature:() const
multiset::reference	/Users/lij/.vim/stl/stl_multiset.h	/^  typedef typename _Rep_type::const_reference reference;$/;"	t	class:multiset	access:public
multiset::rend	/Users/lij/.vim/stl/stl_multiset.h	/^  reverse_iterator rend() const { return _M_t.rend(); }$/;"	f	class:multiset	access:public	signature:() const
multiset::reverse_iterator	/Users/lij/.vim/stl/stl_multiset.h	/^  typedef typename _Rep_type::const_reverse_iterator reverse_iterator;$/;"	t	class:multiset	access:public
multiset::size	/Users/lij/.vim/stl/stl_multiset.h	/^  size_type size() const { return _M_t.size(); }$/;"	f	class:multiset	access:public	signature:() const
multiset::size_type	/Users/lij/.vim/stl/stl_multiset.h	/^  typedef typename _Rep_type::size_type size_type;$/;"	t	class:multiset	access:public
multiset::swap	/Users/lij/.vim/stl/stl_multiset.h	/^  void swap(multiset<_Key,_Compare,_Alloc>& __x) { _M_t.swap(__x._M_t); }$/;"	f	class:multiset	access:public	signature:(multiset<_Key,_Compare,_Alloc>& __x)
multiset::upper_bound	/Users/lij/.vim/stl/stl_multiset.h	/^  iterator upper_bound(const key_type& __x) const {$/;"	f	class:multiset	access:public	signature:(const key_type& __x) const
multiset::value_comp	/Users/lij/.vim/stl/stl_multiset.h	/^  value_compare value_comp() const { return _M_t.key_comp(); }$/;"	f	class:multiset	access:public	signature:() const
multiset::value_compare	/Users/lij/.vim/stl/stl_multiset.h	/^  typedef _Compare value_compare;$/;"	t	class:multiset	access:public
multiset::value_type	/Users/lij/.vim/stl/stl_multiset.h	/^  typedef _Key     value_type;$/;"	t	class:multiset	access:public
mutable_begin	/Users/lij/.vim/stl/stl_rope.h	/^        iterator mutable_begin() {$/;"	f	class:rope	access:public	signature:()
mutable_end	/Users/lij/.vim/stl/stl_rope.h	/^        iterator mutable_end() {$/;"	f	class:rope	access:public	signature:()
mutable_rbegin	/Users/lij/.vim/stl/stl_rope.h	/^        reverse_iterator mutable_rbegin() {$/;"	f	class:rope	access:public	signature:()
mutable_reference_at	/Users/lij/.vim/stl/stl_rope.h	/^        reference mutable_reference_at(size_type __pos) {$/;"	f	class:rope	access:public	signature:(size_type __pos)
mutable_rend	/Users/lij/.vim/stl/stl_rope.h	/^        reverse_iterator mutable_rend() {$/;"	f	class:rope	access:public	signature:()
negate	/Users/lij/.vim/stl/stl_function.h	/^struct negate : public unary_function<_Tp,_Tp> $/;"	s	inherits:unary_function
negate::operator ()	/Users/lij/.vim/stl/stl_function.h	/^  _Tp operator()(const _Tp& __x) const { return -__x; }$/;"	f	struct:negate	access:public	signature:(const _Tp& __x) const
next_permutation	/Users/lij/.vim/stl/stl_algo.h	/^bool next_permutation(_BidirectionalIter __first, _BidirectionalIter __last) {$/;"	f	signature:(_BidirectionalIter __first, _BidirectionalIter __last)
next_permutation	/Users/lij/.vim/stl/stl_algo.h	/^bool next_permutation(_BidirectionalIter __first, _BidirectionalIter __last,$/;"	f	signature:(_BidirectionalIter __first, _BidirectionalIter __last, _Compare __comp)
none	/Users/lij/.vim/stl/bitset	/^  bool none() const { return !this->_M_is_any(); }$/;"	f	class:bitset	access:public	signature:() const
not1	/Users/lij/.vim/stl/stl_function.h	/^not1(const _Predicate& __pred)$/;"	f	signature:(const _Predicate& __pred)
not2	/Users/lij/.vim/stl/stl_function.h	/^not2(const _Predicate& __pred)$/;"	f	signature:(const _Predicate& __pred)
not_eof	/Users/lij/.vim/stl/char_traits.h	/^  static int_type not_eof(const int_type& __c) {$/;"	f	class:__char_traits_base	access:public	signature:(const int_type& __c)
not_equal_to	/Users/lij/.vim/stl/stl_function.h	/^struct not_equal_to : public binary_function<_Tp,_Tp,bool> $/;"	s	inherits:binary_function
not_equal_to::operator ()	/Users/lij/.vim/stl/stl_function.h	/^  bool operator()(const _Tp& __x, const _Tp& __y) const { return __x != __y; }$/;"	f	struct:not_equal_to	access:public	signature:(const _Tp& __x, const _Tp& __y) const
npos	/Users/lij/.vim/stl/stl_rope.h	/^        static const size_type npos;$/;"	m	class:rope	access:public
npos	/Users/lij/.vim/stl/stl_rope.h	/^const rope<_CharT, _Alloc>::size_type rope<_CharT, _Alloc>::npos =$/;"	m	class:rope
npos	/Users/lij/.vim/stl/string	/^  static const size_type npos;$/;"	m	class:basic_string	file:	access:public
npos	/Users/lij/.vim/stl/string	/^basic_string<_CharT,_Traits,_Alloc>::npos $/;"	m	class:basic_string	file:
nth_element	/Users/lij/.vim/stl/stl_algo.h	/^inline void nth_element(_RandomAccessIter __first, _RandomAccessIter __nth,$/;"	f	signature:(_RandomAccessIter __first, _RandomAccessIter __nth, _RandomAccessIter __last)
nth_element	/Users/lij/.vim/stl/stl_algo.h	/^inline void nth_element(_RandomAccessIter __first, _RandomAccessIter __nth,$/;"	f	signature:(_RandomAccessIter __first, _RandomAccessIter __nth, _RandomAccessIter __last, _Compare __comp)
numeric_limits	/Users/lij/.vim/stl/limits	/^__STL_TEMPLATE_NULL class numeric_limits<double>$/;"	c	file:	inherits:_Floating_limits
numeric_limits	/Users/lij/.vim/stl/limits	/^__STL_TEMPLATE_NULL class numeric_limits<float>$/;"	c	file:	inherits:_Floating_limits
numeric_limits	/Users/lij/.vim/stl/limits	/^__STL_TEMPLATE_NULL class numeric_limits<long double>$/;"	c	file:	inherits:_Floating_limits
numeric_limits	/Users/lij/.vim/stl/limits	/^class numeric_limits : public _Numeric_limits_base<_Tp> {};$/;"	c	file:	inherits:_Numeric_limits_base
numeric_limits	/Users/lij/.vim/stl/limits	/^class numeric_limits<bool>$/;"	c	file:	inherits:_Integer_limits
numeric_limits	/Users/lij/.vim/stl/limits	/^class numeric_limits<char>$/;"	c	file:	inherits:_Integer_limits
numeric_limits	/Users/lij/.vim/stl/limits	/^class numeric_limits<int>$/;"	c	file:	inherits:_Integer_limits
numeric_limits	/Users/lij/.vim/stl/limits	/^class numeric_limits<long long>$/;"	c	file:	inherits:_Integer_limits
numeric_limits	/Users/lij/.vim/stl/limits	/^class numeric_limits<long>$/;"	c	file:	inherits:_Integer_limits
numeric_limits	/Users/lij/.vim/stl/limits	/^class numeric_limits<short>$/;"	c	file:	inherits:_Integer_limits
numeric_limits	/Users/lij/.vim/stl/limits	/^class numeric_limits<signed char>$/;"	c	file:	inherits:_Integer_limits
numeric_limits	/Users/lij/.vim/stl/limits	/^class numeric_limits<unsigned char>$/;"	c	file:	inherits:_Integer_limits
numeric_limits	/Users/lij/.vim/stl/limits	/^class numeric_limits<unsigned int>$/;"	c	file:	inherits:_Integer_limits
numeric_limits	/Users/lij/.vim/stl/limits	/^class numeric_limits<unsigned long long>$/;"	c	file:	inherits:_Integer_limits
numeric_limits	/Users/lij/.vim/stl/limits	/^class numeric_limits<unsigned long>$/;"	c	file:	inherits:_Integer_limits
numeric_limits	/Users/lij/.vim/stl/limits	/^class numeric_limits<unsigned short>$/;"	c	file:	inherits:_Integer_limits
numeric_limits	/Users/lij/.vim/stl/limits	/^class numeric_limits<wchar_t>$/;"	c	file:	inherits:_Integer_limits
numeric_limits::__STL_NOTHROW	/Users/lij/.vim/stl/limits	/^  static double infinity() __STL_NOTHROW;$/;"	m	class:numeric_limits	file:	access:public
numeric_limits::__STL_NOTHROW	/Users/lij/.vim/stl/limits	/^  static double quiet_NaN() __STL_NOTHROW;$/;"	m	class:numeric_limits	file:	access:public
numeric_limits::__STL_NOTHROW	/Users/lij/.vim/stl/limits	/^  static double signaling_NaN() __STL_NOTHROW;$/;"	m	class:numeric_limits	file:	access:public
numeric_limits::__STL_NOTHROW	/Users/lij/.vim/stl/limits	/^  static float infinity() __STL_NOTHROW;$/;"	m	class:numeric_limits	file:	access:public
numeric_limits::__STL_NOTHROW	/Users/lij/.vim/stl/limits	/^  static float quiet_NaN() __STL_NOTHROW;$/;"	m	class:numeric_limits	file:	access:public
numeric_limits::__STL_NOTHROW	/Users/lij/.vim/stl/limits	/^  static float signaling_NaN() __STL_NOTHROW;$/;"	m	class:numeric_limits	file:	access:public
numeric_limits::__STL_NOTHROW	/Users/lij/.vim/stl/limits	/^  static long double infinity() __STL_NOTHROW;$/;"	m	class:numeric_limits	file:	access:public
numeric_limits::__STL_NOTHROW	/Users/lij/.vim/stl/limits	/^  static long double quiet_NaN() __STL_NOTHROW;$/;"	m	class:numeric_limits	file:	access:public
numeric_limits::__STL_NOTHROW	/Users/lij/.vim/stl/limits	/^  static long double signaling_NaN() __STL_NOTHROW;$/;"	m	class:numeric_limits	file:	access:public
off_type	/Users/lij/.vim/stl/char_traits.h	/^  typedef streamoff off_type;$/;"	t	class:__char_traits_base	access:public
op	/Users/lij/.vim/stl/stl_function.h	/^  _Operation op;$/;"	m	class:binder1st	access:protected
op	/Users/lij/.vim/stl/stl_function.h	/^  _Operation op;$/;"	m	class:binder2nd	access:protected
operator !	/Users/lij/.vim/stl/valarray	/^  valarray<bool> operator!() const {$/;"	f	class:valarray	access:public	signature:() const
operator !=	/Users/lij/.vim/stl/bitset	/^  bool operator!=(const bitset<_Nb>& __rhs) const {$/;"	f	class:bitset	access:public	signature:(const bitset<_Nb>& __rhs) const
operator !=	/Users/lij/.vim/stl/pthread_alloc	/^inline bool operator!=(const pthread_allocator<_T1>&,$/;"	f	signature:(const pthread_allocator<_T1>&, const pthread_allocator<_T2>&)
operator !=	/Users/lij/.vim/stl/stl_alloc.h	/^inline bool operator!=(const __default_alloc_template<__threads, __inst>&,$/;"	f	signature:(const __default_alloc_template<__threads, __inst>&, const __default_alloc_template<__threads, __inst>&)
operator !=	/Users/lij/.vim/stl/stl_alloc.h	/^inline bool operator!=(const allocator<_T1>&, const allocator<_T2>&)$/;"	f	signature:(const allocator<_T1>&, const allocator<_T2>&)
operator !=	/Users/lij/.vim/stl/stl_bvector.h	/^  bool operator!=(const _Bit_iterator_base& __i) const {$/;"	f	struct:_Bit_iterator_base	access:public	signature:(const _Bit_iterator_base& __i) const
operator !=	/Users/lij/.vim/stl/stl_bvector.h	/^operator!=(const bit_vector& __x, const bit_vector& __y)$/;"	f	signature:(const bit_vector& __x, const bit_vector& __y)
operator !=	/Users/lij/.vim/stl/stl_deque.h	/^  bool operator!=(const _Self& __x) const { return !(*this == __x); }$/;"	f	struct:_Deque_iterator	access:public	signature:(const _Self& __x) const
operator !=	/Users/lij/.vim/stl/stl_deque.h	/^inline bool operator!=(const deque<_Tp, _Alloc>& __x,$/;"	f	signature:(const deque<_Tp, _Alloc>& __x, const deque<_Tp, _Alloc>& __y)
operator !=	/Users/lij/.vim/stl/stl_hash_map.h	/^operator!=(const hash_map<_Key,_Tp,_HashFcn,_EqlKey,_Alloc>& __hm1,$/;"	f	signature:(const hash_map<_Key,_Tp,_HashFcn,_EqlKey,_Alloc>& __hm1, const hash_map<_Key,_Tp,_HashFcn,_EqlKey,_Alloc>& __hm2)
operator !=	/Users/lij/.vim/stl/stl_hash_map.h	/^operator!=(const hash_multimap<_Key,_Tp,_HF,_EqKey,_Alloc>& __hm1,$/;"	f	signature:(const hash_multimap<_Key,_Tp,_HF,_EqKey,_Alloc>& __hm1, const hash_multimap<_Key,_Tp,_HF,_EqKey,_Alloc>& __hm2)
operator !=	/Users/lij/.vim/stl/stl_hash_set.h	/^operator!=(const hash_multiset<_Val,_HashFcn,_EqualKey,_Alloc>& __hs1,$/;"	f	signature:(const hash_multiset<_Val,_HashFcn,_EqualKey,_Alloc>& __hs1, const hash_multiset<_Val,_HashFcn,_EqualKey,_Alloc>& __hs2)
operator !=	/Users/lij/.vim/stl/stl_hash_set.h	/^operator!=(const hash_set<_Value,_HashFcn,_EqualKey,_Alloc>& __hs1,$/;"	f	signature:(const hash_set<_Value,_HashFcn,_EqualKey,_Alloc>& __hs1, const hash_set<_Value,_HashFcn,_EqualKey,_Alloc>& __hs2)
operator !=	/Users/lij/.vim/stl/stl_hashtable.h	/^  bool operator!=(const const_iterator& __it) const $/;"	f	struct:_Hashtable_const_iterator	access:public	signature:(const const_iterator& __it) const
operator !=	/Users/lij/.vim/stl/stl_hashtable.h	/^  bool operator!=(const iterator& __it) const$/;"	f	struct:_Hashtable_iterator	access:public	signature:(const iterator& __it) const
operator !=	/Users/lij/.vim/stl/stl_hashtable.h	/^inline bool operator!=(const hashtable<_Val,_Key,_HF,_Ex,_Eq,_All>& __ht1,$/;"	f	signature:(const hashtable<_Val,_Key,_HF,_Ex,_Eq,_All>& __ht1, const hashtable<_Val,_Key,_HF,_Ex,_Eq,_All>& __ht2)
operator !=	/Users/lij/.vim/stl/stl_iterator.h	/^inline bool operator!=($/;"	f	signature:( const reverse_bidirectional_iterator<_BiIter, _Tp, _Ref, _Distance>& __x, const reverse_bidirectional_iterator<_BiIter, _Tp, _Ref, _Distance>& __y)
operator !=	/Users/lij/.vim/stl/stl_iterator.h	/^inline bool operator!=(const istream_iterator<_Tp, _Distance>& __x,$/;"	f	signature:(const istream_iterator<_Tp, _Distance>& __x, const istream_iterator<_Tp, _Distance>& __y)
operator !=	/Users/lij/.vim/stl/stl_iterator.h	/^inline bool operator!=(const istreambuf_iterator<_CharT, _Traits>& __x,$/;"	f	signature:(const istreambuf_iterator<_CharT, _Traits>& __x, const istreambuf_iterator<_CharT, _Traits>& __y)
operator !=	/Users/lij/.vim/stl/stl_iterator.h	/^inline bool operator!=(const reverse_iterator<_Iterator>& __x, $/;"	f	signature:(const reverse_iterator<_Iterator>& __x, const reverse_iterator<_Iterator>& __y)
operator !=	/Users/lij/.vim/stl/stl_iterator.h	/^operator!=(const istream_iterator<_Tp, _CharT, _Traits, _Dist>& __x,$/;"	f	signature:(const istream_iterator<_Tp, _CharT, _Traits, _Dist>& __x, const istream_iterator<_Tp, _CharT, _Traits, _Dist>& __y)
operator !=	/Users/lij/.vim/stl/stl_iterator.h	/^operator!=(const reverse_iterator<_RandomAccessIterator, _Tp,$/;"	f	signature:(const reverse_iterator<_RandomAccessIterator, _Tp, _Reference, _Distance>& __x, const reverse_iterator<_RandomAccessIterator, _Tp, _Reference, _Distance>& __y)
operator !=	/Users/lij/.vim/stl/stl_list.h	/^  bool operator!=(const _List_iterator_base& __x) const {$/;"	f	struct:_List_iterator_base	access:public	signature:(const _List_iterator_base& __x) const
operator !=	/Users/lij/.vim/stl/stl_list.h	/^inline bool operator!=(const list<_Tp,_Alloc>& __x,$/;"	f	signature:(const list<_Tp,_Alloc>& __x, const list<_Tp,_Alloc>& __y)
operator !=	/Users/lij/.vim/stl/stl_map.h	/^inline bool operator!=(const map<_Key,_Tp,_Compare,_Alloc>& __x, $/;"	f	signature:(const map<_Key,_Tp,_Compare,_Alloc>& __x, const map<_Key,_Tp,_Compare,_Alloc>& __y)
operator !=	/Users/lij/.vim/stl/stl_multimap.h	/^inline bool operator!=(const multimap<_Key,_Tp,_Compare,_Alloc>& __x, $/;"	f	signature:(const multimap<_Key,_Tp,_Compare,_Alloc>& __x, const multimap<_Key,_Tp,_Compare,_Alloc>& __y)
operator !=	/Users/lij/.vim/stl/stl_multiset.h	/^inline bool operator!=(const multiset<_Key,_Compare,_Alloc>& __x, $/;"	f	signature:(const multiset<_Key,_Compare,_Alloc>& __x, const multiset<_Key,_Compare,_Alloc>& __y)
operator !=	/Users/lij/.vim/stl/stl_pair.h	/^inline bool operator!=(const pair<_T1, _T2>& __x, const pair<_T1, _T2>& __y) {$/;"	f	signature:(const pair<_T1, _T2>& __x, const pair<_T1, _T2>& __y)
operator !=	/Users/lij/.vim/stl/stl_queue.h	/^operator!=(const queue<_Tp, _Sequence>& __x, const queue<_Tp, _Sequence>& __y)$/;"	f	signature:(const queue<_Tp, _Sequence>& __x, const queue<_Tp, _Sequence>& __y)
operator !=	/Users/lij/.vim/stl/stl_relops.h	/^inline bool operator!=(const _Tp& __x, const _Tp& __y) {$/;"	f	signature:(const _Tp& __x, const _Tp& __y)
operator !=	/Users/lij/.vim/stl/stl_rope.h	/^inline bool operator!= (const _Rope_char_ptr_proxy<_CharT,_Alloc>& __x,$/;"	f	signature:(const _Rope_char_ptr_proxy<_CharT,_Alloc>& __x, const _Rope_char_ptr_proxy<_CharT,_Alloc>& __y)
operator !=	/Users/lij/.vim/stl/stl_rope.h	/^inline bool operator!= (const _Rope_const_iterator<_CharT,_Alloc>& __x,$/;"	f	signature:(const _Rope_const_iterator<_CharT,_Alloc>& __x, const _Rope_const_iterator<_CharT,_Alloc>& __y)
operator !=	/Users/lij/.vim/stl/stl_rope.h	/^inline bool operator!= (const _Rope_iterator<_CharT,_Alloc>& __x,$/;"	f	signature:(const _Rope_iterator<_CharT,_Alloc>& __x, const _Rope_iterator<_CharT,_Alloc>& __y)
operator !=	/Users/lij/.vim/stl/stl_rope.h	/^operator!= (const rope<_CharT,_Alloc>& __x, const rope<_CharT,_Alloc>& __y) {$/;"	f	signature:(const rope<_CharT,_Alloc>& __x, const rope<_CharT,_Alloc>& __y)
operator !=	/Users/lij/.vim/stl/stl_set.h	/^inline bool operator!=(const set<_Key,_Compare,_Alloc>& __x, $/;"	f	signature:(const set<_Key,_Compare,_Alloc>& __x, const set<_Key,_Compare,_Alloc>& __y)
operator !=	/Users/lij/.vim/stl/stl_slist.h	/^  bool operator!=(const _Slist_iterator_base& __x) const {$/;"	f	struct:_Slist_iterator_base	access:public	signature:(const _Slist_iterator_base& __x) const
operator !=	/Users/lij/.vim/stl/stl_slist.h	/^operator!=(const slist<_Tp,_Alloc>& _SL1, const slist<_Tp,_Alloc>& _SL2) {$/;"	f	signature:(const slist<_Tp,_Alloc>& _SL1, const slist<_Tp,_Alloc>& _SL2)
operator !=	/Users/lij/.vim/stl/stl_stack.h	/^bool operator!=(const stack<_Tp,_Seq>& __x, const stack<_Tp,_Seq>& __y)$/;"	f	signature:(const stack<_Tp,_Seq>& __x, const stack<_Tp,_Seq>& __y)
operator !=	/Users/lij/.vim/stl/stl_tree.h	/^inline bool operator!=(const _Rb_tree_base_iterator& __x,$/;"	f	signature:(const _Rb_tree_base_iterator& __x, const _Rb_tree_base_iterator& __y)
operator !=	/Users/lij/.vim/stl/stl_tree.h	/^operator!=(const _Rb_tree<_Key,_Value,_KeyOfValue,_Compare,_Alloc>& __x, $/;"	f	signature:(const _Rb_tree<_Key,_Value,_KeyOfValue,_Compare,_Alloc>& __x, const _Rb_tree<_Key,_Value,_KeyOfValue,_Compare,_Alloc>& __y)
operator !=	/Users/lij/.vim/stl/stl_vector.h	/^operator!=(const vector<_Tp, _Alloc>& __x, const vector<_Tp, _Alloc>& __y) {$/;"	f	signature:(const vector<_Tp, _Alloc>& __x, const vector<_Tp, _Alloc>& __y)
operator !=	/Users/lij/.vim/stl/string	/^operator!=(const _CharT* __s,$/;"	f	signature:(const _CharT* __s, const basic_string<_CharT,_Traits,_Alloc>& __y)
operator !=	/Users/lij/.vim/stl/string	/^operator!=(const basic_string<_CharT,_Traits,_Alloc>& __x,$/;"	f	signature:(const basic_string<_CharT,_Traits,_Alloc>& __x, const _CharT* __s)
operator !=	/Users/lij/.vim/stl/string	/^operator!=(const basic_string<_CharT,_Traits,_Alloc>& __x,$/;"	f	signature:(const basic_string<_CharT,_Traits,_Alloc>& __x, const basic_string<_CharT,_Traits,_Alloc>& __y)
operator !=	/Users/lij/.vim/stl/valarray	/^inline valarray<bool> operator!=(const _Tp& __c, const valarray<_Tp>& __x)$/;"	f	signature:(const _Tp& __c, const valarray<_Tp>& __x)
operator !=	/Users/lij/.vim/stl/valarray	/^inline valarray<bool> operator!=(const valarray<_Tp>& __x, const _Tp& __c)$/;"	f	signature:(const valarray<_Tp>& __x, const _Tp& __c)
operator !=	/Users/lij/.vim/stl/valarray	/^inline valarray<bool> operator!=(const valarray<_Tp>& __x,$/;"	f	signature:(const valarray<_Tp>& __x, const valarray<_Tp>& __y)
operator %	/Users/lij/.vim/stl/valarray	/^inline valarray<_Tp> operator%(const _Tp& __c, const valarray<_Tp>& __x) {$/;"	f	signature:(const _Tp& __c, const valarray<_Tp>& __x)
operator %	/Users/lij/.vim/stl/valarray	/^inline valarray<_Tp> operator%(const valarray<_Tp>& __x, const _Tp& __c) {$/;"	f	signature:(const valarray<_Tp>& __x, const _Tp& __c)
operator %	/Users/lij/.vim/stl/valarray	/^inline valarray<_Tp> operator%(const valarray<_Tp>& __x,$/;"	f	signature:(const valarray<_Tp>& __x, const valarray<_Tp>& __y)
operator %=	/Users/lij/.vim/stl/valarray	/^  valarray& operator%= (const valarray& __x) {$/;"	f	class:valarray	access:public	signature:(const valarray& __x)
operator %=	/Users/lij/.vim/stl/valarray	/^  valarray& operator%= (const value_type& __x) {$/;"	f	class:valarray	access:public	signature:(const value_type& __x)
operator %=	/Users/lij/.vim/stl/valarray	/^  void operator%= (const valarray<value_type>& __x) const {$/;"	f	class:gslice_array	access:public	signature:(const valarray<value_type>& __x) const
operator %=	/Users/lij/.vim/stl/valarray	/^  void operator%=(const valarray<value_type>& __x) const {$/;"	f	class:indirect_array	access:public	signature:(const valarray<value_type>& __x) const
operator %=	/Users/lij/.vim/stl/valarray	/^  void operator%=(const valarray<value_type>& __x) const {$/;"	f	class:mask_array	access:public	signature:(const valarray<value_type>& __x) const
operator %=	/Users/lij/.vim/stl/valarray	/^  void operator%=(const valarray<value_type>& __x) const {$/;"	f	class:slice_array	access:public	signature:(const valarray<value_type>& __x) const
operator &	/Users/lij/.vim/stl/bitset	/^inline bitset<_Nb> operator&(const bitset<_Nb>& __x, const bitset<_Nb>& __y) {$/;"	f	signature:(const bitset<_Nb>& __x, const bitset<_Nb>& __y)
operator &	/Users/lij/.vim/stl/ropeimpl.h	/^_Rope_char_ref_proxy<_CharT, _Alloc>::operator& () const {$/;"	f	class:_Rope_char_ref_proxy	signature:() const
operator &	/Users/lij/.vim/stl/stl_rope.h	/^    _Rope_char_ptr_proxy<_CharT,_Alloc> operator& () const;$/;"	p	class:_Rope_char_ref_proxy	access:public	signature:() const
operator &	/Users/lij/.vim/stl/valarray	/^inline valarray<_Tp> operator&(const _Tp& __c, const valarray<_Tp>& __x) {$/;"	f	signature:(const _Tp& __c, const valarray<_Tp>& __x)
operator &	/Users/lij/.vim/stl/valarray	/^inline valarray<_Tp> operator&(const valarray<_Tp>& __x, const _Tp& __c) {$/;"	f	signature:(const valarray<_Tp>& __x, const _Tp& __c)
operator &	/Users/lij/.vim/stl/valarray	/^inline valarray<_Tp> operator&(const valarray<_Tp>& __x,$/;"	f	signature:(const valarray<_Tp>& __x, const valarray<_Tp>& __y)
operator &&	/Users/lij/.vim/stl/valarray	/^inline valarray<bool> operator&&(const _Tp& __c, const valarray<_Tp>& __x)$/;"	f	signature:(const _Tp& __c, const valarray<_Tp>& __x)
operator &&	/Users/lij/.vim/stl/valarray	/^inline valarray<bool> operator&&(const valarray<_Tp>& __x, const _Tp& __c)$/;"	f	signature:(const valarray<_Tp>& __x, const _Tp& __c)
operator &&	/Users/lij/.vim/stl/valarray	/^inline valarray<bool> operator&&(const valarray<_Tp>& __x,$/;"	f	signature:(const valarray<_Tp>& __x, const valarray<_Tp>& __y)
operator &=	/Users/lij/.vim/stl/bitset	/^  bitset<_Nb>& operator&=(const bitset<_Nb>& __rhs) {$/;"	f	class:bitset	access:public	signature:(const bitset<_Nb>& __rhs)
operator &=	/Users/lij/.vim/stl/valarray	/^  valarray& operator&= (const valarray& __x) {$/;"	f	class:valarray	access:public	signature:(const valarray& __x)
operator &=	/Users/lij/.vim/stl/valarray	/^  valarray& operator&= (const value_type& __x) {$/;"	f	class:valarray	access:public	signature:(const value_type& __x)
operator &=	/Users/lij/.vim/stl/valarray	/^  void operator&= (const valarray<value_type>& __x) const {$/;"	f	class:gslice_array	access:public	signature:(const valarray<value_type>& __x) const
operator &=	/Users/lij/.vim/stl/valarray	/^  void operator&=(const valarray<value_type>& __x) const {$/;"	f	class:indirect_array	access:public	signature:(const valarray<value_type>& __x) const
operator &=	/Users/lij/.vim/stl/valarray	/^  void operator&=(const valarray<value_type>& __x) const {$/;"	f	class:mask_array	access:public	signature:(const valarray<value_type>& __x) const
operator &=	/Users/lij/.vim/stl/valarray	/^  void operator&=(const valarray<value_type>& __x) const {$/;"	f	class:slice_array	access:public	signature:(const valarray<value_type>& __x) const
operator ()	/Users/lij/.vim/stl/ropeimpl.h	/^	bool operator() (const _CharT* __leaf, size_t __n) {$/;"	f	class:_Rope_find_char_char_consumer	access:public	signature:(const _CharT* __leaf, size_t __n)
operator ()	/Users/lij/.vim/stl/ropeimpl.h	/^	bool operator() (const _CharT* __leaf, size_t __n) {$/;"	f	class:_Rope_flatten_char_consumer	access:public	signature:(const _CharT* __leaf, size_t __n)
operator ()	/Users/lij/.vim/stl/ropeimpl.h	/^	bool operator() (const _CharT* __leaf, size_t __n);$/;"	p	class:_Rope_insert_char_consumer	access:public	signature:(const _CharT* __leaf, size_t __n)
operator ()	/Users/lij/.vim/stl/ropeimpl.h	/^  bool _Rope_insert_char_consumer<_CharT, _Traits>::operator()$/;"	f	class:_Rope_insert_char_consumer	signature:(const _CharT* __leaf, size_t __n)
operator ()	/Users/lij/.vim/stl/ropeimpl.h	/^  bool _Rope_insert_char_consumer<_CharT>::operator()$/;"	f	class:_Rope_insert_char_consumer	signature:(const _CharT* __leaf, size_t __n)
operator ()	/Users/lij/.vim/stl/ropeimpl.h	/^  inline bool _Rope_insert_char_consumer<char>::operator()$/;"	f	class:_Rope_insert_char_consumer	signature:(const char* __leaf, size_t __n)
operator ()	/Users/lij/.vim/stl/stl_ctraits_fns.h	/^  bool operator()(const typename _Traits::char_type& __x,$/;"	f	struct:_Eq_int_traits	access:public	signature:(const typename _Traits::char_type& __x, const typename _Traits::int_type& __y) const
operator ()	/Users/lij/.vim/stl/stl_ctraits_fns.h	/^  bool operator()(const typename _Traits::char_type& __x,$/;"	f	struct:_Eq_traits	access:public	signature:(const typename _Traits::char_type& __x, const typename _Traits::char_type& __y) const
operator ()	/Users/lij/.vim/stl/stl_ctraits_fns.h	/^  bool operator()(const typename _Traits::char_type& __x,$/;"	f	struct:_Lt_traits	access:public	signature:(const typename _Traits::char_type& __x, const typename _Traits::char_type& __y) const
operator ()	/Users/lij/.vim/stl/stl_function.h	/^    _Result operator()(_Arg1 __x, _Arg2 __y) const {$/;"	f	class:pointer_to_binary_function	access:public	signature:(_Arg1 __x, _Arg2 __y) const
operator ()	/Users/lij/.vim/stl/stl_function.h	/^  _Arg1 operator()(const _Arg1& __x, const _Arg2&) const { return __x; }$/;"	f	struct:_Project1st	access:public	signature:(const _Arg1& __x, const _Arg2&) const
operator ()	/Users/lij/.vim/stl/stl_function.h	/^  _Arg2 operator()(const _Arg1&, const _Arg2& __y) const { return __y; }$/;"	f	struct:_Project2nd	access:public	signature:(const _Arg1&, const _Arg2& __y) const
operator ()	/Users/lij/.vim/stl/stl_function.h	/^  _Result operator()(_Arg __x) const { return _M_ptr(__x); }$/;"	f	class:pointer_to_unary_function	access:public	signature:(_Arg __x) const
operator ()	/Users/lij/.vim/stl/stl_function.h	/^  _Ret operator()(_Tp& __r) const { return (__r.*_M_f)(); }$/;"	f	class:mem_fun_ref_t	access:public	signature:(_Tp& __r) const
operator ()	/Users/lij/.vim/stl/stl_function.h	/^  _Ret operator()(_Tp& __r, _Arg __x) const { return (__r.*_M_f)(__x); }$/;"	f	class:mem_fun1_ref_t	access:public	signature:(_Tp& __r, _Arg __x) const
operator ()	/Users/lij/.vim/stl/stl_function.h	/^  _Ret operator()(_Tp* __p) const { return (__p->*_M_f)(); }$/;"	f	class:mem_fun_t	access:public	signature:(_Tp* __p) const
operator ()	/Users/lij/.vim/stl/stl_function.h	/^  _Ret operator()(_Tp* __p, _Arg __x) const { return (__p->*_M_f)(__x); }$/;"	f	class:mem_fun1_t	access:public	signature:(_Tp* __p, _Arg __x) const
operator ()	/Users/lij/.vim/stl/stl_function.h	/^  _Ret operator()(const _Tp& __r) const { return (__r.*_M_f)(); }$/;"	f	class:const_mem_fun_ref_t	access:public	signature:(const _Tp& __r) const
operator ()	/Users/lij/.vim/stl/stl_function.h	/^  _Ret operator()(const _Tp& __r, _Arg __x) const { return (__r.*_M_f)(__x); }$/;"	f	class:const_mem_fun1_ref_t	access:public	signature:(const _Tp& __r, _Arg __x) const
operator ()	/Users/lij/.vim/stl/stl_function.h	/^  _Ret operator()(const _Tp* __p) const { return (__p->*_M_f)(); }$/;"	f	class:const_mem_fun_t	access:public	signature:(const _Tp* __p) const
operator ()	/Users/lij/.vim/stl/stl_function.h	/^  _Ret operator()(const _Tp* __p, _Arg __x) const$/;"	f	class:const_mem_fun1_t	access:public	signature:(const _Tp* __p, _Arg __x) const
operator ()	/Users/lij/.vim/stl/stl_function.h	/^  _Tp operator()(const _Tp& __x) const { return -__x; }$/;"	f	struct:negate	access:public	signature:(const _Tp& __x) const
operator ()	/Users/lij/.vim/stl/stl_function.h	/^  _Tp operator()(const _Tp& __x, const _Tp& __y) const { return __x % __y; }$/;"	f	struct:modulus	access:public	signature:(const _Tp& __x, const _Tp& __y) const
operator ()	/Users/lij/.vim/stl/stl_function.h	/^  _Tp operator()(const _Tp& __x, const _Tp& __y) const { return __x * __y; }$/;"	f	struct:multiplies	access:public	signature:(const _Tp& __x, const _Tp& __y) const
operator ()	/Users/lij/.vim/stl/stl_function.h	/^  _Tp operator()(const _Tp& __x, const _Tp& __y) const { return __x + __y; }$/;"	f	struct:plus	access:public	signature:(const _Tp& __x, const _Tp& __y) const
operator ()	/Users/lij/.vim/stl/stl_function.h	/^  _Tp operator()(const _Tp& __x, const _Tp& __y) const { return __x - __y; }$/;"	f	struct:minus	access:public	signature:(const _Tp& __x, const _Tp& __y) const
operator ()	/Users/lij/.vim/stl/stl_function.h	/^  _Tp operator()(const _Tp& __x, const _Tp& __y) const { return __x \/ __y; }$/;"	f	struct:divides	access:public	signature:(const _Tp& __x, const _Tp& __y) const
operator ()	/Users/lij/.vim/stl/stl_function.h	/^  bool operator()(const _Tp& __x) const { return !__x; }$/;"	f	struct:logical_not	access:public	signature:(const _Tp& __x) const
operator ()	/Users/lij/.vim/stl/stl_function.h	/^  bool operator()(const _Tp& __x, const _Tp& __y) const { return __x != __y; }$/;"	f	struct:not_equal_to	access:public	signature:(const _Tp& __x, const _Tp& __y) const
operator ()	/Users/lij/.vim/stl/stl_function.h	/^  bool operator()(const _Tp& __x, const _Tp& __y) const { return __x && __y; }$/;"	f	struct:logical_and	access:public	signature:(const _Tp& __x, const _Tp& __y) const
operator ()	/Users/lij/.vim/stl/stl_function.h	/^  bool operator()(const _Tp& __x, const _Tp& __y) const { return __x < __y; }$/;"	f	struct:less	access:public	signature:(const _Tp& __x, const _Tp& __y) const
operator ()	/Users/lij/.vim/stl/stl_function.h	/^  bool operator()(const _Tp& __x, const _Tp& __y) const { return __x <= __y; }$/;"	f	struct:less_equal	access:public	signature:(const _Tp& __x, const _Tp& __y) const
operator ()	/Users/lij/.vim/stl/stl_function.h	/^  bool operator()(const _Tp& __x, const _Tp& __y) const { return __x == __y; }$/;"	f	struct:equal_to	access:public	signature:(const _Tp& __x, const _Tp& __y) const
operator ()	/Users/lij/.vim/stl/stl_function.h	/^  bool operator()(const _Tp& __x, const _Tp& __y) const { return __x > __y; }$/;"	f	struct:greater	access:public	signature:(const _Tp& __x, const _Tp& __y) const
operator ()	/Users/lij/.vim/stl/stl_function.h	/^  bool operator()(const _Tp& __x, const _Tp& __y) const { return __x >= __y; }$/;"	f	struct:greater_equal	access:public	signature:(const _Tp& __x, const _Tp& __y) const
operator ()	/Users/lij/.vim/stl/stl_function.h	/^  bool operator()(const _Tp& __x, const _Tp& __y) const { return __x || __y; }$/;"	f	struct:logical_or	access:public	signature:(const _Tp& __x, const _Tp& __y) const
operator ()	/Users/lij/.vim/stl/stl_function.h	/^  bool operator()(const typename _Predicate::argument_type& __x) const {$/;"	f	class:unary_negate	access:public	signature:(const typename _Predicate::argument_type& __x) const
operator ()	/Users/lij/.vim/stl/stl_function.h	/^  bool operator()(const typename _Predicate::first_argument_type& __x, $/;"	f	class:binary_negate	access:public	signature:(const typename _Predicate::first_argument_type& __x, const typename _Predicate::second_argument_type& __y) const
operator ()	/Users/lij/.vim/stl/stl_function.h	/^  const _Tp& operator()(const _Tp& __x) const { return __x; }$/;"	f	struct:_Identity	access:public	signature:(const _Tp& __x) const
operator ()	/Users/lij/.vim/stl/stl_function.h	/^  const result_type& operator()() const { return _M_val; }$/;"	f	struct:_Constant_void_fun	access:public	signature:() const
operator ()	/Users/lij/.vim/stl/stl_function.h	/^  const result_type& operator()(const _Arg1&, const _Arg2&) const {$/;"	f	struct:_Constant_binary_fun	access:public	signature:(const _Arg1&, const _Arg2&) const
operator ()	/Users/lij/.vim/stl/stl_function.h	/^  const result_type& operator()(const _Argument&) const { return _M_val; }$/;"	f	struct:_Constant_unary_fun	access:public	signature:(const _Argument&) const
operator ()	/Users/lij/.vim/stl/stl_function.h	/^  const typename _Pair::first_type& operator()(const _Pair& __x) const {$/;"	f	struct:_Select1st	access:public	signature:(const _Pair& __x) const
operator ()	/Users/lij/.vim/stl/stl_function.h	/^  const typename _Pair::second_type& operator()(const _Pair& __x) const {$/;"	f	struct:_Select2nd	access:public	signature:(const _Pair& __x) const
operator ()	/Users/lij/.vim/stl/stl_function.h	/^  operator()(const typename _Operation2::argument_type& __x) const {$/;"	f	class:binary_compose	access:public	signature:(const typename _Operation2::argument_type& __x) const
operator ()	/Users/lij/.vim/stl/stl_function.h	/^  operator()(const typename _Operation2::argument_type& __x) const {$/;"	f	class:unary_compose	access:public	signature:(const typename _Operation2::argument_type& __x) const
operator ()	/Users/lij/.vim/stl/stl_function.h	/^  operator()(const typename _Operation::first_argument_type& __x) const {$/;"	f	class:binder2nd	access:public	signature:(const typename _Operation::first_argument_type& __x) const
operator ()	/Users/lij/.vim/stl/stl_function.h	/^  operator()(const typename _Operation::second_argument_type& __x) const {$/;"	f	class:binder1st	access:public	signature:(const typename _Operation::second_argument_type& __x) const
operator ()	/Users/lij/.vim/stl/stl_function.h	/^  unsigned int operator()(unsigned int __limit) {$/;"	f	class:subtractive_rng	access:public	signature:(unsigned int __limit)
operator ()	/Users/lij/.vim/stl/stl_function.h	/^  void operator()(_Tp& __r) const { (__r.*_M_f)(); }$/;"	f	class:mem_fun_ref_t	access:public	signature:(_Tp& __r) const
operator ()	/Users/lij/.vim/stl/stl_function.h	/^  void operator()(_Tp& __r, _Arg __x) const { (__r.*_M_f)(__x); }$/;"	f	class:mem_fun1_ref_t	access:public	signature:(_Tp& __r, _Arg __x) const
operator ()	/Users/lij/.vim/stl/stl_function.h	/^  void operator()(_Tp* __p) const { (__p->*_M_f)(); }$/;"	f	class:mem_fun_t	access:public	signature:(_Tp* __p) const
operator ()	/Users/lij/.vim/stl/stl_function.h	/^  void operator()(_Tp* __p, _Arg __x) const { (__p->*_M_f)(__x); }$/;"	f	class:mem_fun1_t	access:public	signature:(_Tp* __p, _Arg __x) const
operator ()	/Users/lij/.vim/stl/stl_function.h	/^  void operator()(const _Tp& __r) const { (__r.*_M_f)(); }$/;"	f	class:const_mem_fun_ref_t	access:public	signature:(const _Tp& __r) const
operator ()	/Users/lij/.vim/stl/stl_function.h	/^  void operator()(const _Tp& __r, _Arg __x) const { (__r.*_M_f)(__x); }$/;"	f	class:const_mem_fun1_ref_t	access:public	signature:(const _Tp& __r, _Arg __x) const
operator ()	/Users/lij/.vim/stl/stl_function.h	/^  void operator()(const _Tp* __p) const { (__p->*_M_f)(); }$/;"	f	class:const_mem_fun_t	access:public	signature:(const _Tp* __p) const
operator ()	/Users/lij/.vim/stl/stl_function.h	/^  void operator()(const _Tp* __p, _Arg __x) const { (__p->*_M_f)(__x); }$/;"	f	class:const_mem_fun1_t	access:public	signature:(const _Tp* __p, _Arg __x) const
operator ()	/Users/lij/.vim/stl/stl_hash_fun.h	/^  size_t operator()(char __x) const { return __x; }$/;"	f	struct:hash	access:public	signature:(char __x) const
operator ()	/Users/lij/.vim/stl/stl_hash_fun.h	/^  size_t operator()(const char* __s) const { return __stl_hash_string(__s); }$/;"	f	struct:hash	access:public	signature:(const char* __s) const
operator ()	/Users/lij/.vim/stl/stl_hash_fun.h	/^  size_t operator()(int __x) const { return __x; }$/;"	f	struct:hash	access:public	signature:(int __x) const
operator ()	/Users/lij/.vim/stl/stl_hash_fun.h	/^  size_t operator()(long __x) const { return __x; }$/;"	f	struct:hash	access:public	signature:(long __x) const
operator ()	/Users/lij/.vim/stl/stl_hash_fun.h	/^  size_t operator()(short __x) const { return __x; }$/;"	f	struct:hash	access:public	signature:(short __x) const
operator ()	/Users/lij/.vim/stl/stl_hash_fun.h	/^  size_t operator()(unsigned char __x) const { return __x; }$/;"	f	struct:hash	access:public	signature:(unsigned char __x) const
operator ()	/Users/lij/.vim/stl/stl_hash_fun.h	/^  size_t operator()(unsigned int __x) const { return __x; }$/;"	f	struct:hash	access:public	signature:(unsigned int __x) const
operator ()	/Users/lij/.vim/stl/stl_hash_fun.h	/^  size_t operator()(unsigned long __x) const { return __x; }$/;"	f	struct:hash	access:public	signature:(unsigned long __x) const
operator ()	/Users/lij/.vim/stl/stl_hash_fun.h	/^  size_t operator()(unsigned short __x) const { return __x; }$/;"	f	struct:hash	access:public	signature:(unsigned short __x) const
operator ()	/Users/lij/.vim/stl/stl_map.h	/^    bool operator()(const value_type& __x, const value_type& __y) const {$/;"	f	class:map::value_compare	access:public	signature:(const value_type& __x, const value_type& __y) const
operator ()	/Users/lij/.vim/stl/stl_multimap.h	/^    bool operator()(const value_type& __x, const value_type& __y) const {$/;"	f	class:multimap::value_compare	access:public	signature:(const value_type& __x, const value_type& __y) const
operator ()	/Users/lij/.vim/stl/stl_rope.h	/^        rope<_CharT,_Alloc> operator() (const rope<_CharT,_Alloc>& __x,$/;"	f	struct:_Rope_Concat_fn	access:public	signature:(const rope<_CharT,_Alloc>& __x, const rope<_CharT,_Alloc>& __y)
operator ()	/Users/lij/.vim/stl/stl_rope.h	/^        virtual bool operator()(const _CharT* __buffer, size_t __len) = 0;$/;"	p	class:_Rope_char_consumer	access:public	signature:(const _CharT* __buffer, size_t __len)
operator ()	/Users/lij/.vim/stl/stl_rope.h	/^        virtual void operator()(size_t __start_pos, size_t __len, $/;"	p	class:char_producer	access:public	signature:(size_t __start_pos, size_t __len, _CharT* __buffer)
operator ()	/Users/lij/.vim/stl/stl_rope.h	/^    virtual void operator()(size_t __start_pos, size_t __req_len,$/;"	f	struct:_Rope_RopeSubstring	access:public	signature:(size_t __start_pos, size_t __req_len, _CharT* __buffer)
operator ()	/Users/lij/.vim/stl/stl_rope.h	/^  size_t operator()(const crope& __str) const$/;"	f	struct:hash	access:public	signature:(const crope& __str) const
operator ()	/Users/lij/.vim/stl/stl_rope.h	/^  size_t operator()(const wrope& __str) const$/;"	f	struct:hash	access:public	signature:(const wrope& __str) const
operator ()	/Users/lij/.vim/stl/string	/^  bool operator()(const typename _Traits::char_type& __x) const {$/;"	f	struct:_Not_within_traits	access:public	signature:(const typename _Traits::char_type& __x) const
operator ()	/Users/lij/.vim/stl/string	/^  size_t operator()(const basic_string<_CharT,_Traits,_Alloc>& __s) const$/;"	f	struct:hash	access:public	signature:(const basic_string<_CharT,_Traits,_Alloc>& __s) const
operator ()	/Users/lij/.vim/stl/string	/^  size_t operator()(const string& __s) const$/;"	f	struct:hash	access:public	signature:(const string& __s) const
operator ()	/Users/lij/.vim/stl/string	/^  size_t operator()(const wstring& __s) const$/;"	f	struct:hash	access:public	signature:(const wstring& __s) const
operator *	/Users/lij/.vim/stl/stl_bvector.h	/^  const_reference operator*() const {$/;"	f	struct:_Bit_const_iterator	access:public	signature:() const
operator *	/Users/lij/.vim/stl/stl_bvector.h	/^  reference operator*() const { return reference(_M_p, 1U << _M_offset); }$/;"	f	struct:_Bit_iterator	access:public	signature:() const
operator *	/Users/lij/.vim/stl/stl_deque.h	/^  reference operator*() const { return *_M_cur; }$/;"	f	struct:_Deque_iterator	access:public	signature:() const
operator *	/Users/lij/.vim/stl/stl_hash_map.h	/^  insert_iterator<_Container>& operator*() { return *this; }$/;"	f	class:insert_iterator	access:public	signature:()
operator *	/Users/lij/.vim/stl/stl_hash_set.h	/^  insert_iterator<_Container>& operator*() { return *this; }$/;"	f	class:insert_iterator	access:public	signature:()
operator *	/Users/lij/.vim/stl/stl_hashtable.h	/^  reference operator*() const { return _M_cur->_M_val; }$/;"	f	struct:_Hashtable_const_iterator	access:public	signature:() const
operator *	/Users/lij/.vim/stl/stl_hashtable.h	/^  reference operator*() const { return _M_cur->_M_val; }$/;"	f	struct:_Hashtable_iterator	access:public	signature:() const
operator *	/Users/lij/.vim/stl/stl_iterator.h	/^  _Reference operator*() const { return *(current - 1); }$/;"	f	class:reverse_iterator	access:public	signature:() const
operator *	/Users/lij/.vim/stl/stl_iterator.h	/^  _Reference operator*() const {$/;"	f	class:reverse_bidirectional_iterator	access:public	signature:() const
operator *	/Users/lij/.vim/stl/stl_iterator.h	/^  back_insert_iterator<_Container>& operator*() { return *this; }$/;"	f	class:back_insert_iterator	access:public	signature:()
operator *	/Users/lij/.vim/stl/stl_iterator.h	/^  char_type operator*() const $/;"	f	class:istreambuf_iterator	access:public	signature:() const
operator *	/Users/lij/.vim/stl/stl_iterator.h	/^  front_insert_iterator<_Container>& operator*() { return *this; }$/;"	f	class:front_insert_iterator	access:public	signature:()
operator *	/Users/lij/.vim/stl/stl_iterator.h	/^  insert_iterator<_Container>& operator*() { return *this; }$/;"	f	class:insert_iterator	access:public	signature:()
operator *	/Users/lij/.vim/stl/stl_iterator.h	/^  ostream_iterator<_Tp>& operator*() { return *this; }$/;"	f	class:ostream_iterator	access:public	signature:()
operator *	/Users/lij/.vim/stl/stl_iterator.h	/^  ostreambuf_iterator& operator*()     { return *this; }$/;"	f	class:ostreambuf_iterator	access:public	signature:()
operator *	/Users/lij/.vim/stl/stl_iterator.h	/^  reference operator*() const { return _M_value; }$/;"	f	class:istream_iterator	access:public	signature:() const
operator *	/Users/lij/.vim/stl/stl_iterator.h	/^  reference operator*() const {$/;"	f	class:reverse_iterator	access:public	signature:() const
operator *	/Users/lij/.vim/stl/stl_list.h	/^  reference operator*() const { return ((_Node*) _M_node)->_M_data; }$/;"	f	struct:_List_iterator	access:public	signature:() const
operator *	/Users/lij/.vim/stl/stl_raw_storage_iter.h	/^  raw_storage_iterator& operator*() { return *this; }$/;"	f	class:raw_storage_iterator	access:public	signature:()
operator *	/Users/lij/.vim/stl/stl_rope.h	/^        sequence_buffer& operator*() { return *this; }$/;"	f	class:sequence_buffer	access:public	signature:()
operator *	/Users/lij/.vim/stl/stl_rope.h	/^    _Rope_RopeRep<_CharT,_Alloc>& operator*() { return *_M_ptr; }$/;"	f	struct:_Rope_self_destruct_ptr	access:public	signature:()
operator *	/Users/lij/.vim/stl/stl_rope.h	/^    _Rope_char_ref_proxy<_CharT,_Alloc> operator*() const {$/;"	f	class:_Rope_char_ptr_proxy	access:public	signature:() const
operator *	/Users/lij/.vim/stl/stl_rope.h	/^    reference operator*() {$/;"	f	class:_Rope_const_iterator	access:public	signature:()
operator *	/Users/lij/.vim/stl/stl_rope.h	/^    reference operator*() {$/;"	f	class:_Rope_iterator	access:public	signature:()
operator *	/Users/lij/.vim/stl/stl_slist.h	/^  insert_iterator<_Container>& operator*() { return *this; }$/;"	f	class:insert_iterator	access:public	signature:()
operator *	/Users/lij/.vim/stl/stl_slist.h	/^  reference operator*() const { return ((_Node*) _M_node)->_M_data; }$/;"	f	struct:_Slist_iterator	access:public	signature:() const
operator *	/Users/lij/.vim/stl/stl_tree.h	/^  reference operator*() const { return _Link_type(_M_node)->_M_value_field; }$/;"	f	struct:_Rb_tree_iterator	access:public	signature:() const
operator *	/Users/lij/.vim/stl/valarray	/^inline valarray<_Tp> operator*(const _Tp& __c, const valarray<_Tp>& __x) {$/;"	f	signature:(const _Tp& __c, const valarray<_Tp>& __x)
operator *	/Users/lij/.vim/stl/valarray	/^inline valarray<_Tp> operator*(const valarray<_Tp>& __x, const _Tp& __c) {$/;"	f	signature:(const valarray<_Tp>& __x, const _Tp& __c)
operator *	/Users/lij/.vim/stl/valarray	/^inline valarray<_Tp> operator*(const valarray<_Tp>& __x,$/;"	f	signature:(const valarray<_Tp>& __x, const valarray<_Tp>& __y)
operator *=	/Users/lij/.vim/stl/valarray	/^  valarray& operator*= (const valarray& __x) {$/;"	f	class:valarray	access:public	signature:(const valarray& __x)
operator *=	/Users/lij/.vim/stl/valarray	/^  valarray& operator*= (const value_type& __x) {$/;"	f	class:valarray	access:public	signature:(const value_type& __x)
operator *=	/Users/lij/.vim/stl/valarray	/^  void operator*= (const valarray<value_type>& __x) const {$/;"	f	class:gslice_array	access:public	signature:(const valarray<value_type>& __x) const
operator *=	/Users/lij/.vim/stl/valarray	/^  void operator*=(const valarray<value_type>& __x) const {$/;"	f	class:indirect_array	access:public	signature:(const valarray<value_type>& __x) const
operator *=	/Users/lij/.vim/stl/valarray	/^  void operator*=(const valarray<value_type>& __x) const {$/;"	f	class:mask_array	access:public	signature:(const valarray<value_type>& __x) const
operator *=	/Users/lij/.vim/stl/valarray	/^  void operator*=(const valarray<value_type>& __x) const {$/;"	f	class:slice_array	access:public	signature:(const valarray<value_type>& __x) const
operator +	/Users/lij/.vim/stl/stl_bvector.h	/^  const_iterator operator+(difference_type __i) const {$/;"	f	struct:_Bit_const_iterator	access:public	signature:(difference_type __i) const
operator +	/Users/lij/.vim/stl/stl_bvector.h	/^  iterator operator+(difference_type __i) const {$/;"	f	struct:_Bit_iterator	access:public	signature:(difference_type __i) const
operator +	/Users/lij/.vim/stl/stl_bvector.h	/^operator+(ptrdiff_t __n, const _Bit_const_iterator& __x) { return __x + __n; }$/;"	f	signature:(ptrdiff_t __n, const _Bit_const_iterator& __x)
operator +	/Users/lij/.vim/stl/stl_bvector.h	/^operator+(ptrdiff_t __n, const _Bit_iterator& __x) { return __x + __n; }$/;"	f	signature:(ptrdiff_t __n, const _Bit_iterator& __x)
operator +	/Users/lij/.vim/stl/stl_deque.h	/^  _Self operator+(difference_type __n) const$/;"	f	struct:_Deque_iterator	access:public	signature:(difference_type __n) const
operator +	/Users/lij/.vim/stl/stl_deque.h	/^operator+(ptrdiff_t __n, const _Deque_iterator<_Tp, _Ref, _Ptr>& __x)$/;"	f	signature:(ptrdiff_t __n, const _Deque_iterator<_Tp, _Ref, _Ptr>& __x)
operator +	/Users/lij/.vim/stl/stl_iterator.h	/^  _Self operator+(_Distance __n) const {$/;"	f	class:reverse_iterator	access:public	signature:(_Distance __n) const
operator +	/Users/lij/.vim/stl/stl_iterator.h	/^  _Self operator+(difference_type __n) const {$/;"	f	class:reverse_iterator	access:public	signature:(difference_type __n) const
operator +	/Users/lij/.vim/stl/stl_iterator.h	/^operator+(_Dist __n,$/;"	f	signature:(_Dist __n, const reverse_iterator<_RandAccIter, _Tp, _Ref, _Dist>& __x)
operator +	/Users/lij/.vim/stl/stl_iterator.h	/^operator+(typename reverse_iterator<_Iterator>::difference_type __n,$/;"	f	signature:(typename reverse_iterator<_Iterator>::difference_type __n, const reverse_iterator<_Iterator>& __x)
operator +	/Users/lij/.vim/stl/stl_rope.h	/^        operator+ (const rope<_CharT2,_Alloc2>& __left, _CharT2 __right);$/;"	p	class:rope	access:friend	signature:(const rope<_CharT2,_Alloc2>& __left, _CharT2 __right)
operator +	/Users/lij/.vim/stl/stl_rope.h	/^        operator+ (const rope<_CharT2,_Alloc2>& __left,$/;"	p	class:rope	access:friend	signature:(const rope<_CharT2,_Alloc2>& __left, const _CharT2* __right)
operator +	/Users/lij/.vim/stl/stl_rope.h	/^        operator+ (const rope<_CharT2,_Alloc2>& __left,$/;"	p	class:rope	access:friend	signature:(const rope<_CharT2,_Alloc2>& __left, const rope<_CharT2,_Alloc2>& __right)
operator +	/Users/lij/.vim/stl/stl_rope.h	/^    friend _Rope_const_iterator<_CharT2,_Alloc2> operator+$/;"	p	class:_Rope_const_iterator	access:friend	signature:(const _Rope_const_iterator<_CharT2,_Alloc2>& __x, ptrdiff_t __n)
operator +	/Users/lij/.vim/stl/stl_rope.h	/^    friend _Rope_const_iterator<_CharT2,_Alloc2> operator+$/;"	p	class:_Rope_const_iterator	access:friend	signature:(ptrdiff_t __n, const _Rope_const_iterator<_CharT2,_Alloc2>& __x)
operator +	/Users/lij/.vim/stl/stl_rope.h	/^    friend _Rope_iterator<_CharT2,_Alloc2> operator+$/;"	p	class:_Rope_iterator	access:friend	signature:(const _Rope_iterator<_CharT2,_Alloc2>& __x, ptrdiff_t __n)
operator +	/Users/lij/.vim/stl/stl_rope.h	/^    friend _Rope_iterator<_CharT2,_Alloc2> operator+$/;"	p	class:_Rope_iterator	access:friend	signature:(ptrdiff_t __n, const _Rope_iterator<_CharT2,_Alloc2>& __x)
operator +	/Users/lij/.vim/stl/stl_rope.h	/^_Rope_const_iterator<_CharT,_Alloc> operator+$/;"	p	signature:(const _Rope_const_iterator<_CharT,_Alloc>& __x, ptrdiff_t __n)
operator +	/Users/lij/.vim/stl/stl_rope.h	/^_Rope_const_iterator<_CharT,_Alloc> operator+$/;"	p	signature:(ptrdiff_t __n, const _Rope_const_iterator<_CharT,_Alloc>& __x)
operator +	/Users/lij/.vim/stl/stl_rope.h	/^_Rope_iterator<_CharT,_Alloc> operator+$/;"	p	signature:(const _Rope_iterator<_CharT,_Alloc>& __x, ptrdiff_t __n)
operator +	/Users/lij/.vim/stl/stl_rope.h	/^_Rope_iterator<_CharT,_Alloc> operator+$/;"	p	signature:(ptrdiff_t __n, const _Rope_iterator<_CharT,_Alloc>& __x)
operator +	/Users/lij/.vim/stl/stl_rope.h	/^operator+ (const rope<_CharT,_Alloc>& __left, _CharT __right) {$/;"	f	signature:(const rope<_CharT,_Alloc>& __left, _CharT __right)
operator +	/Users/lij/.vim/stl/stl_rope.h	/^operator+ (const rope<_CharT,_Alloc>& __left,$/;"	f	signature:(const rope<_CharT,_Alloc>& __left, const _CharT* __right)
operator +	/Users/lij/.vim/stl/stl_rope.h	/^operator+ (const rope<_CharT,_Alloc>& __left,$/;"	f	signature:(const rope<_CharT,_Alloc>& __left, const rope<_CharT,_Alloc>& __right)
operator +	/Users/lij/.vim/stl/stl_rope.h	/^operator+(const _Rope_const_iterator<_CharT,_Alloc>& __x, ptrdiff_t __n) {$/;"	f	signature:(const _Rope_const_iterator<_CharT,_Alloc>& __x, ptrdiff_t __n)
operator +	/Users/lij/.vim/stl/stl_rope.h	/^operator+(const _Rope_iterator<_CharT,_Alloc>& __x,$/;"	f	signature:(const _Rope_iterator<_CharT,_Alloc>& __x, ptrdiff_t __n)
operator +	/Users/lij/.vim/stl/stl_rope.h	/^operator+(ptrdiff_t __n, const _Rope_const_iterator<_CharT,_Alloc>& __x) {$/;"	f	signature:(ptrdiff_t __n, const _Rope_const_iterator<_CharT,_Alloc>& __x)
operator +	/Users/lij/.vim/stl/stl_rope.h	/^operator+(ptrdiff_t __n, const _Rope_iterator<_CharT,_Alloc>& __x) {$/;"	f	signature:(ptrdiff_t __n, const _Rope_iterator<_CharT,_Alloc>& __x)
operator +	/Users/lij/.vim/stl/stl_rope.h	/^rope<_CharT,_Alloc> operator+ (const rope<_CharT,_Alloc>& __left,$/;"	p	signature:(const rope<_CharT,_Alloc>& __left, _CharT __right)
operator +	/Users/lij/.vim/stl/stl_rope.h	/^rope<_CharT,_Alloc> operator+ (const rope<_CharT,_Alloc>& __left,$/;"	p	signature:(const rope<_CharT,_Alloc>& __left, const _CharT* __right)
operator +	/Users/lij/.vim/stl/stl_rope.h	/^rope<_CharT,_Alloc> operator+ (const rope<_CharT,_Alloc>& __left,$/;"	p	signature:(const rope<_CharT,_Alloc>& __left, const rope<_CharT,_Alloc>& __right)
operator +	/Users/lij/.vim/stl/string	/^operator+(_CharT __c,$/;"	f	signature:(_CharT __c, const basic_string<_CharT,_Traits,_Alloc>& __y)
operator +	/Users/lij/.vim/stl/string	/^operator+(const _CharT* __s,$/;"	f	signature:(const _CharT* __s, const basic_string<_CharT,_Traits,_Alloc>& __y)
operator +	/Users/lij/.vim/stl/string	/^operator+(const basic_string<_CharT,_Traits,_Alloc>& __x,$/;"	f	signature:(const basic_string<_CharT,_Traits,_Alloc>& __x, const _CharT __c)
operator +	/Users/lij/.vim/stl/string	/^operator+(const basic_string<_CharT,_Traits,_Alloc>& __x,$/;"	f	signature:(const basic_string<_CharT,_Traits,_Alloc>& __x, const _CharT* __s)
operator +	/Users/lij/.vim/stl/string	/^operator+(const basic_string<_CharT,_Traits,_Alloc>& __x,$/;"	f	signature:(const basic_string<_CharT,_Traits,_Alloc>& __x, const basic_string<_CharT,_Traits,_Alloc>& __y)
operator +	/Users/lij/.vim/stl/valarray	/^  valarray operator+() const { return *this; }$/;"	f	class:valarray	access:public	signature:() const
operator +	/Users/lij/.vim/stl/valarray	/^inline valarray<_Tp> operator+(const _Tp& __c, const valarray<_Tp>& __x) {$/;"	f	signature:(const _Tp& __c, const valarray<_Tp>& __x)
operator +	/Users/lij/.vim/stl/valarray	/^inline valarray<_Tp> operator+(const valarray<_Tp>& __x, const _Tp& __c) {$/;"	f	signature:(const valarray<_Tp>& __x, const _Tp& __c)
operator +	/Users/lij/.vim/stl/valarray	/^inline valarray<_Tp> operator+(const valarray<_Tp>& __x,$/;"	f	signature:(const valarray<_Tp>& __x, const valarray<_Tp>& __y)
operator ++	/Users/lij/.vim/stl/stl_bvector.h	/^  const_iterator operator++(int) {$/;"	f	struct:_Bit_const_iterator	access:public	signature:(int)
operator ++	/Users/lij/.vim/stl/stl_bvector.h	/^  const_iterator& operator++() {$/;"	f	struct:_Bit_const_iterator	access:public	signature:()
operator ++	/Users/lij/.vim/stl/stl_bvector.h	/^  iterator operator++(int) {$/;"	f	struct:_Bit_iterator	access:public	signature:(int)
operator ++	/Users/lij/.vim/stl/stl_bvector.h	/^  iterator& operator++() {$/;"	f	struct:_Bit_iterator	access:public	signature:()
operator ++	/Users/lij/.vim/stl/stl_deque.h	/^  _Self operator++(int)  {$/;"	f	struct:_Deque_iterator	access:public	signature:(int)
operator ++	/Users/lij/.vim/stl/stl_deque.h	/^  _Self& operator++() {$/;"	f	struct:_Deque_iterator	access:public	signature:()
operator ++	/Users/lij/.vim/stl/stl_hash_map.h	/^  insert_iterator<_Container>& operator++() { return *this; }$/;"	f	class:insert_iterator	access:public	signature:()
operator ++	/Users/lij/.vim/stl/stl_hash_map.h	/^  insert_iterator<_Container>& operator++(int) { return *this; }$/;"	f	class:insert_iterator	access:public	signature:(int)
operator ++	/Users/lij/.vim/stl/stl_hash_set.h	/^  insert_iterator<_Container>& operator++() { return *this; }$/;"	f	class:insert_iterator	access:public	signature:()
operator ++	/Users/lij/.vim/stl/stl_hash_set.h	/^  insert_iterator<_Container>& operator++(int) { return *this; }$/;"	f	class:insert_iterator	access:public	signature:(int)
operator ++	/Users/lij/.vim/stl/stl_hashtable.h	/^  const_iterator operator++(int);$/;"	p	struct:_Hashtable_const_iterator	access:public	signature:(int)
operator ++	/Users/lij/.vim/stl/stl_hashtable.h	/^  const_iterator& operator++();$/;"	p	struct:_Hashtable_const_iterator	access:public	signature:()
operator ++	/Users/lij/.vim/stl/stl_hashtable.h	/^  iterator operator++(int);$/;"	p	struct:_Hashtable_iterator	access:public	signature:(int)
operator ++	/Users/lij/.vim/stl/stl_hashtable.h	/^  iterator& operator++();$/;"	p	struct:_Hashtable_iterator	access:public	signature:()
operator ++	/Users/lij/.vim/stl/stl_hashtable.h	/^_Hashtable_const_iterator<_Val,_Key,_HF,_ExK,_EqK,_All>::operator++()$/;"	f	class:_Hashtable_const_iterator	signature:()
operator ++	/Users/lij/.vim/stl/stl_hashtable.h	/^_Hashtable_const_iterator<_Val,_Key,_HF,_ExK,_EqK,_All>::operator++(int)$/;"	f	class:_Hashtable_const_iterator	signature:(int)
operator ++	/Users/lij/.vim/stl/stl_hashtable.h	/^_Hashtable_iterator<_Val,_Key,_HF,_ExK,_EqK,_All>::operator++()$/;"	f	class:_Hashtable_iterator	signature:()
operator ++	/Users/lij/.vim/stl/stl_hashtable.h	/^_Hashtable_iterator<_Val,_Key,_HF,_ExK,_EqK,_All>::operator++(int)$/;"	f	class:_Hashtable_iterator	signature:(int)
operator ++	/Users/lij/.vim/stl/stl_iterator.h	/^  _Self operator++(int) {$/;"	f	class:reverse_bidirectional_iterator	access:public	signature:(int)
operator ++	/Users/lij/.vim/stl/stl_iterator.h	/^  _Self operator++(int) {$/;"	f	class:reverse_iterator	access:public	signature:(int)
operator ++	/Users/lij/.vim/stl/stl_iterator.h	/^  _Self& operator++() {$/;"	f	class:reverse_bidirectional_iterator	access:public	signature:()
operator ++	/Users/lij/.vim/stl/stl_iterator.h	/^  _Self& operator++() {$/;"	f	class:reverse_iterator	access:public	signature:()
operator ++	/Users/lij/.vim/stl/stl_iterator.h	/^  back_insert_iterator<_Container>& operator++() { return *this; }$/;"	f	class:back_insert_iterator	access:public	signature:()
operator ++	/Users/lij/.vim/stl/stl_iterator.h	/^  back_insert_iterator<_Container>& operator++(int) { return *this; }$/;"	f	class:back_insert_iterator	access:public	signature:(int)
operator ++	/Users/lij/.vim/stl/stl_iterator.h	/^  front_insert_iterator<_Container>& operator++() { return *this; }$/;"	f	class:front_insert_iterator	access:public	signature:()
operator ++	/Users/lij/.vim/stl/stl_iterator.h	/^  front_insert_iterator<_Container>& operator++(int) { return *this; }$/;"	f	class:front_insert_iterator	access:public	signature:(int)
operator ++	/Users/lij/.vim/stl/stl_iterator.h	/^  insert_iterator<_Container>& operator++() { return *this; }$/;"	f	class:insert_iterator	access:public	signature:()
operator ++	/Users/lij/.vim/stl/stl_iterator.h	/^  insert_iterator<_Container>& operator++(int) { return *this; }$/;"	f	class:insert_iterator	access:public	signature:(int)
operator ++	/Users/lij/.vim/stl/stl_iterator.h	/^  istream_iterator operator++(int)  {$/;"	f	class:istream_iterator	access:public	signature:(int)
operator ++	/Users/lij/.vim/stl/stl_iterator.h	/^  istream_iterator& operator++() { $/;"	f	class:istream_iterator	access:public	signature:()
operator ++	/Users/lij/.vim/stl/stl_iterator.h	/^  istream_iterator<_Tp, _Dist> operator++(int)  {$/;"	f	class:istream_iterator	access:public	signature:(int)
operator ++	/Users/lij/.vim/stl/stl_iterator.h	/^  istream_iterator<_Tp, _Dist>& operator++() { $/;"	f	class:istream_iterator	access:public	signature:()
operator ++	/Users/lij/.vim/stl/stl_iterator.h	/^  istreambuf_iterator  operator++(int) {$/;"	f	class:istreambuf_iterator	access:public	signature:(int)
operator ++	/Users/lij/.vim/stl/stl_iterator.h	/^  istreambuf_iterator& operator++() { this->_M_nextc(); return *this; }$/;"	f	class:istreambuf_iterator	access:public	signature:()
operator ++	/Users/lij/.vim/stl/stl_iterator.h	/^  ostream_iterator<_Tp>& operator++() { return *this; } $/;"	f	class:ostream_iterator	access:public	signature:()
operator ++	/Users/lij/.vim/stl/stl_iterator.h	/^  ostream_iterator<_Tp>& operator++(int) { return *this; } $/;"	f	class:ostream_iterator	access:public	signature:(int)
operator ++	/Users/lij/.vim/stl/stl_iterator.h	/^  ostreambuf_iterator& operator++()    { return *this; }$/;"	f	class:ostreambuf_iterator	access:public	signature:()
operator ++	/Users/lij/.vim/stl/stl_iterator.h	/^  ostreambuf_iterator& operator++(int) { return *this; }$/;"	f	class:ostreambuf_iterator	access:public	signature:(int)
operator ++	/Users/lij/.vim/stl/stl_list.h	/^  _Self operator++(int) { $/;"	f	struct:_List_iterator	access:public	signature:(int)
operator ++	/Users/lij/.vim/stl/stl_list.h	/^  _Self& operator++() { $/;"	f	struct:_List_iterator	access:public	signature:()
operator ++	/Users/lij/.vim/stl/stl_raw_storage_iter.h	/^  raw_storage_iterator<_ForwardIterator, _Tp> operator++(int) {$/;"	f	class:raw_storage_iterator	access:public	signature:(int)
operator ++	/Users/lij/.vim/stl/stl_raw_storage_iter.h	/^  raw_storage_iterator<_ForwardIterator, _Tp>& operator++() {$/;"	f	class:raw_storage_iterator	access:public	signature:()
operator ++	/Users/lij/.vim/stl/stl_rope.h	/^        sequence_buffer& operator++() { return *this; }$/;"	f	class:sequence_buffer	access:public	signature:()
operator ++	/Users/lij/.vim/stl/stl_rope.h	/^        sequence_buffer& operator++(int) { return *this; }$/;"	f	class:sequence_buffer	access:public	signature:(int)
operator ++	/Users/lij/.vim/stl/stl_rope.h	/^    _Rope_const_iterator operator++(int) {$/;"	f	class:_Rope_const_iterator	access:public	signature:(int)
operator ++	/Users/lij/.vim/stl/stl_rope.h	/^    _Rope_const_iterator& operator++() {$/;"	f	class:_Rope_const_iterator	access:public	signature:()
operator ++	/Users/lij/.vim/stl/stl_rope.h	/^    _Rope_iterator operator++(int) {$/;"	f	class:_Rope_iterator	access:public	signature:(int)
operator ++	/Users/lij/.vim/stl/stl_rope.h	/^    _Rope_iterator& operator++() {$/;"	f	class:_Rope_iterator	access:public	signature:()
operator ++	/Users/lij/.vim/stl/stl_slist.h	/^  _Self operator++(int)$/;"	f	struct:_Slist_iterator	access:public	signature:(int)
operator ++	/Users/lij/.vim/stl/stl_slist.h	/^  _Self& operator++()$/;"	f	struct:_Slist_iterator	access:public	signature:()
operator ++	/Users/lij/.vim/stl/stl_slist.h	/^  insert_iterator<_Container>& operator++() { return *this; }$/;"	f	class:insert_iterator	access:public	signature:()
operator ++	/Users/lij/.vim/stl/stl_slist.h	/^  insert_iterator<_Container>& operator++(int) { return *this; }$/;"	f	class:insert_iterator	access:public	signature:(int)
operator ++	/Users/lij/.vim/stl/stl_tree.h	/^  _Self operator++(int) {$/;"	f	struct:_Rb_tree_iterator	access:public	signature:(int)
operator ++	/Users/lij/.vim/stl/stl_tree.h	/^  _Self& operator++() { _M_increment(); return *this; }$/;"	f	struct:_Rb_tree_iterator	access:public	signature:()
operator +=	/Users/lij/.vim/stl/stl_bvector.h	/^  const_iterator& operator+=(difference_type __i) {$/;"	f	struct:_Bit_const_iterator	access:public	signature:(difference_type __i)
operator +=	/Users/lij/.vim/stl/stl_bvector.h	/^  iterator& operator+=(difference_type __i) {$/;"	f	struct:_Bit_iterator	access:public	signature:(difference_type __i)
operator +=	/Users/lij/.vim/stl/stl_deque.h	/^  _Self& operator+=(difference_type __n)$/;"	f	struct:_Deque_iterator	access:public	signature:(difference_type __n)
operator +=	/Users/lij/.vim/stl/stl_iterator.h	/^  _Self& operator+=(_Distance __n) {$/;"	f	class:reverse_iterator	access:public	signature:(_Distance __n)
operator +=	/Users/lij/.vim/stl/stl_iterator.h	/^  _Self& operator+=(difference_type __n) {$/;"	f	class:reverse_iterator	access:public	signature:(difference_type __n)
operator +=	/Users/lij/.vim/stl/stl_rope.h	/^    _Rope_const_iterator& operator+=(ptrdiff_t __n) {$/;"	f	class:_Rope_const_iterator	access:public	signature:(ptrdiff_t __n)
operator +=	/Users/lij/.vim/stl/stl_rope.h	/^    _Rope_iterator& operator+=(ptrdiff_t __n) {$/;"	f	class:_Rope_iterator	access:public	signature:(ptrdiff_t __n)
operator +=	/Users/lij/.vim/stl/stl_rope.h	/^operator+= (rope<_CharT,_Alloc>& __left, $/;"	f	signature:(rope<_CharT,_Alloc>& __left, const rope<_CharT,_Alloc>& __right)
operator +=	/Users/lij/.vim/stl/stl_rope.h	/^operator+= (rope<_CharT,_Alloc>& __left, _CharT __right) {$/;"	f	signature:(rope<_CharT,_Alloc>& __left, _CharT __right)
operator +=	/Users/lij/.vim/stl/stl_rope.h	/^operator+= (rope<_CharT,_Alloc>& __left,$/;"	f	signature:(rope<_CharT,_Alloc>& __left, const _CharT* __right)
operator +=	/Users/lij/.vim/stl/string	/^  basic_string& operator+=(_CharT __c) { push_back(__c); return *this; }$/;"	f	class:basic_string	access:public	signature:(_CharT __c)
operator +=	/Users/lij/.vim/stl/string	/^  basic_string& operator+=(const _CharT* __s) { return append(__s); }$/;"	f	class:basic_string	access:public	signature:(const _CharT* __s)
operator +=	/Users/lij/.vim/stl/string	/^  basic_string& operator+=(const basic_string& __s) { return append(__s); }$/;"	f	class:basic_string	access:public	signature:(const basic_string& __s)
operator +=	/Users/lij/.vim/stl/valarray	/^  valarray& operator+= (const valarray& __x) {$/;"	f	class:valarray	access:public	signature:(const valarray& __x)
operator +=	/Users/lij/.vim/stl/valarray	/^  valarray& operator+= (const value_type& __x) {$/;"	f	class:valarray	access:public	signature:(const value_type& __x)
operator +=	/Users/lij/.vim/stl/valarray	/^  void operator+= (const valarray<value_type>& __x) const {$/;"	f	class:gslice_array	access:public	signature:(const valarray<value_type>& __x) const
operator +=	/Users/lij/.vim/stl/valarray	/^  void operator+=(const valarray<value_type>& __x) const {$/;"	f	class:indirect_array	access:public	signature:(const valarray<value_type>& __x) const
operator +=	/Users/lij/.vim/stl/valarray	/^  void operator+=(const valarray<value_type>& __x) const {$/;"	f	class:mask_array	access:public	signature:(const valarray<value_type>& __x) const
operator +=	/Users/lij/.vim/stl/valarray	/^  void operator+=(const valarray<value_type>& __x) const {$/;"	f	class:slice_array	access:public	signature:(const valarray<value_type>& __x) const
operator -	/Users/lij/.vim/stl/stl_bvector.h	/^  const_iterator operator-(difference_type __i) const {$/;"	f	struct:_Bit_const_iterator	access:public	signature:(difference_type __i) const
operator -	/Users/lij/.vim/stl/stl_bvector.h	/^  iterator operator-(difference_type __i) const {$/;"	f	struct:_Bit_iterator	access:public	signature:(difference_type __i) const
operator -	/Users/lij/.vim/stl/stl_bvector.h	/^operator-(const _Bit_iterator_base& __x, const _Bit_iterator_base& __y) {$/;"	f	signature:(const _Bit_iterator_base& __x, const _Bit_iterator_base& __y)
operator -	/Users/lij/.vim/stl/stl_deque.h	/^  _Self operator-(difference_type __n) const {$/;"	f	struct:_Deque_iterator	access:public	signature:(difference_type __n) const
operator -	/Users/lij/.vim/stl/stl_deque.h	/^  difference_type operator-(const _Self& __x) const {$/;"	f	struct:_Deque_iterator	access:public	signature:(const _Self& __x) const
operator -	/Users/lij/.vim/stl/stl_iterator.h	/^  _Self operator-(_Distance __n) const {$/;"	f	class:reverse_iterator	access:public	signature:(_Distance __n) const
operator -	/Users/lij/.vim/stl/stl_iterator.h	/^  _Self operator-(difference_type __n) const {$/;"	f	class:reverse_iterator	access:public	signature:(difference_type __n) const
operator -	/Users/lij/.vim/stl/stl_iterator.h	/^operator-(const reverse_iterator<_Iterator>& __x, $/;"	f	signature:(const reverse_iterator<_Iterator>& __x, const reverse_iterator<_Iterator>& __y)
operator -	/Users/lij/.vim/stl/stl_iterator.h	/^operator-(const reverse_iterator<_RandomAccessIterator, _Tp,$/;"	f	signature:(const reverse_iterator<_RandomAccessIterator, _Tp, _Reference, _Distance>& __x, const reverse_iterator<_RandomAccessIterator, _Tp, _Reference, _Distance>& __y)
operator -	/Users/lij/.vim/stl/stl_rope.h	/^    friend _Rope_const_iterator<_CharT2,_Alloc2> operator-$/;"	p	class:_Rope_const_iterator	access:friend	signature:(const _Rope_const_iterator<_CharT2,_Alloc2>& __x, ptrdiff_t __n)
operator -	/Users/lij/.vim/stl/stl_rope.h	/^    friend _Rope_iterator<_CharT2,_Alloc2> operator-$/;"	p	class:_Rope_iterator	access:friend	signature:(const _Rope_iterator<_CharT2,_Alloc2>& __x, ptrdiff_t __n)
operator -	/Users/lij/.vim/stl/stl_rope.h	/^    friend ptrdiff_t operator-$/;"	p	class:_Rope_const_iterator	access:friend	signature:(const _Rope_const_iterator<_CharT2,_Alloc2>& __x, const _Rope_const_iterator<_CharT2,_Alloc2>& __y)
operator -	/Users/lij/.vim/stl/stl_rope.h	/^    friend ptrdiff_t operator-$/;"	p	class:_Rope_iterator	access:friend	signature:(const _Rope_iterator<_CharT2,_Alloc2>& __x, const _Rope_iterator<_CharT2,_Alloc2>& __y)
operator -	/Users/lij/.vim/stl/stl_rope.h	/^_Rope_const_iterator<_CharT,_Alloc> operator-$/;"	p	signature:(const _Rope_const_iterator<_CharT,_Alloc>& __x, ptrdiff_t __n)
operator -	/Users/lij/.vim/stl/stl_rope.h	/^_Rope_iterator<_CharT,_Alloc> operator-$/;"	p	signature:(const _Rope_iterator<_CharT,_Alloc>& __x, ptrdiff_t __n)
operator -	/Users/lij/.vim/stl/stl_rope.h	/^inline ptrdiff_t operator-(const _Rope_const_iterator<_CharT,_Alloc>& __x,$/;"	f	signature:(const _Rope_const_iterator<_CharT,_Alloc>& __x, const _Rope_const_iterator<_CharT,_Alloc>& __y)
operator -	/Users/lij/.vim/stl/stl_rope.h	/^inline ptrdiff_t operator-(const _Rope_iterator<_CharT,_Alloc>& __x,$/;"	f	signature:(const _Rope_iterator<_CharT,_Alloc>& __x, const _Rope_iterator<_CharT,_Alloc>& __y)
operator -	/Users/lij/.vim/stl/stl_rope.h	/^operator-(const _Rope_const_iterator<_CharT,_Alloc>& __x, ptrdiff_t __n) {$/;"	f	signature:(const _Rope_const_iterator<_CharT,_Alloc>& __x, ptrdiff_t __n)
operator -	/Users/lij/.vim/stl/stl_rope.h	/^operator-(const _Rope_iterator<_CharT,_Alloc>& __x,$/;"	f	signature:(const _Rope_iterator<_CharT,_Alloc>& __x, ptrdiff_t __n)
operator -	/Users/lij/.vim/stl/stl_rope.h	/^ptrdiff_t operator- $/;"	p	signature:(const _Rope_const_iterator<_CharT,_Alloc>& __x, const _Rope_const_iterator<_CharT,_Alloc>& __y)
operator -	/Users/lij/.vim/stl/stl_rope.h	/^ptrdiff_t operator- $/;"	p	signature:(const _Rope_iterator<_CharT,_Alloc>& __x, const _Rope_iterator<_CharT,_Alloc>& __y)
operator -	/Users/lij/.vim/stl/valarray	/^  valarray operator-() const {$/;"	f	class:valarray	access:public	signature:() const
operator -	/Users/lij/.vim/stl/valarray	/^inline valarray<_Tp> operator-(const _Tp& __c, const valarray<_Tp>& __x) {$/;"	f	signature:(const _Tp& __c, const valarray<_Tp>& __x)
operator -	/Users/lij/.vim/stl/valarray	/^inline valarray<_Tp> operator-(const valarray<_Tp>& __x, const _Tp& __c) {$/;"	f	signature:(const valarray<_Tp>& __x, const _Tp& __c)
operator -	/Users/lij/.vim/stl/valarray	/^inline valarray<_Tp> operator-(const valarray<_Tp>& __x,$/;"	f	signature:(const valarray<_Tp>& __x, const valarray<_Tp>& __y)
operator --	/Users/lij/.vim/stl/stl_bvector.h	/^  const_iterator operator--(int) {$/;"	f	struct:_Bit_const_iterator	access:public	signature:(int)
operator --	/Users/lij/.vim/stl/stl_bvector.h	/^  const_iterator& operator--() {$/;"	f	struct:_Bit_const_iterator	access:public	signature:()
operator --	/Users/lij/.vim/stl/stl_bvector.h	/^  iterator operator--(int) {$/;"	f	struct:_Bit_iterator	access:public	signature:(int)
operator --	/Users/lij/.vim/stl/stl_bvector.h	/^  iterator& operator--() {$/;"	f	struct:_Bit_iterator	access:public	signature:()
operator --	/Users/lij/.vim/stl/stl_deque.h	/^  _Self operator--(int) {$/;"	f	struct:_Deque_iterator	access:public	signature:(int)
operator --	/Users/lij/.vim/stl/stl_deque.h	/^  _Self& operator--() {$/;"	f	struct:_Deque_iterator	access:public	signature:()
operator --	/Users/lij/.vim/stl/stl_iterator.h	/^  _Self operator--(int) {$/;"	f	class:reverse_bidirectional_iterator	access:public	signature:(int)
operator --	/Users/lij/.vim/stl/stl_iterator.h	/^  _Self operator--(int) {$/;"	f	class:reverse_iterator	access:public	signature:(int)
operator --	/Users/lij/.vim/stl/stl_iterator.h	/^  _Self& operator--() {$/;"	f	class:reverse_bidirectional_iterator	access:public	signature:()
operator --	/Users/lij/.vim/stl/stl_iterator.h	/^  _Self& operator--() {$/;"	f	class:reverse_iterator	access:public	signature:()
operator --	/Users/lij/.vim/stl/stl_list.h	/^  _Self operator--(int) { $/;"	f	struct:_List_iterator	access:public	signature:(int)
operator --	/Users/lij/.vim/stl/stl_list.h	/^  _Self& operator--() { $/;"	f	struct:_List_iterator	access:public	signature:()
operator --	/Users/lij/.vim/stl/stl_rope.h	/^    _Rope_const_iterator operator--(int) {$/;"	f	class:_Rope_const_iterator	access:public	signature:(int)
operator --	/Users/lij/.vim/stl/stl_rope.h	/^    _Rope_const_iterator& operator--() {$/;"	f	class:_Rope_const_iterator	access:public	signature:()
operator --	/Users/lij/.vim/stl/stl_rope.h	/^    _Rope_iterator operator--(int) {$/;"	f	class:_Rope_iterator	access:public	signature:(int)
operator --	/Users/lij/.vim/stl/stl_rope.h	/^    _Rope_iterator& operator--() {$/;"	f	class:_Rope_iterator	access:public	signature:()
operator --	/Users/lij/.vim/stl/stl_tree.h	/^  _Self operator--(int) {$/;"	f	struct:_Rb_tree_iterator	access:public	signature:(int)
operator --	/Users/lij/.vim/stl/stl_tree.h	/^  _Self& operator--() { _M_decrement(); return *this; }$/;"	f	struct:_Rb_tree_iterator	access:public	signature:()
operator -=	/Users/lij/.vim/stl/stl_bvector.h	/^  const_iterator& operator-=(difference_type __i) {$/;"	f	struct:_Bit_const_iterator	access:public	signature:(difference_type __i)
operator -=	/Users/lij/.vim/stl/stl_bvector.h	/^  iterator& operator-=(difference_type __i) {$/;"	f	struct:_Bit_iterator	access:public	signature:(difference_type __i)
operator -=	/Users/lij/.vim/stl/stl_deque.h	/^  _Self& operator-=(difference_type __n) { return *this += -__n; }$/;"	f	struct:_Deque_iterator	access:public	signature:(difference_type __n)
operator -=	/Users/lij/.vim/stl/stl_iterator.h	/^  _Self& operator-=(_Distance __n) {$/;"	f	class:reverse_iterator	access:public	signature:(_Distance __n)
operator -=	/Users/lij/.vim/stl/stl_iterator.h	/^  _Self& operator-=(difference_type __n) {$/;"	f	class:reverse_iterator	access:public	signature:(difference_type __n)
operator -=	/Users/lij/.vim/stl/stl_rope.h	/^    _Rope_const_iterator& operator-=(ptrdiff_t __n) {$/;"	f	class:_Rope_const_iterator	access:public	signature:(ptrdiff_t __n)
operator -=	/Users/lij/.vim/stl/stl_rope.h	/^    _Rope_iterator& operator-=(ptrdiff_t __n) {$/;"	f	class:_Rope_iterator	access:public	signature:(ptrdiff_t __n)
operator -=	/Users/lij/.vim/stl/valarray	/^  valarray& operator-= (const valarray& __x) {$/;"	f	class:valarray	access:public	signature:(const valarray& __x)
operator -=	/Users/lij/.vim/stl/valarray	/^  valarray& operator-= (const value_type& __x) {$/;"	f	class:valarray	access:public	signature:(const value_type& __x)
operator -=	/Users/lij/.vim/stl/valarray	/^  void operator-= (const valarray<value_type>& __x) const {$/;"	f	class:gslice_array	access:public	signature:(const valarray<value_type>& __x) const
operator -=	/Users/lij/.vim/stl/valarray	/^  void operator-=(const valarray<value_type>& __x) const {$/;"	f	class:indirect_array	access:public	signature:(const valarray<value_type>& __x) const
operator -=	/Users/lij/.vim/stl/valarray	/^  void operator-=(const valarray<value_type>& __x) const {$/;"	f	class:mask_array	access:public	signature:(const valarray<value_type>& __x) const
operator -=	/Users/lij/.vim/stl/valarray	/^  void operator-=(const valarray<value_type>& __x) const {$/;"	f	class:slice_array	access:public	signature:(const valarray<value_type>& __x) const
operator ->	/Users/lij/.vim/stl/stl_deque.h	/^  pointer operator->() const { return _M_cur; }$/;"	f	struct:_Deque_iterator	access:public	signature:() const
operator ->	/Users/lij/.vim/stl/stl_hashtable.h	/^  pointer operator->() const { return &(operator*()); }$/;"	f	struct:_Hashtable_const_iterator	access:public	signature:() const
operator ->	/Users/lij/.vim/stl/stl_hashtable.h	/^  pointer operator->() const { return &(operator*()); }$/;"	f	struct:_Hashtable_iterator	access:public	signature:() const
operator ->	/Users/lij/.vim/stl/stl_iterator.h	/^  pointer operator->() const { return &(operator*()); }$/;"	f	class:istream_iterator	access:public	signature:() const
operator ->	/Users/lij/.vim/stl/stl_iterator.h	/^  pointer operator->() const { return &(operator*()); }$/;"	f	class:reverse_bidirectional_iterator	access:public	signature:() const
operator ->	/Users/lij/.vim/stl/stl_iterator.h	/^  pointer operator->() const { return &(operator*()); }$/;"	f	class:reverse_iterator	access:public	signature:() const
operator ->	/Users/lij/.vim/stl/stl_list.h	/^  pointer operator->() const { return &(operator*()); }$/;"	f	struct:_List_iterator	access:public	signature:() const
operator ->	/Users/lij/.vim/stl/stl_rope.h	/^    _Rope_RopeRep<_CharT,_Alloc>* operator->() { return _M_ptr; }$/;"	f	struct:_Rope_self_destruct_ptr	access:public	signature:()
operator ->	/Users/lij/.vim/stl/stl_slist.h	/^  pointer operator->() const { return &(operator*()); }$/;"	f	struct:_Slist_iterator	access:public	signature:() const
operator ->	/Users/lij/.vim/stl/stl_tree.h	/^  pointer operator->() const { return &(operator*()); }$/;"	f	struct:_Rb_tree_iterator	access:public	signature:() const
operator /	/Users/lij/.vim/stl/valarray	/^inline valarray<_Tp> operator\/(const _Tp& __c, const valarray<_Tp>& __x) {$/;"	f	signature:(const _Tp& __c, const valarray<_Tp>& __x)
operator /	/Users/lij/.vim/stl/valarray	/^inline valarray<_Tp> operator\/(const valarray<_Tp>& __x, const _Tp& __c) {$/;"	f	signature:(const valarray<_Tp>& __x, const _Tp& __c)
operator /	/Users/lij/.vim/stl/valarray	/^inline valarray<_Tp> operator\/(const valarray<_Tp>& __x,$/;"	f	signature:(const valarray<_Tp>& __x, const valarray<_Tp>& __y)
operator /=	/Users/lij/.vim/stl/valarray	/^  valarray& operator\/= (const valarray& __x) {$/;"	f	class:valarray	access:public	signature:(const valarray& __x)
operator /=	/Users/lij/.vim/stl/valarray	/^  valarray& operator\/= (const value_type& __x) {$/;"	f	class:valarray	access:public	signature:(const value_type& __x)
operator /=	/Users/lij/.vim/stl/valarray	/^  void operator\/= (const valarray<value_type>& __x) const {$/;"	f	class:gslice_array	access:public	signature:(const valarray<value_type>& __x) const
operator /=	/Users/lij/.vim/stl/valarray	/^  void operator\/=(const valarray<value_type>& __x) const {$/;"	f	class:indirect_array	access:public	signature:(const valarray<value_type>& __x) const
operator /=	/Users/lij/.vim/stl/valarray	/^  void operator\/=(const valarray<value_type>& __x) const {$/;"	f	class:mask_array	access:public	signature:(const valarray<value_type>& __x) const
operator /=	/Users/lij/.vim/stl/valarray	/^  void operator\/=(const valarray<value_type>& __x) const {$/;"	f	class:slice_array	access:public	signature:(const valarray<value_type>& __x) const
operator <	/Users/lij/.vim/stl/stl_bvector.h	/^  bool operator<(const _Bit_iterator_base& __i) const {$/;"	f	struct:_Bit_iterator_base	access:public	signature:(const _Bit_iterator_base& __i) const
operator <	/Users/lij/.vim/stl/stl_bvector.h	/^  bool operator<(const _Bit_reference& __x) const {$/;"	f	struct:_Bit_reference	access:public	signature:(const _Bit_reference& __x) const
operator <	/Users/lij/.vim/stl/stl_bvector.h	/^operator<(const bit_vector& __x, const bit_vector& __y)$/;"	f	signature:(const bit_vector& __x, const bit_vector& __y)
operator <	/Users/lij/.vim/stl/stl_deque.h	/^  bool operator<(const _Self& __x) const {$/;"	f	struct:_Deque_iterator	access:public	signature:(const _Self& __x) const
operator <	/Users/lij/.vim/stl/stl_deque.h	/^inline bool operator<(const deque<_Tp, _Alloc>& __x,$/;"	f	signature:(const deque<_Tp, _Alloc>& __x, const deque<_Tp, _Alloc>& __y)
operator <	/Users/lij/.vim/stl/stl_iterator.h	/^inline bool operator<(const reverse_iterator<_Iterator>& __x, $/;"	f	signature:(const reverse_iterator<_Iterator>& __x, const reverse_iterator<_Iterator>& __y)
operator <	/Users/lij/.vim/stl/stl_iterator.h	/^operator<(const reverse_iterator<_RandomAccessIterator, _Tp,$/;"	f	signature:(const reverse_iterator<_RandomAccessIterator, _Tp, _Reference, _Distance>& __x, const reverse_iterator<_RandomAccessIterator, _Tp, _Reference, _Distance>& __y)
operator <	/Users/lij/.vim/stl/stl_list.h	/^inline bool operator<(const list<_Tp,_Alloc>& __x,$/;"	f	signature:(const list<_Tp,_Alloc>& __x, const list<_Tp,_Alloc>& __y)
operator <	/Users/lij/.vim/stl/stl_map.h	/^  friend bool operator< (const map<_K1, _T1, _C1, _A1>&,$/;"	p	class:map	access:friend	signature:(const map<_K1, _T1, _C1, _A1>&, const map<_K1, _T1, _C1, _A1>&)
operator <	/Users/lij/.vim/stl/stl_map.h	/^inline bool operator<(const map<_Key,_Tp,_Compare,_Alloc>& __x, $/;"	f	signature:(const map<_Key,_Tp,_Compare,_Alloc>& __x, const map<_Key,_Tp,_Compare,_Alloc>& __y)
operator <	/Users/lij/.vim/stl/stl_map.h	/^inline bool operator<(const map<_Key,_Tp,_Compare,_Alloc>& __x, $/;"	p	signature:(const map<_Key,_Tp,_Compare,_Alloc>& __x, const map<_Key,_Tp,_Compare,_Alloc>& __y)
operator <	/Users/lij/.vim/stl/stl_multimap.h	/^  friend bool operator< (const multimap<_K1, _T1, _C1, _A1>&,$/;"	p	class:multimap	access:friend	signature:(const multimap<_K1, _T1, _C1, _A1>&, const multimap<_K1, _T1, _C1, _A1>&)
operator <	/Users/lij/.vim/stl/stl_multimap.h	/^inline bool operator<(const multimap<_Key,_Tp,_Compare,_Alloc>& __x, $/;"	f	signature:(const multimap<_Key,_Tp,_Compare,_Alloc>& __x, const multimap<_Key,_Tp,_Compare,_Alloc>& __y)
operator <	/Users/lij/.vim/stl/stl_multimap.h	/^inline bool operator<(const multimap<_Key,_Tp,_Compare,_Alloc>& __x, $/;"	p	signature:(const multimap<_Key,_Tp,_Compare,_Alloc>& __x, const multimap<_Key,_Tp,_Compare,_Alloc>& __y)
operator <	/Users/lij/.vim/stl/stl_multiset.h	/^  friend bool operator< (const multiset<_K1,_C1,_A1>&,$/;"	p	class:multiset	access:friend	signature:(const multiset<_K1,_C1,_A1>&, const multiset<_K1,_C1,_A1>&)
operator <	/Users/lij/.vim/stl/stl_multiset.h	/^inline bool operator<(const multiset<_Key,_Compare,_Alloc>& __x, $/;"	f	signature:(const multiset<_Key,_Compare,_Alloc>& __x, const multiset<_Key,_Compare,_Alloc>& __y)
operator <	/Users/lij/.vim/stl/stl_multiset.h	/^inline bool operator<(const multiset<_Key,_Compare,_Alloc>& __x, $/;"	p	signature:(const multiset<_Key,_Compare,_Alloc>& __x, const multiset<_Key,_Compare,_Alloc>& __y)
operator <	/Users/lij/.vim/stl/stl_pair.h	/^inline bool operator<(const pair<_T1, _T2>& __x, const pair<_T1, _T2>& __y)$/;"	f	signature:(const pair<_T1, _T2>& __x, const pair<_T1, _T2>& __y)
operator <	/Users/lij/.vim/stl/stl_queue.h	/^  friend bool operator< (const queue<_Tp1, _Seq1>&,$/;"	p	class:queue	access:friend	signature:(const queue<_Tp1, _Seq1>&, const queue<_Tp1, _Seq1>&)
operator <	/Users/lij/.vim/stl/stl_queue.h	/^inline bool operator<(const queue<_Tp, _Seq>&, const queue<_Tp, _Seq>&);$/;"	p	signature:(const queue<_Tp, _Seq>&, const queue<_Tp, _Seq>&)
operator <	/Users/lij/.vim/stl/stl_queue.h	/^operator<(const queue<_Tp, _Sequence>& __x, const queue<_Tp, _Sequence>& __y)$/;"	f	signature:(const queue<_Tp, _Sequence>& __x, const queue<_Tp, _Sequence>& __y)
operator <	/Users/lij/.vim/stl/stl_rope.h	/^    friend bool operator< $/;"	p	class:_Rope_const_iterator	access:friend	signature:(const _Rope_const_iterator<_CharT2,_Alloc2>& __x, const _Rope_const_iterator<_CharT2,_Alloc2>& __y)
operator <	/Users/lij/.vim/stl/stl_rope.h	/^    friend bool operator<$/;"	p	class:_Rope_iterator	access:friend	signature:(const _Rope_iterator<_CharT2,_Alloc2>& __x, const _Rope_iterator<_CharT2,_Alloc2>& __y)
operator <	/Users/lij/.vim/stl/stl_rope.h	/^bool operator< $/;"	p	signature:(const _Rope_const_iterator<_CharT,_Alloc>& __x, const _Rope_const_iterator<_CharT,_Alloc>& __y)
operator <	/Users/lij/.vim/stl/stl_rope.h	/^bool operator< $/;"	p	signature:(const _Rope_iterator<_CharT,_Alloc>& __x, const _Rope_iterator<_CharT,_Alloc>& __y)
operator <	/Users/lij/.vim/stl/stl_rope.h	/^inline bool operator< (const _Rope_const_iterator<_CharT,_Alloc>& __x,$/;"	f	signature:(const _Rope_const_iterator<_CharT,_Alloc>& __x, const _Rope_const_iterator<_CharT,_Alloc>& __y)
operator <	/Users/lij/.vim/stl/stl_rope.h	/^inline bool operator< (const _Rope_iterator<_CharT,_Alloc>& __x,$/;"	f	signature:(const _Rope_iterator<_CharT,_Alloc>& __x, const _Rope_iterator<_CharT,_Alloc>& __y)
operator <	/Users/lij/.vim/stl/stl_rope.h	/^operator< (const rope<_CharT,_Alloc>& __left, $/;"	f	signature:(const rope<_CharT,_Alloc>& __left, const rope<_CharT,_Alloc>& __right)
operator <	/Users/lij/.vim/stl/stl_set.h	/^  friend bool operator< (const set<_K1,_C1,_A1>&, const set<_K1,_C1,_A1>&);$/;"	p	class:set	access:friend	signature:(const set<_K1,_C1,_A1>&, const set<_K1,_C1,_A1>&)
operator <	/Users/lij/.vim/stl/stl_set.h	/^inline bool operator<(const set<_Key,_Compare,_Alloc>& __x, $/;"	f	signature:(const set<_Key,_Compare,_Alloc>& __x, const set<_Key,_Compare,_Alloc>& __y)
operator <	/Users/lij/.vim/stl/stl_set.h	/^inline bool operator<(const set<_Key,_Compare,_Alloc>& __x, $/;"	p	signature:(const set<_Key,_Compare,_Alloc>& __x, const set<_Key,_Compare,_Alloc>& __y)
operator <	/Users/lij/.vim/stl/stl_slist.h	/^operator<(const slist<_Tp,_Alloc>& _SL1, const slist<_Tp,_Alloc>& _SL2)$/;"	f	signature:(const slist<_Tp,_Alloc>& _SL1, const slist<_Tp,_Alloc>& _SL2)
operator <	/Users/lij/.vim/stl/stl_stack.h	/^  friend bool operator< (const stack<_Tp1, _Seq1>&,$/;"	p	class:stack	access:friend	signature:(const stack<_Tp1, _Seq1>&, const stack<_Tp1, _Seq1>&)
operator <	/Users/lij/.vim/stl/stl_stack.h	/^bool operator<(const stack<_Tp,_Seq>& __x, const stack<_Tp,_Seq>& __y)$/;"	f	signature:(const stack<_Tp,_Seq>& __x, const stack<_Tp,_Seq>& __y)
operator <	/Users/lij/.vim/stl/stl_stack.h	/^bool operator<(const stack<_Tp,_Seq>& __x, const stack<_Tp,_Seq>& __y);$/;"	p	signature:(const stack<_Tp,_Seq>& __x, const stack<_Tp,_Seq>& __y)
operator <	/Users/lij/.vim/stl/stl_tree.h	/^operator<(const _Rb_tree<_Key,_Value,_KeyOfValue,_Compare,_Alloc>& __x, $/;"	f	signature:(const _Rb_tree<_Key,_Value,_KeyOfValue,_Compare,_Alloc>& __x, const _Rb_tree<_Key,_Value,_KeyOfValue,_Compare,_Alloc>& __y)
operator <	/Users/lij/.vim/stl/stl_vector.h	/^operator<(const vector<_Tp, _Alloc>& __x, const vector<_Tp, _Alloc>& __y)$/;"	f	signature:(const vector<_Tp, _Alloc>& __x, const vector<_Tp, _Alloc>& __y)
operator <	/Users/lij/.vim/stl/string	/^operator<(const _CharT* __s,$/;"	f	signature:(const _CharT* __s, const basic_string<_CharT,_Traits,_Alloc>& __y)
operator <	/Users/lij/.vim/stl/string	/^operator<(const basic_string<_CharT,_Traits,_Alloc>& __x,$/;"	f	signature:(const basic_string<_CharT,_Traits,_Alloc>& __x, const _CharT* __s)
operator <	/Users/lij/.vim/stl/string	/^operator<(const basic_string<_CharT,_Traits,_Alloc>& __x,$/;"	f	signature:(const basic_string<_CharT,_Traits,_Alloc>& __x, const basic_string<_CharT,_Traits,_Alloc>& __y)
operator <	/Users/lij/.vim/stl/valarray	/^inline valarray<bool> operator<(const _Tp& __c, const valarray<_Tp>& __x)$/;"	f	signature:(const _Tp& __c, const valarray<_Tp>& __x)
operator <	/Users/lij/.vim/stl/valarray	/^inline valarray<bool> operator<(const valarray<_Tp>& __x, const _Tp& __c)$/;"	f	signature:(const valarray<_Tp>& __x, const _Tp& __c)
operator <	/Users/lij/.vim/stl/valarray	/^inline valarray<bool> operator<(const valarray<_Tp>& __x,$/;"	f	signature:(const valarray<_Tp>& __x, const valarray<_Tp>& __y)
operator <<	/Users/lij/.vim/stl/bitset	/^  bitset<_Nb> operator<<(size_t __pos) const$/;"	f	class:bitset	access:public	signature:(size_t __pos) const
operator <<	/Users/lij/.vim/stl/bitset	/^operator<<(basic_ostream<_CharT, _Traits>& __os, const bitset<_Nb>& __x)$/;"	f	signature:(basic_ostream<_CharT, _Traits>& __os, const bitset<_Nb>& __x)
operator <<	/Users/lij/.vim/stl/bitset	/^ostream& operator<<(ostream& __os, const bitset<_Nb>& __x) {$/;"	f	signature:(ostream& __os, const bitset<_Nb>& __x)
operator <<	/Users/lij/.vim/stl/ropeimpl.h	/^  basic_ostream<_CharT, _Traits>& operator<<$/;"	f	signature:(basic_ostream<_CharT, _Traits>& __o, const rope<_CharT, _Alloc>& __r)
operator <<	/Users/lij/.vim/stl/stl_rope.h	/^  basic_ostream<_CharT, _Traits>& operator<<$/;"	p	signature:(basic_ostream<_CharT, _Traits>& __o, const rope<_CharT, _Alloc>& __r)
operator <<	/Users/lij/.vim/stl/stl_rope.h	/^  ostream& operator<< (ostream& __o, const rope<_CharT, _Alloc>& __r);$/;"	p	signature:(ostream& __o, const rope<_CharT, _Alloc>& __r)
operator <<	/Users/lij/.vim/stl/string	/^operator<<(basic_ostream<_CharT, _Traits>& __os, $/;"	f	signature:(basic_ostream<_CharT, _Traits>& __os, const basic_string<_CharT,_Traits,_Alloc>& __s)
operator <<	/Users/lij/.vim/stl/valarray	/^inline valarray<_Tp> operator<<(const _Tp& __c, const valarray<_Tp>& __x) {$/;"	f	signature:(const _Tp& __c, const valarray<_Tp>& __x)
operator <<	/Users/lij/.vim/stl/valarray	/^inline valarray<_Tp> operator<<(const valarray<_Tp>& __x, const _Tp& __c) {$/;"	f	signature:(const valarray<_Tp>& __x, const _Tp& __c)
operator <<	/Users/lij/.vim/stl/valarray	/^inline valarray<_Tp> operator<<(const valarray<_Tp>& __x,$/;"	f	signature:(const valarray<_Tp>& __x, const valarray<_Tp>& __y)
operator <<=	/Users/lij/.vim/stl/bitset	/^  bitset<_Nb>& operator<<=(size_t __pos) {$/;"	f	class:bitset	access:public	signature:(size_t __pos)
operator <<=	/Users/lij/.vim/stl/valarray	/^  valarray& operator<<= (const valarray& __x) {$/;"	f	class:valarray	access:public	signature:(const valarray& __x)
operator <<=	/Users/lij/.vim/stl/valarray	/^  valarray& operator<<= (const value_type& __x) {$/;"	f	class:valarray	access:public	signature:(const value_type& __x)
operator <<=	/Users/lij/.vim/stl/valarray	/^  void operator<<= (const valarray<value_type>& __x) const {$/;"	f	class:gslice_array	access:public	signature:(const valarray<value_type>& __x) const
operator <<=	/Users/lij/.vim/stl/valarray	/^  void operator<<=(const valarray<value_type>& __x) const {$/;"	f	class:indirect_array	access:public	signature:(const valarray<value_type>& __x) const
operator <<=	/Users/lij/.vim/stl/valarray	/^  void operator<<=(const valarray<value_type>& __x) const {$/;"	f	class:mask_array	access:public	signature:(const valarray<value_type>& __x) const
operator <<=	/Users/lij/.vim/stl/valarray	/^  void operator<<=(const valarray<value_type>& __x) const {$/;"	f	class:slice_array	access:public	signature:(const valarray<value_type>& __x) const
operator <=	/Users/lij/.vim/stl/stl_bvector.h	/^  bool operator<=(const _Bit_iterator_base& __i) const {$/;"	f	struct:_Bit_iterator_base	access:public	signature:(const _Bit_iterator_base& __i) const
operator <=	/Users/lij/.vim/stl/stl_bvector.h	/^inline bool operator<=(const bit_vector& __x, const bit_vector& __y)$/;"	f	signature:(const bit_vector& __x, const bit_vector& __y)
operator <=	/Users/lij/.vim/stl/stl_deque.h	/^  bool operator<=(const _Self& __x) const { return !(__x < *this); }$/;"	f	struct:_Deque_iterator	access:public	signature:(const _Self& __x) const
operator <=	/Users/lij/.vim/stl/stl_deque.h	/^inline bool operator<=(const deque<_Tp, _Alloc>& __x,$/;"	f	signature:(const deque<_Tp, _Alloc>& __x, const deque<_Tp, _Alloc>& __y)
operator <=	/Users/lij/.vim/stl/stl_iterator.h	/^inline bool operator<=(const reverse_iterator<_Iterator>& __x, $/;"	f	signature:(const reverse_iterator<_Iterator>& __x, const reverse_iterator<_Iterator>& __y)
operator <=	/Users/lij/.vim/stl/stl_iterator.h	/^operator<=(const reverse_iterator<_RandomAccessIterator, _Tp,$/;"	f	signature:(const reverse_iterator<_RandomAccessIterator, _Tp, _Reference, _Distance>& __x, const reverse_iterator<_RandomAccessIterator, _Tp, _Reference, _Distance>& __y)
operator <=	/Users/lij/.vim/stl/stl_list.h	/^inline bool operator<=(const list<_Tp,_Alloc>& __x,$/;"	f	signature:(const list<_Tp,_Alloc>& __x, const list<_Tp,_Alloc>& __y)
operator <=	/Users/lij/.vim/stl/stl_map.h	/^inline bool operator<=(const map<_Key,_Tp,_Compare,_Alloc>& __x, $/;"	f	signature:(const map<_Key,_Tp,_Compare,_Alloc>& __x, const map<_Key,_Tp,_Compare,_Alloc>& __y)
operator <=	/Users/lij/.vim/stl/stl_multimap.h	/^inline bool operator<=(const multimap<_Key,_Tp,_Compare,_Alloc>& __x, $/;"	f	signature:(const multimap<_Key,_Tp,_Compare,_Alloc>& __x, const multimap<_Key,_Tp,_Compare,_Alloc>& __y)
operator <=	/Users/lij/.vim/stl/stl_multiset.h	/^inline bool operator<=(const multiset<_Key,_Compare,_Alloc>& __x, $/;"	f	signature:(const multiset<_Key,_Compare,_Alloc>& __x, const multiset<_Key,_Compare,_Alloc>& __y)
operator <=	/Users/lij/.vim/stl/stl_pair.h	/^inline bool operator<=(const pair<_T1, _T2>& __x, const pair<_T1, _T2>& __y) {$/;"	f	signature:(const pair<_T1, _T2>& __x, const pair<_T1, _T2>& __y)
operator <=	/Users/lij/.vim/stl/stl_queue.h	/^operator<=(const queue<_Tp, _Sequence>& __x, const queue<_Tp, _Sequence>& __y)$/;"	f	signature:(const queue<_Tp, _Sequence>& __x, const queue<_Tp, _Sequence>& __y)
operator <=	/Users/lij/.vim/stl/stl_relops.h	/^inline bool operator<=(const _Tp& __x, const _Tp& __y) {$/;"	f	signature:(const _Tp& __x, const _Tp& __y)
operator <=	/Users/lij/.vim/stl/stl_rope.h	/^inline bool operator<= (const _Rope_const_iterator<_CharT,_Alloc>& __x,$/;"	f	signature:(const _Rope_const_iterator<_CharT,_Alloc>& __x, const _Rope_const_iterator<_CharT,_Alloc>& __y)
operator <=	/Users/lij/.vim/stl/stl_rope.h	/^inline bool operator<= (const _Rope_iterator<_CharT,_Alloc>& __x,$/;"	f	signature:(const _Rope_iterator<_CharT,_Alloc>& __x, const _Rope_iterator<_CharT,_Alloc>& __y)
operator <=	/Users/lij/.vim/stl/stl_rope.h	/^operator<= (const rope<_CharT,_Alloc>& __x, const rope<_CharT,_Alloc>& __y) {$/;"	f	signature:(const rope<_CharT,_Alloc>& __x, const rope<_CharT,_Alloc>& __y)
operator <=	/Users/lij/.vim/stl/stl_set.h	/^inline bool operator<=(const set<_Key,_Compare,_Alloc>& __x, $/;"	f	signature:(const set<_Key,_Compare,_Alloc>& __x, const set<_Key,_Compare,_Alloc>& __y)
operator <=	/Users/lij/.vim/stl/stl_slist.h	/^operator<=(const slist<_Tp,_Alloc>& _SL1, const slist<_Tp,_Alloc>& _SL2) {$/;"	f	signature:(const slist<_Tp,_Alloc>& _SL1, const slist<_Tp,_Alloc>& _SL2)
operator <=	/Users/lij/.vim/stl/stl_stack.h	/^bool operator<=(const stack<_Tp,_Seq>& __x, const stack<_Tp,_Seq>& __y)$/;"	f	signature:(const stack<_Tp,_Seq>& __x, const stack<_Tp,_Seq>& __y)
operator <=	/Users/lij/.vim/stl/stl_tree.h	/^operator<=(const _Rb_tree<_Key,_Value,_KeyOfValue,_Compare,_Alloc>& __x, $/;"	f	signature:(const _Rb_tree<_Key,_Value,_KeyOfValue,_Compare,_Alloc>& __x, const _Rb_tree<_Key,_Value,_KeyOfValue,_Compare,_Alloc>& __y)
operator <=	/Users/lij/.vim/stl/stl_vector.h	/^operator<=(const vector<_Tp, _Alloc>& __x, const vector<_Tp, _Alloc>& __y) {$/;"	f	signature:(const vector<_Tp, _Alloc>& __x, const vector<_Tp, _Alloc>& __y)
operator <=	/Users/lij/.vim/stl/string	/^operator<=(const _CharT* __s,$/;"	f	signature:(const _CharT* __s, const basic_string<_CharT,_Traits,_Alloc>& __y)
operator <=	/Users/lij/.vim/stl/string	/^operator<=(const basic_string<_CharT,_Traits,_Alloc>& __x,$/;"	f	signature:(const basic_string<_CharT,_Traits,_Alloc>& __x, const _CharT* __s)
operator <=	/Users/lij/.vim/stl/string	/^operator<=(const basic_string<_CharT,_Traits,_Alloc>& __x,$/;"	f	signature:(const basic_string<_CharT,_Traits,_Alloc>& __x, const basic_string<_CharT,_Traits,_Alloc>& __y)
operator <=	/Users/lij/.vim/stl/valarray	/^inline valarray<bool> operator<=(const _Tp& __c, const valarray<_Tp>& __x)$/;"	f	signature:(const _Tp& __c, const valarray<_Tp>& __x)
operator <=	/Users/lij/.vim/stl/valarray	/^inline valarray<bool> operator<=(const valarray<_Tp>& __x, const _Tp& __c)$/;"	f	signature:(const valarray<_Tp>& __x, const _Tp& __c)
operator <=	/Users/lij/.vim/stl/valarray	/^inline valarray<bool> operator<=(const valarray<_Tp>& __x,$/;"	f	signature:(const valarray<_Tp>& __x, const valarray<_Tp>& __y)
operator =	/Users/lij/.vim/stl/bitset	/^    reference& operator=(bool __x) {$/;"	f	class:bitset::reference	access:public	signature:(bool __x)
operator =	/Users/lij/.vim/stl/bitset	/^    reference& operator=(const reference& __j) {$/;"	f	class:bitset::reference	access:public	signature:(const reference& __j)
operator =	/Users/lij/.vim/stl/ropeimpl.h	/^_Rope_char_ref_proxy<_CharT, _Alloc>::operator= (_CharT __c) {$/;"	f	class:_Rope_char_ref_proxy	signature:(_CharT __c)
operator =	/Users/lij/.vim/stl/stl_bvector.h	/^  _Bit_reference& operator=(bool __x)$/;"	f	struct:_Bit_reference	access:public	signature:(bool __x)
operator =	/Users/lij/.vim/stl/stl_bvector.h	/^  _Bit_reference& operator=(const _Bit_reference& __x) $/;"	f	struct:_Bit_reference	access:public	signature:(const _Bit_reference& __x)
operator =	/Users/lij/.vim/stl/stl_bvector.h	/^  __VECTOR& operator=(const __VECTOR& __x) {$/;"	f	class:__BVECTOR	access:public	signature:(const __VECTOR& __x)
operator =	/Users/lij/.vim/stl/stl_deque.h	/^  deque& operator= (const deque& __x) {$/;"	f	class:deque	access:public	signature:(const deque& __x)
operator =	/Users/lij/.vim/stl/stl_hash_map.h	/^  operator=(const typename _Container::value_type& __value) { $/;"	f	class:insert_iterator	access:public	signature:(const typename _Container::value_type& __value)
operator =	/Users/lij/.vim/stl/stl_hash_set.h	/^  operator=(const typename _Container::value_type& __value) { $/;"	f	class:insert_iterator	access:public	signature:(const typename _Container::value_type& __value)
operator =	/Users/lij/.vim/stl/stl_hashtable.h	/^  hashtable& operator= (const hashtable& __ht)$/;"	f	class:hashtable	access:public	signature:(const hashtable& __ht)
operator =	/Users/lij/.vim/stl/stl_iterator.h	/^  operator=(const typename _Container::value_type& __value) { $/;"	f	class:back_insert_iterator	access:public	signature:(const typename _Container::value_type& __value)
operator =	/Users/lij/.vim/stl/stl_iterator.h	/^  operator=(const typename _Container::value_type& __value) { $/;"	f	class:front_insert_iterator	access:public	signature:(const typename _Container::value_type& __value)
operator =	/Users/lij/.vim/stl/stl_iterator.h	/^  operator=(const typename _Container::value_type& __value) { $/;"	f	class:insert_iterator	access:public	signature:(const typename _Container::value_type& __value)
operator =	/Users/lij/.vim/stl/stl_iterator.h	/^  ostream_iterator<_Tp>& operator=(const _Tp& __value) { $/;"	f	class:ostream_iterator	access:public	signature:(const _Tp& __value)
operator =	/Users/lij/.vim/stl/stl_iterator.h	/^  ostreambuf_iterator& operator=(char_type __c) {$/;"	f	class:ostreambuf_iterator	access:public	signature:(char_type __c)
operator =	/Users/lij/.vim/stl/stl_list.h	/^  list<_Tp, _Alloc>& operator=(const list<_Tp, _Alloc>& __x);$/;"	p	class:list	access:public	signature:(const list<_Tp, _Alloc>& __x)
operator =	/Users/lij/.vim/stl/stl_list.h	/^list<_Tp, _Alloc>& list<_Tp, _Alloc>::operator=(const list<_Tp, _Alloc>& __x)$/;"	f	class:list	signature:(const list<_Tp, _Alloc>& __x)
operator =	/Users/lij/.vim/stl/stl_map.h	/^  operator=(const map<_Key, _Tp, _Compare, _Alloc>& __x)$/;"	f	class:map	access:public	signature:(const map<_Key, _Tp, _Compare, _Alloc>& __x)
operator =	/Users/lij/.vim/stl/stl_multimap.h	/^  operator=(const multimap<_Key,_Tp,_Compare,_Alloc>& __x) {$/;"	f	class:multimap	access:public	signature:(const multimap<_Key,_Tp,_Compare,_Alloc>& __x)
operator =	/Users/lij/.vim/stl/stl_multiset.h	/^  operator=(const multiset<_Key,_Compare,_Alloc>& __x) {$/;"	f	class:multiset	access:public	signature:(const multiset<_Key,_Compare,_Alloc>& __x)
operator =	/Users/lij/.vim/stl/stl_raw_storage_iter.h	/^  raw_storage_iterator& operator=(const _Tp& __element) {$/;"	f	class:raw_storage_iterator	access:public	signature:(const _Tp& __element)
operator =	/Users/lij/.vim/stl/stl_rope.h	/^        rope& operator=(const rope& __x)$/;"	f	class:rope	access:public	signature:(const rope& __x)
operator =	/Users/lij/.vim/stl/stl_rope.h	/^        sequence_buffer& operator= (const sequence_buffer& __x) {$/;"	f	class:sequence_buffer	access:public	signature:(const sequence_buffer& __x)
operator =	/Users/lij/.vim/stl/stl_rope.h	/^        sequence_buffer& operator= (sequence_buffer& __x) {$/;"	f	class:sequence_buffer	access:public	signature:(sequence_buffer& __x)
operator =	/Users/lij/.vim/stl/stl_rope.h	/^        sequence_buffer& operator=(const value_type& __rhs)$/;"	f	class:sequence_buffer	access:public	signature:(const value_type& __rhs)
operator =	/Users/lij/.vim/stl/stl_rope.h	/^    _Rope_char_ref_proxy& operator= (_CharT __c);$/;"	p	class:_Rope_char_ref_proxy	access:public	signature:(_CharT __c)
operator =	/Users/lij/.vim/stl/stl_rope.h	/^    _Rope_char_ref_proxy& operator= (const _Rope_char_ref_proxy& __c) {$/;"	f	class:_Rope_char_ref_proxy	access:public	signature:(const _Rope_char_ref_proxy& __c)
operator =	/Users/lij/.vim/stl/stl_rope.h	/^    _Rope_const_iterator& operator= (const _Rope_const_iterator& __x) {$/;"	f	class:_Rope_const_iterator	access:public	signature:(const _Rope_const_iterator& __x)
operator =	/Users/lij/.vim/stl/stl_rope.h	/^    _Rope_iterator& operator= (const _Rope_iterator& __x) {$/;"	f	class:_Rope_iterator	access:public	signature:(const _Rope_iterator& __x)
operator =	/Users/lij/.vim/stl/stl_rope.h	/^    _Rope_self_destruct_ptr& operator= (_Rope_RopeRep<_CharT,_Alloc>* __x)$/;"	f	struct:_Rope_self_destruct_ptr	access:public	signature:(_Rope_RopeRep<_CharT,_Alloc>* __x)
operator =	/Users/lij/.vim/stl/stl_rope.h	/^    operator= (const _Rope_char_ptr_proxy& __x) {$/;"	f	class:_Rope_char_ptr_proxy	access:public	signature:(const _Rope_char_ptr_proxy& __x)
operator =	/Users/lij/.vim/stl/stl_set.h	/^  set<_Key,_Compare,_Alloc>& operator=(const set<_Key, _Compare, _Alloc>& __x)$/;"	f	class:set	access:public	signature:(const set<_Key, _Compare, _Alloc>& __x)
operator =	/Users/lij/.vim/stl/stl_slist.h	/^  operator=(const typename _Container::value_type& __value) { $/;"	f	class:insert_iterator	access:public	signature:(const typename _Container::value_type& __value)
operator =	/Users/lij/.vim/stl/stl_slist.h	/^  slist& operator= (const slist& __x);$/;"	p	class:slist	access:public	signature:(const slist& __x)
operator =	/Users/lij/.vim/stl/stl_slist.h	/^slist<_Tp,_Alloc>& slist<_Tp,_Alloc>::operator=(const slist<_Tp,_Alloc>& __x)$/;"	f	class:slist	signature:(const slist<_Tp,_Alloc>& __x)
operator =	/Users/lij/.vim/stl/stl_tempbuf.h	/^  void operator=(const _Temporary_buffer&) {}$/;"	f	class:_Temporary_buffer	access:private	signature:(const _Temporary_buffer&)
operator =	/Users/lij/.vim/stl/stl_threads.h	/^  void operator=(const _STL_auto_lock&);$/;"	p	struct:_STL_auto_lock	access:private	signature:(const _STL_auto_lock&)
operator =	/Users/lij/.vim/stl/stl_tree.h	/^  ::operator=(const _Rb_tree<_Key,_Value,_KeyOfValue,_Compare,_Alloc>& __x)$/;"	f	class:_Rb_tree	signature:(const _Rb_tree<_Key,_Value,_KeyOfValue,_Compare,_Alloc>& __x)
operator =	/Users/lij/.vim/stl/stl_tree.h	/^  operator=(const _Rb_tree<_Key,_Value,_KeyOfValue,_Compare,_Alloc>& __x);$/;"	p	class:_Rb_tree	access:public	signature:(const _Rb_tree<_Key,_Value,_KeyOfValue,_Compare,_Alloc>& __x)
operator =	/Users/lij/.vim/stl/stl_vector.h	/^  vector<_Tp, _Alloc>& operator=(const vector<_Tp, _Alloc>& __x);$/;"	p	class:vector	access:public	signature:(const vector<_Tp, _Alloc>& __x)
operator =	/Users/lij/.vim/stl/stl_vector.h	/^vector<_Tp,_Alloc>::operator=(const vector<_Tp, _Alloc>& __x)$/;"	f	class:vector	signature:(const vector<_Tp, _Alloc>& __x)
operator =	/Users/lij/.vim/stl/string	/^  basic_string& operator=(_CharT __c)$/;"	f	class:basic_string	access:public	signature:(_CharT __c)
operator =	/Users/lij/.vim/stl/string	/^  basic_string& operator=(const _CharT* __s) $/;"	f	class:basic_string	access:public	signature:(const _CharT* __s)
operator =	/Users/lij/.vim/stl/string	/^  basic_string& operator=(const basic_string& __s) {$/;"	f	class:basic_string	access:public	signature:(const basic_string& __s)
operator =	/Users/lij/.vim/stl/valarray	/^  valarray& operator=(const gslice_array<_Tp>&);$/;"	p	class:valarray	file:	access:public	signature:(const gslice_array<_Tp>&)
operator =	/Users/lij/.vim/stl/valarray	/^  valarray& operator=(const indirect_array<_Tp>&);$/;"	p	class:valarray	file:	access:public	signature:(const indirect_array<_Tp>&)
operator =	/Users/lij/.vim/stl/valarray	/^  valarray& operator=(const mask_array<_Tp>&);$/;"	p	class:valarray	file:	access:public	signature:(const mask_array<_Tp>&)
operator =	/Users/lij/.vim/stl/valarray	/^  valarray& operator=(const slice_array<_Tp>&);$/;"	p	class:valarray	file:	access:public	signature:(const slice_array<_Tp>&)
operator =	/Users/lij/.vim/stl/valarray	/^  valarray& operator=(const valarray& __x) {$/;"	f	class:valarray	access:public	signature:(const valarray& __x)
operator =	/Users/lij/.vim/stl/valarray	/^  valarray& operator=(const value_type& __x) {$/;"	f	class:valarray	access:public	signature:(const value_type& __x)
operator =	/Users/lij/.vim/stl/valarray	/^  void operator= (const valarray<value_type>& __x) const {$/;"	f	class:gslice_array	access:public	signature:(const valarray<value_type>& __x) const
operator =	/Users/lij/.vim/stl/valarray	/^  void operator= (const value_type& __c) const {$/;"	f	class:gslice_array	access:public	signature:(const value_type& __c) const
operator =	/Users/lij/.vim/stl/valarray	/^  void operator=(const gslice_array&);$/;"	p	class:gslice_array	file:	access:private	signature:(const gslice_array&)
operator =	/Users/lij/.vim/stl/valarray	/^  void operator=(const indirect_array&);$/;"	p	class:indirect_array	file:	access:private	signature:(const indirect_array&)
operator =	/Users/lij/.vim/stl/valarray	/^  void operator=(const mask_array&);$/;"	p	class:mask_array	file:	access:private	signature:(const mask_array&)
operator =	/Users/lij/.vim/stl/valarray	/^  void operator=(const valarray<value_type>& __x) const {$/;"	f	class:indirect_array	access:public	signature:(const valarray<value_type>& __x) const
operator =	/Users/lij/.vim/stl/valarray	/^  void operator=(const valarray<value_type>& __x) const {$/;"	f	class:mask_array	access:public	signature:(const valarray<value_type>& __x) const
operator =	/Users/lij/.vim/stl/valarray	/^  void operator=(const valarray<value_type>& __x) const {$/;"	f	class:slice_array	access:public	signature:(const valarray<value_type>& __x) const
operator =	/Users/lij/.vim/stl/valarray	/^  void operator=(const value_type& __c) const {$/;"	f	class:indirect_array	access:public	signature:(const value_type& __c) const
operator =	/Users/lij/.vim/stl/valarray	/^  void operator=(const value_type& __c) const {$/;"	f	class:mask_array	access:public	signature:(const value_type& __c) const
operator =	/Users/lij/.vim/stl/valarray	/^  void operator=(const value_type& __c) const {$/;"	f	class:slice_array	access:public	signature:(const value_type& __c) const
operator =	/Users/lij/.vim/stl/valarray	/^inline valarray<_Tp>& valarray<_Tp>::operator=(const mask_array<_Tp>& __x) {$/;"	f	class:valarray	signature:(const mask_array<_Tp>& __x)
operator =	/Users/lij/.vim/stl/valarray	/^valarray<_Tp>& valarray<_Tp>::operator=(const gslice_array<_Tp>& __x)$/;"	f	class:valarray	signature:(const gslice_array<_Tp>& __x)
operator =	/Users/lij/.vim/stl/valarray	/^valarray<_Tp>& valarray<_Tp>::operator=(const indirect_array<_Tp>& __x) {$/;"	f	class:valarray	signature:(const indirect_array<_Tp>& __x)
operator =	/Users/lij/.vim/stl/valarray	/^valarray<_Tp>& valarray<_Tp>::operator=(const slice_array<_Tp>& __x)$/;"	f	class:valarray	signature:(const slice_array<_Tp>& __x)
operator ==	/Users/lij/.vim/stl/bitset	/^  bool operator==(const bitset<_Nb>& __rhs) const {$/;"	f	class:bitset	access:public	signature:(const bitset<_Nb>& __rhs) const
operator ==	/Users/lij/.vim/stl/pthread_alloc	/^inline bool operator==(const _Pthread_alloc_template<_Max_size>&,$/;"	f	signature:(const _Pthread_alloc_template<_Max_size>&, const _Pthread_alloc_template<_Max_size>&)
operator ==	/Users/lij/.vim/stl/pthread_alloc	/^inline bool operator==(const pthread_allocator<_T1>&,$/;"	f	signature:(const pthread_allocator<_T1>&, const pthread_allocator<_T2>& a2)
operator ==	/Users/lij/.vim/stl/stl_alloc.h	/^inline bool operator==(const __default_alloc_template<__threads, __inst>&,$/;"	f	signature:(const __default_alloc_template<__threads, __inst>&, const __default_alloc_template<__threads, __inst>&)
operator ==	/Users/lij/.vim/stl/stl_alloc.h	/^inline bool operator==(const allocator<_T1>&, const allocator<_T2>&) $/;"	f	signature:(const allocator<_T1>&, const allocator<_T2>&)
operator ==	/Users/lij/.vim/stl/stl_bvector.h	/^  bool operator==(const _Bit_iterator_base& __i) const {$/;"	f	struct:_Bit_iterator_base	access:public	signature:(const _Bit_iterator_base& __i) const
operator ==	/Users/lij/.vim/stl/stl_bvector.h	/^  bool operator==(const _Bit_reference& __x) const$/;"	f	struct:_Bit_reference	access:public	signature:(const _Bit_reference& __x) const
operator ==	/Users/lij/.vim/stl/stl_bvector.h	/^operator==(const bit_vector& __x, const bit_vector& __y)$/;"	f	signature:(const bit_vector& __x, const bit_vector& __y)
operator ==	/Users/lij/.vim/stl/stl_deque.h	/^  bool operator==(const _Self& __x) const { return _M_cur == __x._M_cur; }$/;"	f	struct:_Deque_iterator	access:public	signature:(const _Self& __x) const
operator ==	/Users/lij/.vim/stl/stl_deque.h	/^inline bool operator==(const deque<_Tp, _Alloc>& __x,$/;"	f	signature:(const deque<_Tp, _Alloc>& __x, const deque<_Tp, _Alloc>& __y)
operator ==	/Users/lij/.vim/stl/stl_hash_map.h	/^  friend bool operator== (const hash_map<_K1, _T1, _HF, _EqK, _Al>&,$/;"	p	class:hash_map	access:friend	signature:(const hash_map<_K1, _T1, _HF, _EqK, _Al>&, const hash_map<_K1, _T1, _HF, _EqK, _Al>&)
operator ==	/Users/lij/.vim/stl/stl_hash_map.h	/^  friend bool operator== (const hash_multimap<_K1, _T1, _HF, _EqK, _Al>&,$/;"	p	class:hash_multimap	access:friend	signature:(const hash_multimap<_K1, _T1, _HF, _EqK, _Al>&, const hash_multimap<_K1, _T1, _HF, _EqK, _Al>&)
operator ==	/Users/lij/.vim/stl/stl_hash_map.h	/^inline bool operator==(const hash_map<_Key, _Tp, _HashFn, _EqKey, _Alloc>&,$/;"	p	signature:(const hash_map<_Key, _Tp, _HashFn, _EqKey, _Alloc>&, const hash_map<_Key, _Tp, _HashFn, _EqKey, _Alloc>&)
operator ==	/Users/lij/.vim/stl/stl_hash_map.h	/^operator==(const hash_map<_Key,_Tp,_HashFcn,_EqlKey,_Alloc>& __hm1,$/;"	f	signature:(const hash_map<_Key,_Tp,_HashFcn,_EqlKey,_Alloc>& __hm1, const hash_map<_Key,_Tp,_HashFcn,_EqlKey,_Alloc>& __hm2)
operator ==	/Users/lij/.vim/stl/stl_hash_map.h	/^operator==(const hash_multimap<_Key,_Tp,_HF,_EqKey,_Alloc>& __hm1,$/;"	f	signature:(const hash_multimap<_Key,_Tp,_HF,_EqKey,_Alloc>& __hm1, const hash_multimap<_Key,_Tp,_HF,_EqKey,_Alloc>& __hm2)
operator ==	/Users/lij/.vim/stl/stl_hash_map.h	/^operator==(const hash_multimap<_Key,_Tp,_HF,_EqKey,_Alloc>& __hm1,$/;"	p	signature:(const hash_multimap<_Key,_Tp,_HF,_EqKey,_Alloc>& __hm1, const hash_multimap<_Key,_Tp,_HF,_EqKey,_Alloc>& __hm2)
operator ==	/Users/lij/.vim/stl/stl_hash_set.h	/^  friend bool operator== (const hash_multiset<_Val, _HF, _EqK, _Al>&,$/;"	p	class:hash_multiset	access:friend	signature:(const hash_multiset<_Val, _HF, _EqK, _Al>&, const hash_multiset<_Val, _HF, _EqK, _Al>&)
operator ==	/Users/lij/.vim/stl/stl_hash_set.h	/^  friend bool operator== (const hash_set<_Val, _HF, _EqK, _Al>&,$/;"	p	class:hash_set	access:friend	signature:(const hash_set<_Val, _HF, _EqK, _Al>&, const hash_set<_Val, _HF, _EqK, _Al>&)
operator ==	/Users/lij/.vim/stl/stl_hash_set.h	/^operator==(const hash_multiset<_Val,_HashFcn,_EqualKey,_Alloc>& __hs1,$/;"	f	signature:(const hash_multiset<_Val,_HashFcn,_EqualKey,_Alloc>& __hs1, const hash_multiset<_Val,_HashFcn,_EqualKey,_Alloc>& __hs2)
operator ==	/Users/lij/.vim/stl/stl_hash_set.h	/^operator==(const hash_multiset<_Val,_HashFcn,_EqualKey,_Alloc>& __hs1,$/;"	p	signature:(const hash_multiset<_Val,_HashFcn,_EqualKey,_Alloc>& __hs1, const hash_multiset<_Val,_HashFcn,_EqualKey,_Alloc>& __hs2)
operator ==	/Users/lij/.vim/stl/stl_hash_set.h	/^operator==(const hash_set<_Value,_HashFcn,_EqualKey,_Alloc>& __hs1,$/;"	f	signature:(const hash_set<_Value,_HashFcn,_EqualKey,_Alloc>& __hs1, const hash_set<_Value,_HashFcn,_EqualKey,_Alloc>& __hs2)
operator ==	/Users/lij/.vim/stl/stl_hash_set.h	/^operator==(const hash_set<_Value,_HashFcn,_EqualKey,_Alloc>& __hs1,$/;"	p	signature:(const hash_set<_Value,_HashFcn,_EqualKey,_Alloc>& __hs1, const hash_set<_Value,_HashFcn,_EqualKey,_Alloc>& __hs2)
operator ==	/Users/lij/.vim/stl/stl_hashtable.h	/^  bool operator==(const const_iterator& __it) const $/;"	f	struct:_Hashtable_const_iterator	access:public	signature:(const const_iterator& __it) const
operator ==	/Users/lij/.vim/stl/stl_hashtable.h	/^  bool operator==(const iterator& __it) const$/;"	f	struct:_Hashtable_iterator	access:public	signature:(const iterator& __it) const
operator ==	/Users/lij/.vim/stl/stl_hashtable.h	/^  friend bool operator== (const hashtable<_Vl, _Ky, _HF, _Ex, _Eq, _Al>&,$/;"	p	class:hashtable	access:friend	signature:(const hashtable<_Vl, _Ky, _HF, _Ex, _Eq, _Al>&, const hashtable<_Vl, _Ky, _HF, _Ex, _Eq, _Al>&)
operator ==	/Users/lij/.vim/stl/stl_hashtable.h	/^bool operator==(const hashtable<_Val,_Key,_HF,_Ex,_Eq,_All>& __ht1,$/;"	f	signature:(const hashtable<_Val,_Key,_HF,_Ex,_Eq,_All>& __ht1, const hashtable<_Val,_Key,_HF,_Ex,_Eq,_All>& __ht2)
operator ==	/Users/lij/.vim/stl/stl_hashtable.h	/^bool operator==(const hashtable<_Val,_Key,_HF,_Ex,_Eq,_All>& __ht1,$/;"	p	signature:(const hashtable<_Val,_Key,_HF,_Ex,_Eq,_All>& __ht1, const hashtable<_Val,_Key,_HF,_Ex,_Eq,_All>& __ht2)
operator ==	/Users/lij/.vim/stl/stl_iterator.h	/^  friend bool operator==(const istream_iterator<_T1, _D1>&,$/;"	p	class:istream_iterator	access:friend	signature:(const istream_iterator<_T1, _D1>&, const istream_iterator<_T1, _D1>&)
operator ==	/Users/lij/.vim/stl/stl_iterator.h	/^inline bool operator==($/;"	f	signature:( const reverse_bidirectional_iterator<_BiIter, _Tp, _Ref, _Distance>& __x, const reverse_bidirectional_iterator<_BiIter, _Tp, _Ref, _Distance>& __y)
operator ==	/Users/lij/.vim/stl/stl_iterator.h	/^inline bool operator==(const istream_iterator<_Tp, _Dist>&,$/;"	p	signature:(const istream_iterator<_Tp, _Dist>&, const istream_iterator<_Tp, _Dist>&)
operator ==	/Users/lij/.vim/stl/stl_iterator.h	/^inline bool operator==(const istream_iterator<_Tp, _Distance>& __x,$/;"	f	signature:(const istream_iterator<_Tp, _Distance>& __x, const istream_iterator<_Tp, _Distance>& __y)
operator ==	/Users/lij/.vim/stl/stl_iterator.h	/^inline bool operator==(const istreambuf_iterator<_CharT, _Traits>& __x,$/;"	f	signature:(const istreambuf_iterator<_CharT, _Traits>& __x, const istreambuf_iterator<_CharT, _Traits>& __y)
operator ==	/Users/lij/.vim/stl/stl_iterator.h	/^inline bool operator==(const reverse_iterator<_Iterator>& __x, $/;"	f	signature:(const reverse_iterator<_Iterator>& __x, const reverse_iterator<_Iterator>& __y)
operator ==	/Users/lij/.vim/stl/stl_iterator.h	/^operator==(const istream_iterator<_Tp, _CharT, _Traits, _Dist>& __x,$/;"	f	signature:(const istream_iterator<_Tp, _CharT, _Traits, _Dist>& __x, const istream_iterator<_Tp, _CharT, _Traits, _Dist>& __y)
operator ==	/Users/lij/.vim/stl/stl_iterator.h	/^operator==(const reverse_iterator<_RandomAccessIterator, _Tp,$/;"	f	signature:(const reverse_iterator<_RandomAccessIterator, _Tp, _Reference, _Distance>& __x, const reverse_iterator<_RandomAccessIterator, _Tp, _Reference, _Distance>& __y)
operator ==	/Users/lij/.vim/stl/stl_list.h	/^  bool operator==(const _List_iterator_base& __x) const {$/;"	f	struct:_List_iterator_base	access:public	signature:(const _List_iterator_base& __x) const
operator ==	/Users/lij/.vim/stl/stl_list.h	/^operator==(const list<_Tp,_Alloc>& __x, const list<_Tp,_Alloc>& __y)$/;"	f	signature:(const list<_Tp,_Alloc>& __x, const list<_Tp,_Alloc>& __y)
operator ==	/Users/lij/.vim/stl/stl_map.h	/^  friend bool operator== (const map<_K1, _T1, _C1, _A1>&,$/;"	p	class:map	access:friend	signature:(const map<_K1, _T1, _C1, _A1>&, const map<_K1, _T1, _C1, _A1>&)
operator ==	/Users/lij/.vim/stl/stl_map.h	/^inline bool operator==(const map<_Key,_Tp,_Compare,_Alloc>& __x, $/;"	f	signature:(const map<_Key,_Tp,_Compare,_Alloc>& __x, const map<_Key,_Tp,_Compare,_Alloc>& __y)
operator ==	/Users/lij/.vim/stl/stl_map.h	/^inline bool operator==(const map<_Key,_Tp,_Compare,_Alloc>& __x, $/;"	p	signature:(const map<_Key,_Tp,_Compare,_Alloc>& __x, const map<_Key,_Tp,_Compare,_Alloc>& __y)
operator ==	/Users/lij/.vim/stl/stl_multimap.h	/^  friend bool operator== (const multimap<_K1, _T1, _C1, _A1>&,$/;"	p	class:multimap	access:friend	signature:(const multimap<_K1, _T1, _C1, _A1>&, const multimap<_K1, _T1, _C1, _A1>&)
operator ==	/Users/lij/.vim/stl/stl_multimap.h	/^inline bool operator==(const multimap<_Key,_Tp,_Compare,_Alloc>& __x, $/;"	f	signature:(const multimap<_Key,_Tp,_Compare,_Alloc>& __x, const multimap<_Key,_Tp,_Compare,_Alloc>& __y)
operator ==	/Users/lij/.vim/stl/stl_multimap.h	/^inline bool operator==(const multimap<_Key,_Tp,_Compare,_Alloc>& __x, $/;"	p	signature:(const multimap<_Key,_Tp,_Compare,_Alloc>& __x, const multimap<_Key,_Tp,_Compare,_Alloc>& __y)
operator ==	/Users/lij/.vim/stl/stl_multiset.h	/^  friend bool operator== (const multiset<_K1,_C1,_A1>&,$/;"	p	class:multiset	access:friend	signature:(const multiset<_K1,_C1,_A1>&, const multiset<_K1,_C1,_A1>&)
operator ==	/Users/lij/.vim/stl/stl_multiset.h	/^inline bool operator==(const multiset<_Key,_Compare,_Alloc>& __x, $/;"	f	signature:(const multiset<_Key,_Compare,_Alloc>& __x, const multiset<_Key,_Compare,_Alloc>& __y)
operator ==	/Users/lij/.vim/stl/stl_multiset.h	/^inline bool operator==(const multiset<_Key,_Compare,_Alloc>& __x, $/;"	p	signature:(const multiset<_Key,_Compare,_Alloc>& __x, const multiset<_Key,_Compare,_Alloc>& __y)
operator ==	/Users/lij/.vim/stl/stl_pair.h	/^inline bool operator==(const pair<_T1, _T2>& __x, const pair<_T1, _T2>& __y)$/;"	f	signature:(const pair<_T1, _T2>& __x, const pair<_T1, _T2>& __y)
operator ==	/Users/lij/.vim/stl/stl_queue.h	/^  friend bool operator== (const queue<_Tp1, _Seq1>&,$/;"	p	class:queue	access:friend	signature:(const queue<_Tp1, _Seq1>&, const queue<_Tp1, _Seq1>&)
operator ==	/Users/lij/.vim/stl/stl_queue.h	/^inline bool operator==(const queue<_Tp, _Seq>&, const queue<_Tp, _Seq>&);$/;"	p	signature:(const queue<_Tp, _Seq>&, const queue<_Tp, _Seq>&)
operator ==	/Users/lij/.vim/stl/stl_queue.h	/^operator==(const queue<_Tp, _Sequence>& __x, const queue<_Tp, _Sequence>& __y)$/;"	f	signature:(const queue<_Tp, _Sequence>& __x, const queue<_Tp, _Sequence>& __y)
operator ==	/Users/lij/.vim/stl/stl_rope.h	/^    friend bool operator== (const _Rope_char_ptr_proxy<_CharT2,_Alloc2>& __x,$/;"	p	class:_Rope_char_ptr_proxy	access:friend	signature:(const _Rope_char_ptr_proxy<_CharT2,_Alloc2>& __x, const _Rope_char_ptr_proxy<_CharT2,_Alloc2>& __y)
operator ==	/Users/lij/.vim/stl/stl_rope.h	/^    friend bool operator==$/;"	p	class:_Rope_const_iterator	access:friend	signature:(const _Rope_const_iterator<_CharT2,_Alloc2>& __x, const _Rope_const_iterator<_CharT2,_Alloc2>& __y)
operator ==	/Users/lij/.vim/stl/stl_rope.h	/^    friend bool operator==$/;"	p	class:_Rope_iterator	access:friend	signature:(const _Rope_iterator<_CharT2,_Alloc2>& __x, const _Rope_iterator<_CharT2,_Alloc2>& __y)
operator ==	/Users/lij/.vim/stl/stl_rope.h	/^bool operator== $/;"	p	signature:(const _Rope_const_iterator<_CharT,_Alloc>& __x, const _Rope_const_iterator<_CharT,_Alloc>& __y)
operator ==	/Users/lij/.vim/stl/stl_rope.h	/^bool operator== $/;"	p	signature:(const _Rope_iterator<_CharT,_Alloc>& __x, const _Rope_iterator<_CharT,_Alloc>& __y)
operator ==	/Users/lij/.vim/stl/stl_rope.h	/^bool operator== (const _Rope_char_ptr_proxy<_CharT,_Alloc>& __x,$/;"	p	signature:(const _Rope_char_ptr_proxy<_CharT,_Alloc>& __x, const _Rope_char_ptr_proxy<_CharT,_Alloc>& __y)
operator ==	/Users/lij/.vim/stl/stl_rope.h	/^inline bool operator== (const _Rope_char_ptr_proxy<_CharT,_Alloc>& __x,$/;"	f	signature:(const _Rope_char_ptr_proxy<_CharT,_Alloc>& __x, const _Rope_char_ptr_proxy<_CharT,_Alloc>& __y)
operator ==	/Users/lij/.vim/stl/stl_rope.h	/^inline bool operator== (const _Rope_const_iterator<_CharT,_Alloc>& __x,$/;"	f	signature:(const _Rope_const_iterator<_CharT,_Alloc>& __x, const _Rope_const_iterator<_CharT,_Alloc>& __y)
operator ==	/Users/lij/.vim/stl/stl_rope.h	/^inline bool operator== (const _Rope_iterator<_CharT,_Alloc>& __x,$/;"	f	signature:(const _Rope_iterator<_CharT,_Alloc>& __x, const _Rope_iterator<_CharT,_Alloc>& __y)
operator ==	/Users/lij/.vim/stl/stl_rope.h	/^operator== (const rope<_CharT,_Alloc>& __left, $/;"	f	signature:(const rope<_CharT,_Alloc>& __left, const rope<_CharT,_Alloc>& __right)
operator ==	/Users/lij/.vim/stl/stl_set.h	/^  friend bool operator== (const set<_K1,_C1,_A1>&, const set<_K1,_C1,_A1>&);$/;"	p	class:set	access:friend	signature:(const set<_K1,_C1,_A1>&, const set<_K1,_C1,_A1>&)
operator ==	/Users/lij/.vim/stl/stl_set.h	/^inline bool operator==(const set<_Key,_Compare,_Alloc>& __x, $/;"	f	signature:(const set<_Key,_Compare,_Alloc>& __x, const set<_Key,_Compare,_Alloc>& __y)
operator ==	/Users/lij/.vim/stl/stl_set.h	/^inline bool operator==(const set<_Key,_Compare,_Alloc>& __x, $/;"	p	signature:(const set<_Key,_Compare,_Alloc>& __x, const set<_Key,_Compare,_Alloc>& __y)
operator ==	/Users/lij/.vim/stl/stl_slist.h	/^  bool operator==(const _Slist_iterator_base& __x) const {$/;"	f	struct:_Slist_iterator_base	access:public	signature:(const _Slist_iterator_base& __x) const
operator ==	/Users/lij/.vim/stl/stl_slist.h	/^operator==(const slist<_Tp,_Alloc>& _SL1, const slist<_Tp,_Alloc>& _SL2)$/;"	f	signature:(const slist<_Tp,_Alloc>& _SL1, const slist<_Tp,_Alloc>& _SL2)
operator ==	/Users/lij/.vim/stl/stl_stack.h	/^  friend bool operator== (const stack<_Tp1, _Seq1>&,$/;"	p	class:stack	access:friend	signature:(const stack<_Tp1, _Seq1>&, const stack<_Tp1, _Seq1>&)
operator ==	/Users/lij/.vim/stl/stl_stack.h	/^bool operator==(const stack<_Tp,_Seq>& __x, const stack<_Tp,_Seq>& __y)$/;"	f	signature:(const stack<_Tp,_Seq>& __x, const stack<_Tp,_Seq>& __y)
operator ==	/Users/lij/.vim/stl/stl_stack.h	/^bool operator==(const stack<_Tp,_Seq>& __x, const stack<_Tp,_Seq>& __y);$/;"	p	signature:(const stack<_Tp,_Seq>& __x, const stack<_Tp,_Seq>& __y)
operator ==	/Users/lij/.vim/stl/stl_tree.h	/^inline bool operator==(const _Rb_tree_base_iterator& __x,$/;"	f	signature:(const _Rb_tree_base_iterator& __x, const _Rb_tree_base_iterator& __y)
operator ==	/Users/lij/.vim/stl/stl_tree.h	/^operator==(const _Rb_tree<_Key,_Value,_KeyOfValue,_Compare,_Alloc>& __x, $/;"	f	signature:(const _Rb_tree<_Key,_Value,_KeyOfValue,_Compare,_Alloc>& __x, const _Rb_tree<_Key,_Value,_KeyOfValue,_Compare,_Alloc>& __y)
operator ==	/Users/lij/.vim/stl/stl_vector.h	/^operator==(const vector<_Tp, _Alloc>& __x, const vector<_Tp, _Alloc>& __y)$/;"	f	signature:(const vector<_Tp, _Alloc>& __x, const vector<_Tp, _Alloc>& __y)
operator ==	/Users/lij/.vim/stl/string	/^operator==(const _CharT* __s,$/;"	f	signature:(const _CharT* __s, const basic_string<_CharT,_Traits,_Alloc>& __y)
operator ==	/Users/lij/.vim/stl/string	/^operator==(const basic_string<_CharT,_Traits,_Alloc>& __x,$/;"	f	signature:(const basic_string<_CharT,_Traits,_Alloc>& __x, const _CharT* __s)
operator ==	/Users/lij/.vim/stl/string	/^operator==(const basic_string<_CharT,_Traits,_Alloc>& __x,$/;"	f	signature:(const basic_string<_CharT,_Traits,_Alloc>& __x, const basic_string<_CharT,_Traits,_Alloc>& __y)
operator ==	/Users/lij/.vim/stl/valarray	/^inline valarray<bool> operator==(const _Tp& __c, const valarray<_Tp>& __x)$/;"	f	signature:(const _Tp& __c, const valarray<_Tp>& __x)
operator ==	/Users/lij/.vim/stl/valarray	/^inline valarray<bool> operator==(const valarray<_Tp>& __x, const _Tp& __c)$/;"	f	signature:(const valarray<_Tp>& __x, const _Tp& __c)
operator ==	/Users/lij/.vim/stl/valarray	/^inline valarray<bool> operator==(const valarray<_Tp>& __x,$/;"	f	signature:(const valarray<_Tp>& __x, const valarray<_Tp>& __y)
operator >	/Users/lij/.vim/stl/stl_bvector.h	/^  bool operator>(const _Bit_iterator_base& __i) const {$/;"	f	struct:_Bit_iterator_base	access:public	signature:(const _Bit_iterator_base& __i) const
operator >	/Users/lij/.vim/stl/stl_bvector.h	/^inline bool operator>(const bit_vector& __x, const bit_vector& __y)$/;"	f	signature:(const bit_vector& __x, const bit_vector& __y)
operator >	/Users/lij/.vim/stl/stl_deque.h	/^  bool operator>(const _Self& __x) const  { return __x < *this; }$/;"	f	struct:_Deque_iterator	access:public	signature:(const _Self& __x) const
operator >	/Users/lij/.vim/stl/stl_deque.h	/^inline bool operator>(const deque<_Tp, _Alloc>& __x,$/;"	f	signature:(const deque<_Tp, _Alloc>& __x, const deque<_Tp, _Alloc>& __y)
operator >	/Users/lij/.vim/stl/stl_iterator.h	/^inline bool operator>(const reverse_iterator<_Iterator>& __x, $/;"	f	signature:(const reverse_iterator<_Iterator>& __x, const reverse_iterator<_Iterator>& __y)
operator >	/Users/lij/.vim/stl/stl_iterator.h	/^operator>(const reverse_iterator<_RandomAccessIterator, _Tp,$/;"	f	signature:(const reverse_iterator<_RandomAccessIterator, _Tp, _Reference, _Distance>& __x, const reverse_iterator<_RandomAccessIterator, _Tp, _Reference, _Distance>& __y)
operator >	/Users/lij/.vim/stl/stl_list.h	/^inline bool operator>(const list<_Tp,_Alloc>& __x,$/;"	f	signature:(const list<_Tp,_Alloc>& __x, const list<_Tp,_Alloc>& __y)
operator >	/Users/lij/.vim/stl/stl_map.h	/^inline bool operator>(const map<_Key,_Tp,_Compare,_Alloc>& __x, $/;"	f	signature:(const map<_Key,_Tp,_Compare,_Alloc>& __x, const map<_Key,_Tp,_Compare,_Alloc>& __y)
operator >	/Users/lij/.vim/stl/stl_multimap.h	/^inline bool operator>(const multimap<_Key,_Tp,_Compare,_Alloc>& __x, $/;"	f	signature:(const multimap<_Key,_Tp,_Compare,_Alloc>& __x, const multimap<_Key,_Tp,_Compare,_Alloc>& __y)
operator >	/Users/lij/.vim/stl/stl_multiset.h	/^inline bool operator>(const multiset<_Key,_Compare,_Alloc>& __x, $/;"	f	signature:(const multiset<_Key,_Compare,_Alloc>& __x, const multiset<_Key,_Compare,_Alloc>& __y)
operator >	/Users/lij/.vim/stl/stl_pair.h	/^inline bool operator>(const pair<_T1, _T2>& __x, const pair<_T1, _T2>& __y) {$/;"	f	signature:(const pair<_T1, _T2>& __x, const pair<_T1, _T2>& __y)
operator >	/Users/lij/.vim/stl/stl_queue.h	/^operator>(const queue<_Tp, _Sequence>& __x, const queue<_Tp, _Sequence>& __y)$/;"	f	signature:(const queue<_Tp, _Sequence>& __x, const queue<_Tp, _Sequence>& __y)
operator >	/Users/lij/.vim/stl/stl_relops.h	/^inline bool operator>(const _Tp& __x, const _Tp& __y) {$/;"	f	signature:(const _Tp& __x, const _Tp& __y)
operator >	/Users/lij/.vim/stl/stl_rope.h	/^inline bool operator> (const _Rope_const_iterator<_CharT,_Alloc>& __x,$/;"	f	signature:(const _Rope_const_iterator<_CharT,_Alloc>& __x, const _Rope_const_iterator<_CharT,_Alloc>& __y)
operator >	/Users/lij/.vim/stl/stl_rope.h	/^inline bool operator> (const _Rope_iterator<_CharT,_Alloc>& __x,$/;"	f	signature:(const _Rope_iterator<_CharT,_Alloc>& __x, const _Rope_iterator<_CharT,_Alloc>& __y)
operator >	/Users/lij/.vim/stl/stl_rope.h	/^operator> (const rope<_CharT,_Alloc>& __x, const rope<_CharT,_Alloc>& __y) {$/;"	f	signature:(const rope<_CharT,_Alloc>& __x, const rope<_CharT,_Alloc>& __y)
operator >	/Users/lij/.vim/stl/stl_set.h	/^inline bool operator>(const set<_Key,_Compare,_Alloc>& __x, $/;"	f	signature:(const set<_Key,_Compare,_Alloc>& __x, const set<_Key,_Compare,_Alloc>& __y)
operator >	/Users/lij/.vim/stl/stl_slist.h	/^operator>(const slist<_Tp,_Alloc>& _SL1, const slist<_Tp,_Alloc>& _SL2) {$/;"	f	signature:(const slist<_Tp,_Alloc>& _SL1, const slist<_Tp,_Alloc>& _SL2)
operator >	/Users/lij/.vim/stl/stl_stack.h	/^bool operator>(const stack<_Tp,_Seq>& __x, const stack<_Tp,_Seq>& __y)$/;"	f	signature:(const stack<_Tp,_Seq>& __x, const stack<_Tp,_Seq>& __y)
operator >	/Users/lij/.vim/stl/stl_tree.h	/^operator>(const _Rb_tree<_Key,_Value,_KeyOfValue,_Compare,_Alloc>& __x, $/;"	f	signature:(const _Rb_tree<_Key,_Value,_KeyOfValue,_Compare,_Alloc>& __x, const _Rb_tree<_Key,_Value,_KeyOfValue,_Compare,_Alloc>& __y)
operator >	/Users/lij/.vim/stl/stl_vector.h	/^operator>(const vector<_Tp, _Alloc>& __x, const vector<_Tp, _Alloc>& __y) {$/;"	f	signature:(const vector<_Tp, _Alloc>& __x, const vector<_Tp, _Alloc>& __y)
operator >	/Users/lij/.vim/stl/string	/^operator>(const _CharT* __s,$/;"	f	signature:(const _CharT* __s, const basic_string<_CharT,_Traits,_Alloc>& __y)
operator >	/Users/lij/.vim/stl/string	/^operator>(const basic_string<_CharT,_Traits,_Alloc>& __x,$/;"	f	signature:(const basic_string<_CharT,_Traits,_Alloc>& __x, const _CharT* __s)
operator >	/Users/lij/.vim/stl/string	/^operator>(const basic_string<_CharT,_Traits,_Alloc>& __x,$/;"	f	signature:(const basic_string<_CharT,_Traits,_Alloc>& __x, const basic_string<_CharT,_Traits,_Alloc>& __y)
operator >	/Users/lij/.vim/stl/valarray	/^inline valarray<bool> operator>(const _Tp& __c, const valarray<_Tp>& __x)$/;"	f	signature:(const _Tp& __c, const valarray<_Tp>& __x)
operator >	/Users/lij/.vim/stl/valarray	/^inline valarray<bool> operator>(const valarray<_Tp>& __x, const _Tp& __c)$/;"	f	signature:(const valarray<_Tp>& __x, const _Tp& __c)
operator >	/Users/lij/.vim/stl/valarray	/^inline valarray<bool> operator>(const valarray<_Tp>& __x,$/;"	f	signature:(const valarray<_Tp>& __x, const valarray<_Tp>& __y)
operator >=	/Users/lij/.vim/stl/stl_bvector.h	/^  bool operator>=(const _Bit_iterator_base& __i) const {$/;"	f	struct:_Bit_iterator_base	access:public	signature:(const _Bit_iterator_base& __i) const
operator >=	/Users/lij/.vim/stl/stl_bvector.h	/^inline bool operator>=(const bit_vector& __x, const bit_vector& __y)$/;"	f	signature:(const bit_vector& __x, const bit_vector& __y)
operator >=	/Users/lij/.vim/stl/stl_deque.h	/^  bool operator>=(const _Self& __x) const { return !(*this < __x); }$/;"	f	struct:_Deque_iterator	access:public	signature:(const _Self& __x) const
operator >=	/Users/lij/.vim/stl/stl_deque.h	/^inline bool operator>=(const deque<_Tp, _Alloc>& __x,$/;"	f	signature:(const deque<_Tp, _Alloc>& __x, const deque<_Tp, _Alloc>& __y)
operator >=	/Users/lij/.vim/stl/stl_iterator.h	/^inline bool operator>=(const reverse_iterator<_Iterator>& __x, $/;"	f	signature:(const reverse_iterator<_Iterator>& __x, const reverse_iterator<_Iterator>& __y)
operator >=	/Users/lij/.vim/stl/stl_iterator.h	/^operator>=(const reverse_iterator<_RandomAccessIterator, _Tp,$/;"	f	signature:(const reverse_iterator<_RandomAccessIterator, _Tp, _Reference, _Distance>& __x, const reverse_iterator<_RandomAccessIterator, _Tp, _Reference, _Distance>& __y)
operator >=	/Users/lij/.vim/stl/stl_list.h	/^inline bool operator>=(const list<_Tp,_Alloc>& __x,$/;"	f	signature:(const list<_Tp,_Alloc>& __x, const list<_Tp,_Alloc>& __y)
operator >=	/Users/lij/.vim/stl/stl_map.h	/^inline bool operator>=(const map<_Key,_Tp,_Compare,_Alloc>& __x, $/;"	f	signature:(const map<_Key,_Tp,_Compare,_Alloc>& __x, const map<_Key,_Tp,_Compare,_Alloc>& __y)
operator >=	/Users/lij/.vim/stl/stl_multimap.h	/^inline bool operator>=(const multimap<_Key,_Tp,_Compare,_Alloc>& __x, $/;"	f	signature:(const multimap<_Key,_Tp,_Compare,_Alloc>& __x, const multimap<_Key,_Tp,_Compare,_Alloc>& __y)
operator >=	/Users/lij/.vim/stl/stl_multiset.h	/^inline bool operator>=(const multiset<_Key,_Compare,_Alloc>& __x, $/;"	f	signature:(const multiset<_Key,_Compare,_Alloc>& __x, const multiset<_Key,_Compare,_Alloc>& __y)
operator >=	/Users/lij/.vim/stl/stl_pair.h	/^inline bool operator>=(const pair<_T1, _T2>& __x, const pair<_T1, _T2>& __y) {$/;"	f	signature:(const pair<_T1, _T2>& __x, const pair<_T1, _T2>& __y)
operator >=	/Users/lij/.vim/stl/stl_queue.h	/^operator>=(const queue<_Tp, _Sequence>& __x, const queue<_Tp, _Sequence>& __y)$/;"	f	signature:(const queue<_Tp, _Sequence>& __x, const queue<_Tp, _Sequence>& __y)
operator >=	/Users/lij/.vim/stl/stl_relops.h	/^inline bool operator>=(const _Tp& __x, const _Tp& __y) {$/;"	f	signature:(const _Tp& __x, const _Tp& __y)
operator >=	/Users/lij/.vim/stl/stl_rope.h	/^inline bool operator>= (const _Rope_const_iterator<_CharT,_Alloc>& __x,$/;"	f	signature:(const _Rope_const_iterator<_CharT,_Alloc>& __x, const _Rope_const_iterator<_CharT,_Alloc>& __y)
operator >=	/Users/lij/.vim/stl/stl_rope.h	/^inline bool operator>= (const _Rope_iterator<_CharT,_Alloc>& __x,$/;"	f	signature:(const _Rope_iterator<_CharT,_Alloc>& __x, const _Rope_iterator<_CharT,_Alloc>& __y)
operator >=	/Users/lij/.vim/stl/stl_rope.h	/^operator>= (const rope<_CharT,_Alloc>& __x, const rope<_CharT,_Alloc>& __y) {$/;"	f	signature:(const rope<_CharT,_Alloc>& __x, const rope<_CharT,_Alloc>& __y)
operator >=	/Users/lij/.vim/stl/stl_set.h	/^inline bool operator>=(const set<_Key,_Compare,_Alloc>& __x, $/;"	f	signature:(const set<_Key,_Compare,_Alloc>& __x, const set<_Key,_Compare,_Alloc>& __y)
operator >=	/Users/lij/.vim/stl/stl_slist.h	/^operator>=(const slist<_Tp,_Alloc>& _SL1, const slist<_Tp,_Alloc>& _SL2) {$/;"	f	signature:(const slist<_Tp,_Alloc>& _SL1, const slist<_Tp,_Alloc>& _SL2)
operator >=	/Users/lij/.vim/stl/stl_stack.h	/^bool operator>=(const stack<_Tp,_Seq>& __x, const stack<_Tp,_Seq>& __y)$/;"	f	signature:(const stack<_Tp,_Seq>& __x, const stack<_Tp,_Seq>& __y)
operator >=	/Users/lij/.vim/stl/stl_tree.h	/^operator>=(const _Rb_tree<_Key,_Value,_KeyOfValue,_Compare,_Alloc>& __x, $/;"	f	signature:(const _Rb_tree<_Key,_Value,_KeyOfValue,_Compare,_Alloc>& __x, const _Rb_tree<_Key,_Value,_KeyOfValue,_Compare,_Alloc>& __y)
operator >=	/Users/lij/.vim/stl/stl_vector.h	/^operator>=(const vector<_Tp, _Alloc>& __x, const vector<_Tp, _Alloc>& __y) {$/;"	f	signature:(const vector<_Tp, _Alloc>& __x, const vector<_Tp, _Alloc>& __y)
operator >=	/Users/lij/.vim/stl/string	/^operator>=(const _CharT* __s,$/;"	f	signature:(const _CharT* __s, const basic_string<_CharT,_Traits,_Alloc>& __y)
operator >=	/Users/lij/.vim/stl/string	/^operator>=(const basic_string<_CharT,_Traits,_Alloc>& __x,$/;"	f	signature:(const basic_string<_CharT,_Traits,_Alloc>& __x, const _CharT* __s)
operator >=	/Users/lij/.vim/stl/string	/^operator>=(const basic_string<_CharT,_Traits,_Alloc>& __x,$/;"	f	signature:(const basic_string<_CharT,_Traits,_Alloc>& __x, const basic_string<_CharT,_Traits,_Alloc>& __y)
operator >=	/Users/lij/.vim/stl/valarray	/^inline valarray<bool> operator>=(const _Tp& __c, const valarray<_Tp>& __x)$/;"	f	signature:(const _Tp& __c, const valarray<_Tp>& __x)
operator >=	/Users/lij/.vim/stl/valarray	/^inline valarray<bool> operator>=(const valarray<_Tp>& __x, const _Tp& __c)$/;"	f	signature:(const valarray<_Tp>& __x, const _Tp& __c)
operator >=	/Users/lij/.vim/stl/valarray	/^inline valarray<bool> operator>=(const valarray<_Tp>& __x,$/;"	f	signature:(const valarray<_Tp>& __x, const valarray<_Tp>& __y)
operator >>	/Users/lij/.vim/stl/bitset	/^  bitset<_Nb> operator>>(size_t __pos) const$/;"	f	class:bitset	access:public	signature:(size_t __pos) const
operator >>	/Users/lij/.vim/stl/bitset	/^istream& operator>>(istream& __is, bitset<_Nb>& __x) {$/;"	f	signature:(istream& __is, bitset<_Nb>& __x)
operator >>	/Users/lij/.vim/stl/bitset	/^operator>>(basic_istream<_CharT, _Traits>& __is, bitset<_Nb>& __x)$/;"	f	signature:(basic_istream<_CharT, _Traits>& __is, bitset<_Nb>& __x)
operator >>	/Users/lij/.vim/stl/string	/^operator>>(basic_istream<_CharT, _Traits>& __is,$/;"	f	signature:(basic_istream<_CharT, _Traits>& __is, basic_string<_CharT,_Traits,_Alloc>& __s)
operator >>	/Users/lij/.vim/stl/valarray	/^inline valarray<_Tp> operator>>(const _Tp& __c, const valarray<_Tp>& __x) {$/;"	f	signature:(const _Tp& __c, const valarray<_Tp>& __x)
operator >>	/Users/lij/.vim/stl/valarray	/^inline valarray<_Tp> operator>>(const valarray<_Tp>& __x, const _Tp& __c) {$/;"	f	signature:(const valarray<_Tp>& __x, const _Tp& __c)
operator >>	/Users/lij/.vim/stl/valarray	/^inline valarray<_Tp> operator>>(const valarray<_Tp>& __x,$/;"	f	signature:(const valarray<_Tp>& __x, const valarray<_Tp>& __y)
operator >>=	/Users/lij/.vim/stl/bitset	/^  bitset<_Nb>& operator>>=(size_t __pos) {$/;"	f	class:bitset	access:public	signature:(size_t __pos)
operator >>=	/Users/lij/.vim/stl/valarray	/^  valarray& operator>>= (const valarray& __x) {$/;"	f	class:valarray	access:public	signature:(const valarray& __x)
operator >>=	/Users/lij/.vim/stl/valarray	/^  valarray& operator>>= (const value_type& __x) {$/;"	f	class:valarray	access:public	signature:(const value_type& __x)
operator >>=	/Users/lij/.vim/stl/valarray	/^  void operator>>= (const valarray<value_type>& __x) const {$/;"	f	class:gslice_array	access:public	signature:(const valarray<value_type>& __x) const
operator >>=	/Users/lij/.vim/stl/valarray	/^  void operator>>=(const valarray<value_type>& __x) const {$/;"	f	class:indirect_array	access:public	signature:(const valarray<value_type>& __x) const
operator >>=	/Users/lij/.vim/stl/valarray	/^  void operator>>=(const valarray<value_type>& __x) const {$/;"	f	class:mask_array	access:public	signature:(const valarray<value_type>& __x) const
operator >>=	/Users/lij/.vim/stl/valarray	/^  void operator>>=(const valarray<value_type>& __x) const {$/;"	f	class:slice_array	access:public	signature:(const valarray<value_type>& __x) const
operator []	/Users/lij/.vim/stl/bitset	/^  bool operator[](size_t __pos) const { return _Unchecked_test(__pos); }$/;"	f	class:bitset	access:public	signature:(size_t __pos) const
operator []	/Users/lij/.vim/stl/bitset	/^  reference operator[](size_t __pos) { return reference(*this,__pos); }$/;"	f	class:bitset	access:public	signature:(size_t __pos)
operator []	/Users/lij/.vim/stl/stl_bvector.h	/^  const_reference operator[](difference_type __i) { $/;"	f	struct:_Bit_const_iterator	access:public	signature:(difference_type __i)
operator []	/Users/lij/.vim/stl/stl_bvector.h	/^  const_reference operator[](size_type __n) const$/;"	f	class:__BVECTOR	access:public	signature:(size_type __n) const
operator []	/Users/lij/.vim/stl/stl_bvector.h	/^  reference operator[](difference_type __i) { return *(*this + __i); }$/;"	f	struct:_Bit_iterator	access:public	signature:(difference_type __i)
operator []	/Users/lij/.vim/stl/stl_bvector.h	/^  reference operator[](size_type __n)$/;"	f	class:__BVECTOR	access:public	signature:(size_type __n)
operator []	/Users/lij/.vim/stl/stl_deque.h	/^  const_reference operator[](size_type __n) const $/;"	f	class:deque	access:public	signature:(size_type __n) const
operator []	/Users/lij/.vim/stl/stl_deque.h	/^  reference operator[](difference_type __n) const { return *(*this + __n); }$/;"	f	struct:_Deque_iterator	access:public	signature:(difference_type __n) const
operator []	/Users/lij/.vim/stl/stl_deque.h	/^  reference operator[](size_type __n)$/;"	f	class:deque	access:public	signature:(size_type __n)
operator []	/Users/lij/.vim/stl/stl_hash_map.h	/^  _Tp& operator[](const key_type& __key) {$/;"	f	class:hash_map	access:public	signature:(const key_type& __key)
operator []	/Users/lij/.vim/stl/stl_iterator.h	/^  _Reference operator[](_Distance __n) const { return *(*this + __n); }$/;"	f	class:reverse_iterator	access:public	signature:(_Distance __n) const
operator []	/Users/lij/.vim/stl/stl_iterator.h	/^  reference operator[](difference_type __n) const { return *(*this + __n); }  $/;"	f	class:reverse_iterator	access:public	signature:(difference_type __n) const
operator []	/Users/lij/.vim/stl/stl_map.h	/^  _Tp& operator[](const key_type& __k) {$/;"	f	class:map	access:public	signature:(const key_type& __k)
operator []	/Users/lij/.vim/stl/stl_rope.h	/^            reference operator[] (size_type __pos) {$/;"	f	class:rope	access:public	signature:(size_type __pos)
operator []	/Users/lij/.vim/stl/stl_rope.h	/^        _CharT operator[] (size_type __pos) const {$/;"	f	class:rope	access:public	signature:(size_type __pos) const
operator []	/Users/lij/.vim/stl/stl_rope.h	/^    reference operator[](ptrdiff_t __n) {$/;"	f	class:_Rope_iterator	access:public	signature:(ptrdiff_t __n)
operator []	/Users/lij/.vim/stl/stl_rope.h	/^    reference operator[](size_t __n) {$/;"	f	class:_Rope_const_iterator	access:public	signature:(size_t __n)
operator []	/Users/lij/.vim/stl/stl_vector.h	/^  const_reference operator[](size_type __n) const { return *(begin() + __n); }$/;"	f	class:vector	access:public	signature:(size_type __n) const
operator []	/Users/lij/.vim/stl/stl_vector.h	/^  reference operator[](size_type __n) { return *(begin() + __n); }$/;"	f	class:vector	access:public	signature:(size_type __n)
operator []	/Users/lij/.vim/stl/string	/^  const_reference operator[](size_type __n) const$/;"	f	class:basic_string	access:public	signature:(size_type __n) const
operator []	/Users/lij/.vim/stl/string	/^  reference operator[](size_type __n)$/;"	f	class:basic_string	access:public	signature:(size_type __n)
operator []	/Users/lij/.vim/stl/valarray	/^  gslice_array<_Tp>   operator[](gslice);  $/;"	p	class:valarray	file:	access:public	signature:(gslice)
operator []	/Users/lij/.vim/stl/valarray	/^  indirect_array<_Tp> operator[](const valarray<size_t>&);$/;"	p	class:valarray	file:	access:public	signature:(const valarray<size_t>&)
operator []	/Users/lij/.vim/stl/valarray	/^  mask_array<_Tp>     operator[](const valarray<bool>&);$/;"	p	class:valarray	file:	access:public	signature:(const valarray<bool>&)
operator []	/Users/lij/.vim/stl/valarray	/^  slice_array<_Tp>    operator[](slice);$/;"	p	class:valarray	file:	access:public	signature:(slice)
operator []	/Users/lij/.vim/stl/valarray	/^  valarray            operator[](const valarray<bool>&) const;$/;"	p	class:valarray	file:	access:public	signature:(const valarray<bool>&) const
operator []	/Users/lij/.vim/stl/valarray	/^  valarray            operator[](const valarray<size_t>&) const;$/;"	p	class:valarray	file:	access:public	signature:(const valarray<size_t>&) const
operator []	/Users/lij/.vim/stl/valarray	/^  valarray            operator[](gslice) const;$/;"	p	class:valarray	file:	access:public	signature:(gslice) const
operator []	/Users/lij/.vim/stl/valarray	/^  valarray            operator[](slice) const;$/;"	p	class:valarray	file:	access:public	signature:(slice) const
operator []	/Users/lij/.vim/stl/valarray	/^  value_type  operator[](size_t __n) const { return this->_M_first[__n]; }$/;"	f	class:valarray	access:public	signature:(size_t __n) const
operator []	/Users/lij/.vim/stl/valarray	/^  value_type& operator[](size_t __n)       { return this->_M_first[__n]; }$/;"	f	class:valarray	access:public	signature:(size_t __n)
operator []	/Users/lij/.vim/stl/valarray	/^inline gslice_array<_Tp> valarray<_Tp>::operator[](gslice __slice) {$/;"	f	class:valarray	signature:(gslice __slice)
operator []	/Users/lij/.vim/stl/valarray	/^inline mask_array<_Tp> valarray<_Tp>::operator[](const valarray<bool>& __mask)$/;"	f	class:valarray	signature:(const valarray<bool>& __mask)
operator []	/Users/lij/.vim/stl/valarray	/^inline slice_array<_Tp> valarray<_Tp>::operator[](slice __slice) {$/;"	f	class:valarray	signature:(slice __slice)
operator []	/Users/lij/.vim/stl/valarray	/^valarray<_Tp> valarray<_Tp>::operator[](const valarray<bool>& __mask) const$/;"	f	class:valarray	signature:(const valarray<bool>& __mask) const
operator []	/Users/lij/.vim/stl/valarray	/^valarray<_Tp> valarray<_Tp>::operator[](gslice __slice) const$/;"	f	class:valarray	signature:(gslice __slice) const
operator []	/Users/lij/.vim/stl/valarray	/^valarray<_Tp> valarray<_Tp>::operator[](slice __slice) const {$/;"	f	class:valarray	signature:(slice __slice) const
operator []	/Users/lij/.vim/stl/valarray	/^valarray<_Tp>::operator[](const valarray<size_t>& __addr) const$/;"	f	class:valarray	signature:(const valarray<size_t>& __addr) const
operator []	/Users/lij/.vim/stl/valarray	/^valarray<_Tp>::operator[](const valarray<size_t>& __addr)$/;"	f	class:valarray	signature:(const valarray<size_t>& __addr)
operator ^	/Users/lij/.vim/stl/bitset	/^inline bitset<_Nb> operator^(const bitset<_Nb>& __x, const bitset<_Nb>& __y) {$/;"	f	signature:(const bitset<_Nb>& __x, const bitset<_Nb>& __y)
operator ^	/Users/lij/.vim/stl/valarray	/^inline valarray<_Tp> operator^(const _Tp& __c, const valarray<_Tp>& __x) {$/;"	f	signature:(const _Tp& __c, const valarray<_Tp>& __x)
operator ^	/Users/lij/.vim/stl/valarray	/^inline valarray<_Tp> operator^(const valarray<_Tp>& __x, const _Tp& __c) {$/;"	f	signature:(const valarray<_Tp>& __x, const _Tp& __c)
operator ^	/Users/lij/.vim/stl/valarray	/^inline valarray<_Tp> operator^(const valarray<_Tp>& __x,$/;"	f	signature:(const valarray<_Tp>& __x, const valarray<_Tp>& __y)
operator ^=	/Users/lij/.vim/stl/bitset	/^  bitset<_Nb>& operator^=(const bitset<_Nb>& __rhs) {$/;"	f	class:bitset	access:public	signature:(const bitset<_Nb>& __rhs)
operator ^=	/Users/lij/.vim/stl/valarray	/^  valarray& operator^= (const valarray& __x) {$/;"	f	class:valarray	access:public	signature:(const valarray& __x)
operator ^=	/Users/lij/.vim/stl/valarray	/^  valarray& operator^= (const value_type& __x) {$/;"	f	class:valarray	access:public	signature:(const value_type& __x)
operator ^=	/Users/lij/.vim/stl/valarray	/^  void operator^= (const valarray<value_type>& __x) const {$/;"	f	class:gslice_array	access:public	signature:(const valarray<value_type>& __x) const
operator ^=	/Users/lij/.vim/stl/valarray	/^  void operator^=(const valarray<value_type>& __x) const {$/;"	f	class:indirect_array	access:public	signature:(const valarray<value_type>& __x) const
operator ^=	/Users/lij/.vim/stl/valarray	/^  void operator^=(const valarray<value_type>& __x) const {$/;"	f	class:mask_array	access:public	signature:(const valarray<value_type>& __x) const
operator ^=	/Users/lij/.vim/stl/valarray	/^  void operator^=(const valarray<value_type>& __x) const {$/;"	f	class:slice_array	access:public	signature:(const valarray<value_type>& __x) const
operator _CharT	/Users/lij/.vim/stl/ropeimpl.h	/^inline _Rope_char_ref_proxy<_CharT, _Alloc>::operator _CharT () const$/;"	f	class:_Rope_char_ref_proxy	signature:() const
operator _CharT	/Users/lij/.vim/stl/stl_rope.h	/^    inline operator _CharT () const;$/;"	p	class:_Rope_char_ref_proxy	access:public	signature:() const
operator _Rope_RopeRep<_CharT,_Alloc>*	/Users/lij/.vim/stl/stl_rope.h	/^    operator _Rope_RopeRep<_CharT,_Alloc>*() { return _M_ptr; }$/;"	f	struct:_Rope_self_destruct_ptr	access:public	signature:()
operator bool	/Users/lij/.vim/stl/bitset	/^    operator bool() const$/;"	f	class:bitset::reference	access:public	signature:() const
operator bool	/Users/lij/.vim/stl/stl_bvector.h	/^  operator bool() const { return !(!(*_M_p & _M_mask)); }$/;"	f	struct:_Bit_reference	access:public	signature:() const
operator |	/Users/lij/.vim/stl/bitset	/^inline bitset<_Nb> operator|(const bitset<_Nb>& __x, const bitset<_Nb>& __y) {$/;"	f	signature:(const bitset<_Nb>& __x, const bitset<_Nb>& __y)
operator |	/Users/lij/.vim/stl/valarray	/^inline valarray<_Tp> operator|(const _Tp& __c, const valarray<_Tp>& __x) {$/;"	f	signature:(const _Tp& __c, const valarray<_Tp>& __x)
operator |	/Users/lij/.vim/stl/valarray	/^inline valarray<_Tp> operator|(const valarray<_Tp>& __x, const _Tp& __c) {$/;"	f	signature:(const valarray<_Tp>& __x, const _Tp& __c)
operator |	/Users/lij/.vim/stl/valarray	/^inline valarray<_Tp> operator|(const valarray<_Tp>& __x,$/;"	f	signature:(const valarray<_Tp>& __x, const valarray<_Tp>& __y)
operator |=	/Users/lij/.vim/stl/bitset	/^  bitset<_Nb>& operator|=(const bitset<_Nb>& __rhs) {$/;"	f	class:bitset	access:public	signature:(const bitset<_Nb>& __rhs)
operator |=	/Users/lij/.vim/stl/valarray	/^  valarray& operator|= (const valarray& __x) {$/;"	f	class:valarray	access:public	signature:(const valarray& __x)
operator |=	/Users/lij/.vim/stl/valarray	/^  valarray& operator|= (const value_type& __x) {$/;"	f	class:valarray	access:public	signature:(const value_type& __x)
operator |=	/Users/lij/.vim/stl/valarray	/^  void operator|= (const valarray<value_type>& __x) const {$/;"	f	class:gslice_array	access:public	signature:(const valarray<value_type>& __x) const
operator |=	/Users/lij/.vim/stl/valarray	/^  void operator|=(const valarray<value_type>& __x) const {$/;"	f	class:indirect_array	access:public	signature:(const valarray<value_type>& __x) const
operator |=	/Users/lij/.vim/stl/valarray	/^  void operator|=(const valarray<value_type>& __x) const {$/;"	f	class:mask_array	access:public	signature:(const valarray<value_type>& __x) const
operator |=	/Users/lij/.vim/stl/valarray	/^  void operator|=(const valarray<value_type>& __x) const {$/;"	f	class:slice_array	access:public	signature:(const valarray<value_type>& __x) const
operator ||	/Users/lij/.vim/stl/valarray	/^inline valarray<bool> operator||(const _Tp& __c, const valarray<_Tp>& __x)$/;"	f	signature:(const _Tp& __c, const valarray<_Tp>& __x)
operator ||	/Users/lij/.vim/stl/valarray	/^inline valarray<bool> operator||(const valarray<_Tp>& __x, const _Tp& __c)$/;"	f	signature:(const valarray<_Tp>& __x, const _Tp& __c)
operator ||	/Users/lij/.vim/stl/valarray	/^inline valarray<bool> operator||(const valarray<_Tp>& __x,$/;"	f	signature:(const valarray<_Tp>& __x, const valarray<_Tp>& __y)
operator ~	/Users/lij/.vim/stl/bitset	/^    bool operator~() const$/;"	f	class:bitset::reference	access:public	signature:() const
operator ~	/Users/lij/.vim/stl/bitset	/^  bitset<_Nb> operator~() const { $/;"	f	class:bitset	access:public	signature:() const
operator ~	/Users/lij/.vim/stl/valarray	/^  valarray operator~() const {$/;"	f	class:valarray	access:public	signature:() const
ostream_iterator	/Users/lij/.vim/stl/stl_iterator.h	/^  ostream_iterator(ostream& __s) : _M_stream(&__s), _M_string(0) {}$/;"	f	class:ostream_iterator	access:public	signature:(ostream& __s)
ostream_iterator	/Users/lij/.vim/stl/stl_iterator.h	/^  ostream_iterator(ostream& __s, const char* __c) $/;"	f	class:ostream_iterator	access:public	signature:(ostream& __s, const char* __c)
ostream_iterator	/Users/lij/.vim/stl/stl_iterator.h	/^  ostream_iterator(ostream_type& __s) : _M_stream(&__s), _M_string(0) {}$/;"	f	class:ostream_iterator	access:public	signature:(ostream_type& __s)
ostream_iterator	/Users/lij/.vim/stl/stl_iterator.h	/^  ostream_iterator(ostream_type& __s, const _CharT* __c) $/;"	f	class:ostream_iterator	access:public	signature:(ostream_type& __s, const _CharT* __c)
ostream_iterator	/Users/lij/.vim/stl/stl_iterator.h	/^class ostream_iterator {$/;"	c
ostream_iterator::_M_stream	/Users/lij/.vim/stl/stl_iterator.h	/^  ostream* _M_stream;$/;"	m	class:ostream_iterator	access:protected
ostream_iterator::_M_stream	/Users/lij/.vim/stl/stl_iterator.h	/^  ostream_type* _M_stream;$/;"	m	class:ostream_iterator	access:private
ostream_iterator::_M_string	/Users/lij/.vim/stl/stl_iterator.h	/^  const _CharT* _M_string;$/;"	m	class:ostream_iterator	access:private
ostream_iterator::_M_string	/Users/lij/.vim/stl/stl_iterator.h	/^  const char* _M_string;$/;"	m	class:ostream_iterator	access:protected
ostream_iterator::char_type	/Users/lij/.vim/stl/stl_iterator.h	/^  typedef _CharT                         char_type;$/;"	t	class:ostream_iterator	access:public
ostream_iterator::difference_type	/Users/lij/.vim/stl/stl_iterator.h	/^  typedef void                           difference_type;$/;"	t	class:ostream_iterator	access:public
ostream_iterator::difference_type	/Users/lij/.vim/stl/stl_iterator.h	/^  typedef void                difference_type;$/;"	t	class:ostream_iterator	access:public
ostream_iterator::iterator_category	/Users/lij/.vim/stl/stl_iterator.h	/^  typedef output_iterator_tag            iterator_category;$/;"	t	class:ostream_iterator	access:public
ostream_iterator::iterator_category	/Users/lij/.vim/stl/stl_iterator.h	/^  typedef output_iterator_tag iterator_category;$/;"	t	class:ostream_iterator	access:public
ostream_iterator::operator *	/Users/lij/.vim/stl/stl_iterator.h	/^  ostream_iterator<_Tp>& operator*() { return *this; }$/;"	f	class:ostream_iterator	access:public	signature:()
ostream_iterator::operator ++	/Users/lij/.vim/stl/stl_iterator.h	/^  ostream_iterator<_Tp>& operator++() { return *this; } $/;"	f	class:ostream_iterator	access:public	signature:()
ostream_iterator::operator ++	/Users/lij/.vim/stl/stl_iterator.h	/^  ostream_iterator<_Tp>& operator++(int) { return *this; } $/;"	f	class:ostream_iterator	access:public	signature:(int)
ostream_iterator::operator =	/Users/lij/.vim/stl/stl_iterator.h	/^  ostream_iterator<_Tp>& operator=(const _Tp& __value) { $/;"	f	class:ostream_iterator	access:public	signature:(const _Tp& __value)
ostream_iterator::ostream_iterator	/Users/lij/.vim/stl/stl_iterator.h	/^  ostream_iterator(ostream& __s) : _M_stream(&__s), _M_string(0) {}$/;"	f	class:ostream_iterator	access:public	signature:(ostream& __s)
ostream_iterator::ostream_iterator	/Users/lij/.vim/stl/stl_iterator.h	/^  ostream_iterator(ostream& __s, const char* __c) $/;"	f	class:ostream_iterator	access:public	signature:(ostream& __s, const char* __c)
ostream_iterator::ostream_iterator	/Users/lij/.vim/stl/stl_iterator.h	/^  ostream_iterator(ostream_type& __s) : _M_stream(&__s), _M_string(0) {}$/;"	f	class:ostream_iterator	access:public	signature:(ostream_type& __s)
ostream_iterator::ostream_iterator	/Users/lij/.vim/stl/stl_iterator.h	/^  ostream_iterator(ostream_type& __s, const _CharT* __c) $/;"	f	class:ostream_iterator	access:public	signature:(ostream_type& __s, const _CharT* __c)
ostream_iterator::ostream_type	/Users/lij/.vim/stl/stl_iterator.h	/^  typedef basic_ostream<_CharT, _Traits> ostream_type;$/;"	t	class:ostream_iterator	access:public
ostream_iterator::pointer	/Users/lij/.vim/stl/stl_iterator.h	/^  typedef void                           pointer;$/;"	t	class:ostream_iterator	access:public
ostream_iterator::pointer	/Users/lij/.vim/stl/stl_iterator.h	/^  typedef void                pointer;$/;"	t	class:ostream_iterator	access:public
ostream_iterator::reference	/Users/lij/.vim/stl/stl_iterator.h	/^  typedef void                           reference;$/;"	t	class:ostream_iterator	access:public
ostream_iterator::reference	/Users/lij/.vim/stl/stl_iterator.h	/^  typedef void                reference;$/;"	t	class:ostream_iterator	access:public
ostream_iterator::traits_type	/Users/lij/.vim/stl/stl_iterator.h	/^  typedef _Traits                        traits_type;$/;"	t	class:ostream_iterator	access:public
ostream_iterator::value_type	/Users/lij/.vim/stl/stl_iterator.h	/^  typedef void                           value_type;$/;"	t	class:ostream_iterator	access:public
ostream_iterator::value_type	/Users/lij/.vim/stl/stl_iterator.h	/^  typedef void                value_type;$/;"	t	class:ostream_iterator	access:public
ostream_type	/Users/lij/.vim/stl/stl_iterator.h	/^  typedef basic_ostream<_CharT, _Traits>   ostream_type;$/;"	t	class:ostreambuf_iterator	access:public
ostream_type	/Users/lij/.vim/stl/stl_iterator.h	/^  typedef basic_ostream<_CharT, _Traits> ostream_type;$/;"	t	class:ostream_iterator	access:public
ostreambuf_iterator	/Users/lij/.vim/stl/stl_iterator.h	/^  ostreambuf_iterator(ostream_type& __o)$/;"	f	class:ostreambuf_iterator	access:public	signature:(ostream_type& __o)
ostreambuf_iterator	/Users/lij/.vim/stl/stl_iterator.h	/^  ostreambuf_iterator(streambuf_type* __buf) : _M_buf(__buf), _M_ok(__buf) {}$/;"	f	class:ostreambuf_iterator	access:public	signature:(streambuf_type* __buf)
ostreambuf_iterator	/Users/lij/.vim/stl/stl_iterator.h	/^class ostreambuf_iterator$/;"	c	inherits:iterator
ostreambuf_iterator::_M_buf	/Users/lij/.vim/stl/stl_iterator.h	/^  streambuf_type* _M_buf;$/;"	m	class:ostreambuf_iterator	access:private
ostreambuf_iterator::_M_ok	/Users/lij/.vim/stl/stl_iterator.h	/^  bool _M_ok;$/;"	m	class:ostreambuf_iterator	access:private
ostreambuf_iterator::char_type	/Users/lij/.vim/stl/stl_iterator.h	/^  typedef _CharT                           char_type;$/;"	t	class:ostreambuf_iterator	access:public
ostreambuf_iterator::failed	/Users/lij/.vim/stl/stl_iterator.h	/^  bool failed() const { return !_M_ok; }$/;"	f	class:ostreambuf_iterator	access:public	signature:() const
ostreambuf_iterator::int_type	/Users/lij/.vim/stl/stl_iterator.h	/^  typedef typename _Traits::int_type       int_type;$/;"	t	class:ostreambuf_iterator	access:public
ostreambuf_iterator::operator *	/Users/lij/.vim/stl/stl_iterator.h	/^  ostreambuf_iterator& operator*()     { return *this; }$/;"	f	class:ostreambuf_iterator	access:public	signature:()
ostreambuf_iterator::operator ++	/Users/lij/.vim/stl/stl_iterator.h	/^  ostreambuf_iterator& operator++()    { return *this; }$/;"	f	class:ostreambuf_iterator	access:public	signature:()
ostreambuf_iterator::operator ++	/Users/lij/.vim/stl/stl_iterator.h	/^  ostreambuf_iterator& operator++(int) { return *this; }$/;"	f	class:ostreambuf_iterator	access:public	signature:(int)
ostreambuf_iterator::operator =	/Users/lij/.vim/stl/stl_iterator.h	/^  ostreambuf_iterator& operator=(char_type __c) {$/;"	f	class:ostreambuf_iterator	access:public	signature:(char_type __c)
ostreambuf_iterator::ostream_type	/Users/lij/.vim/stl/stl_iterator.h	/^  typedef basic_ostream<_CharT, _Traits>   ostream_type;$/;"	t	class:ostreambuf_iterator	access:public
ostreambuf_iterator::ostreambuf_iterator	/Users/lij/.vim/stl/stl_iterator.h	/^  ostreambuf_iterator(ostream_type& __o)$/;"	f	class:ostreambuf_iterator	access:public	signature:(ostream_type& __o)
ostreambuf_iterator::ostreambuf_iterator	/Users/lij/.vim/stl/stl_iterator.h	/^  ostreambuf_iterator(streambuf_type* __buf) : _M_buf(__buf), _M_ok(__buf) {}$/;"	f	class:ostreambuf_iterator	access:public	signature:(streambuf_type* __buf)
ostreambuf_iterator::streambuf_type	/Users/lij/.vim/stl/stl_iterator.h	/^  typedef basic_streambuf<_CharT, _Traits> streambuf_type;$/;"	t	class:ostreambuf_iterator	access:public
ostreambuf_iterator::traits_type	/Users/lij/.vim/stl/stl_iterator.h	/^  typedef _Traits                          traits_type;$/;"	t	class:ostreambuf_iterator	access:public
other	/Users/lij/.vim/stl/pthread_alloc	/^    typedef pthread_allocator<_NewType> other;$/;"	t	struct:pthread_allocator::rebind	file:	access:public
other	/Users/lij/.vim/stl/stl_alloc.h	/^    typedef __allocator<_Tp1, _Alloc> other;$/;"	t	struct:__allocator::rebind	access:public
other	/Users/lij/.vim/stl/stl_alloc.h	/^    typedef allocator<_Tp1> other;$/;"	t	struct:allocator::rebind	access:public
out_of_range	/Users/lij/.vim/stl/stdexcept	/^  out_of_range(const string& __arg) : logic_error(__arg) {}$/;"	f	class:out_of_range	access:public	signature:(const string& __arg)
out_of_range	/Users/lij/.vim/stl/stdexcept	/^class out_of_range : public logic_error {$/;"	c	file:	inherits:logic_error
out_of_range::out_of_range	/Users/lij/.vim/stl/stdexcept	/^  out_of_range(const string& __arg) : logic_error(__arg) {}$/;"	f	class:out_of_range	access:public	signature:(const string& __arg)
output_iterator	/Users/lij/.vim/stl/stl_iterator_base.h	/^struct output_iterator {$/;"	s
output_iterator::difference_type	/Users/lij/.vim/stl/stl_iterator_base.h	/^  typedef void                difference_type;$/;"	t	struct:output_iterator	access:public
output_iterator::iterator_category	/Users/lij/.vim/stl/stl_iterator_base.h	/^  typedef output_iterator_tag iterator_category;$/;"	t	struct:output_iterator	access:public
output_iterator::pointer	/Users/lij/.vim/stl/stl_iterator_base.h	/^  typedef void                pointer;$/;"	t	struct:output_iterator	access:public
output_iterator::reference	/Users/lij/.vim/stl/stl_iterator_base.h	/^  typedef void                reference;$/;"	t	struct:output_iterator	access:public
output_iterator::value_type	/Users/lij/.vim/stl/stl_iterator_base.h	/^  typedef void                value_type;$/;"	t	struct:output_iterator	access:public
output_iterator_tag	/Users/lij/.vim/stl/stl_iterator_base.h	/^struct output_iterator_tag {};$/;"	s
overflow_error	/Users/lij/.vim/stl/stdexcept	/^  overflow_error(const string& __arg) : runtime_error(__arg) {}$/;"	f	class:overflow_error	access:public	signature:(const string& __arg)
overflow_error	/Users/lij/.vim/stl/stdexcept	/^class overflow_error : public runtime_error {$/;"	c	file:	inherits:runtime_error
overflow_error::overflow_error	/Users/lij/.vim/stl/stdexcept	/^  overflow_error(const string& __arg) : runtime_error(__arg) {}$/;"	f	class:overflow_error	access:public	signature:(const string& __arg)
pair	/Users/lij/.vim/stl/stl_pair.h	/^  pair() : first(_T1()), second(_T2()) {}$/;"	f	struct:pair	access:public	signature:()
pair	/Users/lij/.vim/stl/stl_pair.h	/^  pair(const _T1& __a, const _T2& __b) : first(__a), second(__b) {}$/;"	f	struct:pair	access:public	signature:(const _T1& __a, const _T2& __b)
pair	/Users/lij/.vim/stl/stl_pair.h	/^  pair(const pair<_U1, _U2>& __p) : first(__p.first), second(__p.second) {}$/;"	f	struct:pair	access:public	signature:(const pair<_U1, _U2>& __p)
pair	/Users/lij/.vim/stl/stl_pair.h	/^struct pair {$/;"	s
pair::first	/Users/lij/.vim/stl/stl_pair.h	/^  _T1 first;$/;"	m	struct:pair	access:public
pair::first_type	/Users/lij/.vim/stl/stl_pair.h	/^  typedef _T1 first_type;$/;"	t	struct:pair	access:public
pair::pair	/Users/lij/.vim/stl/stl_pair.h	/^  pair() : first(_T1()), second(_T2()) {}$/;"	f	struct:pair	access:public	signature:()
pair::pair	/Users/lij/.vim/stl/stl_pair.h	/^  pair(const _T1& __a, const _T2& __b) : first(__a), second(__b) {}$/;"	f	struct:pair	access:public	signature:(const _T1& __a, const _T2& __b)
pair::pair	/Users/lij/.vim/stl/stl_pair.h	/^  pair(const pair<_U1, _U2>& __p) : first(__p.first), second(__p.second) {}$/;"	f	struct:pair	access:public	signature:(const pair<_U1, _U2>& __p)
pair::second	/Users/lij/.vim/stl/stl_pair.h	/^  _T2 second;$/;"	m	struct:pair	access:public
pair::second_type	/Users/lij/.vim/stl/stl_pair.h	/^  typedef _T2 second_type;$/;"	t	struct:pair	access:public
partial_sort	/Users/lij/.vim/stl/stl_algo.h	/^inline void partial_sort(_RandomAccessIter __first,$/;"	f	signature:(_RandomAccessIter __first, _RandomAccessIter __middle, _RandomAccessIter __last)
partial_sort	/Users/lij/.vim/stl/stl_algo.h	/^inline void partial_sort(_RandomAccessIter __first,$/;"	f	signature:(_RandomAccessIter __first, _RandomAccessIter __middle, _RandomAccessIter __last, _Compare __comp)
partial_sort_copy	/Users/lij/.vim/stl/stl_algo.h	/^partial_sort_copy(_InputIter __first, _InputIter __last,$/;"	f	signature:(_InputIter __first, _InputIter __last, _RandomAccessIter __result_first, _RandomAccessIter __result_last)
partial_sort_copy	/Users/lij/.vim/stl/stl_algo.h	/^partial_sort_copy(_InputIter __first, _InputIter __last,$/;"	f	signature:(_InputIter __first, _InputIter __last, _RandomAccessIter __result_first, _RandomAccessIter __result_last, _Compare __comp)
partial_sum	/Users/lij/.vim/stl/stl_numeric.h	/^partial_sum(_InputIterator __first, _InputIterator __last,$/;"	f	signature:(_InputIterator __first, _InputIterator __last, _OutputIterator __result)
partial_sum	/Users/lij/.vim/stl/stl_numeric.h	/^partial_sum(_InputIterator __first, _InputIterator __last,$/;"	f	signature:(_InputIterator __first, _InputIterator __last, _OutputIterator __result, _BinaryOperation __binary_op)
partition	/Users/lij/.vim/stl/stl_algo.h	/^inline _ForwardIter partition(_ForwardIter __first,$/;"	f	signature:(_ForwardIter __first, _ForwardIter __last, _Predicate __pred)
plus	/Users/lij/.vim/stl/stl_function.h	/^struct plus : public binary_function<_Tp,_Tp,_Tp> {$/;"	s	inherits:binary_function
plus::operator ()	/Users/lij/.vim/stl/stl_function.h	/^  _Tp operator()(const _Tp& __x, const _Tp& __y) const { return __x + __y; }$/;"	f	struct:plus	access:public	signature:(const _Tp& __x, const _Tp& __y) const
pointer	/Users/lij/.vim/stl/concept_checks.h	/^  typedef typename __STD::iterator_traits<_Iter>::pointer pointer;$/;"	t	struct:__pointer_type_definition_requirement_violation	access:public
pointer	/Users/lij/.vim/stl/concept_checks.h	/^__STL_TYPEDEF_REQUIREMENT(pointer);$/;"	v
pointer	/Users/lij/.vim/stl/defalloc.h	/^    typedef T* pointer;$/;"	t	class:allocator	access:public
pointer	/Users/lij/.vim/stl/defalloc.h	/^    typedef void* pointer;$/;"	t	class:allocator	access:public
pointer	/Users/lij/.vim/stl/pthread_alloc	/^  typedef _Tp*       pointer;$/;"	t	class:pthread_allocator	file:	access:public
pointer	/Users/lij/.vim/stl/pthread_alloc	/^  typedef void*       pointer;$/;"	t	class:pthread_allocator	file:	access:public
pointer	/Users/lij/.vim/stl/stl_alloc.h	/^  typedef _Tp*       pointer;$/;"	t	class:allocator	access:public
pointer	/Users/lij/.vim/stl/stl_alloc.h	/^  typedef _Tp*       pointer;$/;"	t	struct:__allocator	access:public
pointer	/Users/lij/.vim/stl/stl_alloc.h	/^  typedef void*       pointer;$/;"	t	class:allocator	access:public
pointer	/Users/lij/.vim/stl/stl_bvector.h	/^  typedef _Bit_reference* pointer;$/;"	t	class:__BVECTOR	access:public
pointer	/Users/lij/.vim/stl/stl_bvector.h	/^  typedef _Bit_reference* pointer;$/;"	t	struct:_Bit_iterator	access:public
pointer	/Users/lij/.vim/stl/stl_bvector.h	/^  typedef const bool*          pointer;$/;"	t	struct:_Bit_const_iterator	access:public
pointer	/Users/lij/.vim/stl/stl_deque.h	/^  typedef _Ptr pointer;$/;"	t	struct:_Deque_iterator	access:public
pointer	/Users/lij/.vim/stl/stl_deque.h	/^  typedef value_type* pointer;$/;"	t	class:deque	access:public
pointer	/Users/lij/.vim/stl/stl_hash_map.h	/^  typedef typename _Ht::pointer pointer;$/;"	t	class:hash_map	access:public
pointer	/Users/lij/.vim/stl/stl_hash_map.h	/^  typedef typename _Ht::pointer pointer;$/;"	t	class:hash_multimap	access:public
pointer	/Users/lij/.vim/stl/stl_hash_map.h	/^  typedef void                pointer;$/;"	t	class:insert_iterator	access:public
pointer	/Users/lij/.vim/stl/stl_hash_set.h	/^  typedef typename _Ht::const_pointer pointer;$/;"	t	class:hash_multiset	access:public
pointer	/Users/lij/.vim/stl/stl_hash_set.h	/^  typedef typename _Ht::const_pointer pointer;$/;"	t	class:hash_set	access:public
pointer	/Users/lij/.vim/stl/stl_hash_set.h	/^  typedef void                pointer;$/;"	t	class:insert_iterator	access:public
pointer	/Users/lij/.vim/stl/stl_hashtable.h	/^  typedef _Val* pointer;$/;"	t	struct:_Hashtable_iterator	access:public
pointer	/Users/lij/.vim/stl/stl_hashtable.h	/^  typedef const _Val* pointer;$/;"	t	struct:_Hashtable_const_iterator	access:public
pointer	/Users/lij/.vim/stl/stl_hashtable.h	/^  typedef value_type*       pointer;$/;"	t	class:hashtable	access:public
pointer	/Users/lij/.vim/stl/stl_iterator.h	/^          pointer;$/;"	t	class:reverse_iterator	access:public
pointer	/Users/lij/.vim/stl/stl_iterator.h	/^  typedef _Tp*                       pointer;$/;"	t	class:reverse_bidirectional_iterator	access:public
pointer	/Users/lij/.vim/stl/stl_iterator.h	/^  typedef _Tp*                       pointer;$/;"	t	class:reverse_iterator	access:public
pointer	/Users/lij/.vim/stl/stl_iterator.h	/^  typedef const _Tp*                     pointer;$/;"	t	class:istream_iterator	access:public
pointer	/Users/lij/.vim/stl/stl_iterator.h	/^  typedef const _Tp*          pointer;$/;"	t	class:istream_iterator	access:public
pointer	/Users/lij/.vim/stl/stl_iterator.h	/^  typedef void                           pointer;$/;"	t	class:ostream_iterator	access:public
pointer	/Users/lij/.vim/stl/stl_iterator.h	/^  typedef void                pointer;$/;"	t	class:back_insert_iterator	access:public
pointer	/Users/lij/.vim/stl/stl_iterator.h	/^  typedef void                pointer;$/;"	t	class:front_insert_iterator	access:public
pointer	/Users/lij/.vim/stl/stl_iterator.h	/^  typedef void                pointer;$/;"	t	class:insert_iterator	access:public
pointer	/Users/lij/.vim/stl/stl_iterator.h	/^  typedef void                pointer;$/;"	t	class:ostream_iterator	access:public
pointer	/Users/lij/.vim/stl/stl_iterator_base.h	/^  typedef _Pointer   pointer;$/;"	t	struct:iterator	access:public
pointer	/Users/lij/.vim/stl/stl_iterator_base.h	/^  typedef _Tp*                        pointer;$/;"	t	struct:iterator_traits	access:public
pointer	/Users/lij/.vim/stl/stl_iterator_base.h	/^  typedef _Tp*                       pointer;$/;"	t	struct:bidirectional_iterator	access:public
pointer	/Users/lij/.vim/stl/stl_iterator_base.h	/^  typedef _Tp*                       pointer;$/;"	t	struct:random_access_iterator	access:public
pointer	/Users/lij/.vim/stl/stl_iterator_base.h	/^  typedef _Tp*                 pointer;$/;"	t	struct:forward_iterator	access:public
pointer	/Users/lij/.vim/stl/stl_iterator_base.h	/^  typedef _Tp*               pointer;$/;"	t	struct:input_iterator	access:public
pointer	/Users/lij/.vim/stl/stl_iterator_base.h	/^  typedef const _Tp*                  pointer;$/;"	t	struct:iterator_traits	access:public
pointer	/Users/lij/.vim/stl/stl_iterator_base.h	/^  typedef typename _Iterator::pointer           pointer;$/;"	t	struct:iterator_traits	access:public
pointer	/Users/lij/.vim/stl/stl_iterator_base.h	/^  typedef void                pointer;$/;"	t	struct:output_iterator	access:public
pointer	/Users/lij/.vim/stl/stl_list.h	/^  typedef _Ptr pointer;$/;"	t	struct:_List_iterator	access:public
pointer	/Users/lij/.vim/stl/stl_list.h	/^  typedef value_type* pointer;$/;"	t	class:list	access:public
pointer	/Users/lij/.vim/stl/stl_map.h	/^  typedef typename _Rep_type::pointer pointer;$/;"	t	class:map	access:public
pointer	/Users/lij/.vim/stl/stl_multimap.h	/^  typedef typename _Rep_type::pointer pointer;$/;"	t	class:multimap	access:public
pointer	/Users/lij/.vim/stl/stl_multiset.h	/^  typedef typename _Rep_type::const_pointer pointer;$/;"	t	class:multiset	access:public
pointer	/Users/lij/.vim/stl/stl_raw_storage_iter.h	/^  typedef void                pointer;$/;"	t	class:raw_storage_iterator	access:public
pointer	/Users/lij/.vim/stl/stl_rope.h	/^        typedef _Rope_char_ptr_proxy<_CharT,_Alloc> pointer;$/;"	t	class:rope	access:public
pointer	/Users/lij/.vim/stl/stl_rope.h	/^    typedef _Rope_char_ref_proxy<_CharT,_Alloc>* pointer;$/;"	t	class:_Rope_iterator	access:public
pointer	/Users/lij/.vim/stl/stl_rope.h	/^    typedef const _CharT* pointer;$/;"	t	class:_Rope_const_iterator	access:public
pointer	/Users/lij/.vim/stl/stl_set.h	/^  typedef typename _Rep_type::const_pointer pointer;$/;"	t	class:set	access:public
pointer	/Users/lij/.vim/stl/stl_slist.h	/^  typedef _Ptr             pointer;$/;"	t	struct:_Slist_iterator	access:public
pointer	/Users/lij/.vim/stl/stl_slist.h	/^  typedef value_type*       pointer;$/;"	t	class:slist	access:public
pointer	/Users/lij/.vim/stl/stl_slist.h	/^  typedef void                pointer;$/;"	t	class:insert_iterator	access:public
pointer	/Users/lij/.vim/stl/stl_tree.h	/^  typedef _Ptr pointer;$/;"	t	struct:_Rb_tree_iterator	access:public
pointer	/Users/lij/.vim/stl/stl_tree.h	/^  typedef value_type* pointer;$/;"	t	class:_Rb_tree	access:public
pointer	/Users/lij/.vim/stl/stl_vector.h	/^  typedef value_type* pointer;$/;"	t	class:vector	access:public
pointer	/Users/lij/.vim/stl/string	/^  typedef value_type* pointer;$/;"	t	class:basic_string	file:	access:public
pointer_to_binary_function	/Users/lij/.vim/stl/stl_function.h	/^    explicit pointer_to_binary_function(_Result (*__x)(_Arg1, _Arg2)) $/;"	f	class:pointer_to_binary_function	access:public	signature:(_Result (__x)_Arg1, _Arg2))
pointer_to_binary_function	/Users/lij/.vim/stl/stl_function.h	/^    pointer_to_binary_function() {}$/;"	f	class:pointer_to_binary_function	access:public	signature:()
pointer_to_binary_function	/Users/lij/.vim/stl/stl_function.h	/^class pointer_to_binary_function : $/;"	c	inherits:binary_function
pointer_to_binary_function::_M_ptr	/Users/lij/.vim/stl/stl_function.h	/^    _Result (*_M_ptr)(_Arg1, _Arg2);$/;"	m	class:pointer_to_binary_function	access:protected
pointer_to_binary_function::operator ()	/Users/lij/.vim/stl/stl_function.h	/^    _Result operator()(_Arg1 __x, _Arg2 __y) const {$/;"	f	class:pointer_to_binary_function	access:public	signature:(_Arg1 __x, _Arg2 __y) const
pointer_to_binary_function::pointer_to_binary_function	/Users/lij/.vim/stl/stl_function.h	/^    explicit pointer_to_binary_function(_Result (*__x)(_Arg1, _Arg2)) $/;"	f	class:pointer_to_binary_function	access:public	signature:(_Result (__x)_Arg1, _Arg2))
pointer_to_binary_function::pointer_to_binary_function	/Users/lij/.vim/stl/stl_function.h	/^    pointer_to_binary_function() {}$/;"	f	class:pointer_to_binary_function	access:public	signature:()
pointer_to_unary_function	/Users/lij/.vim/stl/stl_function.h	/^  explicit pointer_to_unary_function(_Result (*__x)(_Arg)) : _M_ptr(__x) {}$/;"	f	class:pointer_to_unary_function	access:public	signature:(_Result (__x)_Arg))
pointer_to_unary_function	/Users/lij/.vim/stl/stl_function.h	/^  pointer_to_unary_function() {}$/;"	f	class:pointer_to_unary_function	access:public	signature:()
pointer_to_unary_function	/Users/lij/.vim/stl/stl_function.h	/^class pointer_to_unary_function : public unary_function<_Arg, _Result> {$/;"	c	inherits:unary_function
pointer_to_unary_function::_M_ptr	/Users/lij/.vim/stl/stl_function.h	/^  _Result (*_M_ptr)(_Arg);$/;"	m	class:pointer_to_unary_function	access:protected
pointer_to_unary_function::operator ()	/Users/lij/.vim/stl/stl_function.h	/^  _Result operator()(_Arg __x) const { return _M_ptr(__x); }$/;"	f	class:pointer_to_unary_function	access:public	signature:(_Arg __x) const
pointer_to_unary_function::pointer_to_unary_function	/Users/lij/.vim/stl/stl_function.h	/^  explicit pointer_to_unary_function(_Result (*__x)(_Arg)) : _M_ptr(__x) {}$/;"	f	class:pointer_to_unary_function	access:public	signature:(_Result (__x)_Arg))
pointer_to_unary_function::pointer_to_unary_function	/Users/lij/.vim/stl/stl_function.h	/^  pointer_to_unary_function() {}$/;"	f	class:pointer_to_unary_function	access:public	signature:()
pop	/Users/lij/.vim/stl/stl_queue.h	/^  void pop() { c.pop_front(); }$/;"	f	class:queue	access:public	signature:()
pop	/Users/lij/.vim/stl/stl_queue.h	/^  void pop() {$/;"	f	class:priority_queue	access:public	signature:()
pop	/Users/lij/.vim/stl/stl_stack.h	/^  void pop() { c.pop_back(); }$/;"	f	class:stack	access:public	signature:()
pop_back	/Users/lij/.vim/stl/stl_bvector.h	/^  void pop_back() { --_M_finish; }$/;"	f	class:__BVECTOR	access:public	signature:()
pop_back	/Users/lij/.vim/stl/stl_deque.h	/^  void pop_back() {$/;"	f	class:deque	access:public	signature:()
pop_back	/Users/lij/.vim/stl/stl_list.h	/^  void pop_back() { $/;"	f	class:list	access:public	signature:()
pop_back	/Users/lij/.vim/stl/stl_rope.h	/^        void pop_back()$/;"	f	class:rope	access:public	signature:()
pop_back	/Users/lij/.vim/stl/stl_vector.h	/^  void pop_back() {$/;"	f	class:vector	access:public	signature:()
pop_back	/Users/lij/.vim/stl/string	/^  void pop_back() {$/;"	f	class:basic_string	access:public	signature:()
pop_front	/Users/lij/.vim/stl/stl_deque.h	/^  void pop_front() {$/;"	f	class:deque	access:public	signature:()
pop_front	/Users/lij/.vim/stl/stl_list.h	/^  void pop_front() { erase(begin()); }$/;"	f	class:list	access:public	signature:()
pop_front	/Users/lij/.vim/stl/stl_rope.h	/^        void pop_front()$/;"	f	class:rope	access:public	signature:()
pop_front	/Users/lij/.vim/stl/stl_slist.h	/^  void pop_front() {$/;"	f	class:slist	access:public	signature:()
pop_heap	/Users/lij/.vim/stl/stl_heap.h	/^inline void pop_heap(_RandomAccessIterator __first, $/;"	f	signature:(_RandomAccessIterator __first, _RandomAccessIterator __last)
pop_heap	/Users/lij/.vim/stl/stl_heap.h	/^pop_heap(_RandomAccessIterator __first,$/;"	f	signature:(_RandomAccessIterator __first, _RandomAccessIterator __last, _Compare __comp)
pos_type	/Users/lij/.vim/stl/char_traits.h	/^  typedef streampos pos_type;$/;"	t	class:__char_traits_base	access:public
pow	/Users/lij/.vim/stl/valarray	/^inline valarray<_Tp> pow(const _Tp& __c, const valarray<_Tp>& __x) {$/;"	f	signature:(const _Tp& __c, const valarray<_Tp>& __x)
pow	/Users/lij/.vim/stl/valarray	/^inline valarray<_Tp> pow(const valarray<_Tp>& __x, const _Tp& __c) {$/;"	f	signature:(const valarray<_Tp>& __x, const _Tp& __c)
pow	/Users/lij/.vim/stl/valarray	/^inline valarray<_Tp> pow(const valarray<_Tp>& __x,$/;"	f	signature:(const valarray<_Tp>& __x, const valarray<_Tp>& __y)
power	/Users/lij/.vim/stl/stl_numeric.h	/^inline _Tp power(_Tp __x, _Integer __n)$/;"	f	signature:(_Tp __x, _Integer __n)
power	/Users/lij/.vim/stl/stl_numeric.h	/^inline _Tp power(_Tp __x, _Integer __n, _MonoidOperation __opr)$/;"	f	signature:(_Tp __x, _Integer __n, _MonoidOperation __opr)
prev_permutation	/Users/lij/.vim/stl/stl_algo.h	/^bool prev_permutation(_BidirectionalIter __first, _BidirectionalIter __last) {$/;"	f	signature:(_BidirectionalIter __first, _BidirectionalIter __last)
prev_permutation	/Users/lij/.vim/stl/stl_algo.h	/^bool prev_permutation(_BidirectionalIter __first, _BidirectionalIter __last,$/;"	f	signature:(_BidirectionalIter __first, _BidirectionalIter __last, _Compare __comp)
previous	/Users/lij/.vim/stl/stl_slist.h	/^  const_iterator previous(const_iterator __pos) const {$/;"	f	class:slist	access:public	signature:(const_iterator __pos) const
previous	/Users/lij/.vim/stl/stl_slist.h	/^  iterator previous(const_iterator __pos) {$/;"	f	class:slist	access:public	signature:(const_iterator __pos)
priority_queue	/Users/lij/.vim/stl/stl_queue.h	/^  explicit priority_queue(const _Compare& __x) :  c(), comp(__x) {}$/;"	f	class:priority_queue	access:public	signature:(const _Compare& __x)
priority_queue	/Users/lij/.vim/stl/stl_queue.h	/^  priority_queue() : c() {}$/;"	f	class:priority_queue	access:public	signature:()
priority_queue	/Users/lij/.vim/stl/stl_queue.h	/^  priority_queue(_InputIterator __first, $/;"	f	class:priority_queue	access:public	signature:(_InputIterator __first, _InputIterator __last, const _Compare& __x)
priority_queue	/Users/lij/.vim/stl/stl_queue.h	/^  priority_queue(_InputIterator __first, _InputIterator __last) $/;"	f	class:priority_queue	access:public	signature:(_InputIterator __first, _InputIterator __last)
priority_queue	/Users/lij/.vim/stl/stl_queue.h	/^  priority_queue(_InputIterator __first, _InputIterator __last,$/;"	f	class:priority_queue	access:public	signature:(_InputIterator __first, _InputIterator __last, const _Compare& __x, const _Sequence& __s)
priority_queue	/Users/lij/.vim/stl/stl_queue.h	/^  priority_queue(const _Compare& __x, const _Sequence& __s) $/;"	f	class:priority_queue	access:public	signature:(const _Compare& __x, const _Sequence& __s)
priority_queue	/Users/lij/.vim/stl/stl_queue.h	/^  priority_queue(const value_type* __first, const value_type* __last) $/;"	f	class:priority_queue	access:public	signature:(const value_type* __first, const value_type* __last)
priority_queue	/Users/lij/.vim/stl/stl_queue.h	/^  priority_queue(const value_type* __first, const value_type* __last, $/;"	f	class:priority_queue	access:public	signature:(const value_type* __first, const value_type* __last, const _Compare& __x)
priority_queue	/Users/lij/.vim/stl/stl_queue.h	/^  priority_queue(const value_type* __first, const value_type* __last, $/;"	f	class:priority_queue	access:public	signature:(const value_type* __first, const value_type* __last, const _Compare& __x, const _Sequence& __c)
priority_queue	/Users/lij/.vim/stl/stl_queue.h	/^class priority_queue {$/;"	c
priority_queue::_Sequence_value_type	/Users/lij/.vim/stl/stl_queue.h	/^  typedef typename _Sequence::value_type _Sequence_value_type;$/;"	t	class:priority_queue	access:private
priority_queue::__STL_CLASS_BINARY_FUNCTION_CHECK	/Users/lij/.vim/stl/stl_queue.h	/^  __STL_CLASS_BINARY_FUNCTION_CHECK(_Compare, bool, _Tp, _Tp);$/;"	p	class:priority_queue	access:private	signature:(_Compare, bool, _Tp, _Tp)
priority_queue::__STL_CLASS_REQUIRES	/Users/lij/.vim/stl/stl_queue.h	/^  __STL_CLASS_REQUIRES(_Sequence, _RandomAccessContainer);$/;"	p	class:priority_queue	access:private	signature:(_Sequence, _RandomAccessContainer)
priority_queue::__STL_CLASS_REQUIRES	/Users/lij/.vim/stl/stl_queue.h	/^  __STL_CLASS_REQUIRES(_Sequence, _Sequence);$/;"	p	class:priority_queue	access:private	signature:(_Sequence, _Sequence)
priority_queue::__STL_CLASS_REQUIRES	/Users/lij/.vim/stl/stl_queue.h	/^  __STL_CLASS_REQUIRES(_Tp, _Assignable);$/;"	p	class:priority_queue	access:private	signature:(_Tp, _Assignable)
priority_queue::__STL_CLASS_REQUIRES_SAME_TYPE	/Users/lij/.vim/stl/stl_queue.h	/^  __STL_CLASS_REQUIRES_SAME_TYPE(_Tp, _Sequence_value_type);$/;"	p	class:priority_queue	access:private	signature:(_Tp, _Sequence_value_type)
priority_queue::c	/Users/lij/.vim/stl/stl_queue.h	/^  _Sequence c;$/;"	m	class:priority_queue	access:protected
priority_queue::comp	/Users/lij/.vim/stl/stl_queue.h	/^  _Compare comp;$/;"	m	class:priority_queue	access:protected
priority_queue::const_reference	/Users/lij/.vim/stl/stl_queue.h	/^  typedef typename _Sequence::const_reference const_reference;$/;"	t	class:priority_queue	access:public
priority_queue::container_type	/Users/lij/.vim/stl/stl_queue.h	/^  typedef          _Sequence                  container_type;$/;"	t	class:priority_queue	access:public
priority_queue::empty	/Users/lij/.vim/stl/stl_queue.h	/^  bool empty() const { return c.empty(); }$/;"	f	class:priority_queue	access:public	signature:() const
priority_queue::pop	/Users/lij/.vim/stl/stl_queue.h	/^  void pop() {$/;"	f	class:priority_queue	access:public	signature:()
priority_queue::priority_queue	/Users/lij/.vim/stl/stl_queue.h	/^  explicit priority_queue(const _Compare& __x) :  c(), comp(__x) {}$/;"	f	class:priority_queue	access:public	signature:(const _Compare& __x)
priority_queue::priority_queue	/Users/lij/.vim/stl/stl_queue.h	/^  priority_queue() : c() {}$/;"	f	class:priority_queue	access:public	signature:()
priority_queue::priority_queue	/Users/lij/.vim/stl/stl_queue.h	/^  priority_queue(_InputIterator __first, $/;"	f	class:priority_queue	access:public	signature:(_InputIterator __first, _InputIterator __last, const _Compare& __x)
priority_queue::priority_queue	/Users/lij/.vim/stl/stl_queue.h	/^  priority_queue(_InputIterator __first, _InputIterator __last) $/;"	f	class:priority_queue	access:public	signature:(_InputIterator __first, _InputIterator __last)
priority_queue::priority_queue	/Users/lij/.vim/stl/stl_queue.h	/^  priority_queue(_InputIterator __first, _InputIterator __last,$/;"	f	class:priority_queue	access:public	signature:(_InputIterator __first, _InputIterator __last, const _Compare& __x, const _Sequence& __s)
priority_queue::priority_queue	/Users/lij/.vim/stl/stl_queue.h	/^  priority_queue(const _Compare& __x, const _Sequence& __s) $/;"	f	class:priority_queue	access:public	signature:(const _Compare& __x, const _Sequence& __s)
priority_queue::priority_queue	/Users/lij/.vim/stl/stl_queue.h	/^  priority_queue(const value_type* __first, const value_type* __last) $/;"	f	class:priority_queue	access:public	signature:(const value_type* __first, const value_type* __last)
priority_queue::priority_queue	/Users/lij/.vim/stl/stl_queue.h	/^  priority_queue(const value_type* __first, const value_type* __last, $/;"	f	class:priority_queue	access:public	signature:(const value_type* __first, const value_type* __last, const _Compare& __x)
priority_queue::priority_queue	/Users/lij/.vim/stl/stl_queue.h	/^  priority_queue(const value_type* __first, const value_type* __last, $/;"	f	class:priority_queue	access:public	signature:(const value_type* __first, const value_type* __last, const _Compare& __x, const _Sequence& __c)
priority_queue::push	/Users/lij/.vim/stl/stl_queue.h	/^  void push(const value_type& __x) {$/;"	f	class:priority_queue	access:public	signature:(const value_type& __x)
priority_queue::reference	/Users/lij/.vim/stl/stl_queue.h	/^  typedef typename _Sequence::reference       reference;$/;"	t	class:priority_queue	access:public
priority_queue::size	/Users/lij/.vim/stl/stl_queue.h	/^  size_type size() const { return c.size(); }$/;"	f	class:priority_queue	access:public	signature:() const
priority_queue::size_type	/Users/lij/.vim/stl/stl_queue.h	/^  typedef typename _Sequence::size_type       size_type;$/;"	t	class:priority_queue	access:public
priority_queue::top	/Users/lij/.vim/stl/stl_queue.h	/^  const_reference top() const { return c.front(); }$/;"	f	class:priority_queue	access:public	signature:() const
priority_queue::value_type	/Users/lij/.vim/stl/stl_queue.h	/^  typedef typename _Sequence::value_type      value_type;$/;"	t	class:priority_queue	access:public
project1st	/Users/lij/.vim/stl/stl_function.h	/^struct project1st : public _Project1st<_Arg1, _Arg2> {};$/;"	s	inherits:_Project1st
project2nd	/Users/lij/.vim/stl/stl_function.h	/^struct project2nd : public _Project2nd<_Arg1, _Arg2> {};$/;"	s	inherits:_Project2nd
pthread_alloc	/Users/lij/.vim/stl/pthread_alloc	/^typedef _Pthread_alloc_template<> pthread_alloc;$/;"	t	file:
pthread_allocator	/Users/lij/.vim/stl/pthread_alloc	/^class pthread_allocator {$/;"	c	file:
pthread_allocator	/Users/lij/.vim/stl/pthread_alloc	/^class pthread_allocator<void> {$/;"	c	file:
pthread_allocator::_S_Alloc	/Users/lij/.vim/stl/pthread_alloc	/^  typedef pthread_alloc _S_Alloc;          \/\/ The underlying allocator.$/;"	t	class:pthread_allocator	file:	access:private
pthread_allocator::address	/Users/lij/.vim/stl/pthread_alloc	/^  const_pointer address(const_reference __x) const { return &__x; }$/;"	f	class:pthread_allocator	access:public	signature:(const_reference __x) const
pthread_allocator::address	/Users/lij/.vim/stl/pthread_alloc	/^  pointer address(reference __x) const { return &__x; }$/;"	f	class:pthread_allocator	access:public	signature:(reference __x) const
pthread_allocator::allocate	/Users/lij/.vim/stl/pthread_alloc	/^  _Tp* allocate(size_type __n, const void* = 0) {$/;"	f	class:pthread_allocator	access:public	signature:(size_type __n, const void* = 0)
pthread_allocator::const_pointer	/Users/lij/.vim/stl/pthread_alloc	/^  typedef const _Tp* const_pointer;$/;"	t	class:pthread_allocator	file:	access:public
pthread_allocator::const_pointer	/Users/lij/.vim/stl/pthread_alloc	/^  typedef const void* const_pointer;$/;"	t	class:pthread_allocator	file:	access:public
pthread_allocator::const_reference	/Users/lij/.vim/stl/pthread_alloc	/^  typedef const _Tp& const_reference;$/;"	t	class:pthread_allocator	file:	access:public
pthread_allocator::construct	/Users/lij/.vim/stl/pthread_alloc	/^  void construct(pointer __p, const _Tp& __val) { new(__p) _Tp(__val); }$/;"	f	class:pthread_allocator	access:public	signature:(pointer __p, const _Tp& __val)
pthread_allocator::deallocate	/Users/lij/.vim/stl/pthread_alloc	/^  void deallocate(pointer __p, size_type __n)$/;"	f	class:pthread_allocator	access:public	signature:(pointer __p, size_type __n)
pthread_allocator::destroy	/Users/lij/.vim/stl/pthread_alloc	/^  void destroy(pointer _p) { _p->~_Tp(); }$/;"	f	class:pthread_allocator	access:public	signature:(pointer _p)
pthread_allocator::difference_type	/Users/lij/.vim/stl/pthread_alloc	/^  typedef ptrdiff_t   difference_type;$/;"	t	class:pthread_allocator	file:	access:public
pthread_allocator::difference_type	/Users/lij/.vim/stl/pthread_alloc	/^  typedef ptrdiff_t  difference_type;$/;"	t	class:pthread_allocator	file:	access:public
pthread_allocator::pointer	/Users/lij/.vim/stl/pthread_alloc	/^  typedef _Tp*       pointer;$/;"	t	class:pthread_allocator	file:	access:public
pthread_allocator::pointer	/Users/lij/.vim/stl/pthread_alloc	/^  typedef void*       pointer;$/;"	t	class:pthread_allocator	file:	access:public
pthread_allocator::rebind	/Users/lij/.vim/stl/pthread_alloc	/^  template <class _NewType> struct rebind {$/;"	s	class:pthread_allocator	file:	access:public
pthread_allocator::rebind::other	/Users/lij/.vim/stl/pthread_alloc	/^    typedef pthread_allocator<_NewType> other;$/;"	t	struct:pthread_allocator::rebind	file:	access:public
pthread_allocator::reference	/Users/lij/.vim/stl/pthread_alloc	/^  typedef _Tp&       reference;$/;"	t	class:pthread_allocator	file:	access:public
pthread_allocator::size_type	/Users/lij/.vim/stl/pthread_alloc	/^  typedef size_t      size_type;$/;"	t	class:pthread_allocator	file:	access:public
pthread_allocator::size_type	/Users/lij/.vim/stl/pthread_alloc	/^  typedef size_t     size_type;$/;"	t	class:pthread_allocator	file:	access:public
pthread_allocator::value_type	/Users/lij/.vim/stl/pthread_alloc	/^  typedef _Tp        value_type;$/;"	t	class:pthread_allocator	file:	access:public
pthread_allocator::value_type	/Users/lij/.vim/stl/pthread_alloc	/^  typedef void        value_type;$/;"	t	class:pthread_allocator	file:	access:public
ptr_fun	/Users/lij/.vim/stl/stl_function.h	/^inline pointer_to_unary_function<_Arg, _Result> ptr_fun(_Result (*__x)(_Arg))$/;"	f	signature:(_Result (__x)_Arg))
ptr_fun	/Users/lij/.vim/stl/stl_function.h	/^ptr_fun(_Result (*__x)(_Arg1, _Arg2)) {$/;"	f	signature:(_Result (__x)_Arg1, _Arg2))
push	/Users/lij/.vim/stl/stl_queue.h	/^  void push(const value_type& __x) { c.push_back(__x); }$/;"	f	class:queue	access:public	signature:(const value_type& __x)
push	/Users/lij/.vim/stl/stl_queue.h	/^  void push(const value_type& __x) {$/;"	f	class:priority_queue	access:public	signature:(const value_type& __x)
push	/Users/lij/.vim/stl/stl_stack.h	/^  void push(const value_type& __x) { c.push_back(__x); }$/;"	f	class:stack	access:public	signature:(const value_type& __x)
push_back	/Users/lij/.vim/stl/stl_bvector.h	/^  void push_back(bool __x) {$/;"	f	class:__BVECTOR	access:public	signature:(bool __x)
push_back	/Users/lij/.vim/stl/stl_deque.h	/^  void push_back() {$/;"	f	class:deque	access:public	signature:()
push_back	/Users/lij/.vim/stl/stl_deque.h	/^  void push_back(const value_type& __t) {$/;"	f	class:deque	access:public	signature:(const value_type& __t)
push_back	/Users/lij/.vim/stl/stl_list.h	/^  void push_back() {insert(end());}$/;"	f	class:list	access:public	signature:()
push_back	/Users/lij/.vim/stl/stl_list.h	/^  void push_back(const _Tp& __x) { insert(end(), __x); }$/;"	f	class:list	access:public	signature:(const _Tp& __x)
push_back	/Users/lij/.vim/stl/stl_rope.h	/^        void push_back(_CharT __x)$/;"	f	class:rope	access:public	signature:(_CharT __x)
push_back	/Users/lij/.vim/stl/stl_rope.h	/^        void push_back(value_type __x)$/;"	f	class:sequence_buffer	access:public	signature:(value_type __x)
push_back	/Users/lij/.vim/stl/stl_vector.h	/^  void push_back() {$/;"	f	class:vector	access:public	signature:()
push_back	/Users/lij/.vim/stl/stl_vector.h	/^  void push_back(const _Tp& __x) {$/;"	f	class:vector	access:public	signature:(const _Tp& __x)
push_back	/Users/lij/.vim/stl/string	/^  void push_back(_CharT __c) {$/;"	f	class:basic_string	access:public	signature:(_CharT __c)
push_front	/Users/lij/.vim/stl/stl_deque.h	/^  void push_front() {$/;"	f	class:deque	access:public	signature:()
push_front	/Users/lij/.vim/stl/stl_deque.h	/^  void push_front(const value_type& __t) {$/;"	f	class:deque	access:public	signature:(const value_type& __t)
push_front	/Users/lij/.vim/stl/stl_list.h	/^  void push_front() {insert(begin());}$/;"	f	class:list	access:public	signature:()
push_front	/Users/lij/.vim/stl/stl_list.h	/^  void push_front(const _Tp& __x) { insert(begin(), __x); }$/;"	f	class:list	access:public	signature:(const _Tp& __x)
push_front	/Users/lij/.vim/stl/stl_rope.h	/^        void push_front(_CharT __x)$/;"	f	class:rope	access:public	signature:(_CharT __x)
push_front	/Users/lij/.vim/stl/stl_slist.h	/^  void push_front() { __slist_make_link(&this->_M_head, _M_create_node()); }$/;"	f	class:slist	access:public	signature:()
push_front	/Users/lij/.vim/stl/stl_slist.h	/^  void push_front(const value_type& __x)   {$/;"	f	class:slist	access:public	signature:(const value_type& __x)
push_heap	/Users/lij/.vim/stl/stl_heap.h	/^push_heap(_RandomAccessIterator __first, _RandomAccessIterator __last)$/;"	f	signature:(_RandomAccessIterator __first, _RandomAccessIterator __last)
push_heap	/Users/lij/.vim/stl/stl_heap.h	/^push_heap(_RandomAccessIterator __first, _RandomAccessIterator __last,$/;"	f	signature:(_RandomAccessIterator __first, _RandomAccessIterator __last, _Compare __comp)
put	/Users/lij/.vim/stl/stl_rope.h	/^        sequence_buffer& put(value_type __x)$/;"	f	class:sequence_buffer	access:public	signature:(value_type __x)
queue	/Users/lij/.vim/stl/stl_queue.h	/^  explicit queue(const _Sequence& __c) : c(__c) {}$/;"	f	class:queue	access:public	signature:(const _Sequence& __c)
queue	/Users/lij/.vim/stl/stl_queue.h	/^  queue() : c() {}$/;"	f	class:queue	access:public	signature:()
queue	/Users/lij/.vim/stl/stl_queue.h	/^class queue {$/;"	c
queue::_Sequence_value_type	/Users/lij/.vim/stl/stl_queue.h	/^  typedef typename _Sequence::value_type _Sequence_value_type;$/;"	t	class:queue	access:private
queue::__STL_CLASS_REQUIRES	/Users/lij/.vim/stl/stl_queue.h	/^  __STL_CLASS_REQUIRES(_Sequence, _BackInsertionSequence);$/;"	p	class:queue	access:private	signature:(_Sequence, _BackInsertionSequence)
queue::__STL_CLASS_REQUIRES	/Users/lij/.vim/stl/stl_queue.h	/^  __STL_CLASS_REQUIRES(_Sequence, _FrontInsertionSequence);$/;"	p	class:queue	access:private	signature:(_Sequence, _FrontInsertionSequence)
queue::__STL_CLASS_REQUIRES	/Users/lij/.vim/stl/stl_queue.h	/^  __STL_CLASS_REQUIRES(_Tp, _Assignable);$/;"	p	class:queue	access:private	signature:(_Tp, _Assignable)
queue::__STL_CLASS_REQUIRES_SAME_TYPE	/Users/lij/.vim/stl/stl_queue.h	/^  __STL_CLASS_REQUIRES_SAME_TYPE(_Tp, _Sequence_value_type);$/;"	p	class:queue	access:private	signature:(_Tp, _Sequence_value_type)
queue::__STL_NULL_TMPL_ARGS	/Users/lij/.vim/stl/stl_queue.h	/^  operator<  __STL_NULL_TMPL_ARGS (const queue&, const queue&);$/;"	p	class:queue	access:friend	signature:(const queue&, const queue&)
queue::__STL_NULL_TMPL_ARGS	/Users/lij/.vim/stl/stl_queue.h	/^  operator== __STL_NULL_TMPL_ARGS (const queue&, const queue&);$/;"	p	class:queue	access:friend	signature:(const queue&, const queue&)
queue::back	/Users/lij/.vim/stl/stl_queue.h	/^  const_reference back() const { return c.back(); }$/;"	f	class:queue	access:public	signature:() const
queue::back	/Users/lij/.vim/stl/stl_queue.h	/^  reference back() { return c.back(); }$/;"	f	class:queue	access:public	signature:()
queue::c	/Users/lij/.vim/stl/stl_queue.h	/^  _Sequence c;$/;"	m	class:queue	access:protected
queue::const_reference	/Users/lij/.vim/stl/stl_queue.h	/^  typedef typename _Sequence::const_reference const_reference;$/;"	t	class:queue	access:public
queue::container_type	/Users/lij/.vim/stl/stl_queue.h	/^  typedef          _Sequence                  container_type;$/;"	t	class:queue	access:public
queue::empty	/Users/lij/.vim/stl/stl_queue.h	/^  bool empty() const { return c.empty(); }$/;"	f	class:queue	access:public	signature:() const
queue::front	/Users/lij/.vim/stl/stl_queue.h	/^  const_reference front() const { return c.front(); }$/;"	f	class:queue	access:public	signature:() const
queue::front	/Users/lij/.vim/stl/stl_queue.h	/^  reference front() { return c.front(); }$/;"	f	class:queue	access:public	signature:()
queue::operator <	/Users/lij/.vim/stl/stl_queue.h	/^  friend bool operator< (const queue<_Tp1, _Seq1>&,$/;"	p	class:queue	access:friend	signature:(const queue<_Tp1, _Seq1>&, const queue<_Tp1, _Seq1>&)
queue::operator ==	/Users/lij/.vim/stl/stl_queue.h	/^  friend bool operator== (const queue<_Tp1, _Seq1>&,$/;"	p	class:queue	access:friend	signature:(const queue<_Tp1, _Seq1>&, const queue<_Tp1, _Seq1>&)
queue::pop	/Users/lij/.vim/stl/stl_queue.h	/^  void pop() { c.pop_front(); }$/;"	f	class:queue	access:public	signature:()
queue::push	/Users/lij/.vim/stl/stl_queue.h	/^  void push(const value_type& __x) { c.push_back(__x); }$/;"	f	class:queue	access:public	signature:(const value_type& __x)
queue::queue	/Users/lij/.vim/stl/stl_queue.h	/^  explicit queue(const _Sequence& __c) : c(__c) {}$/;"	f	class:queue	access:public	signature:(const _Sequence& __c)
queue::queue	/Users/lij/.vim/stl/stl_queue.h	/^  queue() : c() {}$/;"	f	class:queue	access:public	signature:()
queue::reference	/Users/lij/.vim/stl/stl_queue.h	/^  typedef typename _Sequence::reference       reference;$/;"	t	class:queue	access:public
queue::size	/Users/lij/.vim/stl/stl_queue.h	/^  size_type size() const { return c.size(); }$/;"	f	class:queue	access:public	signature:() const
queue::size_type	/Users/lij/.vim/stl/stl_queue.h	/^  typedef typename _Sequence::size_type       size_type;$/;"	t	class:queue	access:public
queue::value_type	/Users/lij/.vim/stl/stl_queue.h	/^  typedef typename _Sequence::value_type      value_type;$/;"	t	class:queue	access:public
random_access_iterator	/Users/lij/.vim/stl/stl_iterator_base.h	/^template <class _Tp, class _Distance> struct random_access_iterator {$/;"	s
random_access_iterator::difference_type	/Users/lij/.vim/stl/stl_iterator_base.h	/^  typedef _Distance                  difference_type;$/;"	t	struct:random_access_iterator	access:public
random_access_iterator::iterator_category	/Users/lij/.vim/stl/stl_iterator_base.h	/^  typedef random_access_iterator_tag iterator_category;$/;"	t	struct:random_access_iterator	access:public
random_access_iterator::pointer	/Users/lij/.vim/stl/stl_iterator_base.h	/^  typedef _Tp*                       pointer;$/;"	t	struct:random_access_iterator	access:public
random_access_iterator::reference	/Users/lij/.vim/stl/stl_iterator_base.h	/^  typedef _Tp&                       reference;$/;"	t	struct:random_access_iterator	access:public
random_access_iterator::value_type	/Users/lij/.vim/stl/stl_iterator_base.h	/^  typedef _Tp                        value_type;$/;"	t	struct:random_access_iterator	access:public
random_access_iterator_tag	/Users/lij/.vim/stl/stl_iterator_base.h	/^struct random_access_iterator_tag : public bidirectional_iterator_tag {};$/;"	s	inherits:bidirectional_iterator_tag
random_sample	/Users/lij/.vim/stl/stl_algo.h	/^random_sample(_InputIter __first, _InputIter __last,$/;"	f	signature:(_InputIter __first, _InputIter __last, _RandomAccessIter __out_first, _RandomAccessIter __out_last)
random_sample	/Users/lij/.vim/stl/stl_algo.h	/^random_sample(_InputIter __first, _InputIter __last,$/;"	f	signature:(_InputIter __first, _InputIter __last, _RandomAccessIter __out_first, _RandomAccessIter __out_last, _RandomNumberGenerator& __rand)
random_sample_n	/Users/lij/.vim/stl/stl_algo.h	/^_OutputIter random_sample_n(_ForwardIter __first, _ForwardIter __last,$/;"	f	signature:(_ForwardIter __first, _ForwardIter __last, _OutputIter __out, const _Distance __n)
random_sample_n	/Users/lij/.vim/stl/stl_algo.h	/^_OutputIter random_sample_n(_ForwardIter __first, _ForwardIter __last,$/;"	f	signature:(_ForwardIter __first, _ForwardIter __last, _OutputIter __out, const _Distance __n, _RandomNumberGenerator& __rand)
random_shuffle	/Users/lij/.vim/stl/stl_algo.h	/^inline void random_shuffle(_RandomAccessIter __first,$/;"	f	signature:(_RandomAccessIter __first, _RandomAccessIter __last)
random_shuffle	/Users/lij/.vim/stl/stl_algo.h	/^void random_shuffle(_RandomAccessIter __first, _RandomAccessIter __last,$/;"	f	signature:(_RandomAccessIter __first, _RandomAccessIter __last, _RandomNumberGenerator& __rand)
range_error	/Users/lij/.vim/stl/stdexcept	/^  range_error(const string& __arg) : runtime_error(__arg) {}$/;"	f	class:range_error	access:public	signature:(const string& __arg)
range_error	/Users/lij/.vim/stl/stdexcept	/^class range_error : public runtime_error {$/;"	c	file:	inherits:runtime_error
range_error::range_error	/Users/lij/.vim/stl/stdexcept	/^  range_error(const string& __arg) : runtime_error(__arg) {}$/;"	f	class:range_error	access:public	signature:(const string& __arg)
raw_storage_iterator	/Users/lij/.vim/stl/stl_raw_storage_iter.h	/^  explicit raw_storage_iterator(_ForwardIterator __x) : _M_iter(__x) {}$/;"	f	class:raw_storage_iterator	access:public	signature:(_ForwardIterator __x)
raw_storage_iterator	/Users/lij/.vim/stl/stl_raw_storage_iter.h	/^class raw_storage_iterator {$/;"	c
raw_storage_iterator::_M_iter	/Users/lij/.vim/stl/stl_raw_storage_iter.h	/^  _ForwardIterator _M_iter;$/;"	m	class:raw_storage_iterator	access:protected
raw_storage_iterator::difference_type	/Users/lij/.vim/stl/stl_raw_storage_iter.h	/^  typedef void                difference_type;$/;"	t	class:raw_storage_iterator	access:public
raw_storage_iterator::iterator_category	/Users/lij/.vim/stl/stl_raw_storage_iter.h	/^  typedef output_iterator_tag iterator_category;$/;"	t	class:raw_storage_iterator	access:public
raw_storage_iterator::operator *	/Users/lij/.vim/stl/stl_raw_storage_iter.h	/^  raw_storage_iterator& operator*() { return *this; }$/;"	f	class:raw_storage_iterator	access:public	signature:()
raw_storage_iterator::operator ++	/Users/lij/.vim/stl/stl_raw_storage_iter.h	/^  raw_storage_iterator<_ForwardIterator, _Tp> operator++(int) {$/;"	f	class:raw_storage_iterator	access:public	signature:(int)
raw_storage_iterator::operator ++	/Users/lij/.vim/stl/stl_raw_storage_iter.h	/^  raw_storage_iterator<_ForwardIterator, _Tp>& operator++() {$/;"	f	class:raw_storage_iterator	access:public	signature:()
raw_storage_iterator::operator =	/Users/lij/.vim/stl/stl_raw_storage_iter.h	/^  raw_storage_iterator& operator=(const _Tp& __element) {$/;"	f	class:raw_storage_iterator	access:public	signature:(const _Tp& __element)
raw_storage_iterator::pointer	/Users/lij/.vim/stl/stl_raw_storage_iter.h	/^  typedef void                pointer;$/;"	t	class:raw_storage_iterator	access:public
raw_storage_iterator::raw_storage_iterator	/Users/lij/.vim/stl/stl_raw_storage_iter.h	/^  explicit raw_storage_iterator(_ForwardIterator __x) : _M_iter(__x) {}$/;"	f	class:raw_storage_iterator	access:public	signature:(_ForwardIterator __x)
raw_storage_iterator::reference	/Users/lij/.vim/stl/stl_raw_storage_iter.h	/^  typedef void                reference;$/;"	t	class:raw_storage_iterator	access:public
raw_storage_iterator::value_type	/Users/lij/.vim/stl/stl_raw_storage_iter.h	/^  typedef void                value_type;$/;"	t	class:raw_storage_iterator	access:public
rb_tree	/Users/lij/.vim/stl/stl_tree.h	/^  rb_tree(const _Compare& __comp = _Compare(),$/;"	f	struct:rb_tree	access:public	signature:(const _Compare& __comp = _Compare(), const allocator_type& __a = allocator_type())
rb_tree	/Users/lij/.vim/stl/stl_tree.h	/^struct rb_tree : public _Rb_tree<_Key, _Value, _KeyOfValue, _Compare, _Alloc>$/;"	s	inherits:_Rb_tree
rb_tree::_Base	/Users/lij/.vim/stl/stl_tree.h	/^  typedef _Rb_tree<_Key, _Value, _KeyOfValue, _Compare, _Alloc> _Base;$/;"	t	struct:rb_tree	access:public
rb_tree::allocator_type	/Users/lij/.vim/stl/stl_tree.h	/^  typedef typename _Base::allocator_type allocator_type;$/;"	t	struct:rb_tree	access:public
rb_tree::rb_tree	/Users/lij/.vim/stl/stl_tree.h	/^  rb_tree(const _Compare& __comp = _Compare(),$/;"	f	struct:rb_tree	access:public	signature:(const _Compare& __comp = _Compare(), const allocator_type& __a = allocator_type())
rb_tree::~rb_tree	/Users/lij/.vim/stl/stl_tree.h	/^  ~rb_tree() {}$/;"	f	struct:rb_tree	access:public	signature:()
rbegin	/Users/lij/.vim/stl/stl_bvector.h	/^  const_reverse_iterator rbegin() const { $/;"	f	class:__BVECTOR	access:public	signature:() const
rbegin	/Users/lij/.vim/stl/stl_bvector.h	/^  reverse_iterator rbegin() { return reverse_iterator(end()); }$/;"	f	class:__BVECTOR	access:public	signature:()
rbegin	/Users/lij/.vim/stl/stl_deque.h	/^  const_reverse_iterator rbegin() const $/;"	f	class:deque	access:public	signature:() const
rbegin	/Users/lij/.vim/stl/stl_deque.h	/^  reverse_iterator rbegin() { return reverse_iterator(_M_finish); }$/;"	f	class:deque	access:public	signature:()
rbegin	/Users/lij/.vim/stl/stl_list.h	/^  const_reverse_iterator rbegin() const $/;"	f	class:list	access:public	signature:() const
rbegin	/Users/lij/.vim/stl/stl_list.h	/^  reverse_iterator rbegin() $/;"	f	class:list	access:public	signature:()
rbegin	/Users/lij/.vim/stl/stl_map.h	/^  const_reverse_iterator rbegin() const { return _M_t.rbegin(); }$/;"	f	class:map	access:public	signature:() const
rbegin	/Users/lij/.vim/stl/stl_map.h	/^  reverse_iterator rbegin() { return _M_t.rbegin(); }$/;"	f	class:map	access:public	signature:()
rbegin	/Users/lij/.vim/stl/stl_multimap.h	/^  const_reverse_iterator rbegin() const { return _M_t.rbegin(); }$/;"	f	class:multimap	access:public	signature:() const
rbegin	/Users/lij/.vim/stl/stl_multimap.h	/^  reverse_iterator rbegin() { return _M_t.rbegin(); }$/;"	f	class:multimap	access:public	signature:()
rbegin	/Users/lij/.vim/stl/stl_multiset.h	/^  reverse_iterator rbegin() const { return _M_t.rbegin(); } $/;"	f	class:multiset	access:public	signature:() const
rbegin	/Users/lij/.vim/stl/stl_rope.h	/^            const_reverse_iterator rbegin() { return const_rbegin(); }$/;"	f	class:rope	access:public	signature:()
rbegin	/Users/lij/.vim/stl/stl_rope.h	/^            reverse_iterator rbegin() { return mutable_rbegin(); }$/;"	f	class:rope	access:public	signature:()
rbegin	/Users/lij/.vim/stl/stl_rope.h	/^        const_reverse_iterator rbegin() const {$/;"	f	class:rope	access:public	signature:() const
rbegin	/Users/lij/.vim/stl/stl_set.h	/^  reverse_iterator rbegin() const { return _M_t.rbegin(); } $/;"	f	class:set	access:public	signature:() const
rbegin	/Users/lij/.vim/stl/stl_tree.h	/^  const_reverse_iterator rbegin() const { $/;"	f	class:_Rb_tree	access:public	signature:() const
rbegin	/Users/lij/.vim/stl/stl_tree.h	/^  reverse_iterator rbegin() { return reverse_iterator(end()); }$/;"	f	class:_Rb_tree	access:public	signature:()
rbegin	/Users/lij/.vim/stl/stl_vector.h	/^  const_reverse_iterator rbegin() const$/;"	f	class:vector	access:public	signature:() const
rbegin	/Users/lij/.vim/stl/stl_vector.h	/^  reverse_iterator rbegin()$/;"	f	class:vector	access:public	signature:()
rbegin	/Users/lij/.vim/stl/string	/^  const_reverse_iterator rbegin() const $/;"	f	class:basic_string	access:public	signature:() const
rbegin	/Users/lij/.vim/stl/string	/^  reverse_iterator rbegin()             $/;"	f	class:basic_string	access:public	signature:()
reallocate	/Users/lij/.vim/stl/pthread_alloc	/^  static void * reallocate(void *__p, size_t __old_sz, size_t __new_sz);$/;"	p	class:_Pthread_alloc_template	file:	access:public	signature:(void *__p, size_t __old_sz, size_t __new_sz)
reallocate	/Users/lij/.vim/stl/pthread_alloc	/^::reallocate(void *__p, size_t __old_sz, size_t __new_sz)$/;"	f	class:_Pthread_alloc_template	signature:(void *__p, size_t __old_sz, size_t __new_sz)
reallocate	/Users/lij/.vim/stl/stl_alloc.h	/^  static void* reallocate(void* __p, size_t \/* old_sz *\/, size_t __new_sz)$/;"	f	class:__malloc_alloc_template	access:public	signature:(void* __p, size_t , size_t __new_sz)
reallocate	/Users/lij/.vim/stl/stl_alloc.h	/^  static void* reallocate(void* __p, size_t __old_sz, size_t __new_sz)$/;"	f	class:debug_alloc	access:public	signature:(void* __p, size_t __old_sz, size_t __new_sz)
reallocate	/Users/lij/.vim/stl/stl_alloc.h	/^  static void* reallocate(void* __p, size_t __old_sz, size_t __new_sz);$/;"	p	class:__default_alloc_template	access:public	signature:(void* __p, size_t __old_sz, size_t __new_sz)
reallocate	/Users/lij/.vim/stl/stl_alloc.h	/^__default_alloc_template<threads, inst>::reallocate(void* __p,$/;"	f	class:__default_alloc_template	signature:(void* __p, size_t __old_sz, size_t __new_sz)
rebind	/Users/lij/.vim/stl/pthread_alloc	/^  template <class _NewType> struct rebind {$/;"	s	class:pthread_allocator	file:	access:public
rebind	/Users/lij/.vim/stl/stl_alloc.h	/^  template <class _Tp1> struct rebind {$/;"	s	class:allocator	access:public
rebind	/Users/lij/.vim/stl/stl_alloc.h	/^  template <class _Tp1> struct rebind {$/;"	s	struct:__allocator	access:public
reference	/Users/lij/.vim/stl/bitset	/^    reference( bitset& __b, size_t __pos ) {$/;"	f	class:bitset::reference	access:public	signature:( bitset& __b, size_t __pos )
reference	/Users/lij/.vim/stl/bitset	/^    reference();$/;"	p	class:bitset::reference	file:	access:private	signature:()
reference	/Users/lij/.vim/stl/bitset	/^  class reference {$/;"	c	class:bitset	file:	access:public
reference	/Users/lij/.vim/stl/concept_checks.h	/^  typedef typename __STD::iterator_traits<_Iter>::reference reference;$/;"	t	struct:__reference_type_definition_requirement_violation	access:public
reference	/Users/lij/.vim/stl/concept_checks.h	/^__STL_TYPEDEF_REQUIREMENT(reference);$/;"	v
reference	/Users/lij/.vim/stl/defalloc.h	/^    typedef T& reference;$/;"	t	class:allocator	access:public
reference	/Users/lij/.vim/stl/pthread_alloc	/^  typedef _Tp&       reference;$/;"	t	class:pthread_allocator	file:	access:public
reference	/Users/lij/.vim/stl/stl_alloc.h	/^  typedef _Tp&       reference;$/;"	t	class:allocator	access:public
reference	/Users/lij/.vim/stl/stl_alloc.h	/^  typedef _Tp&       reference;$/;"	t	struct:__allocator	access:public
reference	/Users/lij/.vim/stl/stl_bvector.h	/^  typedef _Bit_reference  reference;$/;"	t	struct:_Bit_iterator	access:public
reference	/Users/lij/.vim/stl/stl_bvector.h	/^  typedef _Bit_reference reference;$/;"	t	class:__BVECTOR	access:public
reference	/Users/lij/.vim/stl/stl_bvector.h	/^  typedef bool                 reference;$/;"	t	struct:_Bit_const_iterator	access:public
reference	/Users/lij/.vim/stl/stl_deque.h	/^  typedef _Ref reference;$/;"	t	struct:_Deque_iterator	access:public
reference	/Users/lij/.vim/stl/stl_deque.h	/^  typedef value_type& reference;$/;"	t	class:deque	access:public
reference	/Users/lij/.vim/stl/stl_hash_map.h	/^  typedef typename _Ht::reference reference;$/;"	t	class:hash_map	access:public
reference	/Users/lij/.vim/stl/stl_hash_map.h	/^  typedef typename _Ht::reference reference;$/;"	t	class:hash_multimap	access:public
reference	/Users/lij/.vim/stl/stl_hash_map.h	/^  typedef void                reference;$/;"	t	class:insert_iterator	access:public
reference	/Users/lij/.vim/stl/stl_hash_set.h	/^  typedef typename _Ht::const_reference reference;$/;"	t	class:hash_multiset	access:public
reference	/Users/lij/.vim/stl/stl_hash_set.h	/^  typedef typename _Ht::const_reference reference;$/;"	t	class:hash_set	access:public
reference	/Users/lij/.vim/stl/stl_hash_set.h	/^  typedef void                reference;$/;"	t	class:insert_iterator	access:public
reference	/Users/lij/.vim/stl/stl_hashtable.h	/^  typedef _Val& reference;$/;"	t	struct:_Hashtable_iterator	access:public
reference	/Users/lij/.vim/stl/stl_hashtable.h	/^  typedef const _Val& reference;$/;"	t	struct:_Hashtable_const_iterator	access:public
reference	/Users/lij/.vim/stl/stl_hashtable.h	/^  typedef value_type&       reference;$/;"	t	class:hashtable	access:public
reference	/Users/lij/.vim/stl/stl_iterator.h	/^          reference;$/;"	t	class:reverse_iterator	access:public
reference	/Users/lij/.vim/stl/stl_iterator.h	/^  typedef _Reference                 reference;$/;"	t	class:reverse_bidirectional_iterator	access:public
reference	/Users/lij/.vim/stl/stl_iterator.h	/^  typedef _Reference                 reference;$/;"	t	class:reverse_iterator	access:public
reference	/Users/lij/.vim/stl/stl_iterator.h	/^  typedef const _Tp&                     reference;$/;"	t	class:istream_iterator	access:public
reference	/Users/lij/.vim/stl/stl_iterator.h	/^  typedef const _Tp&          reference;$/;"	t	class:istream_iterator	access:public
reference	/Users/lij/.vim/stl/stl_iterator.h	/^  typedef void                           reference;$/;"	t	class:ostream_iterator	access:public
reference	/Users/lij/.vim/stl/stl_iterator.h	/^  typedef void                reference;$/;"	t	class:back_insert_iterator	access:public
reference	/Users/lij/.vim/stl/stl_iterator.h	/^  typedef void                reference;$/;"	t	class:front_insert_iterator	access:public
reference	/Users/lij/.vim/stl/stl_iterator.h	/^  typedef void                reference;$/;"	t	class:insert_iterator	access:public
reference	/Users/lij/.vim/stl/stl_iterator.h	/^  typedef void                reference;$/;"	t	class:ostream_iterator	access:public
reference	/Users/lij/.vim/stl/stl_iterator_base.h	/^  typedef _Reference reference;$/;"	t	struct:iterator	access:public
reference	/Users/lij/.vim/stl/stl_iterator_base.h	/^  typedef _Tp&                        reference;$/;"	t	struct:iterator_traits	access:public
reference	/Users/lij/.vim/stl/stl_iterator_base.h	/^  typedef _Tp&                       reference;$/;"	t	struct:bidirectional_iterator	access:public
reference	/Users/lij/.vim/stl/stl_iterator_base.h	/^  typedef _Tp&                       reference;$/;"	t	struct:random_access_iterator	access:public
reference	/Users/lij/.vim/stl/stl_iterator_base.h	/^  typedef _Tp&                 reference;$/;"	t	struct:forward_iterator	access:public
reference	/Users/lij/.vim/stl/stl_iterator_base.h	/^  typedef _Tp&               reference;$/;"	t	struct:input_iterator	access:public
reference	/Users/lij/.vim/stl/stl_iterator_base.h	/^  typedef const _Tp&                  reference;$/;"	t	struct:iterator_traits	access:public
reference	/Users/lij/.vim/stl/stl_iterator_base.h	/^  typedef typename _Iterator::reference         reference;$/;"	t	struct:iterator_traits	access:public
reference	/Users/lij/.vim/stl/stl_iterator_base.h	/^  typedef void                reference;$/;"	t	struct:output_iterator	access:public
reference	/Users/lij/.vim/stl/stl_list.h	/^  typedef _Ref reference;$/;"	t	struct:_List_iterator	access:public
reference	/Users/lij/.vim/stl/stl_list.h	/^  typedef value_type& reference;$/;"	t	class:list	access:public
reference	/Users/lij/.vim/stl/stl_map.h	/^  typedef typename _Rep_type::reference reference;$/;"	t	class:map	access:public
reference	/Users/lij/.vim/stl/stl_multimap.h	/^  typedef typename _Rep_type::reference reference;$/;"	t	class:multimap	access:public
reference	/Users/lij/.vim/stl/stl_multiset.h	/^  typedef typename _Rep_type::const_reference reference;$/;"	t	class:multiset	access:public
reference	/Users/lij/.vim/stl/stl_queue.h	/^  typedef typename _Sequence::reference       reference;$/;"	t	class:priority_queue	access:public
reference	/Users/lij/.vim/stl/stl_queue.h	/^  typedef typename _Sequence::reference       reference;$/;"	t	class:queue	access:public
reference	/Users/lij/.vim/stl/stl_raw_storage_iter.h	/^  typedef void                reference;$/;"	t	class:raw_storage_iterator	access:public
reference	/Users/lij/.vim/stl/stl_rope.h	/^        typedef _Rope_char_ref_proxy<_CharT,_Alloc> reference;$/;"	t	class:rope	access:public
reference	/Users/lij/.vim/stl/stl_rope.h	/^    typedef _CharT reference;   \/\/ Really a value.  Returning a reference$/;"	t	class:_Rope_const_iterator	access:public
reference	/Users/lij/.vim/stl/stl_rope.h	/^    typedef _Rope_char_ref_proxy<_CharT,_Alloc>  reference;$/;"	t	class:_Rope_iterator	access:public
reference	/Users/lij/.vim/stl/stl_set.h	/^  typedef typename _Rep_type::const_reference reference;$/;"	t	class:set	access:public
reference	/Users/lij/.vim/stl/stl_slist.h	/^  typedef _Ref             reference;$/;"	t	struct:_Slist_iterator	access:public
reference	/Users/lij/.vim/stl/stl_slist.h	/^  typedef value_type&       reference;$/;"	t	class:slist	access:public
reference	/Users/lij/.vim/stl/stl_slist.h	/^  typedef void                reference;$/;"	t	class:insert_iterator	access:public
reference	/Users/lij/.vim/stl/stl_stack.h	/^  typedef typename _Sequence::reference       reference;$/;"	t	class:stack	access:public
reference	/Users/lij/.vim/stl/stl_tree.h	/^  typedef _Ref reference;$/;"	t	struct:_Rb_tree_iterator	access:public
reference	/Users/lij/.vim/stl/stl_tree.h	/^  typedef value_type& reference;$/;"	t	class:_Rb_tree	access:public
reference	/Users/lij/.vim/stl/stl_vector.h	/^  typedef value_type& reference;$/;"	t	class:vector	access:public
reference	/Users/lij/.vim/stl/string	/^  typedef value_type& reference;$/;"	t	class:basic_string	file:	access:public
remove	/Users/lij/.vim/stl/stl_algo.h	/^_ForwardIter remove(_ForwardIter __first, _ForwardIter __last,$/;"	f	signature:(_ForwardIter __first, _ForwardIter __last, const _Tp& __value)
remove	/Users/lij/.vim/stl/stl_list.h	/^  void remove(const _Tp& __value);$/;"	p	class:list	access:public	signature:(const _Tp& __value)
remove	/Users/lij/.vim/stl/stl_list.h	/^void list<_Tp, _Alloc>::remove(const _Tp& __value)$/;"	f	class:list	signature:(const _Tp& __value)
remove	/Users/lij/.vim/stl/stl_slist.h	/^  void remove(const _Tp& __val); $/;"	p	class:slist	access:public	signature:(const _Tp& __val)
remove	/Users/lij/.vim/stl/stl_slist.h	/^void slist<_Tp,_Alloc>::remove(const _Tp& __val)$/;"	f	class:slist	signature:(const _Tp& __val)
remove_copy	/Users/lij/.vim/stl/stl_algo.h	/^_OutputIter remove_copy(_InputIter __first, _InputIter __last,$/;"	f	signature:(_InputIter __first, _InputIter __last, _OutputIter __result, const _Tp& __value)
remove_copy_if	/Users/lij/.vim/stl/stl_algo.h	/^_OutputIter remove_copy_if(_InputIter __first, _InputIter __last,$/;"	f	signature:(_InputIter __first, _InputIter __last, _OutputIter __result, _Predicate __pred)
remove_if	/Users/lij/.vim/stl/stl_algo.h	/^_ForwardIter remove_if(_ForwardIter __first, _ForwardIter __last,$/;"	f	signature:(_ForwardIter __first, _ForwardIter __last, _Predicate __pred)
remove_if	/Users/lij/.vim/stl/stl_list.h	/^  template <class _Predicate> void remove_if(_Predicate);$/;"	p	class:list	access:public	signature:(_Predicate)
remove_if	/Users/lij/.vim/stl/stl_list.h	/^void list<_Tp, _Alloc>::remove_if(_Predicate __pred)$/;"	f	class:list	signature:(_Predicate __pred)
remove_if	/Users/lij/.vim/stl/stl_slist.h	/^  void remove_if(_Predicate __pred);$/;"	p	class:slist	access:public	signature:(_Predicate __pred)
remove_if	/Users/lij/.vim/stl/stl_slist.h	/^void slist<_Tp,_Alloc>::remove_if(_Predicate __pred)$/;"	f	class:slist	signature:(_Predicate __pred)
rend	/Users/lij/.vim/stl/stl_bvector.h	/^  const_reverse_iterator rend() const { $/;"	f	class:__BVECTOR	access:public	signature:() const
rend	/Users/lij/.vim/stl/stl_bvector.h	/^  reverse_iterator rend() { return reverse_iterator(begin()); }$/;"	f	class:__BVECTOR	access:public	signature:()
rend	/Users/lij/.vim/stl/stl_deque.h	/^  const_reverse_iterator rend() const $/;"	f	class:deque	access:public	signature:() const
rend	/Users/lij/.vim/stl/stl_deque.h	/^  reverse_iterator rend() { return reverse_iterator(_M_start); }$/;"	f	class:deque	access:public	signature:()
rend	/Users/lij/.vim/stl/stl_list.h	/^  const_reverse_iterator rend() const$/;"	f	class:list	access:public	signature:() const
rend	/Users/lij/.vim/stl/stl_list.h	/^  reverse_iterator rend()$/;"	f	class:list	access:public	signature:()
rend	/Users/lij/.vim/stl/stl_map.h	/^  const_reverse_iterator rend() const { return _M_t.rend(); }$/;"	f	class:map	access:public	signature:() const
rend	/Users/lij/.vim/stl/stl_map.h	/^  reverse_iterator rend() { return _M_t.rend(); }$/;"	f	class:map	access:public	signature:()
rend	/Users/lij/.vim/stl/stl_multimap.h	/^  const_reverse_iterator rend() const { return _M_t.rend(); }$/;"	f	class:multimap	access:public	signature:() const
rend	/Users/lij/.vim/stl/stl_multimap.h	/^  reverse_iterator rend() { return _M_t.rend(); }$/;"	f	class:multimap	access:public	signature:()
rend	/Users/lij/.vim/stl/stl_multiset.h	/^  reverse_iterator rend() const { return _M_t.rend(); }$/;"	f	class:multiset	access:public	signature:() const
rend	/Users/lij/.vim/stl/stl_rope.h	/^            const_reverse_iterator rend() { return const_rend(); }$/;"	f	class:rope	access:public	signature:()
rend	/Users/lij/.vim/stl/stl_rope.h	/^            reverse_iterator rend() { return mutable_rend(); }$/;"	f	class:rope	access:public	signature:()
rend	/Users/lij/.vim/stl/stl_rope.h	/^        const_reverse_iterator rend() const {$/;"	f	class:rope	access:public	signature:() const
rend	/Users/lij/.vim/stl/stl_set.h	/^  reverse_iterator rend() const { return _M_t.rend(); }$/;"	f	class:set	access:public	signature:() const
rend	/Users/lij/.vim/stl/stl_tree.h	/^  const_reverse_iterator rend() const { $/;"	f	class:_Rb_tree	access:public	signature:() const
rend	/Users/lij/.vim/stl/stl_tree.h	/^  reverse_iterator rend() { return reverse_iterator(begin()); }$/;"	f	class:_Rb_tree	access:public	signature:()
rend	/Users/lij/.vim/stl/stl_vector.h	/^  const_reverse_iterator rend() const$/;"	f	class:vector	access:public	signature:() const
rend	/Users/lij/.vim/stl/stl_vector.h	/^  reverse_iterator rend()$/;"	f	class:vector	access:public	signature:()
rend	/Users/lij/.vim/stl/string	/^  const_reverse_iterator rend()   const $/;"	f	class:basic_string	access:public	signature:() const
rend	/Users/lij/.vim/stl/string	/^  reverse_iterator rend()               $/;"	f	class:basic_string	access:public	signature:()
replace	/Users/lij/.vim/stl/stl_algo.h	/^void replace(_ForwardIter __first, _ForwardIter __last,$/;"	f	signature:(_ForwardIter __first, _ForwardIter __last, const _Tp& __old_value, const _Tp& __new_value)
replace	/Users/lij/.vim/stl/stl_rope.h	/^        static _RopeRep* replace(_RopeRep* __old, size_t __pos1,$/;"	f	class:rope	access:protected	signature:(_RopeRep* __old, size_t __pos1, size_t __pos2, _RopeRep* __r)
replace	/Users/lij/.vim/stl/stl_rope.h	/^        void replace(const iterator& __p, _CharT __c)$/;"	f	class:rope	access:public	signature:(const iterator& __p, _CharT __c)
replace	/Users/lij/.vim/stl/stl_rope.h	/^        void replace(const iterator& __p, const _CharT* __c_string)$/;"	f	class:rope	access:public	signature:(const iterator& __p, const _CharT* __c_string)
replace	/Users/lij/.vim/stl/stl_rope.h	/^        void replace(const iterator& __p, const _CharT* __i, const _CharT* __j)$/;"	f	class:rope	access:public	signature:(const iterator& __p, const _CharT* __i, const _CharT* __j)
replace	/Users/lij/.vim/stl/stl_rope.h	/^        void replace(const iterator& __p, const _CharT* __i, size_t __n)$/;"	f	class:rope	access:public	signature:(const iterator& __p, const _CharT* __i, size_t __n)
replace	/Users/lij/.vim/stl/stl_rope.h	/^        void replace(const iterator& __p, const iterator& __q, _CharT __c)$/;"	f	class:rope	access:public	signature:(const iterator& __p, const iterator& __q, _CharT __c)
replace	/Users/lij/.vim/stl/stl_rope.h	/^        void replace(const iterator& __p, const iterator& __q,$/;"	f	class:rope	access:public	signature:(const iterator& __p, const iterator& __q, const _CharT* __c_string)
replace	/Users/lij/.vim/stl/stl_rope.h	/^        void replace(const iterator& __p, const iterator& __q,$/;"	f	class:rope	access:public	signature:(const iterator& __p, const iterator& __q, const _CharT* __i, const _CharT* __j)
replace	/Users/lij/.vim/stl/stl_rope.h	/^        void replace(const iterator& __p, const iterator& __q,$/;"	f	class:rope	access:public	signature:(const iterator& __p, const iterator& __q, const _CharT* __i, size_t __n)
replace	/Users/lij/.vim/stl/stl_rope.h	/^        void replace(const iterator& __p, const iterator& __q,$/;"	f	class:rope	access:public	signature:(const iterator& __p, const iterator& __q, const const_iterator& __i, const const_iterator& __j)
replace	/Users/lij/.vim/stl/stl_rope.h	/^        void replace(const iterator& __p, const iterator& __q,$/;"	f	class:rope	access:public	signature:(const iterator& __p, const iterator& __q, const iterator& __i, const iterator& __j)
replace	/Users/lij/.vim/stl/stl_rope.h	/^        void replace(const iterator& __p, const iterator& __q,$/;"	f	class:rope	access:public	signature:(const iterator& __p, const iterator& __q, const rope& __r)
replace	/Users/lij/.vim/stl/stl_rope.h	/^        void replace(const iterator& __p, const rope& __r)$/;"	f	class:rope	access:public	signature:(const iterator& __p, const rope& __r)
replace	/Users/lij/.vim/stl/stl_rope.h	/^        void replace(const iterator& __p, const_iterator __i, $/;"	f	class:rope	access:public	signature:(const iterator& __p, const_iterator __i, const_iterator __j)
replace	/Users/lij/.vim/stl/stl_rope.h	/^        void replace(const iterator& __p, iterator __i, iterator __j)$/;"	f	class:rope	access:public	signature:(const iterator& __p, iterator __i, iterator __j)
replace	/Users/lij/.vim/stl/stl_rope.h	/^        void replace(size_t __p, _CharT __c) {$/;"	f	class:rope	access:public	signature:(size_t __p, _CharT __c)
replace	/Users/lij/.vim/stl/stl_rope.h	/^        void replace(size_t __p, const _CharT* __c_string) {$/;"	f	class:rope	access:public	signature:(size_t __p, const _CharT* __c_string)
replace	/Users/lij/.vim/stl/stl_rope.h	/^        void replace(size_t __p, const _CharT* __i, const _CharT* __j) {$/;"	f	class:rope	access:public	signature:(size_t __p, const _CharT* __i, const _CharT* __j)
replace	/Users/lij/.vim/stl/stl_rope.h	/^        void replace(size_t __p, const _CharT* __i, size_t __i_len) {$/;"	f	class:rope	access:public	signature:(size_t __p, const _CharT* __i, size_t __i_len)
replace	/Users/lij/.vim/stl/stl_rope.h	/^        void replace(size_t __p, const const_iterator& __i,$/;"	f	class:rope	access:public	signature:(size_t __p, const const_iterator& __i, const const_iterator& __j)
replace	/Users/lij/.vim/stl/stl_rope.h	/^        void replace(size_t __p, const iterator& __i,$/;"	f	class:rope	access:public	signature:(size_t __p, const iterator& __i, const iterator& __j)
replace	/Users/lij/.vim/stl/stl_rope.h	/^        void replace(size_t __p, const rope& __r) {$/;"	f	class:rope	access:public	signature:(size_t __p, const rope& __r)
replace	/Users/lij/.vim/stl/stl_rope.h	/^        void replace(size_t __p, size_t __n, $/;"	f	class:rope	access:public	signature:(size_t __p, size_t __n, const _CharT* __i, const _CharT* __j)
replace	/Users/lij/.vim/stl/stl_rope.h	/^        void replace(size_t __p, size_t __n, $/;"	f	class:rope	access:public	signature:(size_t __p, size_t __n, const _CharT* __i, size_t __i_len)
replace	/Users/lij/.vim/stl/stl_rope.h	/^        void replace(size_t __p, size_t __n, _CharT __c) {$/;"	f	class:rope	access:public	signature:(size_t __p, size_t __n, _CharT __c)
replace	/Users/lij/.vim/stl/stl_rope.h	/^        void replace(size_t __p, size_t __n, const _CharT* __c_string) {$/;"	f	class:rope	access:public	signature:(size_t __p, size_t __n, const _CharT* __c_string)
replace	/Users/lij/.vim/stl/stl_rope.h	/^        void replace(size_t __p, size_t __n, const rope& __r) {$/;"	f	class:rope	access:public	signature:(size_t __p, size_t __n, const rope& __r)
replace	/Users/lij/.vim/stl/stl_rope.h	/^        void replace(size_t __p, size_t __n,$/;"	f	class:rope	access:public	signature:(size_t __p, size_t __n, const const_iterator& __i, const const_iterator& __j)
replace	/Users/lij/.vim/stl/stl_rope.h	/^        void replace(size_t __p, size_t __n,$/;"	f	class:rope	access:public	signature:(size_t __p, size_t __n, const iterator& __i, const iterator& __j)
replace	/Users/lij/.vim/stl/string	/^  ::replace(iterator __first, iterator __last, _InputIter __f, _InputIter __l,$/;"	f	class:basic_string	signature:(iterator __first, iterator __last, _InputIter __f, _InputIter __l, input_iterator_tag)
replace	/Users/lij/.vim/stl/string	/^  ::replace(iterator __first, iterator __last, size_type __n, _CharT __c)$/;"	f	class:basic_string	signature:(iterator __first, iterator __last, size_type __n, _CharT __c)
replace	/Users/lij/.vim/stl/string	/^  ::replace(iterator __first, iterator __last,$/;"	f	class:basic_string	signature:(iterator __first, iterator __last, _ForwardIter __f, _ForwardIter __l, forward_iterator_tag)
replace	/Users/lij/.vim/stl/string	/^  ::replace(iterator __first, iterator __last,$/;"	f	class:basic_string	signature:(iterator __first, iterator __last, const _CharT* __f, const _CharT* __l)
replace	/Users/lij/.vim/stl/string	/^  basic_string& replace(iterator __first, iterator __last, $/;"	f	class:basic_string	access:public	signature:(iterator __first, iterator __last, const basic_string& __s)
replace	/Users/lij/.vim/stl/string	/^  basic_string& replace(iterator __first, iterator __last, $/;"	p	class:basic_string	file:	access:public	signature:(iterator __first, iterator __last, size_type __n, _CharT __c)
replace	/Users/lij/.vim/stl/string	/^  basic_string& replace(iterator __first, iterator __last,$/;"	f	class:basic_string	access:public	signature:(iterator __first, iterator __last, _InputIter __f, _InputIter __l)
replace	/Users/lij/.vim/stl/string	/^  basic_string& replace(iterator __first, iterator __last,$/;"	f	class:basic_string	access:public	signature:(iterator __first, iterator __last, const _CharT* __s)
replace	/Users/lij/.vim/stl/string	/^  basic_string& replace(iterator __first, iterator __last,$/;"	f	class:basic_string	access:public	signature:(iterator __first, iterator __last, const _CharT* __s, size_type __n)
replace	/Users/lij/.vim/stl/string	/^  basic_string& replace(iterator __first, iterator __last,$/;"	p	class:basic_string	file:	access:private	signature:(iterator __first, iterator __last, _ForwardIter __f, _ForwardIter __l, forward_iterator_tag)
replace	/Users/lij/.vim/stl/string	/^  basic_string& replace(iterator __first, iterator __last,$/;"	p	class:basic_string	file:	access:private	signature:(iterator __first, iterator __last, _InputIter __f, _InputIter __l, input_iterator_tag)
replace	/Users/lij/.vim/stl/string	/^  basic_string& replace(iterator __first, iterator __last,$/;"	p	class:basic_string	file:	access:public	signature:(iterator __first, iterator __last, const _CharT* __f, const _CharT* __l)
replace	/Users/lij/.vim/stl/string	/^  basic_string& replace(size_type __pos, size_type __n, $/;"	f	class:basic_string	access:public	signature:(size_type __pos, size_type __n, const basic_string& __s)
replace	/Users/lij/.vim/stl/string	/^  basic_string& replace(size_type __pos, size_type __n1,$/;"	f	class:basic_string	access:public	signature:(size_type __pos, size_type __n1, const _CharT* __s)
replace	/Users/lij/.vim/stl/string	/^  basic_string& replace(size_type __pos, size_type __n1,$/;"	f	class:basic_string	access:public	signature:(size_type __pos, size_type __n1, const _CharT* __s, size_type __n2)
replace	/Users/lij/.vim/stl/string	/^  basic_string& replace(size_type __pos, size_type __n1,$/;"	f	class:basic_string	access:public	signature:(size_type __pos, size_type __n1, size_type __n2, _CharT __c)
replace	/Users/lij/.vim/stl/string	/^  basic_string& replace(size_type __pos1, size_type __n1,$/;"	f	class:basic_string	access:public	signature:(size_type __pos1, size_type __n1, const basic_string& __s, size_type __pos2, size_type __n2)
replace_copy	/Users/lij/.vim/stl/stl_algo.h	/^_OutputIter replace_copy(_InputIter __first, _InputIter __last,$/;"	f	signature:(_InputIter __first, _InputIter __last, _OutputIter __result, const _Tp& __old_value, const _Tp& __new_value)
replace_copy_if	/Users/lij/.vim/stl/stl_algo.h	/^_OutputIter replace_copy_if(_InputIter __first, _InputIter __last,$/;"	f	signature:(_InputIter __first, _InputIter __last, _OutputIter __result, _Predicate __pred, const _Tp& __new_value)
replace_if	/Users/lij/.vim/stl/stl_algo.h	/^void replace_if(_ForwardIter __first, _ForwardIter __last,$/;"	f	signature:(_ForwardIter __first, _ForwardIter __last, _Predicate __pred, const _Tp& __new_value)
replace_with_c_str	/Users/lij/.vim/stl/ropeimpl.h	/^const _CharT* rope<_CharT,_Alloc>::replace_with_c_str() {$/;"	f	class:rope	signature:()
replace_with_c_str	/Users/lij/.vim/stl/stl_rope.h	/^        const _CharT* replace_with_c_str();$/;"	p	class:rope	access:public	signature:()
requested_size	/Users/lij/.vim/stl/stl_tempbuf.h	/^  ptrdiff_t requested_size() const { return _M_original_len; }$/;"	f	class:_Temporary_buffer	access:public	signature:() const
reserve	/Users/lij/.vim/stl/stl_bvector.h	/^  void reserve(size_type __n) {$/;"	f	class:__BVECTOR	access:public	signature:(size_type __n)
reserve	/Users/lij/.vim/stl/stl_rope.h	/^            void reserve(size_type __res_arg = 0) {}$/;"	f	class:rope	access:public	signature:(size_type __res_arg = 0)
reserve	/Users/lij/.vim/stl/stl_vector.h	/^  void reserve(size_type __n) {$/;"	f	class:vector	access:public	signature:(size_type __n)
reserve	/Users/lij/.vim/stl/string	/^  void reserve(size_type = 0);$/;"	p	class:basic_string	file:	access:public	signature:(size_type = 0)
reserve	/Users/lij/.vim/stl/string	/^void basic_string<_CharT,_Traits,_Alloc>::reserve(size_type __res_arg) {$/;"	f	class:basic_string	signature:(size_type __res_arg)
reset	/Users/lij/.vim/stl/bitset	/^  bitset<_Nb>& reset() {$/;"	f	class:bitset	access:public	signature:()
reset	/Users/lij/.vim/stl/bitset	/^  bitset<_Nb>& reset(size_t __pos) {$/;"	f	class:bitset	access:public	signature:(size_t __pos)
resize	/Users/lij/.vim/stl/stl_bvector.h	/^  void resize(size_type __new_size, bool __x = bool()) {$/;"	f	class:__BVECTOR	access:public	signature:(size_type __new_size, bool __x = bool())
resize	/Users/lij/.vim/stl/stl_deque.h	/^  void resize(size_type __new_size, const value_type& __x) {$/;"	f	class:deque	access:public	signature:(size_type __new_size, const value_type& __x)
resize	/Users/lij/.vim/stl/stl_deque.h	/^  void resize(size_type new_size) { resize(new_size, value_type()); }$/;"	f	class:deque	access:public	signature:(size_type new_size)
resize	/Users/lij/.vim/stl/stl_hash_map.h	/^  void resize(size_type __hint) { _M_ht.resize(__hint); }$/;"	f	class:hash_map	access:public	signature:(size_type __hint)
resize	/Users/lij/.vim/stl/stl_hash_map.h	/^  void resize(size_type __hint) { _M_ht.resize(__hint); }$/;"	f	class:hash_multimap	access:public	signature:(size_type __hint)
resize	/Users/lij/.vim/stl/stl_hash_set.h	/^  void resize(size_type __hint) { _M_ht.resize(__hint); }$/;"	f	class:hash_multiset	access:public	signature:(size_type __hint)
resize	/Users/lij/.vim/stl/stl_hash_set.h	/^  void resize(size_type __hint) { _M_ht.resize(__hint); }$/;"	f	class:hash_set	access:public	signature:(size_type __hint)
resize	/Users/lij/.vim/stl/stl_hashtable.h	/^  ::resize(size_type __num_elements_hint)$/;"	f	class:hashtable	signature:(size_type __num_elements_hint)
resize	/Users/lij/.vim/stl/stl_hashtable.h	/^  void resize(size_type __num_elements_hint);$/;"	p	class:hashtable	access:public	signature:(size_type __num_elements_hint)
resize	/Users/lij/.vim/stl/stl_list.h	/^  void resize(size_type __new_size) { this->resize(__new_size, _Tp()); }$/;"	f	class:list	access:public	signature:(size_type __new_size)
resize	/Users/lij/.vim/stl/stl_list.h	/^  void resize(size_type __new_size, const _Tp& __x);$/;"	p	class:list	access:public	signature:(size_type __new_size, const _Tp& __x)
resize	/Users/lij/.vim/stl/stl_list.h	/^void list<_Tp, _Alloc>::resize(size_type __new_size, const _Tp& __x)$/;"	f	class:list	signature:(size_type __new_size, const _Tp& __x)
resize	/Users/lij/.vim/stl/stl_rope.h	/^            void resize(size_type __n) {}$/;"	f	class:rope	access:public	signature:(size_type __n)
resize	/Users/lij/.vim/stl/stl_rope.h	/^            void resize(size_type __n, _CharT __c) {}$/;"	f	class:rope	access:public	signature:(size_type __n, _CharT __c)
resize	/Users/lij/.vim/stl/stl_slist.h	/^  void resize(size_type new_size) { resize(new_size, _Tp()); }$/;"	f	class:slist	access:public	signature:(size_type new_size)
resize	/Users/lij/.vim/stl/stl_slist.h	/^  void resize(size_type new_size, const _Tp& __x);$/;"	p	class:slist	access:public	signature:(size_type new_size, const _Tp& __x)
resize	/Users/lij/.vim/stl/stl_slist.h	/^void slist<_Tp,_Alloc>::resize(size_type __len, const _Tp& __x)$/;"	f	class:slist	signature:(size_type __len, const _Tp& __x)
resize	/Users/lij/.vim/stl/stl_vector.h	/^  void resize(size_type __new_size) { resize(__new_size, _Tp()); }$/;"	f	class:vector	access:public	signature:(size_type __new_size)
resize	/Users/lij/.vim/stl/stl_vector.h	/^  void resize(size_type __new_size, const _Tp& __x) {$/;"	f	class:vector	access:public	signature:(size_type __new_size, const _Tp& __x)
resize	/Users/lij/.vim/stl/string	/^  void resize(size_type __n) { resize(__n, _M_null()); }$/;"	f	class:basic_string	access:public	signature:(size_type __n)
resize	/Users/lij/.vim/stl/string	/^  void resize(size_type __n, _CharT __c) {$/;"	f	class:basic_string	access:public	signature:(size_type __n, _CharT __c)
resize	/Users/lij/.vim/stl/valarray	/^  void resize(size_t __n, value_type __x = value_type()) {$/;"	f	class:valarray	access:public	signature:(size_t __n, value_type __x = value_type())
result_type	/Users/lij/.vim/stl/stl_function.h	/^  typedef  _Result  result_type;$/;"	t	struct:_Constant_unary_fun	access:public
result_type	/Users/lij/.vim/stl/stl_function.h	/^  typedef  _Result result_type;$/;"	t	struct:_Constant_binary_fun	access:public
result_type	/Users/lij/.vim/stl/stl_function.h	/^  typedef _Result result_type;$/;"	t	struct:_Constant_void_fun	access:public
result_type	/Users/lij/.vim/stl/stl_function.h	/^  typedef _Result result_type;$/;"	t	struct:binary_function	access:public
result_type	/Users/lij/.vim/stl/stl_function.h	/^  typedef _Result result_type;$/;"	t	struct:unary_function	access:public
return_temporary_buffer	/Users/lij/.vim/stl/stl_tempbuf.h	/^void return_temporary_buffer(_Tp* __p) {$/;"	f	signature:(_Tp* __p)
reverse	/Users/lij/.vim/stl/stl_algo.h	/^inline void reverse(_BidirectionalIter __first, _BidirectionalIter __last) {$/;"	f	signature:(_BidirectionalIter __first, _BidirectionalIter __last)
reverse	/Users/lij/.vim/stl/stl_list.h	/^  void reverse();$/;"	p	class:list	access:public	signature:()
reverse	/Users/lij/.vim/stl/stl_list.h	/^inline void list<_Tp, _Alloc>::reverse() $/;"	f	class:list	signature:()
reverse	/Users/lij/.vim/stl/stl_slist.h	/^  void reverse() { $/;"	f	class:slist	access:public	signature:()
reverse_bidirectional_iterator	/Users/lij/.vim/stl/stl_iterator.h	/^  explicit reverse_bidirectional_iterator(_BidirectionalIterator __x)$/;"	f	class:reverse_bidirectional_iterator	access:public	signature:(_BidirectionalIterator __x)
reverse_bidirectional_iterator	/Users/lij/.vim/stl/stl_iterator.h	/^  reverse_bidirectional_iterator() {}$/;"	f	class:reverse_bidirectional_iterator	access:public	signature:()
reverse_bidirectional_iterator	/Users/lij/.vim/stl/stl_iterator.h	/^class reverse_bidirectional_iterator {$/;"	c
reverse_bidirectional_iterator::_Self	/Users/lij/.vim/stl/stl_iterator.h	/^                                         _Reference, _Distance>  _Self;$/;"	t	class:reverse_bidirectional_iterator	access:private
reverse_bidirectional_iterator::base	/Users/lij/.vim/stl/stl_iterator.h	/^  _BidirectionalIterator base() const { return current; }$/;"	f	class:reverse_bidirectional_iterator	access:public	signature:() const
reverse_bidirectional_iterator::current	/Users/lij/.vim/stl/stl_iterator.h	/^  _BidirectionalIterator current;$/;"	m	class:reverse_bidirectional_iterator	access:protected
reverse_bidirectional_iterator::difference_type	/Users/lij/.vim/stl/stl_iterator.h	/^  typedef _Distance                  difference_type;$/;"	t	class:reverse_bidirectional_iterator	access:public
reverse_bidirectional_iterator::iterator_category	/Users/lij/.vim/stl/stl_iterator.h	/^  typedef bidirectional_iterator_tag iterator_category;$/;"	t	class:reverse_bidirectional_iterator	access:public
reverse_bidirectional_iterator::operator *	/Users/lij/.vim/stl/stl_iterator.h	/^  _Reference operator*() const {$/;"	f	class:reverse_bidirectional_iterator	access:public	signature:() const
reverse_bidirectional_iterator::operator ++	/Users/lij/.vim/stl/stl_iterator.h	/^  _Self operator++(int) {$/;"	f	class:reverse_bidirectional_iterator	access:public	signature:(int)
reverse_bidirectional_iterator::operator ++	/Users/lij/.vim/stl/stl_iterator.h	/^  _Self& operator++() {$/;"	f	class:reverse_bidirectional_iterator	access:public	signature:()
reverse_bidirectional_iterator::operator --	/Users/lij/.vim/stl/stl_iterator.h	/^  _Self operator--(int) {$/;"	f	class:reverse_bidirectional_iterator	access:public	signature:(int)
reverse_bidirectional_iterator::operator --	/Users/lij/.vim/stl/stl_iterator.h	/^  _Self& operator--() {$/;"	f	class:reverse_bidirectional_iterator	access:public	signature:()
reverse_bidirectional_iterator::operator ->	/Users/lij/.vim/stl/stl_iterator.h	/^  pointer operator->() const { return &(operator*()); }$/;"	f	class:reverse_bidirectional_iterator	access:public	signature:() const
reverse_bidirectional_iterator::pointer	/Users/lij/.vim/stl/stl_iterator.h	/^  typedef _Tp*                       pointer;$/;"	t	class:reverse_bidirectional_iterator	access:public
reverse_bidirectional_iterator::reference	/Users/lij/.vim/stl/stl_iterator.h	/^  typedef _Reference                 reference;$/;"	t	class:reverse_bidirectional_iterator	access:public
reverse_bidirectional_iterator::reverse_bidirectional_iterator	/Users/lij/.vim/stl/stl_iterator.h	/^  explicit reverse_bidirectional_iterator(_BidirectionalIterator __x)$/;"	f	class:reverse_bidirectional_iterator	access:public	signature:(_BidirectionalIterator __x)
reverse_bidirectional_iterator::reverse_bidirectional_iterator	/Users/lij/.vim/stl/stl_iterator.h	/^  reverse_bidirectional_iterator() {}$/;"	f	class:reverse_bidirectional_iterator	access:public	signature:()
reverse_bidirectional_iterator::value_type	/Users/lij/.vim/stl/stl_iterator.h	/^  typedef _Tp                        value_type;$/;"	t	class:reverse_bidirectional_iterator	access:public
reverse_copy	/Users/lij/.vim/stl/stl_algo.h	/^_OutputIter reverse_copy(_BidirectionalIter __first,$/;"	f	signature:(_BidirectionalIter __first, _BidirectionalIter __last, _OutputIter __result)
reverse_iterator	/Users/lij/.vim/stl/container_concepts.h	/^__STL_TYPEDEF_REQUIREMENT(reverse_iterator);$/;"	v
reverse_iterator	/Users/lij/.vim/stl/stl_bvector.h	/^          reverse_iterator;$/;"	t	class:__BVECTOR	access:public
reverse_iterator	/Users/lij/.vim/stl/stl_bvector.h	/^  typedef reverse_iterator<iterator> reverse_iterator;$/;"	t	class:__BVECTOR	access:public
reverse_iterator	/Users/lij/.vim/stl/stl_deque.h	/^          reverse_iterator; $/;"	t	class:deque	access:public
reverse_iterator	/Users/lij/.vim/stl/stl_deque.h	/^  typedef reverse_iterator<iterator> reverse_iterator;$/;"	t	class:deque	access:public
reverse_iterator	/Users/lij/.vim/stl/stl_iterator.h	/^  explicit reverse_iterator(_RandomAccessIterator __x) : current(__x) {}$/;"	f	class:reverse_iterator	access:public	signature:(_RandomAccessIterator __x)
reverse_iterator	/Users/lij/.vim/stl/stl_iterator.h	/^  explicit reverse_iterator(iterator_type __x) : current(__x) {}$/;"	f	class:reverse_iterator	access:public	signature:(iterator_type __x)
reverse_iterator	/Users/lij/.vim/stl/stl_iterator.h	/^  reverse_iterator() {}$/;"	f	class:reverse_iterator	access:public	signature:()
reverse_iterator	/Users/lij/.vim/stl/stl_iterator.h	/^  reverse_iterator(const _Self& __x) : current(__x.current) {}$/;"	f	class:reverse_iterator	access:public	signature:(const _Self& __x)
reverse_iterator	/Users/lij/.vim/stl/stl_iterator.h	/^  reverse_iterator(const reverse_iterator<_Iter>& __x)$/;"	f	class:reverse_iterator	access:public	signature:(const reverse_iterator<_Iter>& __x)
reverse_iterator	/Users/lij/.vim/stl/stl_iterator.h	/^class reverse_iterator $/;"	c
reverse_iterator	/Users/lij/.vim/stl/stl_iterator.h	/^class reverse_iterator {$/;"	c
reverse_iterator	/Users/lij/.vim/stl/stl_list.h	/^          reverse_iterator; $/;"	t	class:list	access:public
reverse_iterator	/Users/lij/.vim/stl/stl_list.h	/^  typedef reverse_iterator<iterator>       reverse_iterator;$/;"	t	class:list	access:public
reverse_iterator	/Users/lij/.vim/stl/stl_map.h	/^  typedef typename _Rep_type::reverse_iterator reverse_iterator;$/;"	t	class:map	access:public
reverse_iterator	/Users/lij/.vim/stl/stl_multimap.h	/^  typedef typename _Rep_type::reverse_iterator reverse_iterator;$/;"	t	class:multimap	access:public
reverse_iterator	/Users/lij/.vim/stl/stl_multiset.h	/^  typedef typename _Rep_type::const_reverse_iterator reverse_iterator;$/;"	t	class:multiset	access:public
reverse_iterator	/Users/lij/.vim/stl/stl_rope.h	/^                                 difference_type>  reverse_iterator;$/;"	t	class:rope	access:public
reverse_iterator	/Users/lij/.vim/stl/stl_rope.h	/^        typedef reverse_iterator<iterator> reverse_iterator;$/;"	t	class:rope	access:public
reverse_iterator	/Users/lij/.vim/stl/stl_set.h	/^  typedef typename _Rep_type::const_reverse_iterator reverse_iterator;$/;"	t	class:set	access:public
reverse_iterator	/Users/lij/.vim/stl/stl_tree.h	/^          reverse_iterator; $/;"	t	class:_Rb_tree	access:public
reverse_iterator	/Users/lij/.vim/stl/stl_tree.h	/^  typedef reverse_iterator<iterator> reverse_iterator;$/;"	t	class:_Rb_tree	access:public
reverse_iterator	/Users/lij/.vim/stl/stl_vector.h	/^          reverse_iterator;$/;"	t	class:vector	access:public
reverse_iterator	/Users/lij/.vim/stl/stl_vector.h	/^  typedef reverse_iterator<iterator> reverse_iterator;$/;"	t	class:vector	access:public
reverse_iterator	/Users/lij/.vim/stl/string	/^          reverse_iterator; $/;"	t	class:basic_string	file:	access:public
reverse_iterator	/Users/lij/.vim/stl/string	/^  typedef reverse_iterator<iterator>       reverse_iterator;$/;"	t	class:basic_string	file:	access:public
reverse_iterator::_Self	/Users/lij/.vim/stl/stl_iterator.h	/^        _Self;$/;"	t	class:reverse_iterator	access:private
reverse_iterator::_Self	/Users/lij/.vim/stl/stl_iterator.h	/^  typedef reverse_iterator<_Iterator> _Self;$/;"	t	class:reverse_iterator	access:public
reverse_iterator::base	/Users/lij/.vim/stl/stl_iterator.h	/^  _RandomAccessIterator base() const { return current; }$/;"	f	class:reverse_iterator	access:public	signature:() const
reverse_iterator::base	/Users/lij/.vim/stl/stl_iterator.h	/^  iterator_type base() const { return current; }$/;"	f	class:reverse_iterator	access:public	signature:() const
reverse_iterator::current	/Users/lij/.vim/stl/stl_iterator.h	/^  _Iterator current;$/;"	m	class:reverse_iterator	access:protected
reverse_iterator::current	/Users/lij/.vim/stl/stl_iterator.h	/^  _RandomAccessIterator current;$/;"	m	class:reverse_iterator	access:protected
reverse_iterator::difference_type	/Users/lij/.vim/stl/stl_iterator.h	/^          difference_type;$/;"	t	class:reverse_iterator	access:public
reverse_iterator::difference_type	/Users/lij/.vim/stl/stl_iterator.h	/^  typedef _Distance                  difference_type;$/;"	t	class:reverse_iterator	access:public
reverse_iterator::iterator_category	/Users/lij/.vim/stl/stl_iterator.h	/^          iterator_category;$/;"	t	class:reverse_iterator	access:public
reverse_iterator::iterator_category	/Users/lij/.vim/stl/stl_iterator.h	/^  typedef random_access_iterator_tag iterator_category;$/;"	t	class:reverse_iterator	access:public
reverse_iterator::iterator_type	/Users/lij/.vim/stl/stl_iterator.h	/^  typedef _Iterator iterator_type;$/;"	t	class:reverse_iterator	access:public
reverse_iterator::operator *	/Users/lij/.vim/stl/stl_iterator.h	/^  _Reference operator*() const { return *(current - 1); }$/;"	f	class:reverse_iterator	access:public	signature:() const
reverse_iterator::operator *	/Users/lij/.vim/stl/stl_iterator.h	/^  reference operator*() const {$/;"	f	class:reverse_iterator	access:public	signature:() const
reverse_iterator::operator +	/Users/lij/.vim/stl/stl_iterator.h	/^  _Self operator+(_Distance __n) const {$/;"	f	class:reverse_iterator	access:public	signature:(_Distance __n) const
reverse_iterator::operator +	/Users/lij/.vim/stl/stl_iterator.h	/^  _Self operator+(difference_type __n) const {$/;"	f	class:reverse_iterator	access:public	signature:(difference_type __n) const
reverse_iterator::operator ++	/Users/lij/.vim/stl/stl_iterator.h	/^  _Self operator++(int) {$/;"	f	class:reverse_iterator	access:public	signature:(int)
reverse_iterator::operator ++	/Users/lij/.vim/stl/stl_iterator.h	/^  _Self& operator++() {$/;"	f	class:reverse_iterator	access:public	signature:()
reverse_iterator::operator +=	/Users/lij/.vim/stl/stl_iterator.h	/^  _Self& operator+=(_Distance __n) {$/;"	f	class:reverse_iterator	access:public	signature:(_Distance __n)
reverse_iterator::operator +=	/Users/lij/.vim/stl/stl_iterator.h	/^  _Self& operator+=(difference_type __n) {$/;"	f	class:reverse_iterator	access:public	signature:(difference_type __n)
reverse_iterator::operator -	/Users/lij/.vim/stl/stl_iterator.h	/^  _Self operator-(_Distance __n) const {$/;"	f	class:reverse_iterator	access:public	signature:(_Distance __n) const
reverse_iterator::operator -	/Users/lij/.vim/stl/stl_iterator.h	/^  _Self operator-(difference_type __n) const {$/;"	f	class:reverse_iterator	access:public	signature:(difference_type __n) const
reverse_iterator::operator --	/Users/lij/.vim/stl/stl_iterator.h	/^  _Self operator--(int) {$/;"	f	class:reverse_iterator	access:public	signature:(int)
reverse_iterator::operator --	/Users/lij/.vim/stl/stl_iterator.h	/^  _Self& operator--() {$/;"	f	class:reverse_iterator	access:public	signature:()
reverse_iterator::operator -=	/Users/lij/.vim/stl/stl_iterator.h	/^  _Self& operator-=(_Distance __n) {$/;"	f	class:reverse_iterator	access:public	signature:(_Distance __n)
reverse_iterator::operator -=	/Users/lij/.vim/stl/stl_iterator.h	/^  _Self& operator-=(difference_type __n) {$/;"	f	class:reverse_iterator	access:public	signature:(difference_type __n)
reverse_iterator::operator ->	/Users/lij/.vim/stl/stl_iterator.h	/^  pointer operator->() const { return &(operator*()); }$/;"	f	class:reverse_iterator	access:public	signature:() const
reverse_iterator::operator []	/Users/lij/.vim/stl/stl_iterator.h	/^  _Reference operator[](_Distance __n) const { return *(*this + __n); }$/;"	f	class:reverse_iterator	access:public	signature:(_Distance __n) const
reverse_iterator::operator []	/Users/lij/.vim/stl/stl_iterator.h	/^  reference operator[](difference_type __n) const { return *(*this + __n); }  $/;"	f	class:reverse_iterator	access:public	signature:(difference_type __n) const
reverse_iterator::pointer	/Users/lij/.vim/stl/stl_iterator.h	/^          pointer;$/;"	t	class:reverse_iterator	access:public
reverse_iterator::pointer	/Users/lij/.vim/stl/stl_iterator.h	/^  typedef _Tp*                       pointer;$/;"	t	class:reverse_iterator	access:public
reverse_iterator::reference	/Users/lij/.vim/stl/stl_iterator.h	/^          reference;$/;"	t	class:reverse_iterator	access:public
reverse_iterator::reference	/Users/lij/.vim/stl/stl_iterator.h	/^  typedef _Reference                 reference;$/;"	t	class:reverse_iterator	access:public
reverse_iterator::reverse_iterator	/Users/lij/.vim/stl/stl_iterator.h	/^  explicit reverse_iterator(_RandomAccessIterator __x) : current(__x) {}$/;"	f	class:reverse_iterator	access:public	signature:(_RandomAccessIterator __x)
reverse_iterator::reverse_iterator	/Users/lij/.vim/stl/stl_iterator.h	/^  explicit reverse_iterator(iterator_type __x) : current(__x) {}$/;"	f	class:reverse_iterator	access:public	signature:(iterator_type __x)
reverse_iterator::reverse_iterator	/Users/lij/.vim/stl/stl_iterator.h	/^  reverse_iterator() {}$/;"	f	class:reverse_iterator	access:public	signature:()
reverse_iterator::reverse_iterator	/Users/lij/.vim/stl/stl_iterator.h	/^  reverse_iterator(const _Self& __x) : current(__x.current) {}$/;"	f	class:reverse_iterator	access:public	signature:(const _Self& __x)
reverse_iterator::reverse_iterator	/Users/lij/.vim/stl/stl_iterator.h	/^  reverse_iterator(const reverse_iterator<_Iter>& __x)$/;"	f	class:reverse_iterator	access:public	signature:(const reverse_iterator<_Iter>& __x)
reverse_iterator::value_type	/Users/lij/.vim/stl/stl_iterator.h	/^          value_type;$/;"	t	class:reverse_iterator	access:public
reverse_iterator::value_type	/Users/lij/.vim/stl/stl_iterator.h	/^  typedef _Tp                        value_type;$/;"	t	class:reverse_iterator	access:public
rfind	/Users/lij/.vim/stl/string	/^  ::rfind(_CharT __c, size_type __pos) const $/;"	f	class:basic_string	signature:(_CharT __c, size_type __pos) const
rfind	/Users/lij/.vim/stl/string	/^  ::rfind(const _CharT* __s, size_type __pos, size_type __n) const $/;"	f	class:basic_string	signature:(const _CharT* __s, size_type __pos, size_type __n) const
rfind	/Users/lij/.vim/stl/string	/^  size_type rfind(_CharT __c, size_type __pos = npos) const;$/;"	p	class:basic_string	file:	access:public	signature:(_CharT __c, size_type __pos = npos) const
rfind	/Users/lij/.vim/stl/string	/^  size_type rfind(const _CharT* __s, size_type __pos = npos) const $/;"	f	class:basic_string	access:public	signature:(const _CharT* __s, size_type __pos = npos) const
rfind	/Users/lij/.vim/stl/string	/^  size_type rfind(const _CharT* __s, size_type __pos, size_type __n) const;$/;"	p	class:basic_string	file:	access:public	signature:(const _CharT* __s, size_type __pos, size_type __n) const
rfind	/Users/lij/.vim/stl/string	/^  size_type rfind(const basic_string& __s, size_type __pos = npos) const $/;"	f	class:basic_string	access:public	signature:(const basic_string& __s, size_type __pos = npos) const
rope	/Users/lij/.vim/stl/ropeimpl.h	/^rope<_CharT, _Alloc>::rope(size_t __n, _CharT __c,$/;"	f	class:rope	signature:(size_t __n, _CharT __c, const allocator_type& __a)
rope	/Users/lij/.vim/stl/stl_rope.h	/^        rope(_CharT __c, const allocator_type& __a = allocator_type())$/;"	f	class:rope	access:public	signature:(_CharT __c, const allocator_type& __a = allocator_type())
rope	/Users/lij/.vim/stl/stl_rope.h	/^        rope(_RopeRep* __t, const allocator_type& __a = allocator_type())$/;"	f	class:rope	access:private	signature:(_RopeRep* __t, const allocator_type& __a = allocator_type())
rope	/Users/lij/.vim/stl/stl_rope.h	/^        rope(char_producer<_CharT> *__fn, size_t __len, bool __delete_fn,$/;"	f	class:rope	access:public	signature:(char_producer<_CharT> *__fn, size_t __len, bool __delete_fn, const allocator_type& __a = allocator_type())
rope	/Users/lij/.vim/stl/stl_rope.h	/^        rope(const _CharT *__s, const _CharT *__e,$/;"	f	class:rope	access:public	signature:(const _CharT *__s, const _CharT *__e, const allocator_type& __a = allocator_type())
rope	/Users/lij/.vim/stl/stl_rope.h	/^        rope(const _CharT* __s, const allocator_type& __a = allocator_type())$/;"	f	class:rope	access:public	signature:(const _CharT* __s, const allocator_type& __a = allocator_type())
rope	/Users/lij/.vim/stl/stl_rope.h	/^        rope(const _CharT* __s, size_t __len,$/;"	f	class:rope	access:public	signature:(const _CharT* __s, size_t __len, const allocator_type& __a = allocator_type())
rope	/Users/lij/.vim/stl/stl_rope.h	/^        rope(const allocator_type& __a = allocator_type())$/;"	f	class:rope	access:public	signature:(const allocator_type& __a = allocator_type())
rope	/Users/lij/.vim/stl/stl_rope.h	/^        rope(const const_iterator& __s, const const_iterator& __e,$/;"	f	class:rope	access:public	signature:(const const_iterator& __s, const const_iterator& __e, const allocator_type& __a = allocator_type())
rope	/Users/lij/.vim/stl/stl_rope.h	/^        rope(const iterator& __s, const iterator& __e,$/;"	f	class:rope	access:public	signature:(const iterator& __s, const iterator& __e, const allocator_type& __a = allocator_type())
rope	/Users/lij/.vim/stl/stl_rope.h	/^        rope(const rope& __x, const allocator_type& __a = allocator_type())$/;"	f	class:rope	access:public	signature:(const rope& __x, const allocator_type& __a = allocator_type())
rope	/Users/lij/.vim/stl/stl_rope.h	/^        rope(size_t __n, _CharT __c,$/;"	p	class:rope	access:public	signature:(size_t __n, _CharT __c, const allocator_type& __a = allocator_type())
rope	/Users/lij/.vim/stl/stl_rope.h	/^class rope : public _Rope_base<_CharT,_Alloc> {$/;"	c	inherits:_Rope_base
rope::_Base	/Users/lij/.vim/stl/stl_rope.h	/^        typedef _Rope_base<_CharT,_Alloc> _Base;$/;"	t	class:rope	access:protected
rope::_Cstrptr	/Users/lij/.vim/stl/stl_rope.h	/^        typedef __GC_CONST _CharT* _Cstrptr;$/;"	t	class:rope	access:protected
rope::_RopeConcatenation	/Users/lij/.vim/stl/stl_rope.h	/^        typedef _Rope_RopeConcatenation<_CharT,_Alloc> _RopeConcatenation;$/;"	t	class:rope	access:protected
rope::_RopeFunction	/Users/lij/.vim/stl/stl_rope.h	/^        typedef _Rope_RopeFunction<_CharT,_Alloc> _RopeFunction;$/;"	t	class:rope	access:protected
rope::_RopeLeaf	/Users/lij/.vim/stl/stl_rope.h	/^        typedef _Rope_RopeLeaf<_CharT,_Alloc> _RopeLeaf;$/;"	t	class:rope	access:protected
rope::_RopeRep	/Users/lij/.vim/stl/stl_rope.h	/^        typedef _Rope_RopeRep<_CharT,_Alloc> _RopeRep;$/;"	t	class:rope	access:protected
rope::_RopeSubstring	/Users/lij/.vim/stl/stl_rope.h	/^        typedef _Rope_RopeSubstring<_CharT,_Alloc> _RopeSubstring;$/;"	t	class:rope	access:protected
rope::_S_RopeLeaf_from_unowned_char_ptr	/Users/lij/.vim/stl/stl_rope.h	/^          _RopeLeaf* _S_RopeLeaf_from_unowned_char_ptr(const _CharT *__s,$/;"	f	class:rope	access:protected	signature:(const _CharT *__s, size_t __size, allocator_type __a)
rope::_S_add_leaf_to_forest	/Users/lij/.vim/stl/ropeimpl.h	/^rope<_CharT,_Alloc>::_S_add_leaf_to_forest(_RopeRep* __r, _RopeRep** __forest)$/;"	f	class:rope	signature:(_RopeRep* __r, _RopeRep** __forest)
rope::_S_add_leaf_to_forest	/Users/lij/.vim/stl/stl_rope.h	/^        static void _S_add_leaf_to_forest(_RopeRep* __r, _RopeRep** __forest);$/;"	p	class:rope	access:private	signature:(_RopeRep* __r, _RopeRep** __forest)
rope::_S_add_to_forest	/Users/lij/.vim/stl/ropeimpl.h	/^rope<_CharT,_Alloc>::_S_add_to_forest(_RopeRep* __r, _RopeRep** __forest)$/;"	f	class:rope	signature:(_RopeRep* __r, _RopeRep** __forest)
rope::_S_add_to_forest	/Users/lij/.vim/stl/stl_rope.h	/^        static void _S_add_to_forest(_RopeRep*__r, _RopeRep** __forest);$/;"	p	class:rope	access:private	signature:(_RopeRep*__r, _RopeRep** __forest)
rope::_S_allocated_capacity	/Users/lij/.vim/stl/stl_rope.h	/^        static size_t _S_allocated_capacity(size_t __n) {$/;"	f	class:rope	access:protected	signature:(size_t __n)
rope::_S_apply_to_pieces	/Users/lij/.vim/stl/ropeimpl.h	/^bool rope<_CharT, _Alloc>::_S_apply_to_pieces($/;"	f	class:rope	signature:( _Rope_char_consumer<_CharT>& __c, const _RopeRep* __r, size_t __begin, size_t __end)
rope::_S_apply_to_pieces	/Users/lij/.vim/stl/stl_rope.h	/^        static bool _S_apply_to_pieces($/;"	p	class:rope	access:protected	signature:( _Rope_char_consumer<_CharT>& __c, const _RopeRep* __r, size_t __begin, size_t __end)
rope::_S_balance	/Users/lij/.vim/stl/ropeimpl.h	/^rope<_CharT,_Alloc>::_S_balance(_RopeRep* __r)$/;"	f	class:rope	signature:(_RopeRep* __r)
rope::_S_balance	/Users/lij/.vim/stl/stl_rope.h	/^        static _RopeRep* _S_balance(_RopeRep* __r);$/;"	p	class:rope	access:private	signature:(_RopeRep* __r)
rope::_S_char_ptr_len	/Users/lij/.vim/stl/ropeimpl.h	/^rope<_CharT,_Alloc>::_S_char_ptr_len(const _CharT* __s)$/;"	f	class:rope	signature:(const _CharT* __s)
rope::_S_char_ptr_len	/Users/lij/.vim/stl/stl_rope.h	/^        static size_t _S_char_ptr_len(const _CharT* __s);$/;"	p	class:rope	access:private	signature:(const _CharT* __s)
rope::_S_compare	/Users/lij/.vim/stl/ropeimpl.h	/^rope<_CharT,_Alloc>::_S_compare (const _RopeRep* __left, $/;"	f	class:rope	signature:(const _RopeRep* __left, const _RopeRep* __right)
rope::_S_compare	/Users/lij/.vim/stl/stl_rope.h	/^        static int _S_compare(const _RopeRep* __x, const _RopeRep* __y);$/;"	p	class:rope	access:private	signature:(const _RopeRep* __x, const _RopeRep* __y)
rope::_S_concat	/Users/lij/.vim/stl/ropeimpl.h	/^rope<_CharT,_Alloc>::_S_concat(_RopeRep* __left, _RopeRep* __right)$/;"	f	class:rope	signature:(_RopeRep* __left, _RopeRep* __right)
rope::_S_concat	/Users/lij/.vim/stl/stl_rope.h	/^        static _RopeRep* _S_concat(_RopeRep* __left, _RopeRep* __right);$/;"	p	class:rope	access:protected	signature:(_RopeRep* __left, _RopeRep* __right)
rope::_S_concat_and_set_balanced	/Users/lij/.vim/stl/stl_rope.h	/^        static _RopeRep* _S_concat_and_set_balanced(_RopeRep* __left,$/;"	f	class:rope	access:private	signature:(_RopeRep* __left, _RopeRep* __right)
rope::_S_concat_char_iter	/Users/lij/.vim/stl/ropeimpl.h	/^rope<_CharT,_Alloc>::_RopeRep* rope<_CharT,_Alloc>::_S_concat_char_iter$/;"	f	class:rope	signature:(_RopeRep* __r, const _CharT*__s, size_t __slen)
rope::_S_concat_char_iter	/Users/lij/.vim/stl/stl_rope.h	/^        static _RopeRep* _S_concat_char_iter(_RopeRep* __r,$/;"	p	class:rope	access:protected	signature:(_RopeRep* __r, const _CharT* __iter, size_t __slen)
rope::_S_copy_max	/Users/lij/.vim/stl/stl_rope.h	/^        enum { _S_copy_max = 23 };$/;"	e	enum:rope::__anon25
rope::_S_destr_concat_char_iter	/Users/lij/.vim/stl/ropeimpl.h	/^rope<_CharT,_Alloc>::_S_destr_concat_char_iter($/;"	f	class:rope	signature:( _RopeRep* __r, const _CharT* __s, size_t __slen)
rope::_S_destr_concat_char_iter	/Users/lij/.vim/stl/stl_rope.h	/^        static _RopeRep* _S_destr_concat_char_iter(_RopeRep* __r,$/;"	f	class:rope	access:protected	signature:(_RopeRep* __r, const _CharT* __iter, size_t __slen)
rope::_S_destr_leaf_concat_char_iter	/Users/lij/.vim/stl/ropeimpl.h	/^rope<_CharT,_Alloc>::_S_destr_leaf_concat_char_iter$/;"	f	class:rope	signature:(_RopeLeaf* __r, const _CharT* __iter, size_t __len)
rope::_S_destr_leaf_concat_char_iter	/Users/lij/.vim/stl/stl_rope.h	/^          static _RopeLeaf* _S_destr_leaf_concat_char_iter$/;"	p	class:rope	access:protected	signature:(_RopeLeaf* __r, const _CharT* __iter, size_t __slen)
rope::_S_dump	/Users/lij/.vim/stl/ropeimpl.h	/^rope<_CharT,_Alloc>::_S_dump(_RopeRep* __r, int __indent)$/;"	f	class:rope	signature:(_RopeRep* __r, int __indent)
rope::_S_dump	/Users/lij/.vim/stl/stl_rope.h	/^        static void _S_dump(_RopeRep* __r, int __indent = 0);$/;"	p	class:rope	access:private	signature:(_RopeRep* __r, int __indent = 0)
rope::_S_empty_c_str	/Users/lij/.vim/stl/ropeimpl.h	/^  _CharT rope<_CharT,_Alloc>::_S_empty_c_str[1];$/;"	m	class:rope
rope::_S_empty_c_str	/Users/lij/.vim/stl/stl_rope.h	/^        static _CharT _S_empty_c_str[1];$/;"	m	class:rope	access:protected
rope::_S_fetch	/Users/lij/.vim/stl/ropeimpl.h	/^rope<_CharT,_Alloc>::_S_fetch(_RopeRep* __r, size_type __i)$/;"	f	class:rope	signature:(_RopeRep* __r, size_type __i)
rope::_S_fetch	/Users/lij/.vim/stl/stl_rope.h	/^        static _CharT _S_fetch(_RopeRep* __r, size_type __pos);$/;"	p	class:rope	access:protected	signature:(_RopeRep* __r, size_type __pos)
rope::_S_fetch_ptr	/Users/lij/.vim/stl/ropeimpl.h	/^rope<_CharT,_Alloc>::_S_fetch_ptr(_RopeRep* __r, size_type __i)$/;"	f	class:rope	signature:(_RopeRep* __r, size_type __i)
rope::_S_fetch_ptr	/Users/lij/.vim/stl/stl_rope.h	/^            static _CharT* _S_fetch_ptr(_RopeRep* __r, size_type __pos);$/;"	p	class:rope	access:protected	signature:(_RopeRep* __r, size_type __pos)
rope::_S_flatten	/Users/lij/.vim/stl/ropeimpl.h	/^rope<_CharT,_Alloc>::_S_flatten(_RopeRep* __r, _CharT* __buffer)$/;"	f	class:rope	signature:(_RopeRep* __r, _CharT* __buffer)
rope::_S_flatten	/Users/lij/.vim/stl/ropeimpl.h	/^rope<_CharT,_Alloc>::_S_flatten(_RopeRep* __r,$/;"	f	class:rope	signature:(_RopeRep* __r, size_t __start, size_t __len, _CharT* __buffer)
rope::_S_flatten	/Users/lij/.vim/stl/stl_rope.h	/^        static _CharT* _S_flatten(_RopeRep* __r, _CharT* __buffer);$/;"	p	class:rope	access:private	signature:(_RopeRep* __r, _CharT* __buffer)
rope::_S_flatten	/Users/lij/.vim/stl/stl_rope.h	/^        static _CharT* _S_flatten(_RopeRep* __r,$/;"	p	class:rope	access:private	signature:(_RopeRep* __r, size_t __start, size_t __len, _CharT* __buffer)
rope::_S_is0	/Users/lij/.vim/stl/stl_rope.h	/^        static bool _S_is0(_CharT __c) { return __c == _S_eos((_CharT*)0); }$/;"	f	class:rope	access:protected	signature:(_CharT __c)
rope::_S_is_almost_balanced	/Users/lij/.vim/stl/stl_rope.h	/^        static bool _S_is_almost_balanced(_RopeRep* __r)$/;"	f	class:rope	access:private	signature:(_RopeRep* __r)
rope::_S_is_balanced	/Users/lij/.vim/stl/stl_rope.h	/^        static bool _S_is_balanced(_RopeRep* __r)$/;"	f	class:rope	access:private	signature:(_RopeRep* __r)
rope::_S_is_roughly_balanced	/Users/lij/.vim/stl/stl_rope.h	/^        static bool _S_is_roughly_balanced(_RopeRep* __r)$/;"	f	class:rope	access:private	signature:(_RopeRep* __r)
rope::_S_leaf_concat_char_iter	/Users/lij/.vim/stl/ropeimpl.h	/^rope<_CharT,_Alloc>::_S_leaf_concat_char_iter$/;"	f	class:rope	signature:(_RopeLeaf* __r, const _CharT* __iter, size_t __len)
rope::_S_leaf_concat_char_iter	/Users/lij/.vim/stl/stl_rope.h	/^        _S_leaf_concat_char_iter(_RopeLeaf* __r,$/;"	p	class:rope	access:protected	signature:(_RopeLeaf* __r, const _CharT* __iter, size_t __slen)
rope::_S_min_len	/Users/lij/.vim/stl/ropeimpl.h	/^rope<_CharT,_Alloc>::_S_min_len[$/;"	m	class:rope
rope::_S_min_len	/Users/lij/.vim/stl/stl_rope.h	/^          _S_min_len[_RopeRep::_S_max_rope_depth + 1];$/;"	m	class:rope	access:private
rope::_S_new_RopeConcatenation	/Users/lij/.vim/stl/stl_rope.h	/^        static _RopeConcatenation* _S_new_RopeConcatenation($/;"	f	class:rope	access:protected	signature:( _RopeRep* __left, _RopeRep* __right, allocator_type __a)
rope::_S_new_RopeFunction	/Users/lij/.vim/stl/stl_rope.h	/^        static _RopeFunction* _S_new_RopeFunction(char_producer<_CharT>* __f,$/;"	f	class:rope	access:protected	signature:(char_producer<_CharT>* __f, size_t __size, bool __d, allocator_type __a)
rope::_S_new_RopeLeaf	/Users/lij/.vim/stl/stl_rope.h	/^        static _RopeLeaf* _S_new_RopeLeaf(__GC_CONST _CharT *__s,$/;"	f	class:rope	access:protected	signature:(__GC_CONST _CharT *__s, size_t __size, allocator_type __a)
rope::_S_new_RopeSubstring	/Users/lij/.vim/stl/stl_rope.h	/^        static _RopeSubstring* _S_new_RopeSubstring($/;"	f	class:rope	access:protected	signature:( _Rope_RopeRep<_CharT,_Alloc>* __b, size_t __s, size_t __l, allocator_type __a)
rope::_S_ref	/Users/lij/.vim/stl/stl_rope.h	/^          static void _S_ref(_RopeRep* __t)$/;"	f	class:rope	access:protected	signature:(_RopeRep* __t)
rope::_S_ref	/Users/lij/.vim/stl/stl_rope.h	/^          static void _S_ref(_RopeRep*) {}$/;"	f	class:rope	access:protected	signature:(_RopeRep*)
rope::_S_rounded_up_size	/Users/lij/.vim/stl/stl_rope.h	/^        static size_t _S_rounded_up_size(size_t __n) {$/;"	f	class:rope	access:protected	signature:(size_t __n)
rope::_S_substring	/Users/lij/.vim/stl/ropeimpl.h	/^rope<_CharT,_Alloc>::_S_substring(_RopeRep* __base, $/;"	f	class:rope	signature:(_RopeRep* __base, size_t __start, size_t __endp1)
rope::_S_substring	/Users/lij/.vim/stl/stl_rope.h	/^        static _RopeRep* _S_substring(_RopeRep* __base,$/;"	p	class:rope	access:protected	signature:(_RopeRep* __base, size_t __start, size_t __endp1)
rope::_S_tree_concat	/Users/lij/.vim/stl/ropeimpl.h	/^rope<_CharT,_Alloc>::_S_tree_concat (_RopeRep* __left, _RopeRep* __right)$/;"	f	class:rope	signature:(_RopeRep* __left, _RopeRep* __right)
rope::_S_tree_concat	/Users/lij/.vim/stl/stl_rope.h	/^        _S_tree_concat(_RopeRep* __left, _RopeRep* __right);$/;"	p	class:rope	access:protected	signature:(_RopeRep* __left, _RopeRep* __right)
rope::_S_unref	/Users/lij/.vim/stl/stl_rope.h	/^          static void _S_unref(_RopeRep* __t)$/;"	f	class:rope	access:protected	signature:(_RopeRep* __t)
rope::_S_unref	/Users/lij/.vim/stl/stl_rope.h	/^          static void _S_unref(_RopeRep*) {}$/;"	f	class:rope	access:protected	signature:(_RopeRep*)
rope::_Self_destruct_ptr	/Users/lij/.vim/stl/stl_rope.h	/^            typedef _Rope_RopeRep<_CharT,_Alloc>* _Self_destruct_ptr;$/;"	t	class:rope	access:protected
rope::_Self_destruct_ptr	/Users/lij/.vim/stl/stl_rope.h	/^            typedef _Rope_self_destruct_ptr<_CharT,_Alloc> _Self_destruct_ptr;$/;"	t	class:rope	access:protected
rope::__STL_NULL_TMPL_ARGS	/Users/lij/.vim/stl/stl_rope.h	/^        operator+ __STL_NULL_TMPL_ARGS (const rope<_CharT,_Alloc>& __left,$/;"	p	class:rope	access:friend	signature:(const rope<_CharT,_Alloc>& __left, _CharT __right)
rope::__STL_NULL_TMPL_ARGS	/Users/lij/.vim/stl/stl_rope.h	/^        operator+ __STL_NULL_TMPL_ARGS (const rope<_CharT,_Alloc>& __left,$/;"	p	class:rope	access:friend	signature:(const rope<_CharT,_Alloc>& __left, const _CharT* __right)
rope::__STL_NULL_TMPL_ARGS	/Users/lij/.vim/stl/stl_rope.h	/^        operator+ __STL_NULL_TMPL_ARGS (const rope<_CharT,_Alloc>& __left,$/;"	p	class:rope	access:friend	signature:(const rope<_CharT,_Alloc>& __left, const rope<_CharT,_Alloc>& __right)
rope::allocator_type	/Users/lij/.vim/stl/stl_rope.h	/^        typedef typename _Base::allocator_type allocator_type;$/;"	t	class:rope	access:protected
rope::append	/Users/lij/.vim/stl/stl_rope.h	/^        rope& append() { return append(_CharT()); }  \/\/ XXX why?$/;"	f	class:rope	access:public	signature:()
rope::append	/Users/lij/.vim/stl/stl_rope.h	/^        rope& append(_CharT __c) {$/;"	f	class:rope	access:public	signature:(_CharT __c)
rope::append	/Users/lij/.vim/stl/stl_rope.h	/^        rope& append(const _CharT* __c_string) {$/;"	f	class:rope	access:public	signature:(const _CharT* __c_string)
rope::append	/Users/lij/.vim/stl/stl_rope.h	/^        rope& append(const _CharT* __iter, size_t __n) {$/;"	f	class:rope	access:public	signature:(const _CharT* __iter, size_t __n)
rope::append	/Users/lij/.vim/stl/stl_rope.h	/^        rope& append(const _CharT* __s, const _CharT* __e) {$/;"	f	class:rope	access:public	signature:(const _CharT* __s, const _CharT* __e)
rope::append	/Users/lij/.vim/stl/stl_rope.h	/^        rope& append(const rope& __y) {$/;"	f	class:rope	access:public	signature:(const rope& __y)
rope::append	/Users/lij/.vim/stl/stl_rope.h	/^        rope& append(const_iterator __s, const_iterator __e) {$/;"	f	class:rope	access:public	signature:(const_iterator __s, const_iterator __e)
rope::append	/Users/lij/.vim/stl/stl_rope.h	/^        rope& append(size_t __n, _CharT __c) {$/;"	f	class:rope	access:public	signature:(size_t __n, _CharT __c)
rope::apply_to_pieces	/Users/lij/.vim/stl/stl_rope.h	/^        void apply_to_pieces( size_t __begin, size_t __end,$/;"	f	class:rope	access:public	signature:( size_t __begin, size_t __end, _Rope_char_consumer<_CharT>& __c) const
rope::at	/Users/lij/.vim/stl/stl_rope.h	/^            reference at(size_type __pos) {$/;"	f	class:rope	access:public	signature:(size_type __pos)
rope::at	/Users/lij/.vim/stl/stl_rope.h	/^        _CharT at(size_type __pos) const {$/;"	f	class:rope	access:public	signature:(size_type __pos) const
rope::back	/Users/lij/.vim/stl/stl_rope.h	/^        _CharT back() const$/;"	f	class:rope	access:public	signature:() const
rope::balance	/Users/lij/.vim/stl/stl_rope.h	/^        void balance()$/;"	f	class:rope	access:public	signature:()
rope::begin	/Users/lij/.vim/stl/stl_rope.h	/^            const_iterator begin() { return const_begin(); }$/;"	f	class:rope	access:public	signature:()
rope::begin	/Users/lij/.vim/stl/stl_rope.h	/^            iterator begin() { return mutable_begin(); }$/;"	f	class:rope	access:public	signature:()
rope::begin	/Users/lij/.vim/stl/stl_rope.h	/^        const_iterator begin() const {$/;"	f	class:rope	access:public	signature:() const
rope::c_str	/Users/lij/.vim/stl/ropeimpl.h	/^const _CharT* rope<_CharT,_Alloc>::c_str() const {$/;"	f	class:rope	signature:() const
rope::c_str	/Users/lij/.vim/stl/stl_rope.h	/^        const _CharT* c_str() const;$/;"	p	class:rope	access:public	signature:() const
rope::capacity	/Users/lij/.vim/stl/stl_rope.h	/^            size_type capacity() const {$/;"	f	class:rope	access:public	signature:() const
rope::clear	/Users/lij/.vim/stl/stl_rope.h	/^        void clear()$/;"	f	class:rope	access:public	signature:()
rope::compare	/Users/lij/.vim/stl/stl_rope.h	/^        int compare(const rope& __y) const {$/;"	f	class:rope	access:public	signature:(const rope& __y) const
rope::const_begin	/Users/lij/.vim/stl/stl_rope.h	/^        const_iterator const_begin() const {$/;"	f	class:rope	access:public	signature:() const
rope::const_end	/Users/lij/.vim/stl/stl_rope.h	/^        const_iterator const_end() const {$/;"	f	class:rope	access:public	signature:() const
rope::const_iterator	/Users/lij/.vim/stl/stl_rope.h	/^        typedef _Rope_const_iterator<_CharT,_Alloc> const_iterator;$/;"	t	class:rope	access:public
rope::const_pointer	/Users/lij/.vim/stl/stl_rope.h	/^        typedef const _CharT* const_pointer;$/;"	t	class:rope	access:public
rope::const_rbegin	/Users/lij/.vim/stl/stl_rope.h	/^        const_reverse_iterator const_rbegin() const {$/;"	f	class:rope	access:public	signature:() const
rope::const_reference	/Users/lij/.vim/stl/stl_rope.h	/^        typedef _CharT const_reference;$/;"	t	class:rope	access:public
rope::const_rend	/Users/lij/.vim/stl/stl_rope.h	/^        const_reverse_iterator const_rend() const {$/;"	f	class:rope	access:public	signature:() const
rope::const_reverse_iterator	/Users/lij/.vim/stl/stl_rope.h	/^                                 difference_type>  const_reverse_iterator;$/;"	t	class:rope	access:public
rope::const_reverse_iterator	/Users/lij/.vim/stl/stl_rope.h	/^        typedef reverse_iterator<const_iterator> const_reverse_iterator;$/;"	t	class:rope	access:public
rope::copy	/Users/lij/.vim/stl/stl_rope.h	/^              size_type copy(_CharT* __buffer, size_type __n, $/;"	f	class:rope	access:public	signature:(_CharT* __buffer, size_type __n, size_type __pos = 0) const
rope::copy	/Users/lij/.vim/stl/stl_rope.h	/^        size_type copy(size_type __pos, size_type __n, _CharT* __buffer) const $/;"	f	class:rope	access:public	signature:(size_type __pos, size_type __n, _CharT* __buffer) const
rope::copy	/Users/lij/.vim/stl/stl_rope.h	/^        void copy(_CharT* __buffer) const {$/;"	f	class:rope	access:public	signature:(_CharT* __buffer) const
rope::delete_c_str	/Users/lij/.vim/stl/stl_rope.h	/^        void delete_c_str () {$/;"	f	class:rope	access:public	signature:()
rope::difference_type	/Users/lij/.vim/stl/stl_rope.h	/^        typedef ptrdiff_t difference_type;$/;"	t	class:rope	access:public
rope::dump	/Users/lij/.vim/stl/stl_rope.h	/^        void dump() {$/;"	f	class:rope	access:public	signature:()
rope::empty	/Users/lij/.vim/stl/stl_rope.h	/^        bool empty() const { return 0 == _M_tree_ptr; }$/;"	f	class:rope	access:public	signature:() const
rope::end	/Users/lij/.vim/stl/stl_rope.h	/^            const_iterator end() { return const_end(); }$/;"	f	class:rope	access:public	signature:()
rope::end	/Users/lij/.vim/stl/stl_rope.h	/^            iterator end() { return mutable_end(); }$/;"	f	class:rope	access:public	signature:()
rope::end	/Users/lij/.vim/stl/stl_rope.h	/^        const_iterator end() const {$/;"	f	class:rope	access:public	signature:() const
rope::erase	/Users/lij/.vim/stl/stl_rope.h	/^        iterator erase(const iterator& __p) {$/;"	f	class:rope	access:public	signature:(const iterator& __p)
rope::erase	/Users/lij/.vim/stl/stl_rope.h	/^        iterator erase(const iterator& __p, const iterator& __q) {$/;"	f	class:rope	access:public	signature:(const iterator& __p, const iterator& __q)
rope::erase	/Users/lij/.vim/stl/stl_rope.h	/^        void erase(size_t __p) {$/;"	f	class:rope	access:public	signature:(size_t __p)
rope::erase	/Users/lij/.vim/stl/stl_rope.h	/^        void erase(size_t __p, size_t __n) {$/;"	f	class:rope	access:public	signature:(size_t __p, size_t __n)
rope::find	/Users/lij/.vim/stl/ropeimpl.h	/^rope<_CharT,_Alloc>::find(_CharT __pattern, size_t __start) const$/;"	f	class:rope	signature:(_CharT __pattern, size_t __start) const
rope::find	/Users/lij/.vim/stl/stl_rope.h	/^        size_type find(_CharT __c, size_type __pos = 0) const;$/;"	p	class:rope	access:public	signature:(_CharT __c, size_type __pos = 0) const
rope::find	/Users/lij/.vim/stl/stl_rope.h	/^        size_type find(const _CharT* __s, size_type __pos = 0) const {$/;"	f	class:rope	access:public	signature:(const _CharT* __s, size_type __pos = 0) const
rope::front	/Users/lij/.vim/stl/stl_rope.h	/^        _CharT front() const$/;"	f	class:rope	access:public	signature:() const
rope::insert	/Users/lij/.vim/stl/stl_rope.h	/^        iterator insert(const iterator& __p ) $/;"	f	class:rope	access:public	signature:(const iterator& __p )
rope::insert	/Users/lij/.vim/stl/stl_rope.h	/^        iterator insert(const iterator& __p, _CharT __c) $/;"	f	class:rope	access:public	signature:(const iterator& __p, _CharT __c)
rope::insert	/Users/lij/.vim/stl/stl_rope.h	/^        iterator insert(const iterator& __p, const _CharT* __i, $/;"	f	class:rope	access:public	signature:(const iterator& __p, const _CharT* __i, const _CharT* __j)
rope::insert	/Users/lij/.vim/stl/stl_rope.h	/^        iterator insert(const iterator& __p, const _CharT* __i, size_t __n)$/;"	f	class:rope	access:public	signature:(const iterator& __p, const _CharT* __i, size_t __n)
rope::insert	/Users/lij/.vim/stl/stl_rope.h	/^        iterator insert(const iterator& __p, const _CharT* c_string) $/;"	f	class:rope	access:public	signature:(const iterator& __p, const _CharT* c_string)
rope::insert	/Users/lij/.vim/stl/stl_rope.h	/^        iterator insert(const iterator& __p, const rope& __r)$/;"	f	class:rope	access:public	signature:(const iterator& __p, const rope& __r)
rope::insert	/Users/lij/.vim/stl/stl_rope.h	/^        iterator insert(const iterator& __p, size_t __n, _CharT __c)$/;"	f	class:rope	access:public	signature:(const iterator& __p, size_t __n, _CharT __c)
rope::insert	/Users/lij/.vim/stl/stl_rope.h	/^        iterator insert(const iterator& __p,$/;"	f	class:rope	access:public	signature:(const iterator& __p, const const_iterator& __i, const const_iterator& __j)
rope::insert	/Users/lij/.vim/stl/stl_rope.h	/^        iterator insert(const iterator& __p,$/;"	f	class:rope	access:public	signature:(const iterator& __p, const iterator& __i, const iterator& __j)
rope::insert	/Users/lij/.vim/stl/stl_rope.h	/^        void insert(size_t __p) {$/;"	f	class:rope	access:public	signature:(size_t __p)
rope::insert	/Users/lij/.vim/stl/stl_rope.h	/^        void insert(size_t __p, _CharT __c) {$/;"	f	class:rope	access:public	signature:(size_t __p, _CharT __c)
rope::insert	/Users/lij/.vim/stl/stl_rope.h	/^        void insert(size_t __p, const _CharT* __c_string) {$/;"	f	class:rope	access:public	signature:(size_t __p, const _CharT* __c_string)
rope::insert	/Users/lij/.vim/stl/stl_rope.h	/^        void insert(size_t __p, const _CharT* __i, const _CharT* __j) {$/;"	f	class:rope	access:public	signature:(size_t __p, const _CharT* __i, const _CharT* __j)
rope::insert	/Users/lij/.vim/stl/stl_rope.h	/^        void insert(size_t __p, const _CharT* __i, size_t __n) {$/;"	f	class:rope	access:public	signature:(size_t __p, const _CharT* __i, size_t __n)
rope::insert	/Users/lij/.vim/stl/stl_rope.h	/^        void insert(size_t __p, const const_iterator& __i,$/;"	f	class:rope	access:public	signature:(size_t __p, const const_iterator& __i, const const_iterator& __j)
rope::insert	/Users/lij/.vim/stl/stl_rope.h	/^        void insert(size_t __p, const iterator& __i,$/;"	f	class:rope	access:public	signature:(size_t __p, const iterator& __i, const iterator& __j)
rope::insert	/Users/lij/.vim/stl/stl_rope.h	/^        void insert(size_t __p, const rope& __r) {$/;"	f	class:rope	access:public	signature:(size_t __p, const rope& __r)
rope::insert	/Users/lij/.vim/stl/stl_rope.h	/^        void insert(size_t __p, size_t __n, _CharT __c) {$/;"	f	class:rope	access:public	signature:(size_t __p, size_t __n, _CharT __c)
rope::iterator	/Users/lij/.vim/stl/stl_rope.h	/^        typedef _Rope_iterator<_CharT,_Alloc> iterator;$/;"	t	class:rope	access:public
rope::length	/Users/lij/.vim/stl/stl_rope.h	/^        size_type length() const {$/;"	f	class:rope	access:public	signature:() const
rope::max_size	/Users/lij/.vim/stl/stl_rope.h	/^        size_type max_size() const {$/;"	f	class:rope	access:public	signature:() const
rope::mutable_begin	/Users/lij/.vim/stl/stl_rope.h	/^        iterator mutable_begin() {$/;"	f	class:rope	access:public	signature:()
rope::mutable_end	/Users/lij/.vim/stl/stl_rope.h	/^        iterator mutable_end() {$/;"	f	class:rope	access:public	signature:()
rope::mutable_rbegin	/Users/lij/.vim/stl/stl_rope.h	/^        reverse_iterator mutable_rbegin() {$/;"	f	class:rope	access:public	signature:()
rope::mutable_reference_at	/Users/lij/.vim/stl/stl_rope.h	/^        reference mutable_reference_at(size_type __pos) {$/;"	f	class:rope	access:public	signature:(size_type __pos)
rope::mutable_rend	/Users/lij/.vim/stl/stl_rope.h	/^        reverse_iterator mutable_rend() {$/;"	f	class:rope	access:public	signature:()
rope::npos	/Users/lij/.vim/stl/stl_rope.h	/^        static const size_type npos;$/;"	m	class:rope	access:public
rope::npos	/Users/lij/.vim/stl/stl_rope.h	/^const rope<_CharT, _Alloc>::size_type rope<_CharT, _Alloc>::npos =$/;"	m	class:rope
rope::operator +	/Users/lij/.vim/stl/stl_rope.h	/^        operator+ (const rope<_CharT2,_Alloc2>& __left, _CharT2 __right);$/;"	p	class:rope	access:friend	signature:(const rope<_CharT2,_Alloc2>& __left, _CharT2 __right)
rope::operator +	/Users/lij/.vim/stl/stl_rope.h	/^        operator+ (const rope<_CharT2,_Alloc2>& __left,$/;"	p	class:rope	access:friend	signature:(const rope<_CharT2,_Alloc2>& __left, const _CharT2* __right)
rope::operator +	/Users/lij/.vim/stl/stl_rope.h	/^        operator+ (const rope<_CharT2,_Alloc2>& __left,$/;"	p	class:rope	access:friend	signature:(const rope<_CharT2,_Alloc2>& __left, const rope<_CharT2,_Alloc2>& __right)
rope::operator =	/Users/lij/.vim/stl/stl_rope.h	/^        rope& operator=(const rope& __x)$/;"	f	class:rope	access:public	signature:(const rope& __x)
rope::operator []	/Users/lij/.vim/stl/stl_rope.h	/^            reference operator[] (size_type __pos) {$/;"	f	class:rope	access:public	signature:(size_type __pos)
rope::operator []	/Users/lij/.vim/stl/stl_rope.h	/^        _CharT operator[] (size_type __pos) const {$/;"	f	class:rope	access:public	signature:(size_type __pos) const
rope::pointer	/Users/lij/.vim/stl/stl_rope.h	/^        typedef _Rope_char_ptr_proxy<_CharT,_Alloc> pointer;$/;"	t	class:rope	access:public
rope::pop_back	/Users/lij/.vim/stl/stl_rope.h	/^        void pop_back()$/;"	f	class:rope	access:public	signature:()
rope::pop_front	/Users/lij/.vim/stl/stl_rope.h	/^        void pop_front()$/;"	f	class:rope	access:public	signature:()
rope::push_back	/Users/lij/.vim/stl/stl_rope.h	/^        void push_back(_CharT __x)$/;"	f	class:rope	access:public	signature:(_CharT __x)
rope::push_front	/Users/lij/.vim/stl/stl_rope.h	/^        void push_front(_CharT __x)$/;"	f	class:rope	access:public	signature:(_CharT __x)
rope::rbegin	/Users/lij/.vim/stl/stl_rope.h	/^            const_reverse_iterator rbegin() { return const_rbegin(); }$/;"	f	class:rope	access:public	signature:()
rope::rbegin	/Users/lij/.vim/stl/stl_rope.h	/^            reverse_iterator rbegin() { return mutable_rbegin(); }$/;"	f	class:rope	access:public	signature:()
rope::rbegin	/Users/lij/.vim/stl/stl_rope.h	/^        const_reverse_iterator rbegin() const {$/;"	f	class:rope	access:public	signature:() const
rope::reference	/Users/lij/.vim/stl/stl_rope.h	/^        typedef _Rope_char_ref_proxy<_CharT,_Alloc> reference;$/;"	t	class:rope	access:public
rope::rend	/Users/lij/.vim/stl/stl_rope.h	/^            const_reverse_iterator rend() { return const_rend(); }$/;"	f	class:rope	access:public	signature:()
rope::rend	/Users/lij/.vim/stl/stl_rope.h	/^            reverse_iterator rend() { return mutable_rend(); }$/;"	f	class:rope	access:public	signature:()
rope::rend	/Users/lij/.vim/stl/stl_rope.h	/^        const_reverse_iterator rend() const {$/;"	f	class:rope	access:public	signature:() const
rope::replace	/Users/lij/.vim/stl/stl_rope.h	/^        static _RopeRep* replace(_RopeRep* __old, size_t __pos1,$/;"	f	class:rope	access:protected	signature:(_RopeRep* __old, size_t __pos1, size_t __pos2, _RopeRep* __r)
rope::replace	/Users/lij/.vim/stl/stl_rope.h	/^        void replace(const iterator& __p, _CharT __c)$/;"	f	class:rope	access:public	signature:(const iterator& __p, _CharT __c)
rope::replace	/Users/lij/.vim/stl/stl_rope.h	/^        void replace(const iterator& __p, const _CharT* __c_string)$/;"	f	class:rope	access:public	signature:(const iterator& __p, const _CharT* __c_string)
rope::replace	/Users/lij/.vim/stl/stl_rope.h	/^        void replace(const iterator& __p, const _CharT* __i, const _CharT* __j)$/;"	f	class:rope	access:public	signature:(const iterator& __p, const _CharT* __i, const _CharT* __j)
rope::replace	/Users/lij/.vim/stl/stl_rope.h	/^        void replace(const iterator& __p, const _CharT* __i, size_t __n)$/;"	f	class:rope	access:public	signature:(const iterator& __p, const _CharT* __i, size_t __n)
rope::replace	/Users/lij/.vim/stl/stl_rope.h	/^        void replace(const iterator& __p, const iterator& __q, _CharT __c)$/;"	f	class:rope	access:public	signature:(const iterator& __p, const iterator& __q, _CharT __c)
rope::replace	/Users/lij/.vim/stl/stl_rope.h	/^        void replace(const iterator& __p, const iterator& __q,$/;"	f	class:rope	access:public	signature:(const iterator& __p, const iterator& __q, const _CharT* __c_string)
rope::replace	/Users/lij/.vim/stl/stl_rope.h	/^        void replace(const iterator& __p, const iterator& __q,$/;"	f	class:rope	access:public	signature:(const iterator& __p, const iterator& __q, const _CharT* __i, const _CharT* __j)
rope::replace	/Users/lij/.vim/stl/stl_rope.h	/^        void replace(const iterator& __p, const iterator& __q,$/;"	f	class:rope	access:public	signature:(const iterator& __p, const iterator& __q, const _CharT* __i, size_t __n)
rope::replace	/Users/lij/.vim/stl/stl_rope.h	/^        void replace(const iterator& __p, const iterator& __q,$/;"	f	class:rope	access:public	signature:(const iterator& __p, const iterator& __q, const const_iterator& __i, const const_iterator& __j)
rope::replace	/Users/lij/.vim/stl/stl_rope.h	/^        void replace(const iterator& __p, const iterator& __q,$/;"	f	class:rope	access:public	signature:(const iterator& __p, const iterator& __q, const iterator& __i, const iterator& __j)
rope::replace	/Users/lij/.vim/stl/stl_rope.h	/^        void replace(const iterator& __p, const iterator& __q,$/;"	f	class:rope	access:public	signature:(const iterator& __p, const iterator& __q, const rope& __r)
rope::replace	/Users/lij/.vim/stl/stl_rope.h	/^        void replace(const iterator& __p, const rope& __r)$/;"	f	class:rope	access:public	signature:(const iterator& __p, const rope& __r)
rope::replace	/Users/lij/.vim/stl/stl_rope.h	/^        void replace(const iterator& __p, const_iterator __i, $/;"	f	class:rope	access:public	signature:(const iterator& __p, const_iterator __i, const_iterator __j)
rope::replace	/Users/lij/.vim/stl/stl_rope.h	/^        void replace(const iterator& __p, iterator __i, iterator __j)$/;"	f	class:rope	access:public	signature:(const iterator& __p, iterator __i, iterator __j)
rope::replace	/Users/lij/.vim/stl/stl_rope.h	/^        void replace(size_t __p, _CharT __c) {$/;"	f	class:rope	access:public	signature:(size_t __p, _CharT __c)
rope::replace	/Users/lij/.vim/stl/stl_rope.h	/^        void replace(size_t __p, const _CharT* __c_string) {$/;"	f	class:rope	access:public	signature:(size_t __p, const _CharT* __c_string)
rope::replace	/Users/lij/.vim/stl/stl_rope.h	/^        void replace(size_t __p, const _CharT* __i, const _CharT* __j) {$/;"	f	class:rope	access:public	signature:(size_t __p, const _CharT* __i, const _CharT* __j)
rope::replace	/Users/lij/.vim/stl/stl_rope.h	/^        void replace(size_t __p, const _CharT* __i, size_t __i_len) {$/;"	f	class:rope	access:public	signature:(size_t __p, const _CharT* __i, size_t __i_len)
rope::replace	/Users/lij/.vim/stl/stl_rope.h	/^        void replace(size_t __p, const const_iterator& __i,$/;"	f	class:rope	access:public	signature:(size_t __p, const const_iterator& __i, const const_iterator& __j)
rope::replace	/Users/lij/.vim/stl/stl_rope.h	/^        void replace(size_t __p, const iterator& __i,$/;"	f	class:rope	access:public	signature:(size_t __p, const iterator& __i, const iterator& __j)
rope::replace	/Users/lij/.vim/stl/stl_rope.h	/^        void replace(size_t __p, const rope& __r) {$/;"	f	class:rope	access:public	signature:(size_t __p, const rope& __r)
rope::replace	/Users/lij/.vim/stl/stl_rope.h	/^        void replace(size_t __p, size_t __n, $/;"	f	class:rope	access:public	signature:(size_t __p, size_t __n, const _CharT* __i, const _CharT* __j)
rope::replace	/Users/lij/.vim/stl/stl_rope.h	/^        void replace(size_t __p, size_t __n, $/;"	f	class:rope	access:public	signature:(size_t __p, size_t __n, const _CharT* __i, size_t __i_len)
rope::replace	/Users/lij/.vim/stl/stl_rope.h	/^        void replace(size_t __p, size_t __n, _CharT __c) {$/;"	f	class:rope	access:public	signature:(size_t __p, size_t __n, _CharT __c)
rope::replace	/Users/lij/.vim/stl/stl_rope.h	/^        void replace(size_t __p, size_t __n, const _CharT* __c_string) {$/;"	f	class:rope	access:public	signature:(size_t __p, size_t __n, const _CharT* __c_string)
rope::replace	/Users/lij/.vim/stl/stl_rope.h	/^        void replace(size_t __p, size_t __n, const rope& __r) {$/;"	f	class:rope	access:public	signature:(size_t __p, size_t __n, const rope& __r)
rope::replace	/Users/lij/.vim/stl/stl_rope.h	/^        void replace(size_t __p, size_t __n,$/;"	f	class:rope	access:public	signature:(size_t __p, size_t __n, const const_iterator& __i, const const_iterator& __j)
rope::replace	/Users/lij/.vim/stl/stl_rope.h	/^        void replace(size_t __p, size_t __n,$/;"	f	class:rope	access:public	signature:(size_t __p, size_t __n, const iterator& __i, const iterator& __j)
rope::replace_with_c_str	/Users/lij/.vim/stl/ropeimpl.h	/^const _CharT* rope<_CharT,_Alloc>::replace_with_c_str() {$/;"	f	class:rope	signature:()
rope::replace_with_c_str	/Users/lij/.vim/stl/stl_rope.h	/^        const _CharT* replace_with_c_str();$/;"	p	class:rope	access:public	signature:()
rope::reserve	/Users/lij/.vim/stl/stl_rope.h	/^            void reserve(size_type __res_arg = 0) {}$/;"	f	class:rope	access:public	signature:(size_type __res_arg = 0)
rope::resize	/Users/lij/.vim/stl/stl_rope.h	/^            void resize(size_type __n) {}$/;"	f	class:rope	access:public	signature:(size_type __n)
rope::resize	/Users/lij/.vim/stl/stl_rope.h	/^            void resize(size_type __n, _CharT __c) {}$/;"	f	class:rope	access:public	signature:(size_type __n, _CharT __c)
rope::reverse_iterator	/Users/lij/.vim/stl/stl_rope.h	/^                                 difference_type>  reverse_iterator;$/;"	t	class:rope	access:public
rope::reverse_iterator	/Users/lij/.vim/stl/stl_rope.h	/^        typedef reverse_iterator<iterator> reverse_iterator;$/;"	t	class:rope	access:public
rope::rope	/Users/lij/.vim/stl/ropeimpl.h	/^rope<_CharT, _Alloc>::rope(size_t __n, _CharT __c,$/;"	f	class:rope	signature:(size_t __n, _CharT __c, const allocator_type& __a)
rope::rope	/Users/lij/.vim/stl/stl_rope.h	/^        rope(_CharT __c, const allocator_type& __a = allocator_type())$/;"	f	class:rope	access:public	signature:(_CharT __c, const allocator_type& __a = allocator_type())
rope::rope	/Users/lij/.vim/stl/stl_rope.h	/^        rope(_RopeRep* __t, const allocator_type& __a = allocator_type())$/;"	f	class:rope	access:private	signature:(_RopeRep* __t, const allocator_type& __a = allocator_type())
rope::rope	/Users/lij/.vim/stl/stl_rope.h	/^        rope(char_producer<_CharT> *__fn, size_t __len, bool __delete_fn,$/;"	f	class:rope	access:public	signature:(char_producer<_CharT> *__fn, size_t __len, bool __delete_fn, const allocator_type& __a = allocator_type())
rope::rope	/Users/lij/.vim/stl/stl_rope.h	/^        rope(const _CharT *__s, const _CharT *__e,$/;"	f	class:rope	access:public	signature:(const _CharT *__s, const _CharT *__e, const allocator_type& __a = allocator_type())
rope::rope	/Users/lij/.vim/stl/stl_rope.h	/^        rope(const _CharT* __s, const allocator_type& __a = allocator_type())$/;"	f	class:rope	access:public	signature:(const _CharT* __s, const allocator_type& __a = allocator_type())
rope::rope	/Users/lij/.vim/stl/stl_rope.h	/^        rope(const _CharT* __s, size_t __len,$/;"	f	class:rope	access:public	signature:(const _CharT* __s, size_t __len, const allocator_type& __a = allocator_type())
rope::rope	/Users/lij/.vim/stl/stl_rope.h	/^        rope(const allocator_type& __a = allocator_type())$/;"	f	class:rope	access:public	signature:(const allocator_type& __a = allocator_type())
rope::rope	/Users/lij/.vim/stl/stl_rope.h	/^        rope(const const_iterator& __s, const const_iterator& __e,$/;"	f	class:rope	access:public	signature:(const const_iterator& __s, const const_iterator& __e, const allocator_type& __a = allocator_type())
rope::rope	/Users/lij/.vim/stl/stl_rope.h	/^        rope(const iterator& __s, const iterator& __e,$/;"	f	class:rope	access:public	signature:(const iterator& __s, const iterator& __e, const allocator_type& __a = allocator_type())
rope::rope	/Users/lij/.vim/stl/stl_rope.h	/^        rope(const rope& __x, const allocator_type& __a = allocator_type())$/;"	f	class:rope	access:public	signature:(const rope& __x, const allocator_type& __a = allocator_type())
rope::rope	/Users/lij/.vim/stl/stl_rope.h	/^        rope(size_t __n, _CharT __c,$/;"	p	class:rope	access:public	signature:(size_t __n, _CharT __c, const allocator_type& __a = allocator_type())
rope::size	/Users/lij/.vim/stl/stl_rope.h	/^        size_type size() const { $/;"	f	class:rope	access:public	signature:() const
rope::size_type	/Users/lij/.vim/stl/stl_rope.h	/^        typedef size_t size_type;$/;"	t	class:rope	access:public
rope::substr	/Users/lij/.vim/stl/stl_rope.h	/^        rope substr(const_iterator __start, const_iterator __end) const {$/;"	f	class:rope	access:public	signature:(const_iterator __start, const_iterator __end) const
rope::substr	/Users/lij/.vim/stl/stl_rope.h	/^        rope substr(iterator __start) const {$/;"	f	class:rope	access:public	signature:(iterator __start) const
rope::substr	/Users/lij/.vim/stl/stl_rope.h	/^        rope substr(iterator __start, iterator __end) const {$/;"	f	class:rope	access:public	signature:(iterator __start, iterator __end) const
rope::substr	/Users/lij/.vim/stl/stl_rope.h	/^        rope substr(size_t __start, size_t __len = 1) const {$/;"	f	class:rope	access:public	signature:(size_t __start, size_t __len = 1) const
rope::substr	/Users/lij/.vim/stl/stl_rope.h	/^        rope<_CharT,_Alloc> substr(const_iterator __start) {$/;"	f	class:rope	access:public	signature:(const_iterator __start)
rope::swap	/Users/lij/.vim/stl/stl_rope.h	/^        void swap(rope& __b) {$/;"	f	class:rope	access:public	signature:(rope& __b)
rope::value_type	/Users/lij/.vim/stl/stl_rope.h	/^        typedef _CharT value_type;$/;"	t	class:rope	access:public
rope::~rope	/Users/lij/.vim/stl/stl_rope.h	/^        ~rope()$/;"	f	class:rope	access:public	signature:()
rotate	/Users/lij/.vim/stl/ropeimpl.h	/^inline void rotate(_Rope_iterator<char,__STL_DEFAULT_ALLOCATOR(char)> __first,$/;"	f	signature:(_Rope_iterator<char,__STL_DEFAULT_ALLOCATOR(char)> __first, _Rope_iterator<char,__STL_DEFAULT_ALLOCATOR(char)> __middle, _Rope_iterator<char,__STL_DEFAULT_ALLOCATOR(char)> __last)
rotate	/Users/lij/.vim/stl/stl_algo.h	/^inline _ForwardIter rotate(_ForwardIter __first, _ForwardIter __middle,$/;"	f	signature:(_ForwardIter __first, _ForwardIter __middle, _ForwardIter __last)
rotate_copy	/Users/lij/.vim/stl/stl_algo.h	/^_OutputIter rotate_copy(_ForwardIter __first, _ForwardIter __middle,$/;"	f	signature:(_ForwardIter __first, _ForwardIter __middle, _ForwardIter __last, _OutputIter __result)
round_indeterminate	/Users/lij/.vim/stl/limits	/^  round_indeterminate       = -1,$/;"	e	enum:float_round_style	file:
round_to_nearest	/Users/lij/.vim/stl/limits	/^  round_to_nearest          =  1,$/;"	e	enum:float_round_style	file:
round_toward_infinity	/Users/lij/.vim/stl/limits	/^  round_toward_infinity     =  2,$/;"	e	enum:float_round_style	file:
round_toward_neg_infinity	/Users/lij/.vim/stl/limits	/^  round_toward_neg_infinity =  3$/;"	e	enum:float_round_style	file:
round_toward_zero	/Users/lij/.vim/stl/limits	/^  round_toward_zero         =  0,$/;"	e	enum:float_round_style	file:
runtime_error	/Users/lij/.vim/stl/stdexcept	/^  runtime_error(const string& __s) : __Named_exception(__s) {}$/;"	f	class:runtime_error	access:public	signature:(const string& __s)
runtime_error	/Users/lij/.vim/stl/stdexcept	/^class runtime_error : public __Named_exception {$/;"	c	file:	inherits:__Named_exception
runtime_error::runtime_error	/Users/lij/.vim/stl/stdexcept	/^  runtime_error(const string& __s) : __Named_exception(__s) {}$/;"	f	class:runtime_error	access:public	signature:(const string& __s)
search	/Users/lij/.vim/stl/stl_algo.h	/^_ForwardIter1 search(_ForwardIter1 __first1, _ForwardIter1 __last1,$/;"	f	signature:(_ForwardIter1 __first1, _ForwardIter1 __last1, _ForwardIter2 __first2, _ForwardIter2 __last2)
search	/Users/lij/.vim/stl/stl_algo.h	/^_ForwardIter1 search(_ForwardIter1 __first1, _ForwardIter1 __last1,$/;"	f	signature:(_ForwardIter1 __first1, _ForwardIter1 __last1, _ForwardIter2 __first2, _ForwardIter2 __last2, _BinaryPred __predicate)
search_n	/Users/lij/.vim/stl/stl_algo.h	/^_ForwardIter search_n(_ForwardIter __first, _ForwardIter __last,$/;"	f	signature:(_ForwardIter __first, _ForwardIter __last, _Integer __count, const _Tp& __val)
search_n	/Users/lij/.vim/stl/stl_algo.h	/^_ForwardIter search_n(_ForwardIter __first, _ForwardIter __last,$/;"	f	signature:(_ForwardIter __first, _ForwardIter __last, _Integer __count, const _Tp& __val, _BinaryPred __binary_pred)
second	/Users/lij/.vim/stl/stl_pair.h	/^  _T2 second;$/;"	m	struct:pair	access:public
second_argument_type	/Users/lij/.vim/stl/stl_function.h	/^  typedef  _Arg2   second_argument_type;$/;"	t	struct:_Constant_binary_fun	access:public
second_argument_type	/Users/lij/.vim/stl/stl_function.h	/^  typedef _Arg2 second_argument_type;$/;"	t	struct:binary_function	access:public
second_type	/Users/lij/.vim/stl/stl_pair.h	/^  typedef _T2 second_type;$/;"	t	struct:pair	access:public
select1st	/Users/lij/.vim/stl/stl_function.h	/^template <class _Pair> struct select1st : public _Select1st<_Pair> {};$/;"	s	inherits:_Select1st
select2nd	/Users/lij/.vim/stl/stl_function.h	/^template <class _Pair> struct select2nd : public _Select2nd<_Pair> {};$/;"	s	inherits:_Select2nd
sequence_buffer	/Users/lij/.vim/stl/stl_rope.h	/^        sequence_buffer() : _M_prefix(0), _M_buf_count(0) {}$/;"	f	class:sequence_buffer	access:public	signature:()
sequence_buffer	/Users/lij/.vim/stl/stl_rope.h	/^        sequence_buffer(_Sequence& __s) : _M_prefix(&__s), _M_buf_count(0) {}$/;"	f	class:sequence_buffer	access:public	signature:(_Sequence& __s)
sequence_buffer	/Users/lij/.vim/stl/stl_rope.h	/^        sequence_buffer(const sequence_buffer& __x) {$/;"	f	class:sequence_buffer	access:public	signature:(const sequence_buffer& __x)
sequence_buffer	/Users/lij/.vim/stl/stl_rope.h	/^        sequence_buffer(sequence_buffer& __x) {$/;"	f	class:sequence_buffer	access:public	signature:(sequence_buffer& __x)
sequence_buffer	/Users/lij/.vim/stl/stl_rope.h	/^class sequence_buffer : public output_iterator {$/;"	c	inherits:output_iterator
sequence_buffer::_M_buf_count	/Users/lij/.vim/stl/stl_rope.h	/^        size_t     _M_buf_count;$/;"	m	class:sequence_buffer	access:protected
sequence_buffer::_M_buffer	/Users/lij/.vim/stl/stl_rope.h	/^        value_type _M_buffer[_Buf_sz];$/;"	m	class:sequence_buffer	access:protected
sequence_buffer::_M_prefix	/Users/lij/.vim/stl/stl_rope.h	/^        _Sequence* _M_prefix;$/;"	m	class:sequence_buffer	access:protected
sequence_buffer::append	/Users/lij/.vim/stl/stl_rope.h	/^        void append(value_type* __s, size_t __len)$/;"	f	class:sequence_buffer	access:public	signature:(value_type* __s, size_t __len)
sequence_buffer::flush	/Users/lij/.vim/stl/stl_rope.h	/^        void flush() {$/;"	f	class:sequence_buffer	access:public	signature:()
sequence_buffer::operator *	/Users/lij/.vim/stl/stl_rope.h	/^        sequence_buffer& operator*() { return *this; }$/;"	f	class:sequence_buffer	access:public	signature:()
sequence_buffer::operator ++	/Users/lij/.vim/stl/stl_rope.h	/^        sequence_buffer& operator++() { return *this; }$/;"	f	class:sequence_buffer	access:public	signature:()
sequence_buffer::operator ++	/Users/lij/.vim/stl/stl_rope.h	/^        sequence_buffer& operator++(int) { return *this; }$/;"	f	class:sequence_buffer	access:public	signature:(int)
sequence_buffer::operator =	/Users/lij/.vim/stl/stl_rope.h	/^        sequence_buffer& operator= (const sequence_buffer& __x) {$/;"	f	class:sequence_buffer	access:public	signature:(const sequence_buffer& __x)
sequence_buffer::operator =	/Users/lij/.vim/stl/stl_rope.h	/^        sequence_buffer& operator= (sequence_buffer& __x) {$/;"	f	class:sequence_buffer	access:public	signature:(sequence_buffer& __x)
sequence_buffer::operator =	/Users/lij/.vim/stl/stl_rope.h	/^        sequence_buffer& operator=(const value_type& __rhs)$/;"	f	class:sequence_buffer	access:public	signature:(const value_type& __rhs)
sequence_buffer::push_back	/Users/lij/.vim/stl/stl_rope.h	/^        void push_back(value_type __x)$/;"	f	class:sequence_buffer	access:public	signature:(value_type __x)
sequence_buffer::put	/Users/lij/.vim/stl/stl_rope.h	/^        sequence_buffer& put(value_type __x)$/;"	f	class:sequence_buffer	access:public	signature:(value_type __x)
sequence_buffer::sequence_buffer	/Users/lij/.vim/stl/stl_rope.h	/^        sequence_buffer() : _M_prefix(0), _M_buf_count(0) {}$/;"	f	class:sequence_buffer	access:public	signature:()
sequence_buffer::sequence_buffer	/Users/lij/.vim/stl/stl_rope.h	/^        sequence_buffer(_Sequence& __s) : _M_prefix(&__s), _M_buf_count(0) {}$/;"	f	class:sequence_buffer	access:public	signature:(_Sequence& __s)
sequence_buffer::sequence_buffer	/Users/lij/.vim/stl/stl_rope.h	/^        sequence_buffer(const sequence_buffer& __x) {$/;"	f	class:sequence_buffer	access:public	signature:(const sequence_buffer& __x)
sequence_buffer::sequence_buffer	/Users/lij/.vim/stl/stl_rope.h	/^        sequence_buffer(sequence_buffer& __x) {$/;"	f	class:sequence_buffer	access:public	signature:(sequence_buffer& __x)
sequence_buffer::value_type	/Users/lij/.vim/stl/stl_rope.h	/^            typedef typename _Sequence::value_type value_type;$/;"	t	class:sequence_buffer	access:public
sequence_buffer::write	/Users/lij/.vim/stl/stl_rope.h	/^        sequence_buffer& write(value_type* __s, size_t __len)$/;"	f	class:sequence_buffer	access:public	signature:(value_type* __s, size_t __len)
sequence_buffer::~sequence_buffer	/Users/lij/.vim/stl/stl_rope.h	/^        ~sequence_buffer() { flush(); }$/;"	f	class:sequence_buffer	access:public	signature:()
set	/Users/lij/.vim/stl/bitset	/^  bitset<_Nb>& set() {$/;"	f	class:bitset	access:public	signature:()
set	/Users/lij/.vim/stl/bitset	/^  bitset<_Nb>& set(size_t __pos) {$/;"	f	class:bitset	access:public	signature:(size_t __pos)
set	/Users/lij/.vim/stl/bitset	/^  bitset<_Nb>& set(size_t __pos, int __val) {$/;"	f	class:bitset	access:public	signature:(size_t __pos, int __val)
set	/Users/lij/.vim/stl/stl_set.h	/^  explicit set(const _Compare& __comp,$/;"	f	class:set	access:public	signature:(const _Compare& __comp, const allocator_type& __a = allocator_type())
set	/Users/lij/.vim/stl/stl_set.h	/^  set() : _M_t(_Compare(), allocator_type()) {}$/;"	f	class:set	access:public	signature:()
set	/Users/lij/.vim/stl/stl_set.h	/^  set(_InputIterator __first, _InputIterator __last)$/;"	f	class:set	access:public	signature:(_InputIterator __first, _InputIterator __last)
set	/Users/lij/.vim/stl/stl_set.h	/^  set(_InputIterator __first, _InputIterator __last, const _Compare& __comp,$/;"	f	class:set	access:public	signature:(_InputIterator __first, _InputIterator __last, const _Compare& __comp, const allocator_type& __a = allocator_type())
set	/Users/lij/.vim/stl/stl_set.h	/^  set(const set<_Key,_Compare,_Alloc>& __x) : _M_t(__x._M_t) {}$/;"	f	class:set	access:public	signature:(const set<_Key,_Compare,_Alloc>& __x)
set	/Users/lij/.vim/stl/stl_set.h	/^  set(const value_type* __first, $/;"	f	class:set	access:public	signature:(const value_type* __first, const value_type* __last, const _Compare& __comp, const allocator_type& __a = allocator_type())
set	/Users/lij/.vim/stl/stl_set.h	/^  set(const value_type* __first, const value_type* __last) $/;"	f	class:set	access:public	signature:(const value_type* __first, const value_type* __last)
set	/Users/lij/.vim/stl/stl_set.h	/^  set(const_iterator __first, const_iterator __last)$/;"	f	class:set	access:public	signature:(const_iterator __first, const_iterator __last)
set	/Users/lij/.vim/stl/stl_set.h	/^  set(const_iterator __first, const_iterator __last, const _Compare& __comp,$/;"	f	class:set	access:public	signature:(const_iterator __first, const_iterator __last, const _Compare& __comp, const allocator_type& __a = allocator_type())
set	/Users/lij/.vim/stl/stl_set.h	/^class set {$/;"	c
set::_M_t	/Users/lij/.vim/stl/stl_set.h	/^  _Rep_type _M_t;  \/\/ red-black tree representing set$/;"	m	class:set	access:private
set::_Rep_type	/Users/lij/.vim/stl/stl_set.h	/^                  _Identity<value_type>, key_compare, _Alloc> _Rep_type;$/;"	t	class:set	access:private
set::__STL_CLASS_BINARY_FUNCTION_CHECK	/Users/lij/.vim/stl/stl_set.h	/^  __STL_CLASS_BINARY_FUNCTION_CHECK(_Compare, bool, _Key, _Key);$/;"	p	class:set	access:private	signature:(_Compare, bool, _Key, _Key)
set::__STL_CLASS_REQUIRES	/Users/lij/.vim/stl/stl_set.h	/^  __STL_CLASS_REQUIRES(_Key, _Assignable);$/;"	p	class:set	access:private	signature:(_Key, _Assignable)
set::__STL_NULL_TMPL_ARGS	/Users/lij/.vim/stl/stl_set.h	/^  operator<  __STL_NULL_TMPL_ARGS (const set&, const set&);$/;"	p	class:set	access:friend	signature:(const set&, const set&)
set::__STL_NULL_TMPL_ARGS	/Users/lij/.vim/stl/stl_set.h	/^  operator== __STL_NULL_TMPL_ARGS (const set&, const set&);$/;"	p	class:set	access:friend	signature:(const set&, const set&)
set::allocator_type	/Users/lij/.vim/stl/stl_set.h	/^  typedef typename _Rep_type::allocator_type allocator_type;$/;"	t	class:set	access:public
set::begin	/Users/lij/.vim/stl/stl_set.h	/^  iterator begin() const { return _M_t.begin(); }$/;"	f	class:set	access:public	signature:() const
set::clear	/Users/lij/.vim/stl/stl_set.h	/^  void clear() { _M_t.clear(); }$/;"	f	class:set	access:public	signature:()
set::const_iterator	/Users/lij/.vim/stl/stl_set.h	/^  typedef typename _Rep_type::const_iterator const_iterator;$/;"	t	class:set	access:public
set::const_pointer	/Users/lij/.vim/stl/stl_set.h	/^  typedef typename _Rep_type::const_pointer const_pointer;$/;"	t	class:set	access:public
set::const_reference	/Users/lij/.vim/stl/stl_set.h	/^  typedef typename _Rep_type::const_reference const_reference;$/;"	t	class:set	access:public
set::const_reverse_iterator	/Users/lij/.vim/stl/stl_set.h	/^  typedef typename _Rep_type::const_reverse_iterator const_reverse_iterator;$/;"	t	class:set	access:public
set::count	/Users/lij/.vim/stl/stl_set.h	/^  size_type count(const key_type& __x) const {$/;"	f	class:set	access:public	signature:(const key_type& __x) const
set::difference_type	/Users/lij/.vim/stl/stl_set.h	/^  typedef typename _Rep_type::difference_type difference_type;$/;"	t	class:set	access:public
set::empty	/Users/lij/.vim/stl/stl_set.h	/^  bool empty() const { return _M_t.empty(); }$/;"	f	class:set	access:public	signature:() const
set::end	/Users/lij/.vim/stl/stl_set.h	/^  iterator end() const { return _M_t.end(); }$/;"	f	class:set	access:public	signature:() const
set::equal_range	/Users/lij/.vim/stl/stl_set.h	/^  pair<iterator,iterator> equal_range(const key_type& __x) const {$/;"	f	class:set	access:public	signature:(const key_type& __x) const
set::erase	/Users/lij/.vim/stl/stl_set.h	/^  size_type erase(const key_type& __x) { $/;"	f	class:set	access:public	signature:(const key_type& __x)
set::erase	/Users/lij/.vim/stl/stl_set.h	/^  void erase(iterator __first, iterator __last) { $/;"	f	class:set	access:public	signature:(iterator __first, iterator __last)
set::erase	/Users/lij/.vim/stl/stl_set.h	/^  void erase(iterator __position) { $/;"	f	class:set	access:public	signature:(iterator __position)
set::find	/Users/lij/.vim/stl/stl_set.h	/^  iterator find(const key_type& __x) const { return _M_t.find(__x); }$/;"	f	class:set	access:public	signature:(const key_type& __x) const
set::get_allocator	/Users/lij/.vim/stl/stl_set.h	/^  allocator_type get_allocator() const { return _M_t.get_allocator(); }$/;"	f	class:set	access:public	signature:() const
set::insert	/Users/lij/.vim/stl/stl_set.h	/^  iterator insert(iterator __position, const value_type& __x) {$/;"	f	class:set	access:public	signature:(iterator __position, const value_type& __x)
set::insert	/Users/lij/.vim/stl/stl_set.h	/^  pair<iterator,bool> insert(const value_type& __x) { $/;"	f	class:set	access:public	signature:(const value_type& __x)
set::insert	/Users/lij/.vim/stl/stl_set.h	/^  void insert(_InputIterator __first, _InputIterator __last) {$/;"	f	class:set	access:public	signature:(_InputIterator __first, _InputIterator __last)
set::insert	/Users/lij/.vim/stl/stl_set.h	/^  void insert(const value_type* __first, const value_type* __last) {$/;"	f	class:set	access:public	signature:(const value_type* __first, const value_type* __last)
set::insert	/Users/lij/.vim/stl/stl_set.h	/^  void insert(const_iterator __first, const_iterator __last) {$/;"	f	class:set	access:public	signature:(const_iterator __first, const_iterator __last)
set::iterator	/Users/lij/.vim/stl/stl_set.h	/^  typedef typename _Rep_type::const_iterator iterator;$/;"	t	class:set	access:public
set::key_comp	/Users/lij/.vim/stl/stl_set.h	/^  key_compare key_comp() const { return _M_t.key_comp(); }$/;"	f	class:set	access:public	signature:() const
set::key_compare	/Users/lij/.vim/stl/stl_set.h	/^  typedef _Compare key_compare;$/;"	t	class:set	access:public
set::key_type	/Users/lij/.vim/stl/stl_set.h	/^  typedef _Key     key_type;$/;"	t	class:set	access:public
set::lower_bound	/Users/lij/.vim/stl/stl_set.h	/^  iterator lower_bound(const key_type& __x) const {$/;"	f	class:set	access:public	signature:(const key_type& __x) const
set::max_size	/Users/lij/.vim/stl/stl_set.h	/^  size_type max_size() const { return _M_t.max_size(); }$/;"	f	class:set	access:public	signature:() const
set::operator <	/Users/lij/.vim/stl/stl_set.h	/^  friend bool operator< (const set<_K1,_C1,_A1>&, const set<_K1,_C1,_A1>&);$/;"	p	class:set	access:friend	signature:(const set<_K1,_C1,_A1>&, const set<_K1,_C1,_A1>&)
set::operator =	/Users/lij/.vim/stl/stl_set.h	/^  set<_Key,_Compare,_Alloc>& operator=(const set<_Key, _Compare, _Alloc>& __x)$/;"	f	class:set	access:public	signature:(const set<_Key, _Compare, _Alloc>& __x)
set::operator ==	/Users/lij/.vim/stl/stl_set.h	/^  friend bool operator== (const set<_K1,_C1,_A1>&, const set<_K1,_C1,_A1>&);$/;"	p	class:set	access:friend	signature:(const set<_K1,_C1,_A1>&, const set<_K1,_C1,_A1>&)
set::pointer	/Users/lij/.vim/stl/stl_set.h	/^  typedef typename _Rep_type::const_pointer pointer;$/;"	t	class:set	access:public
set::rbegin	/Users/lij/.vim/stl/stl_set.h	/^  reverse_iterator rbegin() const { return _M_t.rbegin(); } $/;"	f	class:set	access:public	signature:() const
set::reference	/Users/lij/.vim/stl/stl_set.h	/^  typedef typename _Rep_type::const_reference reference;$/;"	t	class:set	access:public
set::rend	/Users/lij/.vim/stl/stl_set.h	/^  reverse_iterator rend() const { return _M_t.rend(); }$/;"	f	class:set	access:public	signature:() const
set::reverse_iterator	/Users/lij/.vim/stl/stl_set.h	/^  typedef typename _Rep_type::const_reverse_iterator reverse_iterator;$/;"	t	class:set	access:public
set::set	/Users/lij/.vim/stl/stl_set.h	/^  explicit set(const _Compare& __comp,$/;"	f	class:set	access:public	signature:(const _Compare& __comp, const allocator_type& __a = allocator_type())
set::set	/Users/lij/.vim/stl/stl_set.h	/^  set() : _M_t(_Compare(), allocator_type()) {}$/;"	f	class:set	access:public	signature:()
set::set	/Users/lij/.vim/stl/stl_set.h	/^  set(_InputIterator __first, _InputIterator __last)$/;"	f	class:set	access:public	signature:(_InputIterator __first, _InputIterator __last)
set::set	/Users/lij/.vim/stl/stl_set.h	/^  set(_InputIterator __first, _InputIterator __last, const _Compare& __comp,$/;"	f	class:set	access:public	signature:(_InputIterator __first, _InputIterator __last, const _Compare& __comp, const allocator_type& __a = allocator_type())
set::set	/Users/lij/.vim/stl/stl_set.h	/^  set(const set<_Key,_Compare,_Alloc>& __x) : _M_t(__x._M_t) {}$/;"	f	class:set	access:public	signature:(const set<_Key,_Compare,_Alloc>& __x)
set::set	/Users/lij/.vim/stl/stl_set.h	/^  set(const value_type* __first, $/;"	f	class:set	access:public	signature:(const value_type* __first, const value_type* __last, const _Compare& __comp, const allocator_type& __a = allocator_type())
set::set	/Users/lij/.vim/stl/stl_set.h	/^  set(const value_type* __first, const value_type* __last) $/;"	f	class:set	access:public	signature:(const value_type* __first, const value_type* __last)
set::set	/Users/lij/.vim/stl/stl_set.h	/^  set(const_iterator __first, const_iterator __last)$/;"	f	class:set	access:public	signature:(const_iterator __first, const_iterator __last)
set::set	/Users/lij/.vim/stl/stl_set.h	/^  set(const_iterator __first, const_iterator __last, const _Compare& __comp,$/;"	f	class:set	access:public	signature:(const_iterator __first, const_iterator __last, const _Compare& __comp, const allocator_type& __a = allocator_type())
set::size	/Users/lij/.vim/stl/stl_set.h	/^  size_type size() const { return _M_t.size(); }$/;"	f	class:set	access:public	signature:() const
set::size_type	/Users/lij/.vim/stl/stl_set.h	/^  typedef typename _Rep_type::size_type size_type;$/;"	t	class:set	access:public
set::swap	/Users/lij/.vim/stl/stl_set.h	/^  void swap(set<_Key,_Compare,_Alloc>& __x) { _M_t.swap(__x._M_t); }$/;"	f	class:set	access:public	signature:(set<_Key,_Compare,_Alloc>& __x)
set::upper_bound	/Users/lij/.vim/stl/stl_set.h	/^  iterator upper_bound(const key_type& __x) const {$/;"	f	class:set	access:public	signature:(const key_type& __x) const
set::value_comp	/Users/lij/.vim/stl/stl_set.h	/^  value_compare value_comp() const { return _M_t.key_comp(); }$/;"	f	class:set	access:public	signature:() const
set::value_compare	/Users/lij/.vim/stl/stl_set.h	/^  typedef _Compare value_compare;$/;"	t	class:set	access:public
set::value_type	/Users/lij/.vim/stl/stl_set.h	/^  typedef _Key     value_type;$/;"	t	class:set	access:public
set_difference	/Users/lij/.vim/stl/stl_algo.h	/^_OutputIter set_difference(_InputIter1 __first1, _InputIter1 __last1,$/;"	f	signature:(_InputIter1 __first1, _InputIter1 __last1, _InputIter2 __first2, _InputIter2 __last2, _OutputIter __result)
set_difference	/Users/lij/.vim/stl/stl_algo.h	/^_OutputIter set_difference(_InputIter1 __first1, _InputIter1 __last1,$/;"	f	signature:(_InputIter1 __first1, _InputIter1 __last1, _InputIter2 __first2, _InputIter2 __last2, _OutputIter __result, _Compare __comp)
set_intersection	/Users/lij/.vim/stl/stl_algo.h	/^_OutputIter set_intersection(_InputIter1 __first1, _InputIter1 __last1,$/;"	f	signature:(_InputIter1 __first1, _InputIter1 __last1, _InputIter2 __first2, _InputIter2 __last2, _OutputIter __result)
set_intersection	/Users/lij/.vim/stl/stl_algo.h	/^_OutputIter set_intersection(_InputIter1 __first1, _InputIter1 __last1,$/;"	f	signature:(_InputIter1 __first1, _InputIter1 __last1, _InputIter2 __first2, _InputIter2 __last2, _OutputIter __result, _Compare __comp)
set_symmetric_difference	/Users/lij/.vim/stl/stl_algo.h	/^set_symmetric_difference(_InputIter1 __first1, _InputIter1 __last1,$/;"	f	signature:(_InputIter1 __first1, _InputIter1 __last1, _InputIter2 __first2, _InputIter2 __last2, _OutputIter __result)
set_symmetric_difference	/Users/lij/.vim/stl/stl_algo.h	/^set_symmetric_difference(_InputIter1 __first1, _InputIter1 __last1,$/;"	f	signature:(_InputIter1 __first1, _InputIter1 __last1, _InputIter2 __first2, _InputIter2 __last2, _OutputIter __result, _Compare __comp)
set_union	/Users/lij/.vim/stl/stl_algo.h	/^_OutputIter set_union(_InputIter1 __first1, _InputIter1 __last1,$/;"	f	signature:(_InputIter1 __first1, _InputIter1 __last1, _InputIter2 __first2, _InputIter2 __last2, _OutputIter __result)
set_union	/Users/lij/.vim/stl/stl_algo.h	/^_OutputIter set_union(_InputIter1 __first1, _InputIter1 __last1,$/;"	f	signature:(_InputIter1 __first1, _InputIter1 __last1, _InputIter2 __first2, _InputIter2 __last2, _OutputIter __result, _Compare __comp)
shift	/Users/lij/.vim/stl/valarray	/^  valarray shift(int __n) const;$/;"	p	class:valarray	file:	access:public	signature:(int __n) const
shift	/Users/lij/.vim/stl/valarray	/^valarray<_Tp> valarray<_Tp>::shift(int __n) const$/;"	f	class:valarray	signature:(int __n) const
simple_alloc	/Users/lij/.vim/stl/stl_alloc.h	/^class simple_alloc {$/;"	c
simple_alloc::allocate	/Users/lij/.vim/stl/stl_alloc.h	/^    static _Tp* allocate(size_t __n)$/;"	f	class:simple_alloc	access:public	signature:(size_t __n)
simple_alloc::allocate	/Users/lij/.vim/stl/stl_alloc.h	/^    static _Tp* allocate(void)$/;"	f	class:simple_alloc	access:public	signature:(void)
simple_alloc::deallocate	/Users/lij/.vim/stl/stl_alloc.h	/^    static void deallocate(_Tp* __p)$/;"	f	class:simple_alloc	access:public	signature:(_Tp* __p)
simple_alloc::deallocate	/Users/lij/.vim/stl/stl_alloc.h	/^    static void deallocate(_Tp* __p, size_t __n)$/;"	f	class:simple_alloc	access:public	signature:(_Tp* __p, size_t __n)
sin	/Users/lij/.vim/stl/valarray	/^inline valarray<_Tp> sin(const valarray<_Tp>& __x) {$/;"	f	signature:(const valarray<_Tp>& __x)
single_client_alloc	/Users/lij/.vim/stl/stl_alloc.h	/^typedef __default_alloc_template<false, 0> single_client_alloc;$/;"	t
single_client_alloc	/Users/lij/.vim/stl/stl_alloc.h	/^typedef malloc_alloc single_client_alloc;$/;"	t
sinh	/Users/lij/.vim/stl/valarray	/^inline valarray<_Tp> sinh(const valarray<_Tp>& __x) {$/;"	f	signature:(const valarray<_Tp>& __x)
size	/Users/lij/.vim/stl/bitset	/^  size_t size() const { return _Nb; }$/;"	f	class:bitset	access:public	signature:() const
size	/Users/lij/.vim/stl/stl_bvector.h	/^  size_type size() const { return size_type(end() - begin()); }$/;"	f	class:__BVECTOR	access:public	signature:() const
size	/Users/lij/.vim/stl/stl_deque.h	/^  size_type size() const { return _M_finish - _M_start; }$/;"	f	class:deque	access:public	signature:() const
size	/Users/lij/.vim/stl/stl_hash_map.h	/^  size_type size() const { return _M_ht.size(); }$/;"	f	class:hash_map	access:public	signature:() const
size	/Users/lij/.vim/stl/stl_hash_map.h	/^  size_type size() const { return _M_ht.size(); }$/;"	f	class:hash_multimap	access:public	signature:() const
size	/Users/lij/.vim/stl/stl_hash_set.h	/^  size_type size() const { return _M_ht.size(); }$/;"	f	class:hash_multiset	access:public	signature:() const
size	/Users/lij/.vim/stl/stl_hash_set.h	/^  size_type size() const { return _M_ht.size(); }$/;"	f	class:hash_set	access:public	signature:() const
size	/Users/lij/.vim/stl/stl_hashtable.h	/^  size_type size() const { return _M_num_elements; }$/;"	f	class:hashtable	access:public	signature:() const
size	/Users/lij/.vim/stl/stl_list.h	/^  size_type size() const {$/;"	f	class:list	access:public	signature:() const
size	/Users/lij/.vim/stl/stl_map.h	/^  size_type size() const { return _M_t.size(); }$/;"	f	class:map	access:public	signature:() const
size	/Users/lij/.vim/stl/stl_multimap.h	/^  size_type size() const { return _M_t.size(); }$/;"	f	class:multimap	access:public	signature:() const
size	/Users/lij/.vim/stl/stl_multiset.h	/^  size_type size() const { return _M_t.size(); }$/;"	f	class:multiset	access:public	signature:() const
size	/Users/lij/.vim/stl/stl_queue.h	/^  size_type size() const { return c.size(); }$/;"	f	class:priority_queue	access:public	signature:() const
size	/Users/lij/.vim/stl/stl_queue.h	/^  size_type size() const { return c.size(); }$/;"	f	class:queue	access:public	signature:() const
size	/Users/lij/.vim/stl/stl_rope.h	/^        size_type size() const { $/;"	f	class:rope	access:public	signature:() const
size	/Users/lij/.vim/stl/stl_set.h	/^  size_type size() const { return _M_t.size(); }$/;"	f	class:set	access:public	signature:() const
size	/Users/lij/.vim/stl/stl_slist.h	/^  size_type size() const { return __slist_size(this->_M_head._M_next); }$/;"	f	class:slist	access:public	signature:() const
size	/Users/lij/.vim/stl/stl_stack.h	/^  size_type size() const { return c.size(); }$/;"	f	class:stack	access:public	signature:() const
size	/Users/lij/.vim/stl/stl_tempbuf.h	/^  ptrdiff_t size() const { return _M_len; }$/;"	f	class:_Temporary_buffer	access:public	signature:() const
size	/Users/lij/.vim/stl/stl_tree.h	/^  size_type size() const { return _M_node_count; }$/;"	f	class:_Rb_tree	access:public	signature:() const
size	/Users/lij/.vim/stl/stl_vector.h	/^  size_type size() const$/;"	f	class:vector	access:public	signature:() const
size	/Users/lij/.vim/stl/string	/^  size_type size() const { return _M_finish - _M_start; }$/;"	f	class:basic_string	access:public	signature:() const
size	/Users/lij/.vim/stl/valarray	/^  size_t size()   const { return _M_length; }$/;"	f	class:slice	access:public	signature:() const
size	/Users/lij/.vim/stl/valarray	/^  size_t size() const { return this->_M_size; }$/;"	f	class:valarray	access:public	signature:() const
size	/Users/lij/.vim/stl/valarray	/^  valarray<size_t> size()   const { return _M_lengths; }$/;"	f	class:gslice	access:public	signature:() const
size_type	/Users/lij/.vim/stl/concept_checks.h	/^__STL_TYPEDEF_REQUIREMENT(size_type);$/;"	v
size_type	/Users/lij/.vim/stl/defalloc.h	/^    typedef size_t size_type;$/;"	t	class:allocator	access:public
size_type	/Users/lij/.vim/stl/pthread_alloc	/^  typedef size_t      size_type;$/;"	t	class:pthread_allocator	file:	access:public
size_type	/Users/lij/.vim/stl/pthread_alloc	/^  typedef size_t     size_type;$/;"	t	class:pthread_allocator	file:	access:public
size_type	/Users/lij/.vim/stl/stl_alloc.h	/^  typedef size_t      size_type;$/;"	t	class:allocator	access:public
size_type	/Users/lij/.vim/stl/stl_alloc.h	/^  typedef size_t     size_type;$/;"	t	class:allocator	access:public
size_type	/Users/lij/.vim/stl/stl_alloc.h	/^  typedef size_t    size_type;$/;"	t	struct:__allocator	access:public
size_type	/Users/lij/.vim/stl/stl_bvector.h	/^  typedef size_t size_type;$/;"	t	class:__BVECTOR	access:public
size_type	/Users/lij/.vim/stl/stl_deque.h	/^  typedef size_t size_type;$/;"	t	class:deque	access:public
size_type	/Users/lij/.vim/stl/stl_deque.h	/^  typedef size_t size_type;$/;"	t	struct:_Deque_iterator	access:public
size_type	/Users/lij/.vim/stl/stl_hash_map.h	/^  typedef typename _Ht::size_type size_type;$/;"	t	class:hash_map	access:public
size_type	/Users/lij/.vim/stl/stl_hash_map.h	/^  typedef typename _Ht::size_type size_type;$/;"	t	class:hash_multimap	access:public
size_type	/Users/lij/.vim/stl/stl_hash_set.h	/^  typedef typename _Ht::size_type size_type;$/;"	t	class:hash_multiset	access:public
size_type	/Users/lij/.vim/stl/stl_hash_set.h	/^  typedef typename _Ht::size_type size_type;$/;"	t	class:hash_set	access:public
size_type	/Users/lij/.vim/stl/stl_hashtable.h	/^  typedef size_t            size_type;$/;"	t	class:hashtable	access:public
size_type	/Users/lij/.vim/stl/stl_hashtable.h	/^  typedef size_t size_type;$/;"	t	struct:_Hashtable_const_iterator	access:public
size_type	/Users/lij/.vim/stl/stl_hashtable.h	/^  typedef size_t size_type;$/;"	t	struct:_Hashtable_iterator	access:public
size_type	/Users/lij/.vim/stl/stl_list.h	/^  typedef size_t                     size_type;$/;"	t	struct:_List_iterator_base	access:public
size_type	/Users/lij/.vim/stl/stl_list.h	/^  typedef size_t size_type;$/;"	t	class:list	access:public
size_type	/Users/lij/.vim/stl/stl_map.h	/^  typedef typename _Rep_type::size_type size_type;$/;"	t	class:map	access:public
size_type	/Users/lij/.vim/stl/stl_multimap.h	/^  typedef typename _Rep_type::size_type size_type;$/;"	t	class:multimap	access:public
size_type	/Users/lij/.vim/stl/stl_multiset.h	/^  typedef typename _Rep_type::size_type size_type;$/;"	t	class:multiset	access:public
size_type	/Users/lij/.vim/stl/stl_queue.h	/^  typedef typename _Sequence::size_type       size_type;$/;"	t	class:priority_queue	access:public
size_type	/Users/lij/.vim/stl/stl_queue.h	/^  typedef typename _Sequence::size_type       size_type;$/;"	t	class:queue	access:public
size_type	/Users/lij/.vim/stl/stl_rope.h	/^        typedef size_t size_type;$/;"	t	class:rope	access:public
size_type	/Users/lij/.vim/stl/stl_set.h	/^  typedef typename _Rep_type::size_type size_type;$/;"	t	class:set	access:public
size_type	/Users/lij/.vim/stl/stl_slist.h	/^  typedef size_t               size_type;$/;"	t	struct:_Slist_iterator_base	access:public
size_type	/Users/lij/.vim/stl/stl_slist.h	/^  typedef size_t            size_type;$/;"	t	class:slist	access:public
size_type	/Users/lij/.vim/stl/stl_stack.h	/^  typedef typename _Sequence::size_type       size_type;$/;"	t	class:stack	access:public
size_type	/Users/lij/.vim/stl/stl_tree.h	/^  typedef size_t size_type;$/;"	t	class:_Rb_tree	access:public
size_type	/Users/lij/.vim/stl/stl_vector.h	/^  typedef size_t size_type;$/;"	t	class:vector	access:public
size_type	/Users/lij/.vim/stl/string	/^  typedef size_t size_type;$/;"	t	class:basic_string	file:	access:public
slice	/Users/lij/.vim/stl/valarray	/^  slice() : _M_start(0), _M_length(0), _M_stride(0) {}$/;"	f	class:slice	access:public	signature:()
slice	/Users/lij/.vim/stl/valarray	/^  slice(size_t __start, size_t __length, size_t __stride)$/;"	f	class:slice	access:public	signature:(size_t __start, size_t __length, size_t __stride)
slice	/Users/lij/.vim/stl/valarray	/^class slice {$/;"	c	file:
slice::_M_length	/Users/lij/.vim/stl/valarray	/^  size_t _M_length;$/;"	m	class:slice	file:	access:private
slice::_M_start	/Users/lij/.vim/stl/valarray	/^  size_t _M_start;$/;"	m	class:slice	file:	access:private
slice::_M_stride	/Users/lij/.vim/stl/valarray	/^  size_t _M_stride;$/;"	m	class:slice	file:	access:private
slice::size	/Users/lij/.vim/stl/valarray	/^  size_t size()   const { return _M_length; }$/;"	f	class:slice	access:public	signature:() const
slice::slice	/Users/lij/.vim/stl/valarray	/^  slice() : _M_start(0), _M_length(0), _M_stride(0) {}$/;"	f	class:slice	access:public	signature:()
slice::slice	/Users/lij/.vim/stl/valarray	/^  slice(size_t __start, size_t __length, size_t __stride)$/;"	f	class:slice	access:public	signature:(size_t __start, size_t __length, size_t __stride)
slice::start	/Users/lij/.vim/stl/valarray	/^  size_t start()  const { return _M_start; }$/;"	f	class:slice	access:public	signature:() const
slice::stride	/Users/lij/.vim/stl/valarray	/^  size_t stride() const { return _M_stride; }$/;"	f	class:slice	access:public	signature:() const
slice_array	/Users/lij/.vim/stl/valarray	/^  slice_array();$/;"	p	class:slice_array	file:	access:private	signature:()
slice_array	/Users/lij/.vim/stl/valarray	/^  slice_array(const slice& __slice, valarray<_Tp>& __array)$/;"	f	class:slice_array	file:	access:private	signature:(const slice& __slice, valarray<_Tp>& __array)
slice_array	/Users/lij/.vim/stl/valarray	/^class slice_array {$/;"	c	file:
slice_array::_M_array	/Users/lij/.vim/stl/valarray	/^  valarray<_Tp>& _M_array;$/;"	m	class:slice_array	file:	access:private
slice_array::_M_slice	/Users/lij/.vim/stl/valarray	/^  slice          _M_slice;$/;"	m	class:slice_array	file:	access:private
slice_array::operator %=	/Users/lij/.vim/stl/valarray	/^  void operator%=(const valarray<value_type>& __x) const {$/;"	f	class:slice_array	access:public	signature:(const valarray<value_type>& __x) const
slice_array::operator &=	/Users/lij/.vim/stl/valarray	/^  void operator&=(const valarray<value_type>& __x) const {$/;"	f	class:slice_array	access:public	signature:(const valarray<value_type>& __x) const
slice_array::operator *=	/Users/lij/.vim/stl/valarray	/^  void operator*=(const valarray<value_type>& __x) const {$/;"	f	class:slice_array	access:public	signature:(const valarray<value_type>& __x) const
slice_array::operator +=	/Users/lij/.vim/stl/valarray	/^  void operator+=(const valarray<value_type>& __x) const {$/;"	f	class:slice_array	access:public	signature:(const valarray<value_type>& __x) const
slice_array::operator -=	/Users/lij/.vim/stl/valarray	/^  void operator-=(const valarray<value_type>& __x) const {$/;"	f	class:slice_array	access:public	signature:(const valarray<value_type>& __x) const
slice_array::operator /=	/Users/lij/.vim/stl/valarray	/^  void operator\/=(const valarray<value_type>& __x) const {$/;"	f	class:slice_array	access:public	signature:(const valarray<value_type>& __x) const
slice_array::operator <<=	/Users/lij/.vim/stl/valarray	/^  void operator<<=(const valarray<value_type>& __x) const {$/;"	f	class:slice_array	access:public	signature:(const valarray<value_type>& __x) const
slice_array::operator =	/Users/lij/.vim/stl/valarray	/^  void operator=(const valarray<value_type>& __x) const {$/;"	f	class:slice_array	access:public	signature:(const valarray<value_type>& __x) const
slice_array::operator =	/Users/lij/.vim/stl/valarray	/^  void operator=(const value_type& __c) const {$/;"	f	class:slice_array	access:public	signature:(const value_type& __c) const
slice_array::operator >>=	/Users/lij/.vim/stl/valarray	/^  void operator>>=(const valarray<value_type>& __x) const {$/;"	f	class:slice_array	access:public	signature:(const valarray<value_type>& __x) const
slice_array::operator ^=	/Users/lij/.vim/stl/valarray	/^  void operator^=(const valarray<value_type>& __x) const {$/;"	f	class:slice_array	access:public	signature:(const valarray<value_type>& __x) const
slice_array::operator |=	/Users/lij/.vim/stl/valarray	/^  void operator|=(const valarray<value_type>& __x) const {$/;"	f	class:slice_array	access:public	signature:(const valarray<value_type>& __x) const
slice_array::slice_array	/Users/lij/.vim/stl/valarray	/^  slice_array();$/;"	p	class:slice_array	file:	access:private	signature:()
slice_array::slice_array	/Users/lij/.vim/stl/valarray	/^  slice_array(const slice& __slice, valarray<_Tp>& __array)$/;"	f	class:slice_array	file:	access:private	signature:(const slice& __slice, valarray<_Tp>& __array)
slice_array::value_type	/Users/lij/.vim/stl/valarray	/^  typedef _Tp value_type;$/;"	t	class:slice_array	file:	access:public
slice_array::~slice_array	/Users/lij/.vim/stl/valarray	/^  ~slice_array() {}$/;"	f	class:slice_array	access:public	signature:()
slist	/Users/lij/.vim/stl/stl_slist.h	/^  explicit slist(const allocator_type& __a = allocator_type()) : _Base(__a) {}$/;"	f	class:slist	access:public	signature:(const allocator_type& __a = allocator_type())
slist	/Users/lij/.vim/stl/stl_slist.h	/^  explicit slist(size_type __n) : _Base(allocator_type())$/;"	f	class:slist	access:public	signature:(size_type __n)
slist	/Users/lij/.vim/stl/stl_slist.h	/^  slist(_InputIterator __first, _InputIterator __last,$/;"	f	class:slist	access:public	signature:(_InputIterator __first, _InputIterator __last, const allocator_type& __a = allocator_type())
slist	/Users/lij/.vim/stl/stl_slist.h	/^  slist(const slist& __x) : _Base(__x.get_allocator())$/;"	f	class:slist	access:public	signature:(const slist& __x)
slist	/Users/lij/.vim/stl/stl_slist.h	/^  slist(const value_type* __first, const value_type* __last,$/;"	f	class:slist	access:public	signature:(const value_type* __first, const value_type* __last, const allocator_type& __a = allocator_type())
slist	/Users/lij/.vim/stl/stl_slist.h	/^  slist(const_iterator __first, const_iterator __last,$/;"	f	class:slist	access:public	signature:(const_iterator __first, const_iterator __last, const allocator_type& __a = allocator_type())
slist	/Users/lij/.vim/stl/stl_slist.h	/^  slist(size_type __n, const value_type& __x,$/;"	f	class:slist	access:public	signature:(size_type __n, const value_type& __x, const allocator_type& __a = allocator_type())
slist	/Users/lij/.vim/stl/stl_slist.h	/^class slist : private _Slist_base<_Tp,_Alloc>$/;"	c	inherits:_Slist_base
slist::_Base	/Users/lij/.vim/stl/stl_slist.h	/^  typedef _Slist_base<_Tp,_Alloc> _Base;$/;"	t	class:slist	access:private
slist::_Iterator_base	/Users/lij/.vim/stl/stl_slist.h	/^  typedef _Slist_iterator_base  _Iterator_base;$/;"	t	class:slist	access:private
slist::_M_assign_dispatch	/Users/lij/.vim/stl/stl_slist.h	/^  void _M_assign_dispatch(_InputIterator __first, _InputIterator __last,$/;"	p	class:slist	access:public	signature:(_InputIterator __first, _InputIterator __last, __false_type)
slist::_M_assign_dispatch	/Users/lij/.vim/stl/stl_slist.h	/^  void _M_assign_dispatch(_Integer __n, _Integer __val, __true_type)$/;"	f	class:slist	access:public	signature:(_Integer __n, _Integer __val, __true_type)
slist::_M_assign_dispatch	/Users/lij/.vim/stl/stl_slist.h	/^slist<_Tp, _Alloc>::_M_assign_dispatch(_InputIter __first, _InputIter __last,$/;"	f	class:slist	signature:(_InputIter __first, _InputIter __last, __false_type)
slist::_M_create_node	/Users/lij/.vim/stl/stl_slist.h	/^  _Node* _M_create_node() {$/;"	f	class:slist	access:private	signature:()
slist::_M_create_node	/Users/lij/.vim/stl/stl_slist.h	/^  _Node* _M_create_node(const value_type& __x) {$/;"	f	class:slist	access:private	signature:(const value_type& __x)
slist::_M_fill_assign	/Users/lij/.vim/stl/stl_slist.h	/^  void _M_fill_assign(size_type __n, const _Tp& __val);$/;"	p	class:slist	access:public	signature:(size_type __n, const _Tp& __val)
slist::_M_fill_assign	/Users/lij/.vim/stl/stl_slist.h	/^void slist<_Tp, _Alloc>::_M_fill_assign(size_type __n, const _Tp& __val) {$/;"	f	class:slist	signature:(size_type __n, const _Tp& __val)
slist::_M_insert_after	/Users/lij/.vim/stl/stl_slist.h	/^  _Node* _M_insert_after(_Node_base* __pos) {$/;"	f	class:slist	access:private	signature:(_Node_base* __pos)
slist::_M_insert_after	/Users/lij/.vim/stl/stl_slist.h	/^  _Node* _M_insert_after(_Node_base* __pos, const value_type& __x) {$/;"	f	class:slist	access:private	signature:(_Node_base* __pos, const value_type& __x)
slist::_M_insert_after_fill	/Users/lij/.vim/stl/stl_slist.h	/^  void _M_insert_after_fill(_Node_base* __pos,$/;"	f	class:slist	access:private	signature:(_Node_base* __pos, size_type __n, const value_type& __x)
slist::_M_insert_after_range	/Users/lij/.vim/stl/stl_slist.h	/^  void _M_insert_after_range(_Node_base* __pos, $/;"	f	class:slist	access:private	signature:(_Node_base* __pos, _InIter __first, _InIter __last)
slist::_M_insert_after_range	/Users/lij/.vim/stl/stl_slist.h	/^  void _M_insert_after_range(_Node_base* __pos, _Integer __n, _Integer __x,$/;"	f	class:slist	access:private	signature:(_Node_base* __pos, _Integer __n, _Integer __x, __true_type)
slist::_M_insert_after_range	/Users/lij/.vim/stl/stl_slist.h	/^  void _M_insert_after_range(_Node_base* __pos,$/;"	f	class:slist	access:private	signature:(_Node_base* __pos, _InIter __first, _InIter __last, __false_type)
slist::_M_insert_after_range	/Users/lij/.vim/stl/stl_slist.h	/^  void _M_insert_after_range(_Node_base* __pos,$/;"	f	class:slist	access:private	signature:(_Node_base* __pos, const value_type* __first, const value_type* __last)
slist::_M_insert_after_range	/Users/lij/.vim/stl/stl_slist.h	/^  void _M_insert_after_range(_Node_base* __pos,$/;"	f	class:slist	access:private	signature:(_Node_base* __pos, const_iterator __first, const_iterator __last)
slist::_Node	/Users/lij/.vim/stl/stl_slist.h	/^  typedef _Slist_node<_Tp>      _Node;$/;"	t	class:slist	access:private
slist::_Node_base	/Users/lij/.vim/stl/stl_slist.h	/^  typedef _Slist_node_base      _Node_base;$/;"	t	class:slist	access:private
slist::__STL_CLASS_REQUIRES	/Users/lij/.vim/stl/stl_slist.h	/^  __STL_CLASS_REQUIRES(_Tp, _Assignable);$/;"	p	class:slist	access:private	signature:(_Tp, _Assignable)
slist::allocator_type	/Users/lij/.vim/stl/stl_slist.h	/^  typedef typename _Base::allocator_type allocator_type;$/;"	t	class:slist	access:public
slist::assign	/Users/lij/.vim/stl/stl_slist.h	/^  void assign(_InputIterator __first, _InputIterator __last) {$/;"	f	class:slist	access:public	signature:(_InputIterator __first, _InputIterator __last)
slist::assign	/Users/lij/.vim/stl/stl_slist.h	/^  void assign(size_type __n, const _Tp& __val)$/;"	f	class:slist	access:public	signature:(size_type __n, const _Tp& __val)
slist::before_begin	/Users/lij/.vim/stl/stl_slist.h	/^  const_iterator before_begin() const$/;"	f	class:slist	access:public	signature:() const
slist::before_begin	/Users/lij/.vim/stl/stl_slist.h	/^  iterator before_begin() { return iterator((_Node*) &this->_M_head); }$/;"	f	class:slist	access:public	signature:()
slist::begin	/Users/lij/.vim/stl/stl_slist.h	/^  const_iterator begin() const $/;"	f	class:slist	access:public	signature:() const
slist::begin	/Users/lij/.vim/stl/stl_slist.h	/^  iterator begin() { return iterator((_Node*)this->_M_head._M_next); }$/;"	f	class:slist	access:public	signature:()
slist::clear	/Users/lij/.vim/stl/stl_slist.h	/^  void clear() { this->_M_erase_after(&this->_M_head, 0); }$/;"	f	class:slist	access:public	signature:()
slist::const_iterator	/Users/lij/.vim/stl/stl_slist.h	/^  typedef _Slist_iterator<_Tp, const _Tp&, const _Tp*> const_iterator;$/;"	t	class:slist	access:public
slist::const_pointer	/Users/lij/.vim/stl/stl_slist.h	/^  typedef const value_type* const_pointer;$/;"	t	class:slist	access:public
slist::const_reference	/Users/lij/.vim/stl/stl_slist.h	/^  typedef const value_type& const_reference;$/;"	t	class:slist	access:public
slist::difference_type	/Users/lij/.vim/stl/stl_slist.h	/^  typedef ptrdiff_t         difference_type;$/;"	t	class:slist	access:public
slist::empty	/Users/lij/.vim/stl/stl_slist.h	/^  bool empty() const { return this->_M_head._M_next == 0; }$/;"	f	class:slist	access:public	signature:() const
slist::end	/Users/lij/.vim/stl/stl_slist.h	/^  const_iterator end() const { return const_iterator(0); }$/;"	f	class:slist	access:public	signature:() const
slist::end	/Users/lij/.vim/stl/stl_slist.h	/^  iterator end() { return iterator(0); }$/;"	f	class:slist	access:public	signature:()
slist::erase	/Users/lij/.vim/stl/stl_slist.h	/^  iterator erase(iterator __first, iterator __last) {$/;"	f	class:slist	access:public	signature:(iterator __first, iterator __last)
slist::erase	/Users/lij/.vim/stl/stl_slist.h	/^  iterator erase(iterator __pos) {$/;"	f	class:slist	access:public	signature:(iterator __pos)
slist::erase_after	/Users/lij/.vim/stl/stl_slist.h	/^  iterator erase_after(iterator __before_first, iterator __last) {$/;"	f	class:slist	access:public	signature:(iterator __before_first, iterator __last)
slist::erase_after	/Users/lij/.vim/stl/stl_slist.h	/^  iterator erase_after(iterator __pos) {$/;"	f	class:slist	access:public	signature:(iterator __pos)
slist::front	/Users/lij/.vim/stl/stl_slist.h	/^  const_reference front() const $/;"	f	class:slist	access:public	signature:() const
slist::front	/Users/lij/.vim/stl/stl_slist.h	/^  reference front() { return ((_Node*) this->_M_head._M_next)->_M_data; }$/;"	f	class:slist	access:public	signature:()
slist::get_allocator	/Users/lij/.vim/stl/stl_slist.h	/^  allocator_type get_allocator() const { return _Base::get_allocator(); }$/;"	f	class:slist	access:public	signature:() const
slist::insert	/Users/lij/.vim/stl/stl_slist.h	/^  iterator insert(iterator __pos) {$/;"	f	class:slist	access:public	signature:(iterator __pos)
slist::insert	/Users/lij/.vim/stl/stl_slist.h	/^  iterator insert(iterator __pos, const value_type& __x) {$/;"	f	class:slist	access:public	signature:(iterator __pos, const value_type& __x)
slist::insert	/Users/lij/.vim/stl/stl_slist.h	/^  void insert(iterator __pos, _InIter __first, _InIter __last) {$/;"	f	class:slist	access:public	signature:(iterator __pos, _InIter __first, _InIter __last)
slist::insert	/Users/lij/.vim/stl/stl_slist.h	/^  void insert(iterator __pos, const value_type* __first, $/;"	f	class:slist	access:public	signature:(iterator __pos, const value_type* __first, const value_type* __last)
slist::insert	/Users/lij/.vim/stl/stl_slist.h	/^  void insert(iterator __pos, const_iterator __first, const_iterator __last) {$/;"	f	class:slist	access:public	signature:(iterator __pos, const_iterator __first, const_iterator __last)
slist::insert	/Users/lij/.vim/stl/stl_slist.h	/^  void insert(iterator __pos, size_type __n, const value_type& __x) {$/;"	f	class:slist	access:public	signature:(iterator __pos, size_type __n, const value_type& __x)
slist::insert_after	/Users/lij/.vim/stl/stl_slist.h	/^  iterator insert_after(iterator __pos) {$/;"	f	class:slist	access:public	signature:(iterator __pos)
slist::insert_after	/Users/lij/.vim/stl/stl_slist.h	/^  iterator insert_after(iterator __pos, const value_type& __x) {$/;"	f	class:slist	access:public	signature:(iterator __pos, const value_type& __x)
slist::insert_after	/Users/lij/.vim/stl/stl_slist.h	/^  void insert_after(iterator __pos, _InIter __first, _InIter __last) {$/;"	f	class:slist	access:public	signature:(iterator __pos, _InIter __first, _InIter __last)
slist::insert_after	/Users/lij/.vim/stl/stl_slist.h	/^  void insert_after(iterator __pos, size_type __n, const value_type& __x) {$/;"	f	class:slist	access:public	signature:(iterator __pos, size_type __n, const value_type& __x)
slist::insert_after	/Users/lij/.vim/stl/stl_slist.h	/^  void insert_after(iterator __pos,$/;"	f	class:slist	access:public	signature:(iterator __pos, const value_type* __first, const value_type* __last)
slist::insert_after	/Users/lij/.vim/stl/stl_slist.h	/^  void insert_after(iterator __pos,$/;"	f	class:slist	access:public	signature:(iterator __pos, const_iterator __first, const_iterator __last)
slist::iterator	/Users/lij/.vim/stl/stl_slist.h	/^  typedef _Slist_iterator<_Tp, _Tp&, _Tp*>             iterator;$/;"	t	class:slist	access:public
slist::max_size	/Users/lij/.vim/stl/stl_slist.h	/^  size_type max_size() const { return size_type(-1); }$/;"	f	class:slist	access:public	signature:() const
slist::merge	/Users/lij/.vim/stl/stl_slist.h	/^  void merge(slist& __x);$/;"	p	class:slist	access:public	signature:(slist& __x)
slist::merge	/Users/lij/.vim/stl/stl_slist.h	/^  void merge(slist&, _StrictWeakOrdering);$/;"	p	class:slist	access:public	signature:(slist&, _StrictWeakOrdering)
slist::merge	/Users/lij/.vim/stl/stl_slist.h	/^void slist<_Tp,_Alloc>::merge(slist<_Tp,_Alloc>& __x)$/;"	f	class:slist	signature:(slist<_Tp,_Alloc>& __x)
slist::merge	/Users/lij/.vim/stl/stl_slist.h	/^void slist<_Tp,_Alloc>::merge(slist<_Tp,_Alloc>& __x,$/;"	f	class:slist	signature:(slist<_Tp,_Alloc>& __x, _StrictWeakOrdering __comp)
slist::operator =	/Users/lij/.vim/stl/stl_slist.h	/^  slist& operator= (const slist& __x);$/;"	p	class:slist	access:public	signature:(const slist& __x)
slist::operator =	/Users/lij/.vim/stl/stl_slist.h	/^slist<_Tp,_Alloc>& slist<_Tp,_Alloc>::operator=(const slist<_Tp,_Alloc>& __x)$/;"	f	class:slist	signature:(const slist<_Tp,_Alloc>& __x)
slist::pointer	/Users/lij/.vim/stl/stl_slist.h	/^  typedef value_type*       pointer;$/;"	t	class:slist	access:public
slist::pop_front	/Users/lij/.vim/stl/stl_slist.h	/^  void pop_front() {$/;"	f	class:slist	access:public	signature:()
slist::previous	/Users/lij/.vim/stl/stl_slist.h	/^  const_iterator previous(const_iterator __pos) const {$/;"	f	class:slist	access:public	signature:(const_iterator __pos) const
slist::previous	/Users/lij/.vim/stl/stl_slist.h	/^  iterator previous(const_iterator __pos) {$/;"	f	class:slist	access:public	signature:(const_iterator __pos)
slist::push_front	/Users/lij/.vim/stl/stl_slist.h	/^  void push_front() { __slist_make_link(&this->_M_head, _M_create_node()); }$/;"	f	class:slist	access:public	signature:()
slist::push_front	/Users/lij/.vim/stl/stl_slist.h	/^  void push_front(const value_type& __x)   {$/;"	f	class:slist	access:public	signature:(const value_type& __x)
slist::reference	/Users/lij/.vim/stl/stl_slist.h	/^  typedef value_type&       reference;$/;"	t	class:slist	access:public
slist::remove	/Users/lij/.vim/stl/stl_slist.h	/^  void remove(const _Tp& __val); $/;"	p	class:slist	access:public	signature:(const _Tp& __val)
slist::remove	/Users/lij/.vim/stl/stl_slist.h	/^void slist<_Tp,_Alloc>::remove(const _Tp& __val)$/;"	f	class:slist	signature:(const _Tp& __val)
slist::remove_if	/Users/lij/.vim/stl/stl_slist.h	/^  void remove_if(_Predicate __pred);$/;"	p	class:slist	access:public	signature:(_Predicate __pred)
slist::remove_if	/Users/lij/.vim/stl/stl_slist.h	/^void slist<_Tp,_Alloc>::remove_if(_Predicate __pred)$/;"	f	class:slist	signature:(_Predicate __pred)
slist::resize	/Users/lij/.vim/stl/stl_slist.h	/^  void resize(size_type new_size) { resize(new_size, _Tp()); }$/;"	f	class:slist	access:public	signature:(size_type new_size)
slist::resize	/Users/lij/.vim/stl/stl_slist.h	/^  void resize(size_type new_size, const _Tp& __x);$/;"	p	class:slist	access:public	signature:(size_type new_size, const _Tp& __x)
slist::resize	/Users/lij/.vim/stl/stl_slist.h	/^void slist<_Tp,_Alloc>::resize(size_type __len, const _Tp& __x)$/;"	f	class:slist	signature:(size_type __len, const _Tp& __x)
slist::reverse	/Users/lij/.vim/stl/stl_slist.h	/^  void reverse() { $/;"	f	class:slist	access:public	signature:()
slist::size	/Users/lij/.vim/stl/stl_slist.h	/^  size_type size() const { return __slist_size(this->_M_head._M_next); }$/;"	f	class:slist	access:public	signature:() const
slist::size_type	/Users/lij/.vim/stl/stl_slist.h	/^  typedef size_t            size_type;$/;"	t	class:slist	access:public
slist::slist	/Users/lij/.vim/stl/stl_slist.h	/^  explicit slist(const allocator_type& __a = allocator_type()) : _Base(__a) {}$/;"	f	class:slist	access:public	signature:(const allocator_type& __a = allocator_type())
slist::slist	/Users/lij/.vim/stl/stl_slist.h	/^  explicit slist(size_type __n) : _Base(allocator_type())$/;"	f	class:slist	access:public	signature:(size_type __n)
slist::slist	/Users/lij/.vim/stl/stl_slist.h	/^  slist(_InputIterator __first, _InputIterator __last,$/;"	f	class:slist	access:public	signature:(_InputIterator __first, _InputIterator __last, const allocator_type& __a = allocator_type())
slist::slist	/Users/lij/.vim/stl/stl_slist.h	/^  slist(const slist& __x) : _Base(__x.get_allocator())$/;"	f	class:slist	access:public	signature:(const slist& __x)
slist::slist	/Users/lij/.vim/stl/stl_slist.h	/^  slist(const value_type* __first, const value_type* __last,$/;"	f	class:slist	access:public	signature:(const value_type* __first, const value_type* __last, const allocator_type& __a = allocator_type())
slist::slist	/Users/lij/.vim/stl/stl_slist.h	/^  slist(const_iterator __first, const_iterator __last,$/;"	f	class:slist	access:public	signature:(const_iterator __first, const_iterator __last, const allocator_type& __a = allocator_type())
slist::slist	/Users/lij/.vim/stl/stl_slist.h	/^  slist(size_type __n, const value_type& __x,$/;"	f	class:slist	access:public	signature:(size_type __n, const value_type& __x, const allocator_type& __a = allocator_type())
slist::sort	/Users/lij/.vim/stl/stl_slist.h	/^  void sort();     $/;"	p	class:slist	access:public	signature:()
slist::sort	/Users/lij/.vim/stl/stl_slist.h	/^  void sort(_StrictWeakOrdering __comp); $/;"	p	class:slist	access:public	signature:(_StrictWeakOrdering __comp)
slist::sort	/Users/lij/.vim/stl/stl_slist.h	/^void slist<_Tp,_Alloc>::sort()$/;"	f	class:slist	signature:()
slist::sort	/Users/lij/.vim/stl/stl_slist.h	/^void slist<_Tp,_Alloc>::sort(_StrictWeakOrdering __comp)$/;"	f	class:slist	signature:(_StrictWeakOrdering __comp)
slist::splice	/Users/lij/.vim/stl/stl_slist.h	/^  void splice(iterator __pos, slist& __x) {$/;"	f	class:slist	access:public	signature:(iterator __pos, slist& __x)
slist::splice	/Users/lij/.vim/stl/stl_slist.h	/^  void splice(iterator __pos, slist& __x, iterator __first, iterator __last)$/;"	f	class:slist	access:public	signature:(iterator __pos, slist& __x, iterator __first, iterator __last)
slist::splice	/Users/lij/.vim/stl/stl_slist.h	/^  void splice(iterator __pos, slist& __x, iterator __i) {$/;"	f	class:slist	access:public	signature:(iterator __pos, slist& __x, iterator __i)
slist::splice_after	/Users/lij/.vim/stl/stl_slist.h	/^  void splice_after(iterator __pos, $/;"	f	class:slist	access:public	signature:(iterator __pos, iterator __before_first, iterator __before_last)
slist::splice_after	/Users/lij/.vim/stl/stl_slist.h	/^  void splice_after(iterator __pos, iterator __prev)$/;"	f	class:slist	access:public	signature:(iterator __pos, iterator __prev)
slist::splice_after	/Users/lij/.vim/stl/stl_slist.h	/^  void splice_after(iterator __pos, slist& __x)$/;"	f	class:slist	access:public	signature:(iterator __pos, slist& __x)
slist::swap	/Users/lij/.vim/stl/stl_slist.h	/^  void swap(slist& __x)$/;"	f	class:slist	access:public	signature:(slist& __x)
slist::unique	/Users/lij/.vim/stl/stl_slist.h	/^  void unique(); $/;"	p	class:slist	access:public	signature:()
slist::unique	/Users/lij/.vim/stl/stl_slist.h	/^  void unique(_BinaryPredicate __pred); $/;"	p	class:slist	access:public	signature:(_BinaryPredicate __pred)
slist::unique	/Users/lij/.vim/stl/stl_slist.h	/^void slist<_Tp,_Alloc>::unique()$/;"	f	class:slist	signature:()
slist::unique	/Users/lij/.vim/stl/stl_slist.h	/^void slist<_Tp,_Alloc>::unique(_BinaryPredicate __pred)$/;"	f	class:slist	signature:(_BinaryPredicate __pred)
slist::value_type	/Users/lij/.vim/stl/stl_slist.h	/^  typedef _Tp                value_type;$/;"	t	class:slist	access:public
slist::~slist	/Users/lij/.vim/stl/stl_slist.h	/^  ~slist() {}$/;"	f	class:slist	access:public	signature:()
sort	/Users/lij/.vim/stl/stl_algo.h	/^inline void sort(_RandomAccessIter __first, _RandomAccessIter __last) {$/;"	f	signature:(_RandomAccessIter __first, _RandomAccessIter __last)
sort	/Users/lij/.vim/stl/stl_algo.h	/^inline void sort(_RandomAccessIter __first, _RandomAccessIter __last,$/;"	f	signature:(_RandomAccessIter __first, _RandomAccessIter __last, _Compare __comp)
sort	/Users/lij/.vim/stl/stl_list.h	/^  template <class _StrictWeakOrdering> void sort(_StrictWeakOrdering);$/;"	p	class:list	access:public	signature:(_StrictWeakOrdering)
sort	/Users/lij/.vim/stl/stl_list.h	/^  void sort();$/;"	p	class:list	access:public	signature:()
sort	/Users/lij/.vim/stl/stl_list.h	/^void list<_Tp, _Alloc>::sort()$/;"	f	class:list	signature:()
sort	/Users/lij/.vim/stl/stl_list.h	/^void list<_Tp, _Alloc>::sort(_StrictWeakOrdering __comp)$/;"	f	class:list	signature:(_StrictWeakOrdering __comp)
sort	/Users/lij/.vim/stl/stl_slist.h	/^  void sort();     $/;"	p	class:slist	access:public	signature:()
sort	/Users/lij/.vim/stl/stl_slist.h	/^  void sort(_StrictWeakOrdering __comp); $/;"	p	class:slist	access:public	signature:(_StrictWeakOrdering __comp)
sort	/Users/lij/.vim/stl/stl_slist.h	/^void slist<_Tp,_Alloc>::sort()$/;"	f	class:slist	signature:()
sort	/Users/lij/.vim/stl/stl_slist.h	/^void slist<_Tp,_Alloc>::sort(_StrictWeakOrdering __comp)$/;"	f	class:slist	signature:(_StrictWeakOrdering __comp)
sort_heap	/Users/lij/.vim/stl/stl_heap.h	/^sort_heap(_RandomAccessIterator __first,$/;"	f	signature:(_RandomAccessIterator __first, _RandomAccessIterator __last, _Compare __comp)
sort_heap	/Users/lij/.vim/stl/stl_heap.h	/^void sort_heap(_RandomAccessIterator __first, _RandomAccessIterator __last)$/;"	f	signature:(_RandomAccessIterator __first, _RandomAccessIterator __last)
splice	/Users/lij/.vim/stl/stl_list.h	/^  void splice(iterator __position, list& __x) {$/;"	f	class:list	access:public	signature:(iterator __position, list& __x)
splice	/Users/lij/.vim/stl/stl_list.h	/^  void splice(iterator __position, list&, iterator __first, iterator __last) {$/;"	f	class:list	access:public	signature:(iterator __position, list&, iterator __first, iterator __last)
splice	/Users/lij/.vim/stl/stl_list.h	/^  void splice(iterator __position, list&, iterator __i) {$/;"	f	class:list	access:public	signature:(iterator __position, list&, iterator __i)
splice	/Users/lij/.vim/stl/stl_slist.h	/^  void splice(iterator __pos, slist& __x) {$/;"	f	class:slist	access:public	signature:(iterator __pos, slist& __x)
splice	/Users/lij/.vim/stl/stl_slist.h	/^  void splice(iterator __pos, slist& __x, iterator __first, iterator __last)$/;"	f	class:slist	access:public	signature:(iterator __pos, slist& __x, iterator __first, iterator __last)
splice	/Users/lij/.vim/stl/stl_slist.h	/^  void splice(iterator __pos, slist& __x, iterator __i) {$/;"	f	class:slist	access:public	signature:(iterator __pos, slist& __x, iterator __i)
splice_after	/Users/lij/.vim/stl/stl_slist.h	/^  void splice_after(iterator __pos, $/;"	f	class:slist	access:public	signature:(iterator __pos, iterator __before_first, iterator __before_last)
splice_after	/Users/lij/.vim/stl/stl_slist.h	/^  void splice_after(iterator __pos, iterator __prev)$/;"	f	class:slist	access:public	signature:(iterator __pos, iterator __prev)
splice_after	/Users/lij/.vim/stl/stl_slist.h	/^  void splice_after(iterator __pos, slist& __x)$/;"	f	class:slist	access:public	signature:(iterator __pos, slist& __x)
sqrt	/Users/lij/.vim/stl/valarray	/^inline valarray<_Tp> sqrt(const valarray<_Tp>& __x) {$/;"	f	signature:(const valarray<_Tp>& __x)
stable_partition	/Users/lij/.vim/stl/stl_algo.h	/^inline _ForwardIter stable_partition(_ForwardIter __first,$/;"	f	signature:(_ForwardIter __first, _ForwardIter __last, _Predicate __pred)
stable_sort	/Users/lij/.vim/stl/stl_algo.h	/^inline void stable_sort(_RandomAccessIter __first,$/;"	f	signature:(_RandomAccessIter __first, _RandomAccessIter __last)
stable_sort	/Users/lij/.vim/stl/stl_algo.h	/^inline void stable_sort(_RandomAccessIter __first,$/;"	f	signature:(_RandomAccessIter __first, _RandomAccessIter __last, _Compare __comp)
stack	/Users/lij/.vim/stl/stl_stack.h	/^  explicit stack(const _Sequence& __s) : c(__s) {}$/;"	f	class:stack	access:public	signature:(const _Sequence& __s)
stack	/Users/lij/.vim/stl/stl_stack.h	/^  stack() : c() {}$/;"	f	class:stack	access:public	signature:()
stack	/Users/lij/.vim/stl/stl_stack.h	/^class stack {$/;"	c
stack::_Sequence_value_type	/Users/lij/.vim/stl/stl_stack.h	/^  typedef typename _Sequence::value_type _Sequence_value_type;$/;"	t	class:stack	access:private
stack::__STL_CLASS_REQUIRES	/Users/lij/.vim/stl/stl_stack.h	/^  __STL_CLASS_REQUIRES(_Sequence, _BackInsertionSequence);$/;"	p	class:stack	access:private	signature:(_Sequence, _BackInsertionSequence)
stack::__STL_CLASS_REQUIRES	/Users/lij/.vim/stl/stl_stack.h	/^  __STL_CLASS_REQUIRES(_Tp, _Assignable);$/;"	p	class:stack	access:private	signature:(_Tp, _Assignable)
stack::__STL_CLASS_REQUIRES_SAME_TYPE	/Users/lij/.vim/stl/stl_stack.h	/^  __STL_CLASS_REQUIRES_SAME_TYPE(_Tp, _Sequence_value_type);$/;"	p	class:stack	access:private	signature:(_Tp, _Sequence_value_type)
stack::__STL_NULL_TMPL_ARGS	/Users/lij/.vim/stl/stl_stack.h	/^  operator< __STL_NULL_TMPL_ARGS (const stack&, const stack&);$/;"	p	class:stack	access:friend	signature:(const stack&, const stack&)
stack::__STL_NULL_TMPL_ARGS	/Users/lij/.vim/stl/stl_stack.h	/^  operator== __STL_NULL_TMPL_ARGS (const stack&, const stack&);$/;"	p	class:stack	access:friend	signature:(const stack&, const stack&)
stack::c	/Users/lij/.vim/stl/stl_stack.h	/^  _Sequence c;$/;"	m	class:stack	access:protected
stack::const_reference	/Users/lij/.vim/stl/stl_stack.h	/^  typedef typename _Sequence::const_reference const_reference;$/;"	t	class:stack	access:public
stack::container_type	/Users/lij/.vim/stl/stl_stack.h	/^  typedef          _Sequence                  container_type;$/;"	t	class:stack	access:public
stack::empty	/Users/lij/.vim/stl/stl_stack.h	/^  bool empty() const { return c.empty(); }$/;"	f	class:stack	access:public	signature:() const
stack::operator <	/Users/lij/.vim/stl/stl_stack.h	/^  friend bool operator< (const stack<_Tp1, _Seq1>&,$/;"	p	class:stack	access:friend	signature:(const stack<_Tp1, _Seq1>&, const stack<_Tp1, _Seq1>&)
stack::operator ==	/Users/lij/.vim/stl/stl_stack.h	/^  friend bool operator== (const stack<_Tp1, _Seq1>&,$/;"	p	class:stack	access:friend	signature:(const stack<_Tp1, _Seq1>&, const stack<_Tp1, _Seq1>&)
stack::pop	/Users/lij/.vim/stl/stl_stack.h	/^  void pop() { c.pop_back(); }$/;"	f	class:stack	access:public	signature:()
stack::push	/Users/lij/.vim/stl/stl_stack.h	/^  void push(const value_type& __x) { c.push_back(__x); }$/;"	f	class:stack	access:public	signature:(const value_type& __x)
stack::reference	/Users/lij/.vim/stl/stl_stack.h	/^  typedef typename _Sequence::reference       reference;$/;"	t	class:stack	access:public
stack::size	/Users/lij/.vim/stl/stl_stack.h	/^  size_type size() const { return c.size(); }$/;"	f	class:stack	access:public	signature:() const
stack::size_type	/Users/lij/.vim/stl/stl_stack.h	/^  typedef typename _Sequence::size_type       size_type;$/;"	t	class:stack	access:public
stack::stack	/Users/lij/.vim/stl/stl_stack.h	/^  explicit stack(const _Sequence& __s) : c(__s) {}$/;"	f	class:stack	access:public	signature:(const _Sequence& __s)
stack::stack	/Users/lij/.vim/stl/stl_stack.h	/^  stack() : c() {}$/;"	f	class:stack	access:public	signature:()
stack::top	/Users/lij/.vim/stl/stl_stack.h	/^  const_reference top() const { return c.back(); }$/;"	f	class:stack	access:public	signature:() const
stack::top	/Users/lij/.vim/stl/stl_stack.h	/^  reference top() { return c.back(); }$/;"	f	class:stack	access:public	signature:()
stack::value_type	/Users/lij/.vim/stl/stl_stack.h	/^  typedef typename _Sequence::value_type      value_type;$/;"	t	class:stack	access:public
start	/Users/lij/.vim/stl/valarray	/^  size_t start()            const { return _M_start; }$/;"	f	class:gslice	access:public	signature:() const
start	/Users/lij/.vim/stl/valarray	/^  size_t start()  const { return _M_start; }$/;"	f	class:slice	access:public	signature:() const
state_type	/Users/lij/.vim/stl/char_traits.h	/^  typedef mbstate_t state_type;$/;"	t	class:__char_traits_base	access:public
streambuf_type	/Users/lij/.vim/stl/stl_iterator.h	/^  typedef basic_streambuf<_CharT, _Traits> streambuf_type;$/;"	t	class:istreambuf_iterator	access:public
streambuf_type	/Users/lij/.vim/stl/stl_iterator.h	/^  typedef basic_streambuf<_CharT, _Traits> streambuf_type;$/;"	t	class:ostreambuf_iterator	access:public
stride	/Users/lij/.vim/stl/valarray	/^  size_t stride() const { return _M_stride; }$/;"	f	class:slice	access:public	signature:() const
stride	/Users/lij/.vim/stl/valarray	/^  valarray<size_t> stride() const { return _M_strides; }$/;"	f	class:gslice	access:public	signature:() const
string	/Users/lij/.vim/stl/stl_string_fwd.h	/^typedef basic_string<char>    string;$/;"	t
substr	/Users/lij/.vim/stl/stl_rope.h	/^        rope substr(const_iterator __start, const_iterator __end) const {$/;"	f	class:rope	access:public	signature:(const_iterator __start, const_iterator __end) const
substr	/Users/lij/.vim/stl/stl_rope.h	/^        rope substr(iterator __start) const {$/;"	f	class:rope	access:public	signature:(iterator __start) const
substr	/Users/lij/.vim/stl/stl_rope.h	/^        rope substr(iterator __start, iterator __end) const {$/;"	f	class:rope	access:public	signature:(iterator __start, iterator __end) const
substr	/Users/lij/.vim/stl/stl_rope.h	/^        rope substr(size_t __start, size_t __len = 1) const {$/;"	f	class:rope	access:public	signature:(size_t __start, size_t __len = 1) const
substr	/Users/lij/.vim/stl/stl_rope.h	/^        rope<_CharT,_Alloc> substr(const_iterator __start) {$/;"	f	class:rope	access:public	signature:(const_iterator __start)
substr	/Users/lij/.vim/stl/string	/^  basic_string substr(size_type __pos = 0, size_type __n = npos) const {$/;"	f	class:basic_string	access:public	signature:(size_type __pos = 0, size_type __n = npos) const
subtractive_rng	/Users/lij/.vim/stl/stl_function.h	/^  subtractive_rng() { _M_initialize(161803398u); }$/;"	f	class:subtractive_rng	access:public	signature:()
subtractive_rng	/Users/lij/.vim/stl/stl_function.h	/^  subtractive_rng(unsigned int __seed) { _M_initialize(__seed); }$/;"	f	class:subtractive_rng	access:public	signature:(unsigned int __seed)
subtractive_rng	/Users/lij/.vim/stl/stl_function.h	/^class subtractive_rng : public unary_function<unsigned int, unsigned int> {$/;"	c	inherits:unary_function
subtractive_rng::_M_index1	/Users/lij/.vim/stl/stl_function.h	/^  size_t _M_index1;$/;"	m	class:subtractive_rng	access:private
subtractive_rng::_M_index2	/Users/lij/.vim/stl/stl_function.h	/^  size_t _M_index2;$/;"	m	class:subtractive_rng	access:private
subtractive_rng::_M_initialize	/Users/lij/.vim/stl/stl_function.h	/^  void _M_initialize(unsigned int __seed)$/;"	f	class:subtractive_rng	access:public	signature:(unsigned int __seed)
subtractive_rng::_M_table	/Users/lij/.vim/stl/stl_function.h	/^  unsigned int _M_table[55];$/;"	m	class:subtractive_rng	access:private
subtractive_rng::operator ()	/Users/lij/.vim/stl/stl_function.h	/^  unsigned int operator()(unsigned int __limit) {$/;"	f	class:subtractive_rng	access:public	signature:(unsigned int __limit)
subtractive_rng::subtractive_rng	/Users/lij/.vim/stl/stl_function.h	/^  subtractive_rng() { _M_initialize(161803398u); }$/;"	f	class:subtractive_rng	access:public	signature:()
subtractive_rng::subtractive_rng	/Users/lij/.vim/stl/stl_function.h	/^  subtractive_rng(unsigned int __seed) { _M_initialize(__seed); }$/;"	f	class:subtractive_rng	access:public	signature:(unsigned int __seed)
sum	/Users/lij/.vim/stl/valarray	/^  value_type sum() const {$/;"	f	class:valarray	access:public	signature:() const
swap	/Users/lij/.vim/stl/stl_algobase.h	/^inline void swap(_Tp& __a, _Tp& __b) {$/;"	f	signature:(_Tp& __a, _Tp& __b)
swap	/Users/lij/.vim/stl/stl_bvector.h	/^  void swap(__BVECTOR& __x) {$/;"	f	class:__BVECTOR	access:public	signature:(__BVECTOR& __x)
swap	/Users/lij/.vim/stl/stl_bvector.h	/^inline void swap(_Bit_reference __x, _Bit_reference __y)$/;"	f	signature:(_Bit_reference __x, _Bit_reference __y)
swap	/Users/lij/.vim/stl/stl_bvector.h	/^inline void swap(bit_vector& __x, bit_vector& __y) {$/;"	f	signature:(bit_vector& __x, bit_vector& __y)
swap	/Users/lij/.vim/stl/stl_deque.h	/^  void swap(deque& __x) {$/;"	f	class:deque	access:public	signature:(deque& __x)
swap	/Users/lij/.vim/stl/stl_deque.h	/^inline void swap(deque<_Tp,_Alloc>& __x, deque<_Tp,_Alloc>& __y) {$/;"	f	signature:(deque<_Tp,_Alloc>& __x, deque<_Tp,_Alloc>& __y)
swap	/Users/lij/.vim/stl/stl_hash_map.h	/^  void swap(hash_map& __hs) { _M_ht.swap(__hs._M_ht); }$/;"	f	class:hash_map	access:public	signature:(hash_map& __hs)
swap	/Users/lij/.vim/stl/stl_hash_map.h	/^  void swap(hash_multimap& __hs) { _M_ht.swap(__hs._M_ht); }$/;"	f	class:hash_multimap	access:public	signature:(hash_multimap& __hs)
swap	/Users/lij/.vim/stl/stl_hash_map.h	/^swap(hash_map<_Key,_Tp,_HashFcn,_EqlKey,_Alloc>& __hm1,$/;"	f	signature:(hash_map<_Key,_Tp,_HashFcn,_EqlKey,_Alloc>& __hm1, hash_map<_Key,_Tp,_HashFcn,_EqlKey,_Alloc>& __hm2)
swap	/Users/lij/.vim/stl/stl_hash_map.h	/^swap(hash_multimap<_Key,_Tp,_HashFcn,_EqlKey,_Alloc>& __hm1,$/;"	f	signature:(hash_multimap<_Key,_Tp,_HashFcn,_EqlKey,_Alloc>& __hm1, hash_multimap<_Key,_Tp,_HashFcn,_EqlKey,_Alloc>& __hm2)
swap	/Users/lij/.vim/stl/stl_hash_set.h	/^  void swap(hash_multiset& hs) { _M_ht.swap(hs._M_ht); }$/;"	f	class:hash_multiset	access:public	signature:(hash_multiset& hs)
swap	/Users/lij/.vim/stl/stl_hash_set.h	/^  void swap(hash_set& __hs) { _M_ht.swap(__hs._M_ht); }$/;"	f	class:hash_set	access:public	signature:(hash_set& __hs)
swap	/Users/lij/.vim/stl/stl_hash_set.h	/^swap(hash_multiset<_Val,_HashFcn,_EqualKey,_Alloc>& __hs1,$/;"	f	signature:(hash_multiset<_Val,_HashFcn,_EqualKey,_Alloc>& __hs1, hash_multiset<_Val,_HashFcn,_EqualKey,_Alloc>& __hs2)
swap	/Users/lij/.vim/stl/stl_hash_set.h	/^swap(hash_set<_Val,_HashFcn,_EqualKey,_Alloc>& __hs1,$/;"	f	signature:(hash_set<_Val,_HashFcn,_EqualKey,_Alloc>& __hs1, hash_set<_Val,_HashFcn,_EqualKey,_Alloc>& __hs2)
swap	/Users/lij/.vim/stl/stl_hashtable.h	/^  void swap(hashtable& __ht)$/;"	f	class:hashtable	access:public	signature:(hashtable& __ht)
swap	/Users/lij/.vim/stl/stl_hashtable.h	/^inline void swap(hashtable<_Val, _Key, _HF, _Extract, _EqKey, _All>& __ht1,$/;"	f	signature:(hashtable<_Val, _Key, _HF, _Extract, _EqKey, _All>& __ht1, hashtable<_Val, _Key, _HF, _Extract, _EqKey, _All>& __ht2)
swap	/Users/lij/.vim/stl/stl_list.h	/^  void swap(list<_Tp, _Alloc>& __x) { __STD::swap(_M_node, __x._M_node); }$/;"	f	class:list	access:public	signature:(list<_Tp, _Alloc>& __x)
swap	/Users/lij/.vim/stl/stl_list.h	/^swap(list<_Tp, _Alloc>& __x, list<_Tp, _Alloc>& __y)$/;"	f	signature:(list<_Tp, _Alloc>& __x, list<_Tp, _Alloc>& __y)
swap	/Users/lij/.vim/stl/stl_map.h	/^  void swap(map<_Key,_Tp,_Compare,_Alloc>& __x) { _M_t.swap(__x._M_t); }$/;"	f	class:map	access:public	signature:(map<_Key,_Tp,_Compare,_Alloc>& __x)
swap	/Users/lij/.vim/stl/stl_map.h	/^inline void swap(map<_Key,_Tp,_Compare,_Alloc>& __x, $/;"	f	signature:(map<_Key,_Tp,_Compare,_Alloc>& __x, map<_Key,_Tp,_Compare,_Alloc>& __y)
swap	/Users/lij/.vim/stl/stl_multimap.h	/^  void swap(multimap<_Key,_Tp,_Compare,_Alloc>& __x) { _M_t.swap(__x._M_t); }$/;"	f	class:multimap	access:public	signature:(multimap<_Key,_Tp,_Compare,_Alloc>& __x)
swap	/Users/lij/.vim/stl/stl_multimap.h	/^inline void swap(multimap<_Key,_Tp,_Compare,_Alloc>& __x, $/;"	f	signature:(multimap<_Key,_Tp,_Compare,_Alloc>& __x, multimap<_Key,_Tp,_Compare,_Alloc>& __y)
swap	/Users/lij/.vim/stl/stl_multiset.h	/^  void swap(multiset<_Key,_Compare,_Alloc>& __x) { _M_t.swap(__x._M_t); }$/;"	f	class:multiset	access:public	signature:(multiset<_Key,_Compare,_Alloc>& __x)
swap	/Users/lij/.vim/stl/stl_multiset.h	/^inline void swap(multiset<_Key,_Compare,_Alloc>& __x, $/;"	f	signature:(multiset<_Key,_Compare,_Alloc>& __x, multiset<_Key,_Compare,_Alloc>& __y)
swap	/Users/lij/.vim/stl/stl_rope.h	/^        void swap(rope& __b) {$/;"	f	class:rope	access:public	signature:(rope& __b)
swap	/Users/lij/.vim/stl/stl_rope.h	/^    inline void swap(_Rope_char_ref_proxy <_CharT, __Alloc > __a,$/;"	f	signature:(_Rope_char_ref_proxy <_CharT, __Alloc > __a, _Rope_char_ref_proxy <_CharT, __Alloc > __b)
swap	/Users/lij/.vim/stl/stl_rope.h	/^inline void swap(crope __x, crope __y) { __x.swap(__y); }$/;"	f	signature:(crope __x, crope __y)
swap	/Users/lij/.vim/stl/stl_rope.h	/^inline void swap(rope<_CharT,_Alloc>& __x, rope<_CharT,_Alloc>& __y) {$/;"	f	signature:(rope<_CharT,_Alloc>& __x, rope<_CharT,_Alloc>& __y)
swap	/Users/lij/.vim/stl/stl_rope.h	/^inline void swap(wrope __x, wrope __y) { __x.swap(__y); }$/;"	f	signature:(wrope __x, wrope __y)
swap	/Users/lij/.vim/stl/stl_set.h	/^  void swap(set<_Key,_Compare,_Alloc>& __x) { _M_t.swap(__x._M_t); }$/;"	f	class:set	access:public	signature:(set<_Key,_Compare,_Alloc>& __x)
swap	/Users/lij/.vim/stl/stl_set.h	/^inline void swap(set<_Key,_Compare,_Alloc>& __x, $/;"	f	signature:(set<_Key,_Compare,_Alloc>& __x, set<_Key,_Compare,_Alloc>& __y)
swap	/Users/lij/.vim/stl/stl_slist.h	/^  void swap(slist& __x)$/;"	f	class:slist	access:public	signature:(slist& __x)
swap	/Users/lij/.vim/stl/stl_slist.h	/^inline void swap(slist<_Tp,_Alloc>& __x, slist<_Tp,_Alloc>& __y) {$/;"	f	signature:(slist<_Tp,_Alloc>& __x, slist<_Tp,_Alloc>& __y)
swap	/Users/lij/.vim/stl/stl_tree.h	/^  void swap(_Rb_tree<_Key,_Value,_KeyOfValue,_Compare,_Alloc>& __t) {$/;"	f	class:_Rb_tree	access:public	signature:(_Rb_tree<_Key,_Value,_KeyOfValue,_Compare,_Alloc>& __t)
swap	/Users/lij/.vim/stl/stl_tree.h	/^swap(_Rb_tree<_Key,_Value,_KeyOfValue,_Compare,_Alloc>& __x, $/;"	f	signature:(_Rb_tree<_Key,_Value,_KeyOfValue,_Compare,_Alloc>& __x, _Rb_tree<_Key,_Value,_KeyOfValue,_Compare,_Alloc>& __y)
swap	/Users/lij/.vim/stl/stl_vector.h	/^  void swap(vector<_Tp, _Alloc>& __x) {$/;"	f	class:vector	access:public	signature:(vector<_Tp, _Alloc>& __x)
swap	/Users/lij/.vim/stl/stl_vector.h	/^inline void swap(vector<_Tp, _Alloc>& __x, vector<_Tp, _Alloc>& __y)$/;"	f	signature:(vector<_Tp, _Alloc>& __x, vector<_Tp, _Alloc>& __y)
swap	/Users/lij/.vim/stl/string	/^  void swap(basic_string& __s) {$/;"	f	class:basic_string	access:public	signature:(basic_string& __s)
swap	/Users/lij/.vim/stl/string	/^inline void swap(basic_string<_CharT,_Traits,_Alloc>& __x,$/;"	f	signature:(basic_string<_CharT,_Traits,_Alloc>& __x, basic_string<_CharT,_Traits,_Alloc>& __y)
swap_ranges	/Users/lij/.vim/stl/stl_algo.h	/^_ForwardIter2 swap_ranges(_ForwardIter1 __first1, _ForwardIter1 __last1,$/;"	f	signature:(_ForwardIter1 __first1, _ForwardIter1 __last1, _ForwardIter2 __first2)
tan	/Users/lij/.vim/stl/valarray	/^inline valarray<_Tp> tan(const valarray<_Tp>& __x) {$/;"	f	signature:(const valarray<_Tp>& __x)
tanh	/Users/lij/.vim/stl/valarray	/^inline valarray<_Tp> tanh(const valarray<_Tp>& __x) {$/;"	f	signature:(const valarray<_Tp>& __x)
temporary_buffer	/Users/lij/.vim/stl/stl_tempbuf.h	/^  temporary_buffer(_ForwardIterator __first, _ForwardIterator __last)$/;"	f	struct:temporary_buffer	access:public	signature:(_ForwardIterator __first, _ForwardIterator __last)
temporary_buffer	/Users/lij/.vim/stl/stl_tempbuf.h	/^struct temporary_buffer : public _Temporary_buffer<_ForwardIterator, _Tp>$/;"	s	inherits:_Temporary_buffer
temporary_buffer::temporary_buffer	/Users/lij/.vim/stl/stl_tempbuf.h	/^  temporary_buffer(_ForwardIterator __first, _ForwardIterator __last)$/;"	f	struct:temporary_buffer	access:public	signature:(_ForwardIterator __first, _ForwardIterator __last)
temporary_buffer::~temporary_buffer	/Users/lij/.vim/stl/stl_tempbuf.h	/^  ~temporary_buffer() {}$/;"	f	struct:temporary_buffer	access:public	signature:()
test	/Users/lij/.vim/stl/bitset	/^  bool test(size_t __pos) const {$/;"	f	class:bitset	access:public	signature:(size_t __pos) const
this_dummy_member_must_be_first	/Users/lij/.vim/stl/type_traits.h	/^   typedef __true_type     this_dummy_member_must_be_first;$/;"	t	struct:__type_traits	access:public
to_char_type	/Users/lij/.vim/stl/char_traits.h	/^  static char_type to_char_type(const int_type& __c) {$/;"	f	class:__char_traits_base	access:public	signature:(const int_type& __c)
to_char_type	/Users/lij/.vim/stl/char_traits.h	/^  static char_type to_char_type(const int_type& __c) {$/;"	f	class:char_traits	access:public	signature:(const int_type& __c)
to_int_type	/Users/lij/.vim/stl/char_traits.h	/^  static int_type to_int_type(const char_type& __c) {$/;"	f	class:__char_traits_base	access:public	signature:(const char_type& __c)
to_int_type	/Users/lij/.vim/stl/char_traits.h	/^  static int_type to_int_type(const char_type& __c) {$/;"	f	class:char_traits	access:public	signature:(const char_type& __c)
to_string	/Users/lij/.vim/stl/bitset	/^  basic_string<_CharT, _Traits, _Alloc> to_string() const {$/;"	f	class:bitset	access:public	signature:() const
to_ulong	/Users/lij/.vim/stl/bitset	/^  unsigned long to_ulong() const { return this->_M_do_to_ulong(); }$/;"	f	class:bitset	access:public	signature:() const
top	/Users/lij/.vim/stl/stl_queue.h	/^  const_reference top() const { return c.front(); }$/;"	f	class:priority_queue	access:public	signature:() const
top	/Users/lij/.vim/stl/stl_stack.h	/^  const_reference top() const { return c.back(); }$/;"	f	class:stack	access:public	signature:() const
top	/Users/lij/.vim/stl/stl_stack.h	/^  reference top() { return c.back(); }$/;"	f	class:stack	access:public	signature:()
traits_type	/Users/lij/.vim/stl/stl_iterator.h	/^  typedef _Traits                          traits_type;$/;"	t	class:istreambuf_iterator	access:public
traits_type	/Users/lij/.vim/stl/stl_iterator.h	/^  typedef _Traits                          traits_type;$/;"	t	class:ostreambuf_iterator	access:public
traits_type	/Users/lij/.vim/stl/stl_iterator.h	/^  typedef _Traits                        traits_type;$/;"	t	class:istream_iterator	access:public
traits_type	/Users/lij/.vim/stl/stl_iterator.h	/^  typedef _Traits                        traits_type;$/;"	t	class:ostream_iterator	access:public
traits_type	/Users/lij/.vim/stl/string	/^  typedef _Traits traits_type;$/;"	t	class:basic_string	file:	access:public
transfer	/Users/lij/.vim/stl/stl_list.h	/^  void transfer(iterator __position, iterator __first, iterator __last) {$/;"	f	class:list	access:protected	signature:(iterator __position, iterator __first, iterator __last)
transform	/Users/lij/.vim/stl/stl_algo.h	/^_OutputIter transform(_InputIter __first, _InputIter __last,$/;"	f	signature:(_InputIter __first, _InputIter __last, _OutputIter __result, _UnaryOperation __opr)
transform	/Users/lij/.vim/stl/stl_algo.h	/^_OutputIter transform(_InputIter1 __first1, _InputIter1 __last1,$/;"	f	signature:(_InputIter1 __first1, _InputIter1 __last1, _InputIter2 __first2, _OutputIter __result, _BinaryOperation __binary_op)
true	/Users/lij/.vim/stl/stl_config.h	/^#   define true /;"	d
typename	/Users/lij/.vim/stl/stl_config.h	/^#   define typename$/;"	d
unary_compose	/Users/lij/.vim/stl/stl_function.h	/^  unary_compose(const _Operation1& __x, const _Operation2& __y) $/;"	f	class:unary_compose	access:public	signature:(const _Operation1& __x, const _Operation2& __y)
unary_compose	/Users/lij/.vim/stl/stl_function.h	/^class unary_compose$/;"	c	inherits:unary_function
unary_compose::_M_fn1	/Users/lij/.vim/stl/stl_function.h	/^  _Operation1 _M_fn1;$/;"	m	class:unary_compose	access:protected
unary_compose::_M_fn2	/Users/lij/.vim/stl/stl_function.h	/^  _Operation2 _M_fn2;$/;"	m	class:unary_compose	access:protected
unary_compose::operator ()	/Users/lij/.vim/stl/stl_function.h	/^  operator()(const typename _Operation2::argument_type& __x) const {$/;"	f	class:unary_compose	access:public	signature:(const typename _Operation2::argument_type& __x) const
unary_compose::unary_compose	/Users/lij/.vim/stl/stl_function.h	/^  unary_compose(const _Operation1& __x, const _Operation2& __y) $/;"	f	class:unary_compose	access:public	signature:(const _Operation1& __x, const _Operation2& __y)
unary_function	/Users/lij/.vim/stl/stl_function.h	/^struct unary_function {$/;"	s
unary_function::argument_type	/Users/lij/.vim/stl/stl_function.h	/^  typedef _Arg argument_type;$/;"	t	struct:unary_function	access:public
unary_function::result_type	/Users/lij/.vim/stl/stl_function.h	/^  typedef _Result result_type;$/;"	t	struct:unary_function	access:public
unary_negate	/Users/lij/.vim/stl/stl_function.h	/^  explicit unary_negate(const _Predicate& __x) : _M_pred(__x) {}$/;"	f	class:unary_negate	access:public	signature:(const _Predicate& __x)
unary_negate	/Users/lij/.vim/stl/stl_function.h	/^class unary_negate$/;"	c	inherits:unary_function
unary_negate::_M_pred	/Users/lij/.vim/stl/stl_function.h	/^  _Predicate _M_pred;$/;"	m	class:unary_negate	access:protected
unary_negate::operator ()	/Users/lij/.vim/stl/stl_function.h	/^  bool operator()(const typename _Predicate::argument_type& __x) const {$/;"	f	class:unary_negate	access:public	signature:(const typename _Predicate::argument_type& __x) const
unary_negate::unary_negate	/Users/lij/.vim/stl/stl_function.h	/^  explicit unary_negate(const _Predicate& __x) : _M_pred(__x) {}$/;"	f	class:unary_negate	access:public	signature:(const _Predicate& __x)
underflow_error	/Users/lij/.vim/stl/stdexcept	/^  underflow_error(const string& __arg) : runtime_error(__arg) {}$/;"	f	class:underflow_error	access:public	signature:(const string& __arg)
underflow_error	/Users/lij/.vim/stl/stdexcept	/^class underflow_error : public runtime_error {$/;"	c	file:	inherits:runtime_error
underflow_error::underflow_error	/Users/lij/.vim/stl/stdexcept	/^  underflow_error(const string& __arg) : runtime_error(__arg) {}$/;"	f	class:underflow_error	access:public	signature:(const string& __arg)
uninitialized_copy	/Users/lij/.vim/stl/stl_uninitialized.h	/^  uninitialized_copy(_InputIter __first, _InputIter __last,$/;"	f	signature:(_InputIter __first, _InputIter __last, _ForwardIter __result)
uninitialized_copy	/Users/lij/.vim/stl/stl_uninitialized.h	/^inline char* uninitialized_copy(const char* __first, const char* __last,$/;"	f	signature:(const char* __first, const char* __last, char* __result)
uninitialized_copy	/Users/lij/.vim/stl/stl_uninitialized.h	/^uninitialized_copy(const wchar_t* __first, const wchar_t* __last,$/;"	f	signature:(const wchar_t* __first, const wchar_t* __last, wchar_t* __result)
uninitialized_copy_n	/Users/lij/.vim/stl/stl_uninitialized.h	/^uninitialized_copy_n(_InputIter __first, _Size __count,$/;"	f	signature:(_InputIter __first, _Size __count, _ForwardIter __result)
uninitialized_fill	/Users/lij/.vim/stl/stl_uninitialized.h	/^inline void uninitialized_fill(_ForwardIter __first,$/;"	f	signature:(_ForwardIter __first, _ForwardIter __last, const _Tp& __x)
uninitialized_fill_n	/Users/lij/.vim/stl/stl_uninitialized.h	/^uninitialized_fill_n(_ForwardIter __first, _Size __n, const _Tp& __x)$/;"	f	signature:(_ForwardIter __first, _Size __n, const _Tp& __x)
unique	/Users/lij/.vim/stl/stl_algo.h	/^_ForwardIter unique(_ForwardIter __first, _ForwardIter __last) {$/;"	f	signature:(_ForwardIter __first, _ForwardIter __last)
unique	/Users/lij/.vim/stl/stl_algo.h	/^_ForwardIter unique(_ForwardIter __first, _ForwardIter __last,$/;"	f	signature:(_ForwardIter __first, _ForwardIter __last, _BinaryPredicate __binary_pred)
unique	/Users/lij/.vim/stl/stl_list.h	/^  template <class _BinaryPredicate> void unique(_BinaryPredicate);$/;"	p	class:list	access:public	signature:(_BinaryPredicate)
unique	/Users/lij/.vim/stl/stl_list.h	/^  void unique();$/;"	p	class:list	access:public	signature:()
unique	/Users/lij/.vim/stl/stl_list.h	/^void list<_Tp, _Alloc>::unique()$/;"	f	class:list	signature:()
unique	/Users/lij/.vim/stl/stl_list.h	/^void list<_Tp, _Alloc>::unique(_BinaryPredicate __binary_pred)$/;"	f	class:list	signature:(_BinaryPredicate __binary_pred)
unique	/Users/lij/.vim/stl/stl_slist.h	/^  void unique(); $/;"	p	class:slist	access:public	signature:()
unique	/Users/lij/.vim/stl/stl_slist.h	/^  void unique(_BinaryPredicate __pred); $/;"	p	class:slist	access:public	signature:(_BinaryPredicate __pred)
unique	/Users/lij/.vim/stl/stl_slist.h	/^void slist<_Tp,_Alloc>::unique()$/;"	f	class:slist	signature:()
unique	/Users/lij/.vim/stl/stl_slist.h	/^void slist<_Tp,_Alloc>::unique(_BinaryPredicate __pred)$/;"	f	class:slist	signature:(_BinaryPredicate __pred)
unique_copy	/Users/lij/.vim/stl/stl_algo.h	/^inline _OutputIter unique_copy(_InputIter __first, _InputIter __last,$/;"	f	signature:(_InputIter __first, _InputIter __last, _OutputIter __result)
unique_copy	/Users/lij/.vim/stl/stl_algo.h	/^inline _OutputIter unique_copy(_InputIter __first, _InputIter __last,$/;"	f	signature:(_InputIter __first, _InputIter __last, _OutputIter __result, _BinaryPredicate __binary_pred)
upper_bound	/Users/lij/.vim/stl/stl_algo.h	/^inline _ForwardIter upper_bound(_ForwardIter __first, _ForwardIter __last,$/;"	f	signature:(_ForwardIter __first, _ForwardIter __last, const _Tp& __val)
upper_bound	/Users/lij/.vim/stl/stl_algo.h	/^inline _ForwardIter upper_bound(_ForwardIter __first, _ForwardIter __last,$/;"	f	signature:(_ForwardIter __first, _ForwardIter __last, const _Tp& __val, _Compare __comp)
upper_bound	/Users/lij/.vim/stl/stl_map.h	/^  const_iterator upper_bound(const key_type& __x) const {$/;"	f	class:map	access:public	signature:(const key_type& __x) const
upper_bound	/Users/lij/.vim/stl/stl_map.h	/^  iterator upper_bound(const key_type& __x) {return _M_t.upper_bound(__x); }$/;"	f	class:map	access:public	signature:(const key_type& __x)
upper_bound	/Users/lij/.vim/stl/stl_multimap.h	/^  const_iterator upper_bound(const key_type& __x) const {$/;"	f	class:multimap	access:public	signature:(const key_type& __x) const
upper_bound	/Users/lij/.vim/stl/stl_multimap.h	/^  iterator upper_bound(const key_type& __x) {return _M_t.upper_bound(__x); }$/;"	f	class:multimap	access:public	signature:(const key_type& __x)
upper_bound	/Users/lij/.vim/stl/stl_multiset.h	/^  iterator upper_bound(const key_type& __x) const {$/;"	f	class:multiset	access:public	signature:(const key_type& __x) const
upper_bound	/Users/lij/.vim/stl/stl_set.h	/^  iterator upper_bound(const key_type& __x) const {$/;"	f	class:set	access:public	signature:(const key_type& __x) const
upper_bound	/Users/lij/.vim/stl/stl_tree.h	/^  ::upper_bound(const _Key& __k) const$/;"	f	class:_Rb_tree	signature:(const _Key& __k) const
upper_bound	/Users/lij/.vim/stl/stl_tree.h	/^  ::upper_bound(const _Key& __k)$/;"	f	class:_Rb_tree	signature:(const _Key& __k)
upper_bound	/Users/lij/.vim/stl/stl_tree.h	/^  const_iterator upper_bound(const key_type& __x) const;$/;"	p	class:_Rb_tree	access:public	signature:(const key_type& __x) const
upper_bound	/Users/lij/.vim/stl/stl_tree.h	/^  iterator upper_bound(const key_type& __x);$/;"	p	class:_Rb_tree	access:public	signature:(const key_type& __x)
valarray	/Users/lij/.vim/stl/valarray	/^  valarray() : _Valarray_base<_Tp>() {}$/;"	f	class:valarray	access:public	signature:()
valarray	/Users/lij/.vim/stl/valarray	/^  valarray(const gslice_array<_Tp>&);$/;"	p	class:valarray	file:	access:public	signature:(const gslice_array<_Tp>&)
valarray	/Users/lij/.vim/stl/valarray	/^  valarray(const indirect_array<_Tp>&);$/;"	p	class:valarray	file:	access:public	signature:(const indirect_array<_Tp>&)
valarray	/Users/lij/.vim/stl/valarray	/^  valarray(const mask_array<_Tp>&);$/;"	p	class:valarray	file:	access:public	signature:(const mask_array<_Tp>&)
valarray	/Users/lij/.vim/stl/valarray	/^  valarray(const slice_array<_Tp>&);$/;"	p	class:valarray	file:	access:public	signature:(const slice_array<_Tp>&)
valarray	/Users/lij/.vim/stl/valarray	/^  valarray(const valarray& __x) : _Valarray_base<_Tp>(__x._M_size) {$/;"	f	class:valarray	access:public	signature:(const valarray& __x)
valarray	/Users/lij/.vim/stl/valarray	/^  valarray(const value_type& __x, size_t __n) : _Valarray_base<_Tp>(__n)$/;"	f	class:valarray	access:public	signature:(const value_type& __x, size_t __n)
valarray	/Users/lij/.vim/stl/valarray	/^  valarray(const value_type* __p, size_t __n) : _Valarray_base<_Tp>(__n)$/;"	f	class:valarray	access:public	signature:(const value_type* __p, size_t __n)
valarray	/Users/lij/.vim/stl/valarray	/^  valarray(size_t __n) : _Valarray_base<_Tp>(__n)$/;"	f	class:valarray	access:public	signature:(size_t __n)
valarray	/Users/lij/.vim/stl/valarray	/^  valarray(size_t __n, _NoInit) : _Valarray_base<_Tp>(__n) {$/;"	f	class:valarray	access:public	signature:(size_t __n, _NoInit)
valarray	/Users/lij/.vim/stl/valarray	/^class valarray : private _Valarray_base<_Tp>$/;"	c	file:	inherits:_Valarray_base
valarray	/Users/lij/.vim/stl/valarray	/^inline valarray<_Tp>::valarray(const gslice_array<_Tp>& __x)$/;"	f	class:valarray	signature:(const gslice_array<_Tp>& __x)
valarray	/Users/lij/.vim/stl/valarray	/^inline valarray<_Tp>::valarray(const indirect_array<_Tp>& __x)$/;"	f	class:valarray	signature:(const indirect_array<_Tp>& __x)
valarray	/Users/lij/.vim/stl/valarray	/^inline valarray<_Tp>::valarray(const mask_array<_Tp>& __x)$/;"	f	class:valarray	signature:(const mask_array<_Tp>& __x)
valarray	/Users/lij/.vim/stl/valarray	/^inline valarray<_Tp>::valarray(const slice_array<_Tp>& __x)$/;"	f	class:valarray	signature:(const slice_array<_Tp>& __x)
valarray::_M_initialize	/Users/lij/.vim/stl/valarray	/^  void _M_initialize(__false_type)$/;"	f	class:valarray	file:	access:private	signature:(__false_type)
valarray::_M_initialize	/Users/lij/.vim/stl/valarray	/^  void _M_initialize(__true_type) {}$/;"	f	class:valarray	file:	access:private	signature:(__true_type)
valarray::_NoInit	/Users/lij/.vim/stl/valarray	/^  struct _NoInit {};$/;"	s	class:valarray	file:	access:public
valarray::__f	/Users/lij/.vim/stl/valarray	/^  valarray apply(value_type __f(const value_type&)) const {$/;"	f	class:valarray	access:public	signature:(const value_type&) const
valarray::__f	/Users/lij/.vim/stl/valarray	/^  valarray apply(value_type __f(value_type)) const {$/;"	f	class:valarray	access:public	signature:(value_type) const
valarray::cshift	/Users/lij/.vim/stl/valarray	/^  valarray cshift(int __n) const;$/;"	p	class:valarray	file:	access:public	signature:(int __n) const
valarray::cshift	/Users/lij/.vim/stl/valarray	/^valarray<_Tp> valarray<_Tp>::cshift(int __m) const$/;"	f	class:valarray	signature:(int __m) const
valarray::max	/Users/lij/.vim/stl/valarray	/^  value_type max() const {$/;"	f	class:valarray	access:public	signature:() const
valarray::min	/Users/lij/.vim/stl/valarray	/^  value_type min() const {$/;"	f	class:valarray	access:public	signature:() const
valarray::operator !	/Users/lij/.vim/stl/valarray	/^  valarray<bool> operator!() const {$/;"	f	class:valarray	access:public	signature:() const
valarray::operator %=	/Users/lij/.vim/stl/valarray	/^  valarray& operator%= (const valarray& __x) {$/;"	f	class:valarray	access:public	signature:(const valarray& __x)
valarray::operator %=	/Users/lij/.vim/stl/valarray	/^  valarray& operator%= (const value_type& __x) {$/;"	f	class:valarray	access:public	signature:(const value_type& __x)
valarray::operator &=	/Users/lij/.vim/stl/valarray	/^  valarray& operator&= (const valarray& __x) {$/;"	f	class:valarray	access:public	signature:(const valarray& __x)
valarray::operator &=	/Users/lij/.vim/stl/valarray	/^  valarray& operator&= (const value_type& __x) {$/;"	f	class:valarray	access:public	signature:(const value_type& __x)
valarray::operator *=	/Users/lij/.vim/stl/valarray	/^  valarray& operator*= (const valarray& __x) {$/;"	f	class:valarray	access:public	signature:(const valarray& __x)
valarray::operator *=	/Users/lij/.vim/stl/valarray	/^  valarray& operator*= (const value_type& __x) {$/;"	f	class:valarray	access:public	signature:(const value_type& __x)
valarray::operator +	/Users/lij/.vim/stl/valarray	/^  valarray operator+() const { return *this; }$/;"	f	class:valarray	access:public	signature:() const
valarray::operator +=	/Users/lij/.vim/stl/valarray	/^  valarray& operator+= (const valarray& __x) {$/;"	f	class:valarray	access:public	signature:(const valarray& __x)
valarray::operator +=	/Users/lij/.vim/stl/valarray	/^  valarray& operator+= (const value_type& __x) {$/;"	f	class:valarray	access:public	signature:(const value_type& __x)
valarray::operator -	/Users/lij/.vim/stl/valarray	/^  valarray operator-() const {$/;"	f	class:valarray	access:public	signature:() const
valarray::operator -=	/Users/lij/.vim/stl/valarray	/^  valarray& operator-= (const valarray& __x) {$/;"	f	class:valarray	access:public	signature:(const valarray& __x)
valarray::operator -=	/Users/lij/.vim/stl/valarray	/^  valarray& operator-= (const value_type& __x) {$/;"	f	class:valarray	access:public	signature:(const value_type& __x)
valarray::operator /=	/Users/lij/.vim/stl/valarray	/^  valarray& operator\/= (const valarray& __x) {$/;"	f	class:valarray	access:public	signature:(const valarray& __x)
valarray::operator /=	/Users/lij/.vim/stl/valarray	/^  valarray& operator\/= (const value_type& __x) {$/;"	f	class:valarray	access:public	signature:(const value_type& __x)
valarray::operator <<=	/Users/lij/.vim/stl/valarray	/^  valarray& operator<<= (const valarray& __x) {$/;"	f	class:valarray	access:public	signature:(const valarray& __x)
valarray::operator <<=	/Users/lij/.vim/stl/valarray	/^  valarray& operator<<= (const value_type& __x) {$/;"	f	class:valarray	access:public	signature:(const value_type& __x)
valarray::operator =	/Users/lij/.vim/stl/valarray	/^  valarray& operator=(const gslice_array<_Tp>&);$/;"	p	class:valarray	file:	access:public	signature:(const gslice_array<_Tp>&)
valarray::operator =	/Users/lij/.vim/stl/valarray	/^  valarray& operator=(const indirect_array<_Tp>&);$/;"	p	class:valarray	file:	access:public	signature:(const indirect_array<_Tp>&)
valarray::operator =	/Users/lij/.vim/stl/valarray	/^  valarray& operator=(const mask_array<_Tp>&);$/;"	p	class:valarray	file:	access:public	signature:(const mask_array<_Tp>&)
valarray::operator =	/Users/lij/.vim/stl/valarray	/^  valarray& operator=(const slice_array<_Tp>&);$/;"	p	class:valarray	file:	access:public	signature:(const slice_array<_Tp>&)
valarray::operator =	/Users/lij/.vim/stl/valarray	/^  valarray& operator=(const valarray& __x) {$/;"	f	class:valarray	access:public	signature:(const valarray& __x)
valarray::operator =	/Users/lij/.vim/stl/valarray	/^  valarray& operator=(const value_type& __x) {$/;"	f	class:valarray	access:public	signature:(const value_type& __x)
valarray::operator =	/Users/lij/.vim/stl/valarray	/^inline valarray<_Tp>& valarray<_Tp>::operator=(const mask_array<_Tp>& __x) {$/;"	f	class:valarray	signature:(const mask_array<_Tp>& __x)
valarray::operator =	/Users/lij/.vim/stl/valarray	/^valarray<_Tp>& valarray<_Tp>::operator=(const gslice_array<_Tp>& __x)$/;"	f	class:valarray	signature:(const gslice_array<_Tp>& __x)
valarray::operator =	/Users/lij/.vim/stl/valarray	/^valarray<_Tp>& valarray<_Tp>::operator=(const indirect_array<_Tp>& __x) {$/;"	f	class:valarray	signature:(const indirect_array<_Tp>& __x)
valarray::operator =	/Users/lij/.vim/stl/valarray	/^valarray<_Tp>& valarray<_Tp>::operator=(const slice_array<_Tp>& __x)$/;"	f	class:valarray	signature:(const slice_array<_Tp>& __x)
valarray::operator >>=	/Users/lij/.vim/stl/valarray	/^  valarray& operator>>= (const valarray& __x) {$/;"	f	class:valarray	access:public	signature:(const valarray& __x)
valarray::operator >>=	/Users/lij/.vim/stl/valarray	/^  valarray& operator>>= (const value_type& __x) {$/;"	f	class:valarray	access:public	signature:(const value_type& __x)
valarray::operator []	/Users/lij/.vim/stl/valarray	/^  gslice_array<_Tp>   operator[](gslice);  $/;"	p	class:valarray	file:	access:public	signature:(gslice)
valarray::operator []	/Users/lij/.vim/stl/valarray	/^  indirect_array<_Tp> operator[](const valarray<size_t>&);$/;"	p	class:valarray	file:	access:public	signature:(const valarray<size_t>&)
valarray::operator []	/Users/lij/.vim/stl/valarray	/^  mask_array<_Tp>     operator[](const valarray<bool>&);$/;"	p	class:valarray	file:	access:public	signature:(const valarray<bool>&)
valarray::operator []	/Users/lij/.vim/stl/valarray	/^  slice_array<_Tp>    operator[](slice);$/;"	p	class:valarray	file:	access:public	signature:(slice)
valarray::operator []	/Users/lij/.vim/stl/valarray	/^  valarray            operator[](const valarray<bool>&) const;$/;"	p	class:valarray	file:	access:public	signature:(const valarray<bool>&) const
valarray::operator []	/Users/lij/.vim/stl/valarray	/^  valarray            operator[](const valarray<size_t>&) const;$/;"	p	class:valarray	file:	access:public	signature:(const valarray<size_t>&) const
valarray::operator []	/Users/lij/.vim/stl/valarray	/^  valarray            operator[](gslice) const;$/;"	p	class:valarray	file:	access:public	signature:(gslice) const
valarray::operator []	/Users/lij/.vim/stl/valarray	/^  valarray            operator[](slice) const;$/;"	p	class:valarray	file:	access:public	signature:(slice) const
valarray::operator []	/Users/lij/.vim/stl/valarray	/^  value_type  operator[](size_t __n) const { return this->_M_first[__n]; }$/;"	f	class:valarray	access:public	signature:(size_t __n) const
valarray::operator []	/Users/lij/.vim/stl/valarray	/^  value_type& operator[](size_t __n)       { return this->_M_first[__n]; }$/;"	f	class:valarray	access:public	signature:(size_t __n)
valarray::operator []	/Users/lij/.vim/stl/valarray	/^inline gslice_array<_Tp> valarray<_Tp>::operator[](gslice __slice) {$/;"	f	class:valarray	signature:(gslice __slice)
valarray::operator []	/Users/lij/.vim/stl/valarray	/^inline mask_array<_Tp> valarray<_Tp>::operator[](const valarray<bool>& __mask)$/;"	f	class:valarray	signature:(const valarray<bool>& __mask)
valarray::operator []	/Users/lij/.vim/stl/valarray	/^inline slice_array<_Tp> valarray<_Tp>::operator[](slice __slice) {$/;"	f	class:valarray	signature:(slice __slice)
valarray::operator []	/Users/lij/.vim/stl/valarray	/^valarray<_Tp> valarray<_Tp>::operator[](const valarray<bool>& __mask) const$/;"	f	class:valarray	signature:(const valarray<bool>& __mask) const
valarray::operator []	/Users/lij/.vim/stl/valarray	/^valarray<_Tp> valarray<_Tp>::operator[](gslice __slice) const$/;"	f	class:valarray	signature:(gslice __slice) const
valarray::operator []	/Users/lij/.vim/stl/valarray	/^valarray<_Tp> valarray<_Tp>::operator[](slice __slice) const {$/;"	f	class:valarray	signature:(slice __slice) const
valarray::operator []	/Users/lij/.vim/stl/valarray	/^valarray<_Tp>::operator[](const valarray<size_t>& __addr) const$/;"	f	class:valarray	signature:(const valarray<size_t>& __addr) const
valarray::operator []	/Users/lij/.vim/stl/valarray	/^valarray<_Tp>::operator[](const valarray<size_t>& __addr)$/;"	f	class:valarray	signature:(const valarray<size_t>& __addr)
valarray::operator ^=	/Users/lij/.vim/stl/valarray	/^  valarray& operator^= (const valarray& __x) {$/;"	f	class:valarray	access:public	signature:(const valarray& __x)
valarray::operator ^=	/Users/lij/.vim/stl/valarray	/^  valarray& operator^= (const value_type& __x) {$/;"	f	class:valarray	access:public	signature:(const value_type& __x)
valarray::operator |=	/Users/lij/.vim/stl/valarray	/^  valarray& operator|= (const valarray& __x) {$/;"	f	class:valarray	access:public	signature:(const valarray& __x)
valarray::operator |=	/Users/lij/.vim/stl/valarray	/^  valarray& operator|= (const value_type& __x) {$/;"	f	class:valarray	access:public	signature:(const value_type& __x)
valarray::operator ~	/Users/lij/.vim/stl/valarray	/^  valarray operator~() const {$/;"	f	class:valarray	access:public	signature:() const
valarray::resize	/Users/lij/.vim/stl/valarray	/^  void resize(size_t __n, value_type __x = value_type()) {$/;"	f	class:valarray	access:public	signature:(size_t __n, value_type __x = value_type())
valarray::shift	/Users/lij/.vim/stl/valarray	/^  valarray shift(int __n) const;$/;"	p	class:valarray	file:	access:public	signature:(int __n) const
valarray::shift	/Users/lij/.vim/stl/valarray	/^valarray<_Tp> valarray<_Tp>::shift(int __n) const$/;"	f	class:valarray	signature:(int __n) const
valarray::size	/Users/lij/.vim/stl/valarray	/^  size_t size() const { return this->_M_size; }$/;"	f	class:valarray	access:public	signature:() const
valarray::sum	/Users/lij/.vim/stl/valarray	/^  value_type sum() const {$/;"	f	class:valarray	access:public	signature:() const
valarray::valarray	/Users/lij/.vim/stl/valarray	/^  valarray() : _Valarray_base<_Tp>() {}$/;"	f	class:valarray	access:public	signature:()
valarray::valarray	/Users/lij/.vim/stl/valarray	/^  valarray(const gslice_array<_Tp>&);$/;"	p	class:valarray	file:	access:public	signature:(const gslice_array<_Tp>&)
valarray::valarray	/Users/lij/.vim/stl/valarray	/^  valarray(const indirect_array<_Tp>&);$/;"	p	class:valarray	file:	access:public	signature:(const indirect_array<_Tp>&)
valarray::valarray	/Users/lij/.vim/stl/valarray	/^  valarray(const mask_array<_Tp>&);$/;"	p	class:valarray	file:	access:public	signature:(const mask_array<_Tp>&)
valarray::valarray	/Users/lij/.vim/stl/valarray	/^  valarray(const slice_array<_Tp>&);$/;"	p	class:valarray	file:	access:public	signature:(const slice_array<_Tp>&)
valarray::valarray	/Users/lij/.vim/stl/valarray	/^  valarray(const valarray& __x) : _Valarray_base<_Tp>(__x._M_size) {$/;"	f	class:valarray	access:public	signature:(const valarray& __x)
valarray::valarray	/Users/lij/.vim/stl/valarray	/^  valarray(const value_type& __x, size_t __n) : _Valarray_base<_Tp>(__n)$/;"	f	class:valarray	access:public	signature:(const value_type& __x, size_t __n)
valarray::valarray	/Users/lij/.vim/stl/valarray	/^  valarray(const value_type* __p, size_t __n) : _Valarray_base<_Tp>(__n)$/;"	f	class:valarray	access:public	signature:(const value_type* __p, size_t __n)
valarray::valarray	/Users/lij/.vim/stl/valarray	/^  valarray(size_t __n) : _Valarray_base<_Tp>(__n)$/;"	f	class:valarray	access:public	signature:(size_t __n)
valarray::valarray	/Users/lij/.vim/stl/valarray	/^  valarray(size_t __n, _NoInit) : _Valarray_base<_Tp>(__n) {$/;"	f	class:valarray	access:public	signature:(size_t __n, _NoInit)
valarray::valarray	/Users/lij/.vim/stl/valarray	/^inline valarray<_Tp>::valarray(const gslice_array<_Tp>& __x)$/;"	f	class:valarray	signature:(const gslice_array<_Tp>& __x)
valarray::valarray	/Users/lij/.vim/stl/valarray	/^inline valarray<_Tp>::valarray(const indirect_array<_Tp>& __x)$/;"	f	class:valarray	signature:(const indirect_array<_Tp>& __x)
valarray::valarray	/Users/lij/.vim/stl/valarray	/^inline valarray<_Tp>::valarray(const mask_array<_Tp>& __x)$/;"	f	class:valarray	signature:(const mask_array<_Tp>& __x)
valarray::valarray	/Users/lij/.vim/stl/valarray	/^inline valarray<_Tp>::valarray(const slice_array<_Tp>& __x)$/;"	f	class:valarray	signature:(const slice_array<_Tp>& __x)
valarray::value_type	/Users/lij/.vim/stl/valarray	/^  typedef _Tp value_type;$/;"	t	class:valarray	file:	access:public
valarray::~valarray	/Users/lij/.vim/stl/valarray	/^  ~valarray() { destroy(this->_M_first, this->_M_first + this->_M_size); }$/;"	f	class:valarray	access:public	signature:()
value	/Users/lij/.vim/stl/stl_function.h	/^  typename _Operation::first_argument_type value;$/;"	m	class:binder1st	access:protected
value	/Users/lij/.vim/stl/stl_function.h	/^  typename _Operation::second_argument_type value;$/;"	m	class:binder2nd	access:protected
value_comp	/Users/lij/.vim/stl/stl_map.h	/^  value_compare value_comp() const { return value_compare(_M_t.key_comp()); }$/;"	f	class:map	access:public	signature:() const
value_comp	/Users/lij/.vim/stl/stl_multimap.h	/^  value_compare value_comp() const { return value_compare(_M_t.key_comp()); }$/;"	f	class:multimap	access:public	signature:() const
value_comp	/Users/lij/.vim/stl/stl_multiset.h	/^  value_compare value_comp() const { return _M_t.key_comp(); }$/;"	f	class:multiset	access:public	signature:() const
value_comp	/Users/lij/.vim/stl/stl_set.h	/^  value_compare value_comp() const { return _M_t.key_comp(); }$/;"	f	class:set	access:public	signature:() const
value_compare	/Users/lij/.vim/stl/stl_map.h	/^    value_compare(_Compare __c) : comp(__c) {}$/;"	f	class:map::value_compare	access:protected	signature:(_Compare __c)
value_compare	/Users/lij/.vim/stl/stl_map.h	/^  class value_compare$/;"	c	class:map	inherits:binary_function	access:public
value_compare	/Users/lij/.vim/stl/stl_multimap.h	/^    value_compare(_Compare __c) : comp(__c) {}$/;"	f	class:multimap::value_compare	access:protected	signature:(_Compare __c)
value_compare	/Users/lij/.vim/stl/stl_multimap.h	/^  class value_compare : public binary_function<value_type, value_type, bool> {$/;"	c	class:multimap	inherits:binary_function	access:public
value_compare	/Users/lij/.vim/stl/stl_multiset.h	/^  typedef _Compare value_compare;$/;"	t	class:multiset	access:public
value_compare	/Users/lij/.vim/stl/stl_set.h	/^  typedef _Compare value_compare;$/;"	t	class:set	access:public
value_type	/Users/lij/.vim/stl/concept_checks.h	/^  typedef typename __STD::iterator_traits<_Iter>::value_type value_type;$/;"	t	struct:__value_type_type_definition_requirement_violation	access:public
value_type	/Users/lij/.vim/stl/concept_checks.h	/^__STL_TYPEDEF_REQUIREMENT(value_type);$/;"	v
value_type	/Users/lij/.vim/stl/defalloc.h	/^    typedef T value_type;$/;"	t	class:allocator	access:public
value_type	/Users/lij/.vim/stl/pthread_alloc	/^  typedef _Tp        value_type;$/;"	t	class:pthread_allocator	file:	access:public
value_type	/Users/lij/.vim/stl/pthread_alloc	/^  typedef void        value_type;$/;"	t	class:pthread_allocator	file:	access:public
value_type	/Users/lij/.vim/stl/stl_alloc.h	/^  typedef _Tp        value_type;$/;"	t	class:allocator	access:public
value_type	/Users/lij/.vim/stl/stl_alloc.h	/^  typedef _Tp        value_type;$/;"	t	struct:__allocator	access:public
value_type	/Users/lij/.vim/stl/stl_alloc.h	/^  typedef void        value_type;$/;"	t	class:allocator	access:public
value_type	/Users/lij/.vim/stl/stl_bvector.h	/^  typedef bool value_type;$/;"	t	class:__BVECTOR	access:public
value_type	/Users/lij/.vim/stl/stl_deque.h	/^  typedef _Tp value_type;$/;"	t	class:deque	access:public
value_type	/Users/lij/.vim/stl/stl_deque.h	/^  typedef _Tp value_type;$/;"	t	struct:_Deque_iterator	access:public
value_type	/Users/lij/.vim/stl/stl_deque.h	/^inline _Tp* value_type(const _Deque_iterator<_Tp,_Ref,_Ptr>&) { return 0; }$/;"	f	signature:(const _Deque_iterator<_Tp,_Ref,_Ptr>&)
value_type	/Users/lij/.vim/stl/stl_hash_map.h	/^  typedef typename _Ht::value_type value_type;$/;"	t	class:hash_map	access:public
value_type	/Users/lij/.vim/stl/stl_hash_map.h	/^  typedef typename _Ht::value_type value_type;$/;"	t	class:hash_multimap	access:public
value_type	/Users/lij/.vim/stl/stl_hash_map.h	/^  typedef void                value_type;$/;"	t	class:insert_iterator	access:public
value_type	/Users/lij/.vim/stl/stl_hash_set.h	/^  typedef typename _Ht::value_type value_type;$/;"	t	class:hash_multiset	access:public
value_type	/Users/lij/.vim/stl/stl_hash_set.h	/^  typedef typename _Ht::value_type value_type;$/;"	t	class:hash_set	access:public
value_type	/Users/lij/.vim/stl/stl_hash_set.h	/^  typedef void                value_type;$/;"	t	class:insert_iterator	access:public
value_type	/Users/lij/.vim/stl/stl_hashtable.h	/^  typedef _Val value_type;$/;"	t	class:hashtable	access:public
value_type	/Users/lij/.vim/stl/stl_hashtable.h	/^  typedef _Val value_type;$/;"	t	struct:_Hashtable_const_iterator	access:public
value_type	/Users/lij/.vim/stl/stl_hashtable.h	/^  typedef _Val value_type;$/;"	t	struct:_Hashtable_iterator	access:public
value_type	/Users/lij/.vim/stl/stl_hashtable.h	/^value_type(const _Hashtable_const_iterator<_Val,_Key,_HF,_ExK,_EqK,_All>&)$/;"	f	signature:(const _Hashtable_const_iterator<_Val,_Key,_HF,_ExK,_EqK,_All>&)
value_type	/Users/lij/.vim/stl/stl_hashtable.h	/^value_type(const _Hashtable_iterator<_Val,_Key,_HF,_ExK,_EqK,_All>&)$/;"	f	signature:(const _Hashtable_iterator<_Val,_Key,_HF,_ExK,_EqK,_All>&)
value_type	/Users/lij/.vim/stl/stl_iterator.h	/^          value_type;$/;"	t	class:reverse_iterator	access:public
value_type	/Users/lij/.vim/stl/stl_iterator.h	/^  typedef _Tp                            value_type;$/;"	t	class:istream_iterator	access:public
value_type	/Users/lij/.vim/stl/stl_iterator.h	/^  typedef _Tp                        value_type;$/;"	t	class:reverse_bidirectional_iterator	access:public
value_type	/Users/lij/.vim/stl/stl_iterator.h	/^  typedef _Tp                        value_type;$/;"	t	class:reverse_iterator	access:public
value_type	/Users/lij/.vim/stl/stl_iterator.h	/^  typedef _Tp                 value_type;$/;"	t	class:istream_iterator	access:public
value_type	/Users/lij/.vim/stl/stl_iterator.h	/^  typedef void                           value_type;$/;"	t	class:ostream_iterator	access:public
value_type	/Users/lij/.vim/stl/stl_iterator.h	/^  typedef void                value_type;$/;"	t	class:back_insert_iterator	access:public
value_type	/Users/lij/.vim/stl/stl_iterator.h	/^  typedef void                value_type;$/;"	t	class:front_insert_iterator	access:public
value_type	/Users/lij/.vim/stl/stl_iterator.h	/^  typedef void                value_type;$/;"	t	class:insert_iterator	access:public
value_type	/Users/lij/.vim/stl/stl_iterator.h	/^  typedef void                value_type;$/;"	t	class:ostream_iterator	access:public
value_type	/Users/lij/.vim/stl/stl_iterator.h	/^inline _Tp* value_type(const reverse_iterator<_RandomAccessIterator, _Tp,$/;"	f	signature:(const reverse_iterator<_RandomAccessIterator, _Tp, _Reference, _Distance>&)
value_type	/Users/lij/.vim/stl/stl_iterator.h	/^value_type(const istream_iterator<_Tp, _Dist>&) { return (_Tp*) 0; }$/;"	f	signature:(const istream_iterator<_Tp, _Dist>&)
value_type	/Users/lij/.vim/stl/stl_iterator.h	/^value_type(const reverse_bidirectional_iterator<_BidirectionalIterator, _Tp,$/;"	f	signature:(const reverse_bidirectional_iterator<_BidirectionalIterator, _Tp, _Reference, _Distance>&)
value_type	/Users/lij/.vim/stl/stl_iterator_base.h	/^  typedef _Tp                         value_type;$/;"	t	struct:iterator_traits	access:public
value_type	/Users/lij/.vim/stl/stl_iterator_base.h	/^  typedef _Tp                        value_type;$/;"	t	struct:bidirectional_iterator	access:public
value_type	/Users/lij/.vim/stl/stl_iterator_base.h	/^  typedef _Tp                        value_type;$/;"	t	struct:random_access_iterator	access:public
value_type	/Users/lij/.vim/stl/stl_iterator_base.h	/^  typedef _Tp                  value_type;$/;"	t	struct:forward_iterator	access:public
value_type	/Users/lij/.vim/stl/stl_iterator_base.h	/^  typedef _Tp                value_type;$/;"	t	struct:input_iterator	access:public
value_type	/Users/lij/.vim/stl/stl_iterator_base.h	/^  typedef _Tp        value_type;$/;"	t	struct:iterator	access:public
value_type	/Users/lij/.vim/stl/stl_iterator_base.h	/^  typedef typename _Iterator::value_type        value_type;$/;"	t	struct:iterator_traits	access:public
value_type	/Users/lij/.vim/stl/stl_iterator_base.h	/^  typedef void                value_type;$/;"	t	struct:output_iterator	access:public
value_type	/Users/lij/.vim/stl/stl_iterator_base.h	/^inline _Tp* value_type(const _Tp*) { return (_Tp*)(0); }$/;"	f	signature:(const _Tp*)
value_type	/Users/lij/.vim/stl/stl_iterator_base.h	/^inline _Tp* value_type(const bidirectional_iterator<_Tp, _Distance>&)$/;"	f	signature:(const bidirectional_iterator<_Tp, _Distance>&)
value_type	/Users/lij/.vim/stl/stl_iterator_base.h	/^inline _Tp* value_type(const forward_iterator<_Tp, _Distance>&)$/;"	f	signature:(const forward_iterator<_Tp, _Distance>&)
value_type	/Users/lij/.vim/stl/stl_iterator_base.h	/^inline _Tp* value_type(const input_iterator<_Tp, _Distance>&)$/;"	f	signature:(const input_iterator<_Tp, _Distance>&)
value_type	/Users/lij/.vim/stl/stl_iterator_base.h	/^inline _Tp* value_type(const random_access_iterator<_Tp, _Distance>&)$/;"	f	signature:(const random_access_iterator<_Tp, _Distance>&)
value_type	/Users/lij/.vim/stl/stl_iterator_base.h	/^value_type(const _Iter& __i) { return __value_type(__i); }$/;"	f	signature:(const _Iter& __i)
value_type	/Users/lij/.vim/stl/stl_list.h	/^  typedef _Tp value_type;$/;"	t	class:list	access:public
value_type	/Users/lij/.vim/stl/stl_list.h	/^  typedef _Tp value_type;$/;"	t	struct:_List_iterator	access:public
value_type	/Users/lij/.vim/stl/stl_list.h	/^value_type(const _List_iterator<_Tp, _Ref, _Ptr>&)$/;"	f	signature:(const _List_iterator<_Tp, _Ref, _Ptr>&)
value_type	/Users/lij/.vim/stl/stl_map.h	/^  typedef pair<const _Key, _Tp> value_type;$/;"	t	class:map	access:public
value_type	/Users/lij/.vim/stl/stl_multimap.h	/^  typedef pair<const _Key, _Tp> value_type;$/;"	t	class:multimap	access:public
value_type	/Users/lij/.vim/stl/stl_multiset.h	/^  typedef _Key     value_type;$/;"	t	class:multiset	access:public
value_type	/Users/lij/.vim/stl/stl_queue.h	/^  typedef typename _Sequence::value_type      value_type;$/;"	t	class:priority_queue	access:public
value_type	/Users/lij/.vim/stl/stl_queue.h	/^  typedef typename _Sequence::value_type      value_type;$/;"	t	class:queue	access:public
value_type	/Users/lij/.vim/stl/stl_raw_storage_iter.h	/^  typedef void                value_type;$/;"	t	class:raw_storage_iterator	access:public
value_type	/Users/lij/.vim/stl/stl_rope.h	/^            typedef typename _Sequence::value_type value_type;$/;"	t	class:sequence_buffer	access:public
value_type	/Users/lij/.vim/stl/stl_rope.h	/^        typedef _CharT value_type;$/;"	t	class:rope	access:public
value_type	/Users/lij/.vim/stl/stl_set.h	/^  typedef _Key     value_type;$/;"	t	class:set	access:public
value_type	/Users/lij/.vim/stl/stl_slist.h	/^  typedef _Tp                value_type;$/;"	t	class:slist	access:public
value_type	/Users/lij/.vim/stl/stl_slist.h	/^  typedef _Tp              value_type;$/;"	t	struct:_Slist_iterator	access:public
value_type	/Users/lij/.vim/stl/stl_slist.h	/^  typedef void                value_type;$/;"	t	class:insert_iterator	access:public
value_type	/Users/lij/.vim/stl/stl_slist.h	/^inline _Tp* value_type(const _Slist_iterator<_Tp, _Ref, _Ptr>&) {$/;"	f	signature:(const _Slist_iterator<_Tp, _Ref, _Ptr>&)
value_type	/Users/lij/.vim/stl/stl_stack.h	/^  typedef typename _Sequence::value_type      value_type;$/;"	t	class:stack	access:public
value_type	/Users/lij/.vim/stl/stl_tree.h	/^  typedef _Value value_type;$/;"	t	class:_Rb_tree	access:public
value_type	/Users/lij/.vim/stl/stl_tree.h	/^  typedef _Value value_type;$/;"	t	struct:_Rb_tree_iterator	access:public
value_type	/Users/lij/.vim/stl/stl_tree.h	/^inline _Value* value_type(const _Rb_tree_iterator<_Value, _Ref, _Ptr>&) {$/;"	f	signature:(const _Rb_tree_iterator<_Value, _Ref, _Ptr>&)
value_type	/Users/lij/.vim/stl/stl_vector.h	/^  typedef _Tp value_type;$/;"	t	class:vector	access:public
value_type	/Users/lij/.vim/stl/string	/^  typedef _CharT value_type;$/;"	t	class:basic_string	file:	access:public
value_type	/Users/lij/.vim/stl/valarray	/^  typedef _Tp value_type;$/;"	t	class:gslice_array	file:	access:public
value_type	/Users/lij/.vim/stl/valarray	/^  typedef _Tp value_type;$/;"	t	class:indirect_array	file:	access:public
value_type	/Users/lij/.vim/stl/valarray	/^  typedef _Tp value_type;$/;"	t	class:mask_array	file:	access:public
value_type	/Users/lij/.vim/stl/valarray	/^  typedef _Tp value_type;$/;"	t	class:slice_array	file:	access:public
value_type	/Users/lij/.vim/stl/valarray	/^  typedef _Tp value_type;$/;"	t	class:valarray	file:	access:public
vector	/Users/lij/.vim/stl/stl_vector.h	/^  explicit vector(const allocator_type& __a = allocator_type())$/;"	f	class:vector	access:public	signature:(const allocator_type& __a = allocator_type())
vector	/Users/lij/.vim/stl/stl_vector.h	/^  explicit vector(size_type __n)$/;"	f	class:vector	access:public	signature:(size_type __n)
vector	/Users/lij/.vim/stl/stl_vector.h	/^  vector(_InputIterator __first, _InputIterator __last,$/;"	f	class:vector	access:public	signature:(_InputIterator __first, _InputIterator __last, const allocator_type& __a = allocator_type())
vector	/Users/lij/.vim/stl/stl_vector.h	/^  vector(const _Tp* __first, const _Tp* __last,$/;"	f	class:vector	access:public	signature:(const _Tp* __first, const _Tp* __last, const allocator_type& __a = allocator_type())
vector	/Users/lij/.vim/stl/stl_vector.h	/^  vector(const vector<_Tp, _Alloc>& __x) $/;"	f	class:vector	access:public	signature:(const vector<_Tp, _Alloc>& __x)
vector	/Users/lij/.vim/stl/stl_vector.h	/^  vector(size_type __n, const _Tp& __value,$/;"	f	class:vector	access:public	signature:(size_type __n, const _Tp& __value, const allocator_type& __a = allocator_type())
vector	/Users/lij/.vim/stl/stl_vector.h	/^class vector : protected _Vector_base<_Tp, _Alloc> $/;"	c	inherits:_Vector_base
vector::_Base	/Users/lij/.vim/stl/stl_vector.h	/^  typedef _Vector_base<_Tp, _Alloc> _Base;$/;"	t	class:vector	access:private
vector::_M_allocate_and_copy	/Users/lij/.vim/stl/stl_vector.h	/^  iterator _M_allocate_and_copy(size_type __n, _ForwardIterator __first, $/;"	f	class:vector	access:protected	signature:(size_type __n, _ForwardIterator __first, _ForwardIterator __last)
vector::_M_allocate_and_copy	/Users/lij/.vim/stl/stl_vector.h	/^  iterator _M_allocate_and_copy(size_type __n, const_iterator __first, $/;"	f	class:vector	access:protected	signature:(size_type __n, const_iterator __first, const_iterator __last)
vector::_M_assign_aux	/Users/lij/.vim/stl/stl_vector.h	/^  void _M_assign_aux(_ForwardIterator __first, _ForwardIterator __last,$/;"	p	class:vector	access:public	signature:(_ForwardIterator __first, _ForwardIterator __last, forward_iterator_tag)
vector::_M_assign_aux	/Users/lij/.vim/stl/stl_vector.h	/^  void _M_assign_aux(_InputIterator __first, _InputIterator __last,$/;"	p	class:vector	access:public	signature:(_InputIterator __first, _InputIterator __last, input_iterator_tag)
vector::_M_assign_aux	/Users/lij/.vim/stl/stl_vector.h	/^vector<_Tp, _Alloc>::_M_assign_aux(_ForwardIter __first, _ForwardIter __last,$/;"	f	class:vector	signature:(_ForwardIter __first, _ForwardIter __last, forward_iterator_tag)
vector::_M_assign_aux	/Users/lij/.vim/stl/stl_vector.h	/^void vector<_Tp, _Alloc>::_M_assign_aux(_InputIter __first, _InputIter __last,$/;"	f	class:vector	signature:(_InputIter __first, _InputIter __last, input_iterator_tag)
vector::_M_assign_dispatch	/Users/lij/.vim/stl/stl_vector.h	/^  void _M_assign_dispatch(_InputIter __first, _InputIter __last, __false_type)$/;"	f	class:vector	access:public	signature:(_InputIter __first, _InputIter __last, __false_type)
vector::_M_assign_dispatch	/Users/lij/.vim/stl/stl_vector.h	/^  void _M_assign_dispatch(_Integer __n, _Integer __val, __true_type)$/;"	f	class:vector	access:public	signature:(_Integer __n, _Integer __val, __true_type)
vector::_M_fill_assign	/Users/lij/.vim/stl/stl_vector.h	/^  void _M_fill_assign(size_type __n, const _Tp& __val);$/;"	p	class:vector	access:public	signature:(size_type __n, const _Tp& __val)
vector::_M_fill_assign	/Users/lij/.vim/stl/stl_vector.h	/^void vector<_Tp, _Alloc>::_M_fill_assign(size_t __n, const value_type& __val) $/;"	f	class:vector	signature:(size_t __n, const value_type& __val)
vector::_M_fill_insert	/Users/lij/.vim/stl/stl_vector.h	/^  void _M_fill_insert (iterator __pos, size_type __n, const _Tp& __x);$/;"	p	class:vector	access:public	signature:(iterator __pos, size_type __n, const _Tp& __x)
vector::_M_fill_insert	/Users/lij/.vim/stl/stl_vector.h	/^void vector<_Tp, _Alloc>::_M_fill_insert(iterator __position, size_type __n, $/;"	f	class:vector	signature:(iterator __position, size_type __n, const _Tp& __x)
vector::_M_initialize_aux	/Users/lij/.vim/stl/stl_vector.h	/^  void _M_initialize_aux(_InputIterator __first, _InputIterator __last,$/;"	f	class:vector	access:public	signature:(_InputIterator __first, _InputIterator __last, __false_type)
vector::_M_initialize_aux	/Users/lij/.vim/stl/stl_vector.h	/^  void _M_initialize_aux(_Integer __n, _Integer __value, __true_type) {$/;"	f	class:vector	access:public	signature:(_Integer __n, _Integer __value, __true_type)
vector::_M_insert_aux	/Users/lij/.vim/stl/stl_vector.h	/^  void _M_insert_aux(iterator __position);$/;"	p	class:vector	access:protected	signature:(iterator __position)
vector::_M_insert_aux	/Users/lij/.vim/stl/stl_vector.h	/^  void _M_insert_aux(iterator __position, const _Tp& __x);$/;"	p	class:vector	access:protected	signature:(iterator __position, const _Tp& __x)
vector::_M_insert_aux	/Users/lij/.vim/stl/stl_vector.h	/^vector<_Tp, _Alloc>::_M_insert_aux(iterator __position)$/;"	f	class:vector	signature:(iterator __position)
vector::_M_insert_aux	/Users/lij/.vim/stl/stl_vector.h	/^vector<_Tp, _Alloc>::_M_insert_aux(iterator __position, const _Tp& __x)$/;"	f	class:vector	signature:(iterator __position, const _Tp& __x)
vector::_M_insert_dispatch	/Users/lij/.vim/stl/stl_vector.h	/^  void _M_insert_dispatch(iterator __pos, _Integer __n, _Integer __val,$/;"	f	class:vector	access:public	signature:(iterator __pos, _Integer __n, _Integer __val, __true_type)
vector::_M_insert_dispatch	/Users/lij/.vim/stl/stl_vector.h	/^  void _M_insert_dispatch(iterator __pos,$/;"	f	class:vector	access:public	signature:(iterator __pos, _InputIterator __first, _InputIterator __last, __false_type)
vector::_M_range_check	/Users/lij/.vim/stl/stl_vector.h	/^  void _M_range_check(size_type __n) const {$/;"	f	class:vector	access:public	signature:(size_type __n) const
vector::_M_range_initialize	/Users/lij/.vim/stl/stl_vector.h	/^  void _M_range_initialize(_ForwardIterator __first,$/;"	f	class:vector	access:protected	signature:(_ForwardIterator __first, _ForwardIterator __last, forward_iterator_tag)
vector::_M_range_initialize	/Users/lij/.vim/stl/stl_vector.h	/^  void _M_range_initialize(_InputIterator __first,  $/;"	f	class:vector	access:protected	signature:(_InputIterator __first, _InputIterator __last, input_iterator_tag)
vector::_M_range_insert	/Users/lij/.vim/stl/stl_vector.h	/^  void _M_range_insert(iterator __pos,$/;"	p	class:vector	access:protected	signature:(iterator __pos, _ForwardIterator __first, _ForwardIterator __last, forward_iterator_tag)
vector::_M_range_insert	/Users/lij/.vim/stl/stl_vector.h	/^  void _M_range_insert(iterator __pos,$/;"	p	class:vector	access:protected	signature:(iterator __pos, _InputIterator __first, _InputIterator __last, input_iterator_tag)
vector::_M_range_insert	/Users/lij/.vim/stl/stl_vector.h	/^vector<_Tp, _Alloc>::_M_range_insert(iterator __pos, $/;"	f	class:vector	signature:(iterator __pos, _InputIterator __first, _InputIterator __last, input_iterator_tag)
vector::_M_range_insert	/Users/lij/.vim/stl/stl_vector.h	/^vector<_Tp, _Alloc>::_M_range_insert(iterator __position,$/;"	f	class:vector	signature:(iterator __position, _ForwardIterator __first, _ForwardIterator __last, forward_iterator_tag)
vector::__STL_CLASS_REQUIRES	/Users/lij/.vim/stl/stl_vector.h	/^  __STL_CLASS_REQUIRES(_Tp, _Assignable);$/;"	p	class:vector	access:private	signature:(_Tp, _Assignable)
vector::allocator_type	/Users/lij/.vim/stl/stl_vector.h	/^  typedef typename _Base::allocator_type allocator_type;$/;"	t	class:vector	access:public
vector::assign	/Users/lij/.vim/stl/stl_vector.h	/^  void assign(_InputIterator __first, _InputIterator __last) {$/;"	f	class:vector	access:public	signature:(_InputIterator __first, _InputIterator __last)
vector::assign	/Users/lij/.vim/stl/stl_vector.h	/^  void assign(size_type __n, const _Tp& __val) { _M_fill_assign(__n, __val); }$/;"	f	class:vector	access:public	signature:(size_type __n, const _Tp& __val)
vector::at	/Users/lij/.vim/stl/stl_vector.h	/^  const_reference at(size_type __n) const$/;"	f	class:vector	access:public	signature:(size_type __n) const
vector::at	/Users/lij/.vim/stl/stl_vector.h	/^  reference at(size_type __n)$/;"	f	class:vector	access:public	signature:(size_type __n)
vector::back	/Users/lij/.vim/stl/stl_vector.h	/^  const_reference back() const { return *(end() - 1); }$/;"	f	class:vector	access:public	signature:() const
vector::back	/Users/lij/.vim/stl/stl_vector.h	/^  reference back() { return *(end() - 1); }$/;"	f	class:vector	access:public	signature:()
vector::begin	/Users/lij/.vim/stl/stl_vector.h	/^  const_iterator begin() const { return _M_start; }$/;"	f	class:vector	access:public	signature:() const
vector::begin	/Users/lij/.vim/stl/stl_vector.h	/^  iterator begin() { return _M_start; }$/;"	f	class:vector	access:public	signature:()
vector::capacity	/Users/lij/.vim/stl/stl_vector.h	/^  size_type capacity() const$/;"	f	class:vector	access:public	signature:() const
vector::clear	/Users/lij/.vim/stl/stl_vector.h	/^  void clear() { erase(begin(), end()); }$/;"	f	class:vector	access:public	signature:()
vector::const_iterator	/Users/lij/.vim/stl/stl_vector.h	/^  typedef const value_type* const_iterator;$/;"	t	class:vector	access:public
vector::const_pointer	/Users/lij/.vim/stl/stl_vector.h	/^  typedef const value_type* const_pointer;$/;"	t	class:vector	access:public
vector::const_reference	/Users/lij/.vim/stl/stl_vector.h	/^  typedef const value_type& const_reference;$/;"	t	class:vector	access:public
vector::const_reverse_iterator	/Users/lij/.vim/stl/stl_vector.h	/^                           difference_type>  const_reverse_iterator;$/;"	t	class:vector	access:public
vector::const_reverse_iterator	/Users/lij/.vim/stl/stl_vector.h	/^  typedef reverse_iterator<const_iterator> const_reverse_iterator;$/;"	t	class:vector	access:public
vector::difference_type	/Users/lij/.vim/stl/stl_vector.h	/^  typedef ptrdiff_t difference_type;$/;"	t	class:vector	access:public
vector::empty	/Users/lij/.vim/stl/stl_vector.h	/^  bool empty() const$/;"	f	class:vector	access:public	signature:() const
vector::end	/Users/lij/.vim/stl/stl_vector.h	/^  const_iterator end() const { return _M_finish; }$/;"	f	class:vector	access:public	signature:() const
vector::end	/Users/lij/.vim/stl/stl_vector.h	/^  iterator end() { return _M_finish; }$/;"	f	class:vector	access:public	signature:()
vector::erase	/Users/lij/.vim/stl/stl_vector.h	/^  iterator erase(iterator __first, iterator __last) {$/;"	f	class:vector	access:public	signature:(iterator __first, iterator __last)
vector::erase	/Users/lij/.vim/stl/stl_vector.h	/^  iterator erase(iterator __position) {$/;"	f	class:vector	access:public	signature:(iterator __position)
vector::front	/Users/lij/.vim/stl/stl_vector.h	/^  const_reference front() const { return *begin(); }$/;"	f	class:vector	access:public	signature:() const
vector::front	/Users/lij/.vim/stl/stl_vector.h	/^  reference front() { return *begin(); }$/;"	f	class:vector	access:public	signature:()
vector::get_allocator	/Users/lij/.vim/stl/stl_vector.h	/^  allocator_type get_allocator() const { return _Base::get_allocator(); }$/;"	f	class:vector	access:public	signature:() const
vector::insert	/Users/lij/.vim/stl/stl_vector.h	/^  iterator insert(iterator __position) {$/;"	f	class:vector	access:public	signature:(iterator __position)
vector::insert	/Users/lij/.vim/stl/stl_vector.h	/^  iterator insert(iterator __position, const _Tp& __x) {$/;"	f	class:vector	access:public	signature:(iterator __position, const _Tp& __x)
vector::insert	/Users/lij/.vim/stl/stl_vector.h	/^  void insert (iterator __pos, size_type __n, const _Tp& __x)$/;"	f	class:vector	access:public	signature:(iterator __pos, size_type __n, const _Tp& __x)
vector::insert	/Users/lij/.vim/stl/stl_vector.h	/^  void insert(iterator __pos, _InputIterator __first, _InputIterator __last) {$/;"	f	class:vector	access:public	signature:(iterator __pos, _InputIterator __first, _InputIterator __last)
vector::insert	/Users/lij/.vim/stl/stl_vector.h	/^  void insert(iterator __position,$/;"	p	class:vector	access:public	signature:(iterator __position, const_iterator __first, const_iterator __last)
vector::insert	/Users/lij/.vim/stl/stl_vector.h	/^vector<_Tp, _Alloc>::insert(iterator __position, $/;"	f	class:vector	signature:(iterator __position, const_iterator __first, const_iterator __last)
vector::iterator	/Users/lij/.vim/stl/stl_vector.h	/^  typedef value_type* iterator;$/;"	t	class:vector	access:public
vector::max_size	/Users/lij/.vim/stl/stl_vector.h	/^  size_type max_size() const$/;"	f	class:vector	access:public	signature:() const
vector::operator =	/Users/lij/.vim/stl/stl_vector.h	/^  vector<_Tp, _Alloc>& operator=(const vector<_Tp, _Alloc>& __x);$/;"	p	class:vector	access:public	signature:(const vector<_Tp, _Alloc>& __x)
vector::operator =	/Users/lij/.vim/stl/stl_vector.h	/^vector<_Tp,_Alloc>::operator=(const vector<_Tp, _Alloc>& __x)$/;"	f	class:vector	signature:(const vector<_Tp, _Alloc>& __x)
vector::operator []	/Users/lij/.vim/stl/stl_vector.h	/^  const_reference operator[](size_type __n) const { return *(begin() + __n); }$/;"	f	class:vector	access:public	signature:(size_type __n) const
vector::operator []	/Users/lij/.vim/stl/stl_vector.h	/^  reference operator[](size_type __n) { return *(begin() + __n); }$/;"	f	class:vector	access:public	signature:(size_type __n)
vector::pointer	/Users/lij/.vim/stl/stl_vector.h	/^  typedef value_type* pointer;$/;"	t	class:vector	access:public
vector::pop_back	/Users/lij/.vim/stl/stl_vector.h	/^  void pop_back() {$/;"	f	class:vector	access:public	signature:()
vector::push_back	/Users/lij/.vim/stl/stl_vector.h	/^  void push_back() {$/;"	f	class:vector	access:public	signature:()
vector::push_back	/Users/lij/.vim/stl/stl_vector.h	/^  void push_back(const _Tp& __x) {$/;"	f	class:vector	access:public	signature:(const _Tp& __x)
vector::rbegin	/Users/lij/.vim/stl/stl_vector.h	/^  const_reverse_iterator rbegin() const$/;"	f	class:vector	access:public	signature:() const
vector::rbegin	/Users/lij/.vim/stl/stl_vector.h	/^  reverse_iterator rbegin()$/;"	f	class:vector	access:public	signature:()
vector::reference	/Users/lij/.vim/stl/stl_vector.h	/^  typedef value_type& reference;$/;"	t	class:vector	access:public
vector::rend	/Users/lij/.vim/stl/stl_vector.h	/^  const_reverse_iterator rend() const$/;"	f	class:vector	access:public	signature:() const
vector::rend	/Users/lij/.vim/stl/stl_vector.h	/^  reverse_iterator rend()$/;"	f	class:vector	access:public	signature:()
vector::reserve	/Users/lij/.vim/stl/stl_vector.h	/^  void reserve(size_type __n) {$/;"	f	class:vector	access:public	signature:(size_type __n)
vector::resize	/Users/lij/.vim/stl/stl_vector.h	/^  void resize(size_type __new_size) { resize(__new_size, _Tp()); }$/;"	f	class:vector	access:public	signature:(size_type __new_size)
vector::resize	/Users/lij/.vim/stl/stl_vector.h	/^  void resize(size_type __new_size, const _Tp& __x) {$/;"	f	class:vector	access:public	signature:(size_type __new_size, const _Tp& __x)
vector::reverse_iterator	/Users/lij/.vim/stl/stl_vector.h	/^          reverse_iterator;$/;"	t	class:vector	access:public
vector::reverse_iterator	/Users/lij/.vim/stl/stl_vector.h	/^  typedef reverse_iterator<iterator> reverse_iterator;$/;"	t	class:vector	access:public
vector::size	/Users/lij/.vim/stl/stl_vector.h	/^  size_type size() const$/;"	f	class:vector	access:public	signature:() const
vector::size_type	/Users/lij/.vim/stl/stl_vector.h	/^  typedef size_t size_type;$/;"	t	class:vector	access:public
vector::swap	/Users/lij/.vim/stl/stl_vector.h	/^  void swap(vector<_Tp, _Alloc>& __x) {$/;"	f	class:vector	access:public	signature:(vector<_Tp, _Alloc>& __x)
vector::value_type	/Users/lij/.vim/stl/stl_vector.h	/^  typedef _Tp value_type;$/;"	t	class:vector	access:public
vector::vector	/Users/lij/.vim/stl/stl_vector.h	/^  explicit vector(const allocator_type& __a = allocator_type())$/;"	f	class:vector	access:public	signature:(const allocator_type& __a = allocator_type())
vector::vector	/Users/lij/.vim/stl/stl_vector.h	/^  explicit vector(size_type __n)$/;"	f	class:vector	access:public	signature:(size_type __n)
vector::vector	/Users/lij/.vim/stl/stl_vector.h	/^  vector(_InputIterator __first, _InputIterator __last,$/;"	f	class:vector	access:public	signature:(_InputIterator __first, _InputIterator __last, const allocator_type& __a = allocator_type())
vector::vector	/Users/lij/.vim/stl/stl_vector.h	/^  vector(const _Tp* __first, const _Tp* __last,$/;"	f	class:vector	access:public	signature:(const _Tp* __first, const _Tp* __last, const allocator_type& __a = allocator_type())
vector::vector	/Users/lij/.vim/stl/stl_vector.h	/^  vector(const vector<_Tp, _Alloc>& __x) $/;"	f	class:vector	access:public	signature:(const vector<_Tp, _Alloc>& __x)
vector::vector	/Users/lij/.vim/stl/stl_vector.h	/^  vector(size_type __n, const _Tp& __value,$/;"	f	class:vector	access:public	signature:(size_type __n, const _Tp& __value, const allocator_type& __a = allocator_type())
vector::~vector	/Users/lij/.vim/stl/stl_vector.h	/^  ~vector() { destroy(_M_start, _M_finish); }$/;"	f	class:vector	access:public	signature:()
write	/Users/lij/.vim/stl/stl_rope.h	/^        sequence_buffer& write(value_type* __s, size_t __len)$/;"	f	class:sequence_buffer	access:public	signature:(value_type* __s, size_t __len)
wrope	/Users/lij/.vim/stl/stl_rope.h	/^typedef rope<wchar_t> wrope;$/;"	t
wstring	/Users/lij/.vim/stl/stl_string_fwd.h	/^typedef basic_string<wchar_t> wstring;$/;"	t
~_Bvector_base	/Users/lij/.vim/stl/stl_bvector.h	/^  ~_Bvector_base() { _Base::_M_deallocate(); }$/;"	f	class:_Bvector_base	access:public	signature:()
~_Bvector_base	/Users/lij/.vim/stl/stl_bvector.h	/^  ~_Bvector_base() { _M_deallocate(); }$/;"	f	class:_Bvector_base	access:public	signature:()
~_Deque_base	/Users/lij/.vim/stl/stl_deque.h	/^  ~_Deque_base();    $/;"	p	class:_Deque_base	access:public	signature:()
~_Deque_base	/Users/lij/.vim/stl/stl_deque.h	/^_Deque_base<_Tp,_Alloc>::~_Deque_base() {$/;"	f	class:_Deque_base	signature:()
~_List_base	/Users/lij/.vim/stl/stl_list.h	/^  ~_List_base() {$/;"	f	class:_List_base	access:public	signature:()
~_Lock	/Users/lij/.vim/stl/stl_alloc.h	/^            ~_Lock() { __NODE_ALLOCATOR_UNLOCK; }$/;"	f	class:__default_alloc_template::_Lock	access:public	signature:()
~_M_lock	/Users/lij/.vim/stl/pthread_alloc	/^        ~_M_lock () { pthread_mutex_unlock(&_S_chunk_allocator_lock); }$/;"	f	class:_Pthread_alloc_template::_M_lock	access:public	signature:()
~_Rb_tree	/Users/lij/.vim/stl/stl_tree.h	/^  ~_Rb_tree() { clear(); }$/;"	f	class:_Rb_tree	access:public	signature:()
~_Rb_tree_base	/Users/lij/.vim/stl/stl_tree.h	/^  ~_Rb_tree_base() { _M_put_node(_M_header); }$/;"	f	struct:_Rb_tree_base	access:public	signature:()
~_Rope_RopeConcatenation	/Users/lij/.vim/stl/stl_rope.h	/^    ~_Rope_RopeConcatenation() {$/;"	f	struct:_Rope_RopeConcatenation	access:public	signature:()
~_Rope_RopeFunction	/Users/lij/.vim/stl/stl_rope.h	/^    ~_Rope_RopeFunction() {$/;"	f	struct:_Rope_RopeFunction	access:public	signature:()
~_Rope_RopeLeaf	/Users/lij/.vim/stl/stl_rope.h	/^    ~_Rope_RopeLeaf() {$/;"	f	struct:_Rope_RopeLeaf	access:public	signature:()
~_Rope_RopeSubstring	/Users/lij/.vim/stl/stl_rope.h	/^    virtual ~_Rope_RopeSubstring()$/;"	f	struct:_Rope_RopeSubstring	access:public	signature:()
~_Rope_char_consumer	/Users/lij/.vim/stl/stl_rope.h	/^        virtual ~_Rope_char_consumer() {};$/;"	f	class:_Rope_char_consumer	access:public	signature:()
~_Rope_find_char_char_consumer	/Users/lij/.vim/stl/ropeimpl.h	/^	~_Rope_find_char_char_consumer() {}$/;"	f	class:_Rope_find_char_char_consumer	access:public	signature:()
~_Rope_flatten_char_consumer	/Users/lij/.vim/stl/ropeimpl.h	/^	~_Rope_flatten_char_consumer() {}$/;"	f	class:_Rope_flatten_char_consumer	access:public	signature:()
~_Rope_insert_char_consumer	/Users/lij/.vim/stl/ropeimpl.h	/^	~_Rope_insert_char_consumer() { };$/;"	f	class:_Rope_insert_char_consumer	access:public	signature:()
~_Rope_iterator	/Users/lij/.vim/stl/stl_rope.h	/^    ~_Rope_iterator() {$/;"	f	class:_Rope_iterator	access:public	signature:()
~_Rope_self_destruct_ptr	/Users/lij/.vim/stl/stl_rope.h	/^    ~_Rope_self_destruct_ptr() $/;"	f	struct:_Rope_self_destruct_ptr	access:public	signature:()
~_STL_auto_lock	/Users/lij/.vim/stl/stl_threads.h	/^  ~_STL_auto_lock() { _M_lock._M_release_lock(); }$/;"	f	struct:_STL_auto_lock	access:public	signature:()
~_Slist_base	/Users/lij/.vim/stl/stl_slist.h	/^  ~_Slist_base() { _M_erase_after(&_M_head, 0); }$/;"	f	struct:_Slist_base	access:public	signature:()
~_Slist_base	/Users/lij/.vim/stl/stl_slist.h	/^  ~_Slist_base() { _M_erase_after(&this->_M_head, 0); }$/;"	f	struct:_Slist_base	access:public	signature:()
~_String_base	/Users/lij/.vim/stl/string	/^  ~_String_base() { _M_deallocate_block(); }$/;"	f	class:_String_base	access:protected	signature:()
~_Temporary_buffer	/Users/lij/.vim/stl/stl_tempbuf.h	/^  ~_Temporary_buffer() {  $/;"	f	class:_Temporary_buffer	access:public	signature:()
~_Valarray_base	/Users/lij/.vim/stl/valarray	/^  ~_Valarray_base() { _M_deallocate(); }$/;"	f	struct:_Valarray_base	access:public	signature:()
~_Vector_base	/Users/lij/.vim/stl/stl_vector.h	/^  ~_Vector_base() { _M_deallocate(_M_start, _M_end_of_storage - _M_start); }$/;"	f	struct:_Vector_base	access:public	signature:()
~__VECTOR	/Users/lij/.vim/stl/stl_bvector.h	/^  ~__VECTOR() { }$/;"	f	class:__BVECTOR	access:public	signature:()
~auto_ptr	/Users/lij/.vim/stl/memory	/^  ~auto_ptr() { delete _M_ptr; }$/;"	f	class:auto_ptr	access:public	signature:()
~basic_string	/Users/lij/.vim/stl/string	/^  ~basic_string() { destroy(_M_start, _M_finish + 1); }$/;"	f	class:basic_string	access:public	signature:()
~char_producer	/Users/lij/.vim/stl/stl_rope.h	/^        virtual ~char_producer() {};$/;"	f	class:char_producer	access:public	signature:()
~deque	/Users/lij/.vim/stl/stl_deque.h	/^  ~deque() { destroy(_M_start, _M_finish); }$/;"	f	class:deque	access:public	signature:()
~gslice_array	/Users/lij/.vim/stl/valarray	/^  ~gslice_array() {}$/;"	f	class:gslice_array	access:public	signature:()
~hashtable	/Users/lij/.vim/stl/stl_hashtable.h	/^  ~hashtable() { clear(); }$/;"	f	class:hashtable	access:public	signature:()
~indirect_array	/Users/lij/.vim/stl/valarray	/^  ~indirect_array() {}$/;"	f	class:indirect_array	access:public	signature:()
~list	/Users/lij/.vim/stl/stl_list.h	/^  ~list() { }$/;"	f	class:list	access:public	signature:()
~mask_array	/Users/lij/.vim/stl/valarray	/^  ~mask_array() {}$/;"	f	class:mask_array	access:public	signature:()
~rb_tree	/Users/lij/.vim/stl/stl_tree.h	/^  ~rb_tree() {}$/;"	f	struct:rb_tree	access:public	signature:()
~reference	/Users/lij/.vim/stl/bitset	/^    ~reference() {}$/;"	f	class:bitset::reference	access:public	signature:()
~rope	/Users/lij/.vim/stl/stl_rope.h	/^        ~rope()$/;"	f	class:rope	access:public	signature:()
~sequence_buffer	/Users/lij/.vim/stl/stl_rope.h	/^        ~sequence_buffer() { flush(); }$/;"	f	class:sequence_buffer	access:public	signature:()
~slice_array	/Users/lij/.vim/stl/valarray	/^  ~slice_array() {}$/;"	f	class:slice_array	access:public	signature:()
~slist	/Users/lij/.vim/stl/stl_slist.h	/^  ~slist() {}$/;"	f	class:slist	access:public	signature:()
~temporary_buffer	/Users/lij/.vim/stl/stl_tempbuf.h	/^  ~temporary_buffer() {}$/;"	f	struct:temporary_buffer	access:public	signature:()
~valarray	/Users/lij/.vim/stl/valarray	/^  ~valarray() { destroy(this->_M_first, this->_M_first + this->_M_size); }$/;"	f	class:valarray	access:public	signature:()
~vector	/Users/lij/.vim/stl/stl_vector.h	/^  ~vector() { destroy(_M_start, _M_finish); }$/;"	f	class:vector	access:public	signature:()
